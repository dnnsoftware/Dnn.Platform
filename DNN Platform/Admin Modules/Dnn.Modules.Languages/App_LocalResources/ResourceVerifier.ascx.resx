<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers && schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ModuleHelp.Text">
    <value>&lt;P&gt;With this module you can verify all the installed language packs in the website and check their status against the default system language. The verification process will look at all the system default resource files and compare them to the localized version for all supported languages.&lt;/P&gt;
&lt;P&gt;Once you get the report, and if any issues are found, you can use the &lt;STRONG&gt;Languages Localization Editor&lt;/STRONG&gt; to solve all the issues reported.&lt;/P&gt;
&lt;P&gt;There are three different issues that can be found for any resource file:&lt;/P&gt;
&lt;UL&gt;
&lt;LI&gt;&lt;SPAN class=SubHead&gt;Missing File&lt;/SPAN&gt;: The localized version for a given resource file is missing. To correct this issue select the resource file on the &lt;STRONG&gt;Languages Localization Editor&lt;/STRONG&gt; and the language where the error is given. The localized file will be automatically created. 
&lt;LI&gt;&lt;SPAN class=SubHead&gt;Missing Entry:&lt;/SPAN&gt; The localized version for a given resource file does not include some entries that are present on the default system resource file. To correct this issue select the resource file on the &lt;STRONG&gt;Languages Localization Editor&lt;/STRONG&gt; and the language where the error is given. You will be given the option to add all missing keys to the localized resource file. 
&lt;LI&gt;&lt;SPAN class=SubHead&gt;Obsolete Entry&lt;/SPAN&gt;: The localized version for a given resource file includes some entries that are not present on the default system resource file. To correct this issue select the resource file on the &lt;STRONG&gt;Languages Localization Editor&lt;/STRONG&gt; and the language where the error is given. All keys that are not necessary will be automatically deleted.&lt;/LI&gt;&lt;/UL&gt;</value>
  </data>
  <data name="cmdVerify.Text">
    <value>Verify Resource Files</value>
  </data>
  <data name="Locale.Text">
    <value>Locale:&amp;nbsp; </value>
  </data>
  <data name="MissingFiles.Text">
    <value>Missing Resource files:&amp;nbsp;</value>
  </data>
  <data name="MissingEntries.Text">
    <value>Files With Missing Entries:&amp;nbsp;</value>
  </data>
  <data name="ObsoleteEntries.Text">
    <value>Files With Obsolete Entries:&amp;nbsp;</value>
  </data>
  <data name="ControlTitle_verify.Text">
    <value>Resource File Verifier</value>
  </data>
  <data name="OldFiles.Text">
    <value>Files Older Than System Default:&amp;nbsp;</value>
  </data>
  <data name="DuplicateEntries.Text">
    <value>Files With Duplicate Entries:&amp;nbsp;</value>
  </data>
  <data name="ErrorFiles.Text">
    <value>Malformed Resource Files:&amp;nbsp;</value>
  </data>
</root>