<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="plPortalID.Text" xml:space="preserve">
    <value>Website</value>
  </data>
  <data name="plPortalID.Help" xml:space="preserve">
    <value>Select the Website you would like to view.</value>
  </data>
  <data name="plLogType.Text" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="plLogType.Help" xml:space="preserve">
    <value>You can choose to restrict the Log to certain types of events.</value>
  </data>
  <data name="plShowRecords.Text" xml:space="preserve">
    <value>Show Records</value>
  </data>
  <data name="plShowRecords.Help" xml:space="preserve">
    <value>Select which records you would like to view.</value>
  </data>
  <data name="ColorCoding.Text" xml:space="preserve">
    <value>Color Coding On</value>
  </data>
  <data name="Settings.Text" xml:space="preserve">
    <value>Viewer Settings</value>
  </data>
  <data name="Legend.Text" xml:space="preserve">
    <value>Color Coding Legend</value>
  </data>
  <data name="Date.Text" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="Type.Text" xml:space="preserve">
    <value>Log Type</value>
  </data>
  <data name="Username.Text" xml:space="preserve">
    <value>Username</value>
  </data>
  <data name="Portal.Text" xml:space="preserve">
    <value>Website</value>
  </data>
  <data name="Summary.Text" xml:space="preserve">
    <value>Summary</value>
  </data>
  <data name="btnDelete.Text" xml:space="preserve">
    <value>Delete Selected Entries</value>
  </data>
  <data name="btnClear.Text" xml:space="preserve">
    <value>Clear Log</value>
  </data>
  <data name="SendExceptions.Text" xml:space="preserve">
    <value>Send Log Entries</value>
  </data>
  <data name="ExceptionsWarning.Text" xml:space="preserve">
    <value>&lt;b&gt;Please note&lt;/b&gt;: By using these features 
            below, you &lt;i&gt;may&lt;/i&gt; be sending sensitive data over the Internet in clear 
            text (&lt;i&gt;not&lt;/i&gt; encrypted). Before sending your exception submission, 
            please review the contents of your log entry to verify that no 
            sensitive data is contained within it. Only the log entries checked above 
            will be sent.</value>
  </data>
  <data name="SendExceptionsEmail.Text" xml:space="preserve">
    <value>Send Log Entries via Email</value>
  </data>
  <data name="plEmailAddress.Text" xml:space="preserve">
    <value>Email Address</value>
  </data>
  <data name="plEmailAddress.Help" xml:space="preserve">
    <value>Please enter the Email Address of the person you wish to receive the log entries.</value>
  </data>
  <data name="SendMessage.Text" xml:space="preserve">
    <value>Message (optional)</value>
  </data>
  <data name="SendMessage.Help" xml:space="preserve">
    <value>Include an optional message with the log entries</value>
  </data>
  <data name="btnEmail.Text" xml:space="preserve">
    <value>Send Selected Entries</value>
  </data>
  <data name="AddContent.Action" xml:space="preserve">
    <value>Edit Log Settings</value>
  </data>
  <data name="NoEntries.Text" xml:space="preserve">
    <value>There are no log items.</value>
  </data>
  <data name="Showing.Text" xml:space="preserve">
    <value>Showing {0} to {1} of {2}</value>
  </data>
  <data name="DeleteSuccess.Text" xml:space="preserve">
    <value>The selected log entries were successfully deleted.</value>
  </data>
  <data name="EmailSuccess.Text" xml:space="preserve">
    <value>Your email has been sent.</value>
  </data>
  <data name="EmailFailure.Text" xml:space="preserve">
    <value>Your email has &lt;b&gt;not&lt;/b&gt; been sent.</value>
  </data>
  <data name="ServiceUnavailable.Text" xml:space="preserve">
    <value>The web service at DotNetNuke.com is currently unavailable.</value>
  </data>
  <data name="ServerName.Text" xml:space="preserve">
    <value>&lt;b&gt;Server Name&lt;/b&gt;: </value>
  </data>
  <data name="LogCleared.Text" xml:space="preserve">
    <value>The log has been cleared.</value>
  </data>
  <data name="ClickRow.Text" xml:space="preserve">
    <value>Click on a row for details.</value>
  </data>
  <data name="ExceptionCode.Text" xml:space="preserve">
    <value>Exception</value>
  </data>
  <data name="ItemCreatedCode.Text" xml:space="preserve">
    <value>Item Created</value>
  </data>
  <data name="ItemUpdatedCode.Text" xml:space="preserve">
    <value>Item Updated</value>
  </data>
  <data name="ItemDeletedCode.Text" xml:space="preserve">
    <value>Item Deleted</value>
  </data>
  <data name="SuccessCode.Text" xml:space="preserve">
    <value>Operation Success</value>
  </data>
  <data name="FailureCode.Text" xml:space="preserve">
    <value>Operation Failure</value>
  </data>
  <data name="AdminOpCode.Text" xml:space="preserve">
    <value>General Admin Operation</value>
  </data>
  <data name="AdminAlertCode.Text" xml:space="preserve">
    <value>Admin Alert</value>
  </data>
  <data name="HostAlertCode.Text" xml:space="preserve">
    <value>Host Alert</value>
  </data>
  <data name="ToEmail.Text" xml:space="preserve">
    <value>To Specified Email Address</value>
  </data>
  <data name="ControlTitle_.Text" xml:space="preserve">
    <value>Event Viewer</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>&lt;h1&gt;About Log Viewer&lt;/h1&gt;&lt;p&gt;Allows you to view log entries for website events.&lt;/p&gt;</value>
  </data>
  <data name="SecurityException.Text" xml:space="preserve">
    <value>Security Exception</value>
  </data>
  <data name="plSubject.Help" xml:space="preserve">
    <value>Enter the subject for the email.</value>
  </data>
  <data name="plSubject.Text" xml:space="preserve">
    <value>Subject</value>
  </data>
  <data name="InavlidEmailAddress.Text" xml:space="preserve">
    <value>'{0}' is not a valid email address.</value>
  </data>
  <data name="Viewer.Text" xml:space="preserve">
    <value>Viewer</value>
  </data>
  <data name="ClearLog.Text" xml:space="preserve">
    <value>Are you sure you wish to clear all log entries?</value>
  </data>
  <data name="SelectException.Text" xml:space="preserve">
    <value>Please select at least one log entry.</value>
  </data>
</root>