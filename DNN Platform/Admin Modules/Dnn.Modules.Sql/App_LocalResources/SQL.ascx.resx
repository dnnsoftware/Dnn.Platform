<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="cmdExecute.Text" xml:space="preserve">
    <value>Run Script</value>
  </data>
  <data name="cmdExecute.ToolTip" xml:space="preserve">
    <value>Can include {directives} and /*comments*/</value>
  </data>
  <data name="QueryError.Text" xml:space="preserve">
    <value>There is an error in your query!</value>
  </data>
  <data name="QuerySuccess.Text" xml:space="preserve">
    <value>The Query completed successfully!</value>
  </data>
  <data name="ControlTitle_.Text" xml:space="preserve">
    <value>SQL</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>&lt;h1&gt;About SQL&lt;/h1&gt;&lt;p&gt;The Super User can execute SQL statements against the database.&lt;/p&gt;</value>
  </data>
  <data name="plSqlScript.Text" xml:space="preserve">
    <value>SQL File:</value>
  </data>
  <data name="plSqlScript.Help" xml:space="preserve">
    <value>Upload a file into the SQL Query window (Optional).</value>
  </data>
  <data name="cmdUpload.Text" xml:space="preserve">
    <value>Load File</value>
  </data>
  <data name="cmdUpload.ToolTip" xml:space="preserve">
    <value>Load the selected file.</value>
  </data>
  <data name="plConnection.Text" xml:space="preserve">
    <value>Connection:</value>
  </data>
  <data name="plConnection.Help" xml:space="preserve">
    <value>Select the Connection String you wish to use ( loaded from the list in the web.config file )</value>
  </data>
  <data name="NoDataReturned.Text" xml:space="preserve">
    <value>The query did not return any data</value>
  </data>
  <data name="scriptLabel.Text" xml:space="preserve">
    <value>Script</value>
  </data>
  <data name="scriptLabel.Help" xml:space="preserve">
    <value>Enter the SQL you wish to execute. You can use more than one SELECT statement to return multiple result sets.</value>
  </data>
  <data name="errorLabel.Help" xml:space="preserve">
    <value>This is the error returned by SQL server after executing your SQL script.</value>
  </data>
  <data name="errorLabel.Text" xml:space="preserve">
    <value>Error Details</value>
  </data>
  <data name="CnnStringNotFound.Text" xml:space="preserve">
    <value>The query has been loaded but the associated Connection ("{0}") was not found. Default "SiteSqlServer" Connection has been selected instead.</value>
  </data>
  <data name="Deleted.Text" xml:space="preserve">
    <value>The query has been successfully deleted.</value>
  </data>
  <data name="lblSavedQuery.Help" xml:space="preserve">
    <value>You can select a saved query and run or modify and save it again. Or you can select to create a new query.</value>
  </data>
  <data name="lblSavedQuery.Text" xml:space="preserve">
    <value>Queries:</value>
  </data>
  <data name="btDelete.Text" xml:space="preserve">
    <value>Delete Query</value>
  </data>
  <data name="lnkLoad.Text" xml:space="preserve">
    <value>Load Query</value>
  </data>
  <data name="btSaveQuery.Text" xml:space="preserve">
    <value>Save Query</value>
  </data>
  <data name="NewQuery.Text" xml:space="preserve">
    <value>&lt; New Query &gt;</value>
  </data>
  <data name="NoScript.Text" xml:space="preserve">
    <value>Please write or load the script you want to run.</value>
  </data>
  <data name="SaveDialogTitle.Text" xml:space="preserve">
    <value>Save Query As...</value>
  </data>
  <data name="lblName.Help" xml:space="preserve">
    <value>Provide a name to identify the saved query.</value>
  </data>
  <data name="lblName.Text" xml:space="preserve">
    <value>Name:</value>
  </data>
  <data name="lnkSave.Text" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="NoName.Text" xml:space="preserve">
    <value>You have to provide a name for the query</value>
  </data>
  <data name="Saved.Text" xml:space="preserve">
    <value>The query has been successfully saved.</value>
  </data>
  <data name="CopyToClipboard.Text" xml:space="preserve">
    <value>Copy to Clipboard</value>
  </data>
  <data name="CopyText.Text" xml:space="preserve">
    <value>The result was copied to the clipboard.</value>
  </data>
  <data name="NumRowsReturned.Text" xml:space="preserve">
    <value>{0} rows returned</value>
  </data>
  <data name="ResultTitle.Text" xml:space="preserve">
    <value>Query</value>
  </data>
  <data name="AllRows.Text" xml:space="preserve">
    <value>All</value>
  </data>
  <data name="CopyButtonAlt.Text" xml:space="preserve">
    <value>Copy to Clipboard</value>
  </data>
  <data name="CSVButtonAlt.Text" xml:space="preserve">
    <value>Export to CSV</value>
  </data>
  <data name="PDFButtonAlt.Text" xml:space="preserve">
    <value>Export to PDF</value>
  </data>
  <data name="Placeholder.Text" xml:space="preserve">
    <value>Enter your SQL query...</value>
  </data>
  <data name="PopupButtonAlt.Text" xml:space="preserve">
    <value>Open in new popup</value>
  </data>
  <data name="XLSButtonAlt.Text" xml:space="preserve">
    <value>Export to Excel</value>
  </data>
  <data name="CopyTitle.Text" xml:space="preserve">
    <value>SQL Query Result</value>
  </data>
  <data name="sFirst.Text" xml:space="preserve">
    <value>First</value>
  </data>
  <data name="sInfo.Text" xml:space="preserve">
    <value>Showing _START_ to _END_ of _TOTAL_ entries</value>
  </data>
  <data name="sInfoFiltered.Text" xml:space="preserve">
    <value>(filtered from _MAX_ total entries)</value>
  </data>
  <data name="sLast.Text" xml:space="preserve">
    <value>Last</value>
  </data>
  <data name="sLengthMenu.Text" xml:space="preserve">
    <value>Show _MENU_ entries</value>
  </data>
  <data name="sLoadingRecords.Text" xml:space="preserve">
    <value>Loading...</value>
  </data>
  <data name="sNext.Text" xml:space="preserve">
    <value>Next</value>
  </data>
  <data name="sPrevious.Text" xml:space="preserve">
    <value>Previous</value>
  </data>
  <data name="sProcessing.Text" xml:space="preserve">
    <value>Processing...</value>
  </data>
  <data name="sSearch.Text" xml:space="preserve">
    <value>Search:</value>
  </data>
  <data name="sInfoEmpty.Text" xml:space="preserve">
    <value>There are no entries to display</value>
  </data>
</root>