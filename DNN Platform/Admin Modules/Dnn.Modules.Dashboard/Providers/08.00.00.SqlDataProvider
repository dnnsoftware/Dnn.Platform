/* Update Dashboard Controls */
/*****************************/

IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}Dashboard_Controls]') AND OBJECTPROPERTY(id, N'IsTable') = 1)
	BEGIN
        CREATE TABLE {databaseOwner}[{objectQualifier}Dashboard_Controls]
        (
            [DashboardControlID] [int] NOT NULL IDENTITY(1, 1),
            [DashboardControlKey] [nvarchar] (50)   NOT NULL,
            [IsEnabled] [bit] NOT NULL,
            [DashboardControlSrc] [nvarchar] (250)   NOT NULL,
            [DashboardControlLocalResources] [nvarchar] (250)   NOT NULL,
            [ControllerClass] [nvarchar] (250)   NULL,
            [ViewOrder] [int] NOT NULL DEFAULT ((0)),
            [PackageID] [int] NOT NULL DEFAULT ((-1))
        )

        DECLARE @PackageId INT
        INSERT INTO {databaseOwner}[{objectQualifier}Packages] ([PortalID], [Name], [FriendlyName], [Description], [PackageType], [Version], [License], [Manifest], [Owner], [Organization], [Url], [Email], [ReleaseNotes], [IsSystemPackage], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate], [FolderName], [IconFile]) VALUES (NULL, N'DotNetNuke.Dashboard.WebServer', N'WebServer', N'', N'DashboardControl', N'8.0.0', NULL, NULL, N'DotNetNuke', N'DotNetNuke Corporation', N'www.dotnetnuke.com', N'support@dotnetnuke.com', NULL, 1, -1, GETDATE(), -1, GETDATE(), NULL, NULL)
        SELECT @PackageId = SCOPE_IDENTITY()
        INSERT INTO {databaseOwner}[{objectQualifier}Dashboard_Controls] ([DashboardControlKey], [IsEnabled], [DashboardControlSrc], [DashboardControlLocalResources], [ControllerClass], [ViewOrder], [PackageID]) VALUES (N'Server', 1, N'DesktopModules/Admin/Dashboard/Controls/Server.ascx', N'DesktopModules/Admin/Dashboard/App_LocalResources/SharedResources.ascx', N'Dnn.Modules.Dashboard.Components.Server.ServerController, Dnn.Modules.Dashboard', 1, @PackageId)

        INSERT INTO {databaseOwner}[{objectQualifier}Packages] ([PortalID], [Name], [FriendlyName], [Description], [PackageType], [Version], [License], [Manifest], [Owner], [Organization], [Url], [Email], [ReleaseNotes], [IsSystemPackage], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate], [FolderName], [IconFile]) VALUES (NULL, N'DotNetNuke.Dashboard.Database', N'Database', N'', N'DashboardControl', N'8.0.0', NULL, NULL, N'DotNetNuke', N'DotNetNuke Corporation', N'www.dotnetnuke.com', N'support@dotnetnuke.com', NULL, 1, -1, GETDATE(), -1, GETDATE(), NULL, NULL)
        SELECT @PackageId = SCOPE_IDENTITY()
        INSERT INTO {databaseOwner}[{objectQualifier}Dashboard_Controls] ([DashboardControlKey], [IsEnabled], [DashboardControlSrc], [DashboardControlLocalResources], [ControllerClass], [ViewOrder], [PackageID]) VALUES (N'Database', 1, N'DesktopModules/Admin/Dashboard/Controls/Database.ascx', N'DesktopModules/Admin/Dashboard/App_LocalResources/SharedResources.ascx', N'Dnn.Modules.Dashboard.Components.Database.DatabaseController, Dnn.Modules.Dashboard', 2, @PackageId)

        INSERT INTO {databaseOwner}[{objectQualifier}Packages] ([PortalID], [Name], [FriendlyName], [Description], [PackageType], [Version], [License], [Manifest], [Owner], [Organization], [Url], [Email], [ReleaseNotes], [IsSystemPackage], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate], [FolderName], [IconFile]) VALUES (NULL, N'DotNetNuke.Dashboard.Host', N'Host', N'', N'DashboardControl', N'8.0.0', NULL, NULL, N'DotNetNuke', N'DotNetNuke Corporation', N'www.dotnetnuke.com', N'support@dotnetnuke.com', NULL, 1, -1, GETDATE(), -1, GETDATE(), NULL, NULL)
        SELECT @PackageId = SCOPE_IDENTITY()
        INSERT INTO {databaseOwner}[{objectQualifier}Dashboard_Controls] ([DashboardControlKey], [IsEnabled], [DashboardControlSrc], [DashboardControlLocalResources], [ControllerClass], [ViewOrder], [PackageID]) VALUES (N'Host', 1, N'DesktopModules/Admin/Dashboard/Controls/Host.ascx', N'DesktopModules/Admin/Dashboard/App_LocalResources/SharedResources.ascx', N'Dnn.Modules.Dashboard.Components.Host.HostController, Dnn.Modules.Dashboard', 3, @PackageId)

        INSERT INTO {databaseOwner}[{objectQualifier}Packages] ([PortalID], [Name], [FriendlyName], [Description], [PackageType], [Version], [License], [Manifest], [Owner], [Organization], [Url], [Email], [ReleaseNotes], [IsSystemPackage], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate], [FolderName], [IconFile]) VALUES (NULL, N'DotNetNuke.Dashboard.Portals', N'Portals', N'', N'DashboardControl', N'8.0.0', NULL, NULL, N'DotNetNuke', N'DotNetNuke Corporation', N'www.dotnetnuke.com', N'support@dotnetnuke.com', NULL, 1, -1, GETDATE(), -1, GETDATE(), NULL, NULL)
        SELECT @PackageId = SCOPE_IDENTITY()
        INSERT INTO {databaseOwner}[{objectQualifier}Dashboard_Controls] ([DashboardControlKey], [IsEnabled], [DashboardControlSrc], [DashboardControlLocalResources], [ControllerClass], [ViewOrder], [PackageID]) VALUES (N'Portals', 1, N'DesktopModules/Admin/Dashboard/Controls/Portals.ascx', N'DesktopModules/Admin/Dashboard/App_LocalResources/SharedResources.ascx', N'Dnn.Modules.Dashboard.Components.Portals.PortalsController, Dnn.Modules.Dashboard', 4, @PackageId)

        INSERT INTO {databaseOwner}[{objectQualifier}Packages] ([PortalID], [Name], [FriendlyName], [Description], [PackageType], [Version], [License], [Manifest], [Owner], [Organization], [Url], [Email], [ReleaseNotes], [IsSystemPackage], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate], [FolderName], [IconFile]) VALUES (NULL, N'DotNetNuke.Dashboard.Modules', N'Modules', N'', N'DashboardControl', N'8.0.0', NULL, NULL, N'DotNetNuke', N'DotNetNuke Corporation', N'www.dotnetnuke.com', N'support@dotnetnuke.com', NULL, 1, -1, GETDATE(), -1, GETDATE(), NULL, NULL)
        SELECT @PackageId = SCOPE_IDENTITY()
        INSERT INTO {databaseOwner}[{objectQualifier}Dashboard_Controls] ([DashboardControlKey], [IsEnabled], [DashboardControlSrc], [DashboardControlLocalResources], [ControllerClass], [ViewOrder], [PackageID]) VALUES (N'Modules', 1, N'DesktopModules/Admin/Dashboard/Controls/Modules.ascx', N'DesktopModules/Admin/Dashboard/App_LocalResources/SharedResources.ascx', N'Dnn.Modules.Dashboard.Components.Modules.ModulesController, Dnn.Modules.Dashboard', 5, @PackageId)

        INSERT INTO {databaseOwner}[{objectQualifier}Packages] ([PortalID], [Name], [FriendlyName], [Description], [PackageType], [Version], [License], [Manifest], [Owner], [Organization], [Url], [Email], [ReleaseNotes], [IsSystemPackage], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate], [FolderName], [IconFile]) VALUES (NULL, N'DotNetNuke.Dashboard.Skins', N'Skins', N'', N'DashboardControl', N'8.0.0', NULL, NULL, N'DotNetNuke', N'DotNetNuke Corporation', N'www.dotnetnuke.com', N'support@dotnetnuke.com', NULL, 1, -1, GETDATE(), -1, GETDATE(), NULL, NULL)
        SELECT @PackageId = SCOPE_IDENTITY()
        INSERT INTO {databaseOwner}[{objectQualifier}Dashboard_Controls] ([DashboardControlKey], [IsEnabled], [DashboardControlSrc], [DashboardControlLocalResources], [ControllerClass], [ViewOrder], [PackageID]) VALUES (N'Skins', 1, N'DesktopModules/Admin/Dashboard/Controls/Skins.ascx', N'DesktopModules/Admin/Dashboard/App_LocalResources/SharedResources.ascx', N'Dnn.Modules.Dashboard.Components.Skins.SkinsController, Dnn.Modules.Dashboard', 6, @PackageId)

    END
    ELSE
    BEGIN
        UPDATE {databaseOwner}[{objectQualifier}Dashboard_Controls]
        SET [DashboardControlSrc] = 'DesktopModules/Admin/Dashboard/Controls/Server.ascx',
            [ControllerClass] = 'Dnn.Modules.Dashboard.Components.Server.ServerController, Dnn.Modules.Dashboard'
        WHERE [DashboardControlKey] = 'Server'

        UPDATE {databaseOwner}[{objectQualifier}Dashboard_Controls]
        SET [DashboardControlSrc] = 'DesktopModules/Admin/Dashboard/Controls/Database.ascx',
            [ControllerClass] = 'Dnn.Modules.Dashboard.Components.Database.DatabaseController, Dnn.Modules.Dashboard'
        WHERE [DashboardControlKey] = 'Database'

        UPDATE {databaseOwner}[{objectQualifier}Dashboard_Controls]
        SET [DashboardControlSrc] = 'DesktopModules/Admin/Dashboard/Controls/Host.ascx',
            [ControllerClass] = 'Dnn.Modules.Dashboard.Components.Host.HostController, Dnn.Modules.Dashboard'
        WHERE [DashboardControlKey] = 'Host'

        UPDATE {databaseOwner}[{objectQualifier}Dashboard_Controls]
        SET [DashboardControlSrc] = 'DesktopModules/Admin/Dashboard/Controls/Portals.ascx',
            [ControllerClass] = 'Dnn.Modules.Dashboard.Components.Portals.PortalsController, Dnn.Modules.Dashboard'
        WHERE [DashboardControlKey] = 'Portals'

        UPDATE {databaseOwner}[{objectQualifier}Dashboard_Controls]
        SET [DashboardControlSrc] = 'DesktopModules/Admin/Dashboard/Controls/Modules.ascx',
            [ControllerClass] = 'Dnn.Modules.Dashboard.Components.Modules.ModulesController, Dnn.Modules.Dashboard'
        WHERE [DashboardControlKey] = 'Modules'

        UPDATE {databaseOwner}[{objectQualifier}Dashboard_Controls]
        SET [DashboardControlSrc] = 'DesktopModules/Admin/Dashboard/Controls/Skins.ascx',
            [ControllerClass] = 'Dnn.Modules.Dashboard.Components.Skins.SkinsController, Dnn.Modules.Dashboard'
        WHERE [DashboardControlKey] = 'Skins'

		UPDATE {databaseOwner}[{objectQualifier}Packages] SET [Version] = N'8.0.0'
		WHERE [Name] IN
		(
			'DotNetNuke.Dashboard.WebServer',
			'DotNetNuke.Dashboard.Database',
			'DotNetNuke.Dashboard.Host',
			'DotNetNuke.Dashboard.Portals',
			'DotNetNuke.Dashboard.Modules',
			'DotNetNuke.Dashboard.Skins'
		)

    END
GO

IF (EXISTS (SELECT name FROM sysobjects WHERE (name = N'{objectQualifier}Dashboard_AddControl') AND (type = 'P')))
    DROP PROCEDURE {databaseOwner}{objectQualifier}Dashboard_AddControl
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Dashboard_AddControl  
	@PackageId							INT,
	@DashboardControlKey 				NVARCHAR(50),
	@IsEnabled							BIT,
	@DashboardControlSrc				NVARCHAR(250),
	@DashboardControlLocalResources 	NVARCHAR(250),
	@ControllerClass					NVARCHAR(250),
	@ViewOrder							INT

AS
	IF @ViewOrder = -1
		SET @ViewOrder = (SELECT TOP 1 ViewOrder FROM {objectQualifier}Dashboard_Controls ORDER BY ViewOrder DESC) + 1

    IF EXISTS(SELECT DashboardControlID FROM {databaseOwner}{objectQualifier}Dashboard_Controls WHERE ViewOrder = @ViewOrder)
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}Dashboard_Controls SET ViewOrder = ViewOrder + 1 WHERE ViewOrder >= @ViewOrder
	END

	INSERT INTO {databaseOwner}{objectQualifier}Dashboard_Controls (
		PackageId,
		DashboardControlKey,
		IsEnabled,
		DashboardControlSrc,
		DashboardControlLocalResources,
		ControllerClass,
		ViewOrder
	)
	VALUES (
		@PackageId,
		@DashboardControlKey,
		@IsEnabled,
		@DashboardControlSrc,
		@DashboardControlLocalResources,
		@ControllerClass,
		@ViewOrder
	)

	SELECT SCOPE_IDENTITY()
    
GO

IF (EXISTS (SELECT name FROM sysobjects WHERE (name = N'{objectQualifier}Dashboard_DeleteControl') AND (type = 'P')))
    DROP PROCEDURE {databaseOwner}{objectQualifier}Dashboard_DeleteControl
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Dashboard_DeleteControl  
	@DashboardControlID int
AS
	DELETE {databaseOwner}{objectQualifier}Dashboard_Controls 
	WHERE DashboardControlID = @DashboardControlID
    
GO

IF (EXISTS (SELECT name FROM sysobjects WHERE (name = N'{objectQualifier}Dashboard_GetControls') AND (type = 'P')))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Dashboard_GetControls]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Dashboard_GetControls] 
	@IsEnabled bit
AS
BEGIN
	IF @IsEnabled = 0 BEGIN
		SELECT *
		FROM {databaseOwner}[{objectQualifier}Dashboard_Controls]
		ORDER BY ViewOrder
	END
	ELSE BEGIN
		SELECT *
		FROM {databaseOwner}[{objectQualifier}Dashboard_Controls]
		WHERE IsEnabled = 1
		ORDER BY ViewOrder
	END
END
GO

IF (EXISTS (SELECT name FROM sysobjects WHERE (name = N'{objectQualifier}Dashboard_GetDashboardControlByPackageId') AND (type = 'P')))
    DROP PROCEDURE {databaseOwner}{objectQualifier}Dashboard_GetDashboardControlByPackageId
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Dashboard_GetDashboardControlByPackageId  
	@PackageID INT
AS
	SELECT *
	  FROM {databaseOwner}{objectQualifier}Dashboard_Controls
		WHERE PackageID = @PackageID AND PackageID <> -1
    
GO

IF (EXISTS (SELECT name FROM sysobjects WHERE (name = N'{objectQualifier}Dashboard_GetDashboardControlByPackageId') AND (type = 'P')))
  DROP PROCEDURE {databaseOwner}{objectQualifier}Dashboard_GetDashboardControlByPackageId
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Dashboard_GetDashboardControlByPackageId  
	@PackageID INT
AS
	SELECT *
	  FROM {databaseOwner}{objectQualifier}Dashboard_Controls
		WHERE PackageID = @PackageID AND PackageID <> -1
    
GO

IF (EXISTS (SELECT name FROM sysobjects WHERE (name = N'{objectQualifier}Dashboard_GetDbBackups') AND (type = 'P')))
	DROP PROCEDURE {databaseOwner}{objectQualifier}Dashboard_GetDbBackups
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Dashboard_GetDbBackups
AS
	DECLARE @ProductEdition INT
	SET @ProductEdition = CAST(ServerProperty('EngineEdition') as INT)

	IF (@ProductEdition = 5) --Check for SQL Azure
	BEGIN
		SELECT      
			'Unsupported' as name, 
			NULL as StartDate, 
			NULL as FinishDate, 
			0 as size, 
			NULL as database_name, 
			'UNKNOWN' as BackupType
	END
	ELSE
	BEGIN
		EXEC('SELECT TOP 20     
				name, 
				backup_start_date as StartDate, 
				backup_finish_date as FinishDate, 
				backup_size/1024 as size, 
				database_name, 
				CASE type
					WHEN ''D'' THEN ''Database''
					WHEN ''I'' THEN ''Differential database''
					WHEN ''L'' THEN ''Log''
					WHEN ''F'' THEN ''File or filegroup''
					WHEN ''G'' THEN ''Differential file''
					WHEN ''P'' THEN ''Partial''
					WHEN ''Q'' THEN ''Differential partial''
				END AS BackupType
				FROM         
				msdb..backupset
				WHERE
				database_name = DB_NAME() 
				ORDER BY backup_start_date DESC')
	END
GO

IF (EXISTS (SELECT name FROM sys.objects WHERE (name = N'{objectQualifier}Dashboard_GetDbFileInfo') AND (type = 'P')))
	DROP PROCEDURE {databaseOwner}{objectQualifier}Dashboard_GetDbFileInfo
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Dashboard_GetDbFileInfo
AS
	IF OBJECT_ID('sys.database_files') IS NULL
		BEGIN
		SELECT 'Total Size' AS FileType,
					'Total' AS Name,
					SUM(reserved_page_count)*8 AS Size,
					'n/a' AS FileName
				FROM sys.dm_db_partition_stats
		END
	ELSE
		BEGIN
			SELECT	CASE LOWER(RIGHT(physical_name,3))
						WHEN 'mdf' THEN 'DATA'
						WHEN 'ldf' THEN 'LOG'
						ELSE 'UNKNOWN'
					END as FileType,
						name AS Name,
						size*8 AS Size,
						physical_name AS FileName
					FROM sys.database_files
		END
GO

IF (EXISTS (SELECT name FROM sys.objects WHERE (name = N'{objectQualifier}Dashboard_GetDbInfo') AND (type = 'P')))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}Dashboard_GetDbInfo]
GO

CREATE procedure {databaseOwner}[{objectQualifier}Dashboard_GetDbInfo]
AS
	
	SELECT
		ServerProperty('ProductVersion') AS ProductVersion, 
		ServerProperty('ProductLevel') AS ServicePack, 
		ServerProperty('Edition') AS ProductEdition, 
		@@VERSION AS SoftwarePlatform		

GO

IF (EXISTS (SELECT name FROM sys.objects WHERE (name = N'{objectQualifier}Dashboard_UpdateControl') AND (type = 'P')))
    DROP PROCEDURE {databaseOwner}{objectQualifier}Dashboard_UpdateControl
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Dashboard_UpdateControl  

	@DashboardControlID 				INT,
	@DashboardControlKey 				NVARCHAR(50),
	@IsEnabled							BIT,
	@DashboardControlSrc				NVARCHAR(250),
	@DashboardControlLocalResources 	NVARCHAR(250),
	@ControllerClass					NVARCHAR(250),
	@ViewOrder							INT

AS
    DECLARE @OldOrder INT
    SELECT @OldOrder = ViewOrder FROM {databaseOwner}{objectQualifier}Dashboard_Controls WHERE DashboardControlID = @DashboardControlID
	UPDATE {databaseOwner}{objectQualifier}Dashboard_Controls 
		SET DashboardControlKey = @DashboardControlKey,
			IsEnabled = @IsEnabled,
			DashboardControlSrc = @DashboardControlSrc,
			DashboardControlLocalResources = @DashboardControlLocalResources,
			ControllerClass = @ControllerClass,
			ViewOrder = @ViewOrder
	WHERE DashboardControlID = @DashboardControlID

    IF @OldOrder IS NOT NULL AND @OldOrder < @ViewOrder
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}Dashboard_Controls SET ViewOrder = ViewOrder - 1 WHERE ViewOrder BETWEEN @OldOrder AND @ViewOrder AND DashboardControlID <> @DashboardControlID
	END
    ELSE IF @OldOrder IS NOT NULL AND @OldOrder > @ViewOrder
    BEGIN
		UPDATE {databaseOwner}{objectQualifier}Dashboard_Controls SET ViewOrder = ViewOrder + 1 WHERE ViewOrder BETWEEN @ViewOrder AND @OldOrder AND DashboardControlID <> @DashboardControlID
	END
GO

/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/
