<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="lblLevelPriority.Help" xml:space="preserve">
    <value>When checked, the priority for each page will be computed from the hierarchy level of the page. Top level pages will have a value of 1, second level 0.9, third level 0.8, ...  This setting will not change the value stored in the actual page but it will use the computed value when required.</value>
  </data>
  <data name="lblLevelPriority.Text" xml:space="preserve">
    <value>Use page level based priorities?</value>
  </data>
  <data name="MessageUpdated.Text" xml:space="preserve">
    <value>Your configuration has been saved</value>
  </data>
  <data name="PageTitle.Header" xml:space="preserve">
    <value>Page title</value>
  </data>
  <data name="Priority.Header" xml:space="preserve">
    <value>Priority</value>
  </data>
  <data name="lblMinPagePriority.Help" xml:space="preserve">
    <value>When "page level based priorities" is used, minimum priority for pages can be used to set the lowest priority that will be used on low level pages</value>
  </data>
  <data name="lblMinPagePriority.Text" xml:space="preserve">
    <value>Minimum Priority for pages:</value>
  </data>
  <data name="SectionCoreSettings.Text" xml:space="preserve">
    <value>Base Page URLs Settings</value>
  </data>
  <data name="cmdSaveAll.Text" xml:space="preserve">
    <value>Save Sitemap Configuration</value>
  </data>
  <data name="lblExcludePriority.Help" xml:space="preserve">
    <value>This option can be used to remove certain pages from the Sitemap. For example you can setup a priority of -1 for a page and enter -1 here to cause the page to not being included in the generated Sitemap.</value>
  </data>
  <data name="lblExcludePriority.Text" xml:space="preserve">
    <value>Exclude URLs With a Priority Lower Than:</value>
  </data>
  <data name="lblIncludeHidden.Help" xml:space="preserve">
    <value>When checked hidden pages (not visible in the menu) will also be included in the Sitemap. The default is not to include hidden pages.</value>
  </data>
  <data name="lblIncludeHidden.Text" xml:space="preserve">
    <value>Include Hidden Pages?</value>
  </data>
  <data name="SectionGeneralSettings.Text" xml:space="preserve">
    <value>General Sitemap Settings</value>
  </data>
  <data name="valPriority.Text" xml:space="preserve">
    <value>You must provide a valid number between 0.0 and 1.0.</value>
  </data>
  <data name="Description.Header" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Keywords.Header" xml:space="preserve">
    <value>Page Keywords</value>
  </data>
  <data name="Level.Header" xml:space="preserve">
    <value>Level</value>
  </data>
  <data name="cmdRefresh.Text" xml:space="preserve">
    <value>Refresh Page Priorities</value>
  </data>
  <data name="SectionProviderSettings.Help" xml:space="preserve">
    <value>In this section you can view and configure available Sitemap providers for the current website. Check the "Enabled" checkbox if you want to include URLs generated for that provider in the final sitemap file. You can also override the priority for all URLs of any given provider by checking the appropriate checkbox and giving a value for the new priority</value>
  </data>
  <data name="SectionProviderSettings.Text" xml:space="preserve">
    <value>Installed Sitemap Providers</value>
  </data>
  <data name="ProviderDescription.Header" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="ProviderEnabled.Header" xml:space="preserve">
    <value>Enabled?</value>
  </data>
  <data name="ProviderName.Header" xml:space="preserve">
    <value>Provider Name</value>
  </data>
  <data name="ProviderOverride.Header" xml:space="preserve">
    <value>Override priorities?</value>
  </data>
  <data name="lblCache.Help" xml:space="preserve">
    <value>Enable this option if you want to cache the Sitemap so it is not generated every time it is requested. This is specially necessary for big sites. If your site has more than 50.000 URLs the Sitemap will be cached with a default value of 1 day. Set this value to 0 to disable the caching.</value>
  </data>
  <data name="lblCache.Text" xml:space="preserve">
    <value>Days to Cache Sitemap For</value>
  </data>
  <data name="lnkResetCache.Text" xml:space="preserve">
    <value>Clear Cache</value>
  </data>
  <data name="ResetOK.Text" xml:space="preserve">
    <value>The Sitemap cache successfully purged.</value>
  </data>
  <data name="cmdVerification.Text" xml:space="preserve">
    <value>Create</value>
  </data>
  <data name="lblSearchEngine.Help" xml:space="preserve">
    <value>Submit your site to the selected search engine for indexing.</value>
  </data>
  <data name="lblSearchEngine.Text" xml:space="preserve">
    <value>Search Engine:</value>
  </data>
  <data name="lblSiteMap.Help" xml:space="preserve">
    <value>Submit your Sitemap to Google for better search optimization. Click Submit to get a Google Webmaster Tools account and verify your site ownership (using the Verification option below). Once verified, you can select the Add General Web Sitemap option on the Google Sitemaps tab, and paste the Site Map URL displayed.</value>
  </data>
  <data name="lblSiteMap.Text" xml:space="preserve">
    <value>Sitemap URL:</value>
  </data>
  <data name="lblVerification.Help" xml:space="preserve">
    <value>When signing up with Google Webmaster Tools you will need to Verify your site ownership. Choose the "Upload an HTML File" method from the Google Verification screen. Enter the file name displayed (ie. google53c0cef435b2b81e.html) into the Verification text box and click Create. Return to Google and select the Verify button.</value>
  </data>
  <data name="lblVerification.Text" xml:space="preserve">
    <value>Verification:</value>
  </data>
  <data name="lnkTestSitemap.Text" xml:space="preserve">
    <value>View Current Sitemap</value>
  </data>
  <data name="SectionSubmissionSettings.Text" xml:space="preserve">
    <value>Site Submission</value>
  </data>
  <data name="NoCacheToReset.Text" xml:space="preserve">
    <value>No cache data available to reset.</value>
  </data>
  <data name="Name.Header" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="cmdSubmitToSearch.Text" xml:space="preserve">
    <value>Submit</value>
  </data>
  <data name="SectionCoreSettingsLbl.Text" xml:space="preserve">
    <value>Modify the basic settings that apply to general DNN pages.</value>
  </data>
  <data name="SectionGeneralSettingsLbl.Text" xml:space="preserve">
    <value>Configure the settings that apply to all URLs included in the Sitemap.</value>
  </data>
  <data name="SectionSubmissionSettingsLbl.Text" xml:space="preserve">
    <value>In this section you can submit your site to different search engines.</value>
  </data>
  <data name="cmdSubmitToSearch.ToolTip" xml:space="preserve">
    <value>Submit</value>
  </data>
  <data name="Edit.Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Edit.Edit" xml:space="preserve">
    <value>Edit</value>
  </data>
  <data name="Edit.Update" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="Enabled.Header" xml:space="preserve">
    <value>Enabled</value>
  </data>
  <data name="OverridePriority.Header" xml:space="preserve">
    <value>Override Priority</value>
  </data>
  <data name="1Day.Text" xml:space="preserve">
    <value>1 Day</value>
  </data>
  <data name="2Days.Text" xml:space="preserve">
    <value>2 Days</value>
  </data>
  <data name="3Days.Text" xml:space="preserve">
    <value>3 Days</value>
  </data>
  <data name="4Days.Text" xml:space="preserve">
    <value>4 Days</value>
  </data>
  <data name="5Days.Text" xml:space="preserve">
    <value>5 Days</value>
  </data>
  <data name="6Days.Text" xml:space="preserve">
    <value>6 Days</value>
  </data>
  <data name="7Days.Text" xml:space="preserve">
    <value>7 Days</value>
  </data>
  <data name="DisableCaching.Text" xml:space="preserve">
    <value>Disable Caching</value>
  </data>
  <data name="ControlTitle_.Text" xml:space="preserve">
    <value>Search Engine SiteMap</value>
  </data>
</root>