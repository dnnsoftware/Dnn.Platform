<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DCC_Admin.Text" xml:space="preserve">
    <value>Dynamic Content Type Manager</value>
  </data>
  <data name="ContentTypes.Text" xml:space="preserve">
    <value>Content Types</value>
  </data>
  <data name="DataTypes.Text" xml:space="preserve">
    <value>Data Types</value>
  </data>
  <data name="ModuleTitle.Text" xml:space="preserve">
    <value>Content Manager</value>
  </data>
  <data name="Templates.Text" xml:space="preserve">
    <value>Templates</value>
  </data>
  <data name="AddDataType.Text" xml:space="preserve">
    <value>Add Data Type</value>
  </data>
  <data name="Created.Text" xml:space="preserve">
    <value>Created</value>
  </data>
  <data name="DataType.Text" xml:space="preserve">
    <value>Data Type</value>
  </data>
  <data name="FindDataType.Text" xml:space="preserve">
    <value>Find Data Type</value>
  </data>
  <data name="System.Text" xml:space="preserve">
    <value>Global</value>
  </data>
  <data name="AddContentType.Text" xml:space="preserve">
    <value>Add Content Type</value>
  </data>
  <data name="AddTemplate.Text" xml:space="preserve">
    <value>Add Template</value>
  </data>
  <data name="ContentType.Text" xml:space="preserve">
    <value>Content Type</value>
  </data>
  <data name="FindContentType.Text" xml:space="preserve">
    <value>Find Content Type</value>
  </data>
  <data name="FindTemplate.Text" xml:space="preserve">
    <value>Find Template</value>
  </data>
  <data name="Template.Text" xml:space="preserve">
    <value>Template</value>
  </data>
  <data name="ContentTypes_NoPagerFormat.Text" xml:space="preserve">
    <value>Showing {0} Content Types</value>
  </data>
  <data name="ContentTypes_PagerFormat.Text" xml:space="preserve">
    <value>Showing {0}-{1} of {2} Content Types</value>
  </data>
  <data name="DataTypes_NoPagerFormat.Text" xml:space="preserve">
    <value>Showing {0} Data Types</value>
  </data>
  <data name="DataTypes_PagerFormat.Text" xml:space="preserve">
    <value>Showing {0}-{1} of {2} Data Types</value>
  </data>
  <data name="Pager_PageDesc.Text" xml:space="preserve">
    <value>Page {0} of {1}</value>
  </data>
  <data name="BaseType.Text" xml:space="preserve">
    <value>Base Type</value>
  </data>
  <data name="Name.Text" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="SystemType.Text" xml:space="preserve">
    <value>Global Type</value>
  </data>
  <data name="Boolean.Text" xml:space="preserve">
    <value>Boolean</value>
  </data>
  <data name="Bytes.Text" xml:space="preserve">
    <value>Bytes</value>
  </data>
  <data name="DateTime.Text" xml:space="preserve">
    <value>Date Time</value>
  </data>
  <data name="Float.Text" xml:space="preserve">
    <value>Float</value>
  </data>
  <data name="Guid.Text" xml:space="preserve">
    <value>Guid</value>
  </data>
  <data name="Integer.Text" xml:space="preserve">
    <value>Integer</value>
  </data>
  <data name="String.Text" xml:space="preserve">
    <value>String</value>
  </data>
  <data name="TimeSpan.Text" xml:space="preserve">
    <value>Time Span</value>
  </data>
  <data name="Uri.Text" xml:space="preserve">
    <value>Uri</value>
  </data>
  <data name="Confirm.Text" xml:space="preserve">
    <value>Confirm</value>
  </data>
  <data name="DeleteDataTypeConfirmMessage.Text" xml:space="preserve">
    <value>Are you sure you want to delete this Data Type?</value>
  </data>
  <data name="No.Text" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="Yes.Text" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="DeleteContentTypeConfirmMessage.Text" xml:space="preserve">
    <value>Are you sure you want to delete this Content Type?</value>
  </data>
  <data name="Description.Text" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Alert.Text" xml:space="preserve">
    <value>Alert</value>
  </data>
  <data name="Ok.Text" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="SaveContentTypeMessage.Text" xml:space="preserve">
    <value>The Content Type - {0} - was successfully saved.</value>
  </data>
  <data name="AddContentField.Text" xml:space="preserve">
    <value>Add Field</value>
  </data>
  <data name="ContentFields.Text" xml:space="preserve">
    <value>Content Fields</value>
  </data>
  <data name="Label.Text" xml:space="preserve">
    <value>Label</value>
  </data>
  <data name="ContentFields_NoPagerFormat.Text" xml:space="preserve">
    <value>Showing {0} Content Fields</value>
  </data>
  <data name="ContentFields_PagerFormat.Text" xml:space="preserve">
    <value>Showing {0}-{1} of {2} Content Fields</value>
  </data>
  <data name="ContentField.Text" xml:space="preserve">
    <value>Content Field</value>
  </data>
  <data name="DeleteContentFieldConfirmMessage.Text" xml:space="preserve">
    <value>Are you sure you want to delete this Content Field?</value>
  </data>
  <data name="Templates_NoPagerFormat.Text" xml:space="preserve">
    <value>Showing {0} Templates</value>
  </data>
  <data name="Templates_PagerFormat.Text" xml:space="preserve">
    <value>Showing {0}-{1} of {2} Templates</value>
  </data>
  <data name="SystemTemplate.Text" xml:space="preserve">
    <value>Global Template?</value>
  </data>
  <data name="TemplateFile.Text" xml:space="preserve">
    <value>Template File</value>
  </data>
  <data name="FolderNotFound.Text" xml:space="preserve">
    <value>The selected folder could not be found</value>
  </data>
  <data name="FileCreateError.Text" xml:space="preserve">
    <value>There was an error creating the template file.</value>
  </data>
  <data name="DeleteTemplateConfirmMessage.Text" xml:space="preserve">
    <value>Are you sure you want to delete this Template?</value>
  </data>
  <data name="Language.Text" xml:space="preserve">
    <value>Language</value>
  </data>
  <data name="Actions.Text" xml:space="preserve">
    <value>Actions</value>
  </data>
  <data name="ContentTypeExists.Text" xml:space="preserve">
    <value>A Content Type with that name already exists.  Please try again with a different name.</value>
  </data>
  <data name="InsertField.Text" xml:space="preserve">
    <value>Insert Field</value>
  </data>
  <data name="InsertHelper.Text" xml:space="preserve">
    <value>Insert Helper Tag</value>
  </data>
  <data name="DefaultLocalizedValueMissing.Text" xml:space="preserve">
    <value>The value of the field in the default language is required.</value>
  </data>
  <data name="InvalidContentTypeMessage.Text" xml:space="preserve">
    <value>You must provide values for all fields for the default language.</value>
  </data>
  <data name="TranslationMissing.Text" xml:space="preserve">
    <value>One or more translation is missing</value>
  </data>
  <data name="InvalidContentFieldMessage.Text" xml:space="preserve">
    <value>You must provide values for all fields for the default language.</value>
  </data>
  <data name="InvalidDataTypeMessage.Text" xml:space="preserve">
    <value>You must provide a value for the Data Type name in the default language</value>
  </data>
  <data name="InvalidTemplateMessage.Text" xml:space="preserve">
    <value>You must provide a value for the Template name in the default language</value>
  </data>
  <data name="DefaultValueMissing.Text" xml:space="preserve">
    <value>This value is required.</value>
  </data>
  <data name="ContentFieldExists.Text" xml:space="preserve">
    <value>A Content Field with that name already exists.  Please try again with a different name.</value>
  </data>
  <data name="DataTypeExists.Text" xml:space="preserve">
    <value>A Data Type with that name already exists.  Please try again with a different name.</value>
  </data>
  <data name="TemplateExists.Text" xml:space="preserve">
    <value>A Template with that name already exists.  Please try again with a different name.</value>
  </data>
  <data name="DataTypesPageSize.Text" xml:space="preserve">
    <value>Data Types per page</value>
  </data>
  <data name="ContentTypesPageSize.Text" xml:space="preserve">
    <value>Content Types per page</value>
  </data>
  <data name="TemplatesPageSize.Text" xml:space="preserve">
    <value>Templates per page</value>
  </data>
  <data name="FieldType.Text" xml:space="preserve">
    <value>Field Type</value>
  </data>
  <data name="IsContentType.Text" xml:space="preserve">
    <value>Content Type?</value>
  </data>
  <data name="IsEditTemplate.Text" xml:space="preserve">
    <value>Edit Template?</value>
  </data>
  <data name="IsList.Text" xml:space="preserve">
    <value>Is List?</value>
  </data>
  <data name="List.Text" xml:space="preserve">
    <value>List</value>
  </data>
  <data name="InvalidCharsMessage.Text" xml:space="preserve">
    <value>The template file name contains invalid characters. Please, do not use the following characters |"&lt;&gt;</value>
  </data>
  <data name="ContentFieldTranslationExists.Text" xml:space="preserve">
    <value>A Content Field with the translated name for language '{0}' already exists.  Please try again with a different name.</value>
  </data>
</root>