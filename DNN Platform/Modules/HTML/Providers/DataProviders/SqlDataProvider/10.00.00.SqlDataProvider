/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/


/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/

-- Drop Foreign Key FK_HtmlText_WorkflowStates if it exists
IF EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}FK_HtmlText_WorkflowStates') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}HtmlText'))
    BEGIN
        ALTER TABLE {databaseOwner}{objectQualifier}HtmlText DROP CONSTRAINT FK_HtmlText_WorkflowStates;
    END
GO

-- Drop Foreign Key FK_HtmlTextLog_WorkflowStates if it exists
IF EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}FK_HtmlTextLog_WorkflowStates') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}HtmlTextLog'))
    BEGIN
        ALTER TABLE {databaseOwner}{objectQualifier}HtmlTextLog DROP CONSTRAINT FK_HtmlTextLog_WorkflowStates;
    END
GO

-- Drop Foreign Key FK_WorkflowStates_Workflow if it exists
IF EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}FK_WorkflowStates_Workflow') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}WorkflowStates'))
    BEGIN
        ALTER TABLE {databaseOwner}{objectQualifier}WorkflowStates DROP CONSTRAINT FK_WorkflowStates_Workflow;
    END
GO

-- Update StateID in HtmlText when possible (only default workflows)
DECLARE @CountResult INT;

SELECT @CountResult = COUNT(*)
FROM {databaseOwner}{objectQualifier}WorkflowStates AS s1
INNER JOIN {databaseOwner}{objectQualifier}ContentWorkflowStates AS s2
    ON s1.StateID = s2.StateID
    AND s1.WorkflowID = s2.WorkflowID
    AND s1.StateName = s2.StateName;

IF @CountResult = 3 -- The count should be 3 for the default workflows
BEGIN
    BEGIN TRANSACTION;

    BEGIN TRY
        -- Perform the update
        UPDATE {databaseOwner}{objectQualifier}HtmlText
        SET StateID = s2.StateID
        FROM {databaseOwner}{objectQualifier}HtmlText AS h
        INNER JOIN {databaseOwner}{objectQualifier}Modules AS m ON h.ModuleID = m.ModuleID
        INNER JOIN {databaseOwner}{objectQualifier}ContentWorkflowStates AS s1 ON h.StateID = s1.StateID
        INNER JOIN {databaseOwner}{objectQualifier}ContentWorkflows AS w1 ON s1.WorkflowID = w1.WorkflowID
        INNER JOIN {databaseOwner}{objectQualifier}ContentWorkflows AS w2 ON w1.WorkflowKey = w2.WorkflowKey AND m.PortalID = w2.PortalID
        INNER JOIN {databaseOwner}{objectQualifier}ContentWorkflowStates AS s2 ON s1.StateName = s2.StateName AND w2.WorkflowID = s2.WorkflowID;

        -- Commit the transaction
        COMMIT TRANSACTION;
        PRINT 'Transaction committed successfully.';
    END TRY
    BEGIN CATCH
        -- Rollback the transaction in case of an error
        ROLLBACK TRANSACTION;
        PRINT 'Transaction rolled back due to an error.';
        PRINT ERROR_MESSAGE();
    END CATCH
END
ELSE
BEGIN
    PRINT 'The count is not equal to 3. No action was taken.';
END
GO

-- Drop Table Workflow if it exists
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}Workflow') AND type in (N'U'))
    BEGIN
        DROP TABLE {databaseOwner}{objectQualifier}Workflow;
    END
GO

-- Drop Table WorkflowStates if it exists
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}WorkflowStates') AND type in (N'U'))
    BEGIN
        DROP TABLE {databaseOwner}{objectQualifier}WorkflowStates;
    END
GO

-- Create Foreign Key FK_HtmlText_WorkflowStates if it does not exist
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}FK_HtmlText_WorkflowStates') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}HtmlText'))
    BEGIN
        ALTER TABLE {databaseOwner}{objectQualifier}HtmlText WITH NOCHECK
            ADD CONSTRAINT FK_HtmlText_WorkflowStates FOREIGN KEY (StateID) REFERENCES {databaseOwner}{objectQualifier}ContentWorkflowStates (StateID);
    END
GO

-- Create Foreign Key FK_HtmlTextLog_WorkflowStates if it does not exist
IF NOT EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}FK_HtmlTextLog_WorkflowStates') AND parent_object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}HtmlTextLog'))
    BEGIN
        ALTER TABLE {databaseOwner}{objectQualifier}HtmlTextLog WITH NOCHECK
            ADD CONSTRAINT FK_HtmlTextLog_WorkflowStates FOREIGN KEY (StateID) REFERENCES {databaseOwner}{objectQualifier}ContentWorkflowStates (StateID);
    END
GO

-- Drop Procedure GetAllHtmlText if it exists
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}GetAllHtmlText') AND type in (N'P', N'PC'))
    BEGIN
        DROP PROCEDURE {databaseOwner}{objectQualifier}GetAllHtmlText;
    END
GO

-- Create Procedure GetAllHtmlText
CREATE PROCEDURE {databaseOwner}{objectQualifier}GetAllHtmlText
    @ModuleID INT
AS
BEGIN
    SELECT {databaseOwner}{objectQualifier}HtmlText.*,
           {databaseOwner}{objectQualifier}ContentWorkflowStates.*,
           {databaseOwner}{objectQualifier}ContentWorkflows.WorkflowName,
           {databaseOwner}{objectQualifier}Users.DisplayName,
           {databaseOwner}{objectQualifier}Modules.PortalID
    FROM {databaseOwner}{objectQualifier}HtmlText
    INNER JOIN {databaseOwner}{objectQualifier}Modules ON {databaseOwner}{objectQualifier}Modules.ModuleID = {databaseOwner}{objectQualifier}HtmlText.ModuleID
    INNER JOIN {databaseOwner}{objectQualifier}ContentWorkflowStates ON {databaseOwner}{objectQualifier}ContentWorkflowStates.StateID = {databaseOwner}{objectQualifier}HtmlText.StateID
    INNER JOIN {databaseOwner}{objectQualifier}ContentWorkflows ON {databaseOwner}{objectQualifier}ContentWorkflowStates.WorkflowID = {databaseOwner}{objectQualifier}ContentWorkflows.WorkflowID
    LEFT OUTER JOIN {databaseOwner}{objectQualifier}Users ON {databaseOwner}{objectQualifier}HtmlText.LastModifiedByUserID = {databaseOwner}{objectQualifier}Users.UserID
    WHERE {databaseOwner}{objectQualifier}HtmlText.ModuleID = @ModuleID
    ORDER BY {databaseOwner}{objectQualifier}HtmlText.LastModifiedOnDate DESC
END
GO

-- Drop Procedure GetHtmlText if it exists
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}GetHtmlText') AND type in (N'P', N'PC'))
    BEGIN
        DROP PROCEDURE {databaseOwner}{objectQualifier}GetHtmlText;
    END
GO

-- Create Procedure GetHtmlText
CREATE PROCEDURE {databaseOwner}{objectQualifier}GetHtmlText
    @ModuleID INT,
    @ItemID INT
AS
BEGIN
    SELECT {databaseOwner}{objectQualifier}HtmlText.*,
           {databaseOwner}{objectQualifier}ContentWorkflowStates.*,
           {databaseOwner}{objectQualifier}ContentWorkflows.WorkflowName,
           {databaseOwner}{objectQualifier}Users.DisplayName,
           {databaseOwner}{objectQualifier}Modules.PortalID
    FROM {databaseOwner}{objectQualifier}HtmlText
    INNER JOIN {databaseOwner}{objectQualifier}Modules ON {databaseOwner}{objectQualifier}Modules.ModuleID = {databaseOwner}{objectQualifier}HtmlText.ModuleID
    INNER JOIN {databaseOwner}{objectQualifier}ContentWorkflowStates ON {databaseOwner}{objectQualifier}ContentWorkflowStates.StateID = {databaseOwner}{objectQualifier}HtmlText.StateID
    INNER JOIN {databaseOwner}{objectQualifier}ContentWorkflows ON {databaseOwner}{objectQualifier}ContentWorkflowStates.WorkflowID = {databaseOwner}{objectQualifier}ContentWorkflows.WorkflowID
    LEFT OUTER JOIN {databaseOwner}{objectQualifier}Users ON {databaseOwner}{objectQualifier}HtmlText.LastModifiedByUserID = {databaseOwner}{objectQualifier}Users.UserID
    WHERE {databaseOwner}{objectQualifier}HtmlText.ModuleID = @ModuleID
      AND ItemID = @ItemID
END
GO

-- Drop Procedure GetHtmlTextLog if it exists
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}GetHtmlTextLog') AND type in (N'P', N'PC'))
    BEGIN
        DROP PROCEDURE {databaseOwner}{objectQualifier}GetHtmlTextLog;
    END
GO

-- Create Procedure GetHtmlTextLog
CREATE PROCEDURE {databaseOwner}{objectQualifier}GetHtmlTextLog
    @ItemID INT
AS
BEGIN
    SELECT HtmlTextLog.ItemID,
           HtmlTextLog.StateID,
           ContentWorkflowStates.StateName,
           HtmlTextLog.Comment,
           HtmlTextLog.Approved,
           HtmlTextLog.CreatedByUserID,
           Users.DisplayName,
           HtmlTextLog.CreatedOnDate
    FROM {databaseOwner}{objectQualifier}HtmlTextLog
    INNER JOIN {databaseOwner}{objectQualifier}ContentWorkflowStates ON {databaseOwner}{objectQualifier}HtmlTextLog.StateID = {databaseOwner}{objectQualifier}ContentWorkflowStates.StateID
    LEFT OUTER JOIN {databaseOwner}{objectQualifier}Users ON {databaseOwner}{objectQualifier}HtmlTextLog.CreatedByUserID = {databaseOwner}{objectQualifier}Users.UserID
    WHERE ItemID = @ItemID
    ORDER BY HtmlTextLog.CreatedOnDate DESC
END
GO

-- Drop Procedure GetHtmlTextUser if it exists
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}GetHtmlTextUser') AND type in (N'P', N'PC'))
    BEGIN
        DROP PROCEDURE {databaseOwner}{objectQualifier}GetHtmlTextUser;
    END
GO

-- Create Procedure GetHtmlTextUser
CREATE PROCEDURE {databaseOwner}{objectQualifier}GetHtmlTextUser
    @UserID INT
AS
BEGIN
    SELECT HtmlTextUsers.*,
           ContentWorkflowStates.StateName
    FROM {databaseOwner}{objectQualifier}HtmlTextUsers
    INNER JOIN {databaseOwner}{objectQualifier}ContentWorkflowStates ON {databaseOwner}{objectQualifier}HtmlTextUsers.StateID = {databaseOwner}{objectQualifier}ContentWorkflowStates.StateID
    WHERE HtmlTextUsers.UserID = @UserID
    ORDER BY HtmlTextUsers.CreatedOnDate ASC
END
GO

-- Drop Procedure GetTopHtmlText if it exists
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}GetTopHtmlText') AND type in (N'P', N'PC'))
    BEGIN
        DROP PROCEDURE {databaseOwner}{objectQualifier}GetTopHtmlText;
    END
GO

-- Create Procedure GetTopHtmlText
CREATE PROCEDURE {databaseOwner}{objectQualifier}GetTopHtmlText
    @ModuleID INT,
    @IsPublished BIT
AS
BEGIN
    SELECT TOP 1 {databaseOwner}{objectQualifier}HtmlText.*,
                 {databaseOwner}{objectQualifier}ContentWorkflowStates.*,
                 {databaseOwner}{objectQualifier}ContentWorkflows.WorkflowName,
                 {databaseOwner}{objectQualifier}Users.DisplayName,
                 {databaseOwner}{objectQualifier}Modules.PortalID
    FROM {databaseOwner}{objectQualifier}HtmlText
    INNER JOIN {databaseOwner}{objectQualifier}Modules ON {databaseOwner}{objectQualifier}Modules.ModuleID = {databaseOwner}{objectQualifier}HtmlText.ModuleID
    INNER JOIN {databaseOwner}{objectQualifier}ContentWorkflowStates ON {databaseOwner}{objectQualifier}ContentWorkflowStates.StateID = {databaseOwner}{objectQualifier}HtmlText.StateID
    INNER JOIN {databaseOwner}{objectQualifier}ContentWorkflows ON {databaseOwner}{objectQualifier}ContentWorkflowStates.WorkflowID = {databaseOwner}{objectQualifier}ContentWorkflows.WorkflowID
    LEFT OUTER JOIN {databaseOwner}{objectQualifier}Users ON {databaseOwner}{objectQualifier}HtmlText.LastModifiedByUserID = {databaseOwner}{objectQualifier}Users.UserID
    WHERE {databaseOwner}{objectQualifier}HtmlText.ModuleID = @ModuleID
      AND (IsPublished = @IsPublished OR @IsPublished = 0)
    ORDER BY {databaseOwner}{objectQualifier}HtmlText.LastModifiedOnDate DESC
END
GO

-- Enable constraints after checking existing data
ALTER TABLE {databaseOwner}{objectQualifier}HtmlText WITH CHECK CHECK CONSTRAINT FK_HtmlText_WorkflowStates;
ALTER TABLE {databaseOwner}{objectQualifier}HtmlTextLog WITH CHECK CHECK CONSTRAINT FK_HtmlTextLog_WorkflowStates;
GO
