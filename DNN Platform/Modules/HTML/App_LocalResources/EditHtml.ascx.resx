<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="plPublish.Text" xml:space="preserve">
    <value>Publish</value>
  </data>
  <data name="plPublish.Help" xml:space="preserve">
    <value>Indicate if the content is ready for publishing</value>
  </data>
  <data name="dshHistory.Text" xml:space="preserve">
    <value>Item History</value>
  </data>
  <data name="plPreviewVersion.Text" xml:space="preserve">
    <value>Version</value>
  </data>
  <data name="plPreviewVersion.Help" xml:space="preserve">
    <value>Displays the content version number</value>
  </data>
  <data name="plPreviewWorkflowInUse.Text" xml:space="preserve">
    <value>Workflow Used</value>
  </data>
  <data name="plPreviewWorkflowInUse.Help" xml:space="preserve">
    <value>The name of the workflow configuration that this module is currently using.</value>
  </data>
  <data name="lblPreviewWorkflowState.Text" xml:space="preserve">
    <value>State</value>
  </data>
  <data name="plWorkflowState.Help" xml:space="preserve">
    <value>Displays the current state of the content</value>
  </data>
  <data name="Date.Header" xml:space="preserve">
    <value>Date</value>
  </data>
  <data name="State.Header" xml:space="preserve">
    <value>State</value>
  </data>
  <data name="Version.Header" xml:space="preserve">
    <value>Version</value>
  </data>
  <data name="Item.Text" xml:space="preserve">
    <value>Preview Content</value>
  </data>
  <data name="Edit.Text" xml:space="preserve">
    <value>Rollback Content To This Version</value>
  </data>
  <data name="ModuleHelp.Text" xml:space="preserve">
    <value>&lt;P&gt;The Text/HTML Module renders plain text, rich text or HTML. Five different editing views are available: &lt;/P&gt;
&lt;OL&gt;
&lt;LI&gt;&lt;STRONG&gt;Basic Text Box / Text&lt;/STRONG&gt;: Renders basic text and HTML tags.  Text entered on a new line is rendered as a line break. The text style is the Normal style, as set in your style sheet. 
&lt;LI&gt;&lt;STRONG&gt;Basic Text Box / HTML&lt;/STRONG&gt;: Displays basic text in HTML format.
&lt;LI&gt;&lt;STRONG&gt;Basic Text Box / Raw&lt;/STRONG&gt;: Displays basic text in HTML format. Text entered on a new line is not rendered as a line break.
&lt;LI&gt;&lt;STRONG&gt;Rich Text Editor / HTML&lt;/STRONG&gt;: Allows you to paste HTML from other sources.
&lt;LI&gt;&lt;STRONG&gt;Rich Text Editor / Design&lt;/STRONG&gt;: A full word processor or WYSIWYG (What You See is What You Get) editor with functionality such as hyperlinks, email links, File Manager image gallery, bullet points, spell check and more.</value>
  </data>
  <data name="ControlTitle_edit.Text" xml:space="preserve">
    <value>Edit Content</value>
  </data>
  <data name="AddContent.Text" xml:space="preserve">
    <value>Add Content...</value>
  </data>
  <data name="cmdPreview.Text" xml:space="preserve">
    <value>Preview</value>
  </data>
  <data name="cmdSave.Text" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="User.Header" xml:space="preserve">
    <value>User</value>
  </data>
  <data name="Content Staging.Text" xml:space="preserve">
    <value>Content Staging</value>
  </data>
  <data name="Direct Publish.Text" xml:space="preserve">
    <value>Direct Publish</value>
  </data>
  <data name="Draft.Text" xml:space="preserve">
    <value>Draft</value>
  </data>
  <data name="Published.Text" xml:space="preserve">
    <value>Published</value>
  </data>
  <data name="False.Text" xml:space="preserve">
    <value>False</value>
  </data>
  <data name="True.Text" xml:space="preserve">
    <value>True</value>
  </data>
  <data name="dshMaster.Text" xml:space="preserve">
    <value>Master Language Version</value>
  </data>
  <data name="chkPublish.Text" xml:space="preserve">
    <value>Publish Changes?</value>
  </data>
  <data name="plActionOnSave.Help" xml:space="preserve">
    <value>Action the system should take in addition to saving the module content when 'Save' is clicked.</value>
  </data>
  <data name="plCurrentWorkflowInUse.Help" xml:space="preserve">
    <value>The current workflow being used by this module.</value>
  </data>
  <data name="plCurrentWorkflowState.Help" xml:space="preserve">
    <value>State of the workflow used by this module.</value>
  </data>
  <data name="plMaxVersions.Help" xml:space="preserve">
    <value>The maximum number of versions that are maintained for any html content.</value>
  </data>
  <data name="plPreviewWorkflowState.Help" xml:space="preserve">
    <value>The workflow state of the content displayed.</value>
  </data>
  <data name="Delete.Text" xml:space="preserve">
    <value>Delete This Version</value>
  </data>
  <data name="cmdCancelSubmit.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="cmdCancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="EditPreviewState.Text" xml:space="preserve">
    <value>Edit Preview</value>
  </data>
  <data name="plActionOnSave.Text" xml:space="preserve">
    <value>On Save</value>
  </data>
  <data name="plCurrentWorkflowInUse.Text" xml:space="preserve">
    <value>Workflow in Use</value>
  </data>
  <data name="plCurrentWorkflowState.Text" xml:space="preserve">
    <value>Workflow State</value>
  </data>
  <data name="plMaxVersions.Text" xml:space="preserve">
    <value>Maximum Number Of Versions</value>
  </data>
  <data name="plPreviewWorkflowState.Text" xml:space="preserve">
    <value>Workflow State</value>
  </data>
  <data name="dshCurrentContent.Text" xml:space="preserve">
    <value>Current Content</value>
  </data>
  <data name="DeleteVersion.Confirm" xml:space="preserve">
    <value>Are you sure you wish to permanently delete version [VERSION] ([STATE]) that was created on [DATECREATED] by [USERNAME]?</value>
  </data>
  <data name="plCurrentWorkVersion.Help" xml:space="preserve">
    <value>Displays the content version number</value>
  </data>
  <data name="plCurrentWorkVersion.Text" xml:space="preserve">
    <value>Version</value>
  </data>
  <data name="lblNoRecords.Text" xml:space="preserve">
    <value>There is no history for this content. </value>
  </data>
  <data name="VersionsPreview.Text" xml:space="preserve">
    <value>Preview</value>
  </data>
  <data name="VersionsRemove.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="VersionsRollback.Text" xml:space="preserve">
    <value>Rollback</value>
  </data>
  <data name="NoVersions.Text" xml:space="preserve">
    <value>There is no version history for this content.</value>
  </data>
  <data name="cmdHistory.Text" xml:space="preserve">
    <value>Version History</value>
  </data>
  <data name="cmdHideMasterContent.Text" xml:space="preserve">
    <value>Hide Default Language</value>
  </data>
  <data name="cmdShowMasterContent.Text" xml:space="preserve">
    <value>Show Default Language</value>
  </data>
  <data name="liBasicText.Text" xml:space="preserve">
    <value>Basic Text Box</value>
  </data>
  <data name="liRichText.Text" xml:space="preserve">
    <value>Rich Text Editor</value>
  </data>
</root>