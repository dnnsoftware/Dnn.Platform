<?xml version="1.0" encoding="utf-8"?>
<!-- 
// TODO:
* Add the config section
* Add the configuration block
* Add the handler
* Add the module
... See below...
-->
<configuration>
  <configSections>
    <!-- Need to register the clientDependency config section -->
    <section name="clientDependency" type="ClientDependency.Core.Config.ClientDependencySection, ClientDependency.Core" requirePermission="false" />
    <section name="dotless" type="dotless.Core.configuration.DotlessConfigurationSectionHandler, dotless.Core" requirePermission="false" />
  </configSections>
  <!-- 
Customize the configuration section as required, it is optional,
when it is not specified the defaults will be loaded. YOU DONT NEED   
TO SPECIFY ALL OF THIS CONFIG, THE MINIMUM IS JUST THIS:
<clientDependency version="1" />

Each section is optional, so if you're not using Mvc, you don't need
that section and if you're not using Web Forms, you don't need the 
fileRegistration section.
Composite files are used for both types of projects.

** IMPORTANT: If you're web.config setting: compilation debug="true" is set to 'true', then composite files will NOT be enabled no matter what
-->
  <clientDependency version="9875" fileDependencyExtensions=".js,.css" loggerType="ClientDependency.Web.Test.Models.TestLogger, ClientDependency.Web.Test">
    <!--The enableCompositeFiles="true" is optional and by default is set to true.-->
    <!-- 
    This section is used for Web Forms only.    
    The PlaceHolderProvider is set to default, the javascriptPlaceHolderId, cssPlaceHolderId attributes are optional and default to what is listed below. If using
    this provider, then you must specify both PlaceHolder controls on your page in order to render the JS/CSS.
  -->
    <fileRegistration defaultProvider="PlaceHolderProvider">
      <providers>
        <add name="PageHeaderProvider" type="ClientDependency.Core.FileRegistration.Providers.PageHeaderProvider, ClientDependency.Core" enableCompositeFiles="true" />
        <add name="LazyLoadProvider" type="ClientDependency.Core.FileRegistration.Providers.LazyLoadProvider, ClientDependency.Core" enableCompositeFiles="true" />
        <add name="LoaderControlProvider" type="ClientDependency.Core.FileRegistration.Providers.LoaderControlProvider, ClientDependency.Core" enableCompositeFiles="true" />
        <add name="PlaceHolderProvider" type="ClientDependency.Core.FileRegistration.Providers.PlaceHolderProvider, ClientDependency.Core" enableCompositeFiles="true" javascriptPlaceHolderId="JavaScriptPlaceHolder" cssPlaceHolderId="CssPlaceHolder" />
      </providers>
    </fileRegistration>
    <!-- This section is used for MVC only -->
    <mvc defaultRenderer="StandardRenderer">
      <renderers>
        <add name="StandardRenderer" type="ClientDependency.Core.FileRegistration.Providers.StandardRenderer, ClientDependency.Core" enableCompositeFiles="true" disableCompositeBundling="false" enableDebugVersionQueryString="true" />
        <add name="LazyLoadRenderer" type="ClientDependency.Core.FileRegistration.Providers.LazyLoadRenderer, ClientDependency.Core" />
      </renderers>
    </mvc>
    <!-- 
The composite file section configures the compression/combination/minification of files.
You can enable/disable minification of either JS/CSS files and you can enable/disable the 
persistence of composite files. By default, minification and persistence is enabled. Persisting files
means that the system is going to save the output of the compressed/combined/minified files
to disk so that on any subsequent request (when output cache expires) that these files don't have
to be recreated again and will be based on the persisted file on disk. This saves on processing time.
-->
    <compositeFiles defaultFileProcessingProvider="CompositeFileProcessor" defaultFileMapProvider="XmlFileMap" compositeFileHandlerPath="~/DependencyHandler.axd">
      <!-- 
    File processing providers perform the file combination, compression and storage. 
    Generally there would be no reason to replace.
    NOTE: The pathUrlFormat is much nicer as {dependencyId}.{version}.{type} which is the default,
    however, it is specified below with '/' as the delimiter to demonstrate using it with Cassini
    since Cassini does not support '.' chars in the path.
    -->
      <fileProcessingProviders>
        <add name="CompositeFileProcessor" type="ClientDependency.Core.CompositeFiles.Providers.CompositeFileProcessingProvider, ClientDependency.Core" enableCssMinify="true" enableJsMinify="true" persistFiles="false" compositeFilePath="~/App_Data/ClientDependency" bundleDomains="localhost:54153,ajax.googleapis.com" urlType="Base64QueryStrings" pathUrlFormat="{dependencyId}/{version}/{type}" />
      </fileProcessingProviders>
      <!-- 
    A file map provider stores references to dependency files by an id to be used in the handler URL when using the MappedId Url type
    -->
      <fileMapProviders>
        <add name="XmlFileMap" type="ClientDependency.Core.CompositeFiles.Providers.XmlFileMapper, ClientDependency.Core" mapPath="~/App_Data/ClientDependency" />
      </fileMapProviders>
      <!--  
  Defines the mime types to compress when requested by the client.
  Path is a regex selector, or a * can be used as in place of 'any'.
  Generally mime types are only set by client browsers in the request for things
  such as JSON or XML ajax requests.
  -->
      <mimeTypeCompression>
        <add type="application/json" path="^.*?/Services/.*" />
      </mimeTypeCompression>
      <!-- 
  Defines the paths to match on to enable rogue file compression.
  Path is a regex selector, or a * can be used as in place of 'any'.
  jsExt and cssExt are comma seperated list of extensions to match to have the dependencies
  replaced with the composite file handler. You can even include ASP.Net web service JS proxies.
  -->
      <rogueFileCompression>
        <add path="*" compressJs="true" compressCss="true" jsExt=".js,asmx/js" cssExt=".css">
          <!--<exclusions>
          <add path="^.*test.aspx.*"/> 
        </exclusions>-->
        </add>
      </rogueFileCompression>
    </compositeFiles>
  </clientDependency>
  <connectionStrings />
  <!--
    For a description of web.config changes for .NET 4.5 see http://go.microsoft.com/fwlink/?LinkId=235367.

    The following attributes can be set on the <httpRuntime> tag.
      <system.Web>
        <httpRuntime targetFramework="4.5" />
      </system.Web>
  -->
  <system.web>
    <trace enabled="false" pageOutput="true" />
    <httpRuntime maxRequestLength="8192" maxUrlLength="8192" maxQueryStringLength="8192" />
    <!--<trust level="Medium" originUrl=".*" />-->
    <compilation debug="false" targetFramework="4.5">
      <assemblies>
        <add assembly="System.Web.Mvc, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
        <add assembly="System.Web.Abstractions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
        <add assembly="System.Web.Routing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" />
        <add assembly="System.Data.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089" />
      </assemblies>
    </compilation>
    <authentication mode="Forms" />
    <customErrors mode="Off" />
    <pages controlRenderingCompatibilityVersion="4.0" clientIDMode="AutoID">
      <namespaces>
        <add namespace="System.Web.Mvc" />
        <add namespace="System.Web.Mvc.Ajax" />
        <add namespace="System.Web.Mvc.Html" />
        <add namespace="System.Web.Routing" />
        <add namespace="System.Linq" />
        <add namespace="System.Collections.Generic" />
      </namespaces>
    </pages>
    <httpHandlers>
      <!-- ** Need to add the dependency handler -->
      <add verb="GET" path="DependencyHandler.axd" type="ClientDependency.Core.CompositeFiles.CompositeDependencyHandler, ClientDependency.Core " />
      <add path="*.coffee" verb="GET" type="ClientDependency.Coffee.CoffeeHandler, ClientDependency.Coffee" />
      <add path="*.sass,*.scss" verb="GET" type="ClientDependency.SASS.SassHandler, ClientDependency.SASS" />
      <add path="*.ts" verb="GET" type="ClientDependency.TypeScript.TypeScriptHandler, ClientDependency.TypeScript" />
      <add path="*.less" verb="GET" type="dotless.Core.LessCssHttpHandler, dotless.Core" />
      
    </httpHandlers>
    <httpModules>
      <!-- ** Need to add the dependency module -->
      <add name="ClientDependencyModule" type="ClientDependency.Core.Module.ClientDependencyModule, ClientDependency.Core" />
    </httpModules>
  </system.web>
  <system.webServer>
    <validation validateIntegratedModeConfiguration="false" />
    <modules runAllManagedModulesForAllRequests="true">
      <remove name="ClientDependencyModule" />
      <!-- ** Need to add the dependency module -->
      <add name="ClientDependencyModule" type="ClientDependency.Core.Module.ClientDependencyModule, ClientDependency.Core" />
    </modules>
    <handlers>
      <remove name="UrlRoutingHandler" />
      <!-- ** Need to add the dependency handler -->
      <remove name="DependencyHandler" />
      <add name="DependencyHandler" preCondition="integratedMode" verb="GET" path="DependencyHandler.axd" type="ClientDependency.Core.CompositeFiles.CompositeDependencyHandler, ClientDependency.Core " />
      <!-- ** CDF Plugin handlers -->
      <remove name="CdfCoffeeHandler" />
      <remove name="CdfSasSHandler" />
      <remove name="CdfScssHandler" />
      <remove name="CdfTypeScriptHandler" />
      <remove name="dotless" />
      <add name="CdfCoffeeHandler" path="*.coffee" verb="GET" type="ClientDependency.Coffee.CoffeeHandler, ClientDependency.Coffee" resourceType="File" preCondition="" />
      <add name="CdfSasSHandler" path="*.sass" verb="GET" type="ClientDependency.SASS.SassHandler, ClientDependency.SASS" resourceType="File" preCondition="" />
      <add name="CdfScssHandler" path="*.scss" verb="GET" type="ClientDependency.SASS.SassHandler, ClientDependency.SASS" resourceType="File" preCondition="" />
      <add name="CdfTypeScriptHandler" path="*.ts" verb="GET" type="ClientDependency.TypeScript.TypeScriptHandler, ClientDependency.TypeScript" resourceType="File" preCondition="" />
      <add name="dotless" path="*.less" verb="GET" type="dotless.Core.LessCssHttpHandler,dotless.Core" resourceType="File" preCondition="" />
      
    </handlers>
  </system.webServer>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Helpers" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Mvc" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="0.0.0.0-5.0.0.0" newVersion="5.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Optimization" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="1.0.0.0-1.1.0.0" newVersion="1.1.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.WebPages" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="0.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="WebGrease" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="0.0.0.0-1.5.2.14234" newVersion="1.5.2.14234" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.Razor" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="System.Web.WebPages.Razor" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-3.0.0.0" newVersion="3.0.0.0" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
  <dotless minifyCss="false" cache="true" web="false" strictMath="false" />
  
</configuration>