/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/


/***********************/
/* Update AddTabModule SP to Remove [IsWebSlice], [WebSliceTitle], [WebSliceExpiryDate], [WebSliceTTL] Columns*/
/***********************/
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}AddTabModule]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
BEGIN
    DROP PROCEDURE {databaseOwner} [{objectQualifier}AddTabModule]
END
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddTabModule]
    @TabId                  int,
    @ModuleId               int,
	@ModuleTitle			nvarchar(256),
	@Header					ntext,
	@Footer					ntext,
    @ModuleOrder            int,
    @PaneName               nvarchar(50),
    @CacheTime              int,
    @CacheMethod			varchar(50),
    @Alignment              nvarchar(10),
    @Color                  nvarchar(20),
    @Border                 nvarchar(1),
    @IconFile               nvarchar(100),
    @Visibility             int,
    @ContainerSrc           nvarchar(200),
    @DisplayTitle           bit,
    @DisplayPrint           bit,
    @DisplaySyndicate       bit,
    @UniqueId				uniqueidentifier,
    @VersionGuid			uniqueidentifier,
    @DefaultLanguageGuid	uniqueidentifier,
    @LocalizedVersionGuid	uniqueidentifier,
    @CultureCode			nvarchar(10),
    @CreatedByUserID  		int

AS
    INSERT INTO dbo.TabModules ( 
        TabId,
        ModuleId,
        ModuleTitle,
        Header,
        Footer,
		ModuleOrder,
        PaneName,
        CacheTime,
        CacheMethod,
        Alignment,
        Color,
        Border,
        IconFile,
        Visibility,
        ContainerSrc,
        DisplayTitle,
        DisplayPrint,
        DisplaySyndicate,
        UniqueId,
        VersionGuid,
        DefaultLanguageGuid,
        LocalizedVersionGuid,
        CultureCode,
        CreatedByUserID,
        CreatedOnDate,
        LastModifiedByUserID,
        LastModifiedOnDate
    )
    VALUES (
        @TabId,
        @ModuleId,
        @ModuleTitle,
        @Header,
        @Footer,
        @ModuleOrder,
        @PaneName,
        @CacheTime,
        @CacheMethod,
        @Alignment,
        @Color,
        @Border,
        @IconFile,
        @Visibility,
        @ContainerSrc,
        @DisplayTitle,
        @DisplayPrint,
        @DisplaySyndicate,
        @UniqueId,
        @VersionGuid,
        @DefaultLanguageGuid,
        @LocalizedVersionGuid,
        @CultureCode,
        @CreatedByUserID,
        getdate(),
        @CreatedByUserID,
        getdate()
    )
GO



/***********************/
/* Update UpdateTabModule SP to Remove [IsWebSlice], [WebSliceTitle], [WebSliceExpiryDate], [WebSliceTTL] Columns*/
/***********************/
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}UpdateTabModule]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
BEGIN
    DROP PROCEDURE {databaseOwner} [{objectQualifier}UpdateTabModule]
END
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateTabModule]
    @TabModuleId            int,
    @TabId					int,
    @ModuleId				int,
	@ModuleTitle			nvarchar(256),
	@Header					ntext,
	@Footer					ntext,
    @ModuleOrder			int,
    @PaneName				nvarchar(50),
    @CacheTime				int,
    @CacheMethod			varchar(50),
    @Alignment				nvarchar(10),
    @Color					nvarchar(20),
    @Border					nvarchar(1),
    @IconFile				nvarchar(100),
    @Visibility				int,
    @ContainerSrc			nvarchar(200),
    @DisplayTitle			bit,
    @DisplayPrint			bit,
    @DisplaySyndicate		bit,
    @VersionGuid			uniqueidentifier,
    @DefaultLanguageGuid	uniqueidentifier,
    @LocalizedVersionGuid	uniqueidentifier,
    @CultureCode			nvarchar(10),
    @LastModifiedByUserID	int

AS
    UPDATE dbo.TabModules
        SET    
            TabId = @TabId,
            ModuleId = @ModuleId,
			ModuleTitle = @ModuleTitle,
			Header = @Header,
			Footer = @Footer, 
            ModuleOrder = @ModuleOrder,
            PaneName = @PaneName,
            CacheTime = @CacheTime,
            CacheMethod = @CacheMethod,
            Alignment = @Alignment,
            Color = @Color,
            Border = @Border,
            IconFile = @IconFile,
            Visibility = @Visibility,
            ContainerSrc = @ContainerSrc,
            DisplayTitle = @DisplayTitle,
            DisplayPrint = @DisplayPrint,
            DisplaySyndicate = @DisplaySyndicate,
            VersionGuid = @VersionGuid,
            DefaultLanguageGuid = @DefaultLanguageGuid,
            LocalizedVersionGuid = @LocalizedVersionGuid,
            CultureCode= @CultureCode,
            LastModifiedByUserID = @LastModifiedByUserID,
            LastModifiedOnDate = getdate()
        WHERE  TabModuleId = @TabModuleId
GO

/***********************/
/* Update vw_Modules to Remove [IsWebSlice], [WebSliceTitle], [WebSliceExpiryDate], [WebSliceTTL] Columns*/
/***********************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}vw_Modules]') AND OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
    DROP VIEW {databaseOwner}[{objectQualifier}vw_Modules]
END
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_Modules]
AS
    SELECT
        M.PortalID AS [OwnerPortalID],
        DM.PackageID,
        T.PortalID,
        TM.TabID,
        TM.TabModuleID,
        M.ModuleID,
        M.ModuleDefID,
        TM.ModuleOrder,
        TM.PaneName,
        TM.ModuleTitle,
        TM.CacheTime,
        TM.CacheMethod,
        TM.Alignment,
        TM.Color,
        TM.Border,
        CASE WHEN TM.IconFile LIKE 'fileid=%' 
			THEN (SELECT IsNull(Folder, '') + [FileName] FROM {databaseOwner}[{objectQualifier}vw_Files]
				  WHERE FileId = CAST(SUBSTRING(TM.IconFile, 8, 10) AS Int))
			ELSE Coalesce(TM.IconFile,'')
		END AS IconFile,
        TM.Visibility,
        TM.Header,
        TM.Footer,
        TM.ContainerSrc,
        TM.DisplayTitle,
        TM.DisplayPrint,
        TM.DisplaySyndicate,
        TM.UniqueId,
        TM.VersionGuid,
        TM.DefaultLanguageGuid,
        TM.LocalizedVersionGuid,
        TM.CultureCode,
        M.AllTabs,
        M.StartDate,
        M.EndDate,
        T.StartDate AS TabStartDate,
        T.EndDate AS TabEndDate,
        M.InheritViewPermissions,
        M.IsShareable,
        M.IsShareableViewOnly,
        M.CreatedByUserID,
        M.CreatedOnDate,
        M.LastModifiedByUserID,
        M.LastModifiedOnDate,
        M.LastContentModifiedOnDate,
        MD.DesktopModuleID,
        MD.DefaultCacheTime,
        MD.DefinitionName,
        MC.ModuleControlID,
        DM.BusinessControllerClass,
        DM.IsAdmin,
        DM.SupportedFeatures,
        CI.ContentItemID,
        CI.Content,
        CI.ContentTypeID,
        CI.ContentKey,
        CI.Indexed,
        CI.StateID,
        TM.IsDeleted AS IsDeleted,
        M.IsDeleted  AS IsModuleDeleted,
		T.IsDeleted  AS IsTabDeleted
    FROM        {databaseOwner}[{objectQualifier}ModuleDefinitions] AS MD
     INNER JOIN {databaseOwner}[{objectQualifier}Modules]           AS M  ON M.ModuleDefID = MD.ModuleDefID
     INNER JOIN {databaseOwner}[{objectQualifier}ModuleControls]    AS MC ON MD.ModuleDefID = MC.ModuleDefID
     INNER JOIN {databaseOwner}[{objectQualifier}DesktopModules]    AS DM ON MD.DesktopModuleID = DM.DesktopModuleID
     LEFT  JOIN {databaseOwner}[{objectQualifier}ContentItems]      AS CI ON M.ContentItemID = CI.ContentItemID
     LEFT  JOIN {databaseOwner}[{objectQualifier}TabModules]        AS TM ON M.ModuleID = TM.ModuleID
     LEFT  JOIN {databaseOwner}[{objectQualifier}Tabs]              AS T  ON TM.TabID = T.TabID
    WHERE (MC.ControlKey IS NULL)
GO


/***********************/
/* Update vw_TabModules to Remove [IsWebSlice], [WebSliceTitle], [WebSliceExpiryDate], [WebSliceTTL] Columns*/
/***********************/
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}vw_TabModules]') AND OBJECTPROPERTY(id, N'IsView') = 1)
BEGIN
    DROP VIEW {databaseOwner}[{objectQualifier}vw_TabModules]
END
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_TabModules]
AS
    SELECT
        M.PortalID AS [OwnerPortalID],
        T.PortalID,
        TM.TabID,
        TM.TabModuleID,
        M.ModuleID,
        M.ModuleDefID,
        TM.ModuleOrder,
        TM.PaneName,
        TM.ModuleTitle,
        TM.CacheTime,
        TM.CacheMethod,
        TM.Alignment,
        TM.Color,
        TM.Border,
         Case when tm.IconFile LIKE 'fileid=%' 
			then (SELECT IsNull(Folder, '') + [FileName] FROM {databaseOwner}[{objectQualifier}vw_Files]
			 WHERE fileid = CAST(SUBSTRING(tm.IconFile, 8, 10) AS Int))
			 else Coalesce(tm.IconFile,'')
			 end as IconFile
		,M.AllTabs,
        TM.Visibility,
        TM.IsDeleted,
        TM.Header,
        TM.Footer,
        M.StartDate,
        M.EndDate,
        TM.ContainerSrc,
        TM.DisplayTitle,
        TM.DisplayPrint,
        TM.DisplaySyndicate,
        M.InheritViewPermissions,
        M.IsShareable,
        M.IsShareableViewOnly,
        MD.DesktopModuleID,
        MD.DefaultCacheTime,
        MC.ModuleControlID,
        DM.BusinessControllerClass,
        DM.IsAdmin,
        DM.SupportedFeatures,
        CI.ContentItemID,
        CI.Content,
        CI.ContentTypeID,
        CI.ContentKey,
        CI.Indexed,
        CI.StateID,
        TM.CreatedByUserID,
        TM.CreatedOnDate,
        TM.LastModifiedByUserID,
        TM.LastModifiedOnDate,
        M.LastContentModifiedOnDate,
        TM.UniqueId,
        TM.VersionGuid,
        TM.DefaultLanguageGuid,
        TM.LocalizedVersionGuid,
        TM.CultureCode
    FROM {databaseOwner}[{objectQualifier}ModuleDefinitions]     AS MD
     INNER JOIN {databaseOwner}[{objectQualifier}Modules]        AS M  ON MD.ModuleDefID = M.ModuleDefID
     INNER JOIN {databaseOwner}[{objectQualifier}ModuleControls] AS MC ON MD.ModuleDefID = MC.ModuleDefID
     INNER JOIN {databaseOwner}[{objectQualifier}DesktopModules] AS DM ON MD.DesktopModuleID = DM.DesktopModuleID
     LEFT  JOIN {databaseOwner}[{objectQualifier}ContentItems]   AS CI ON M.ContentItemID = CI.ContentItemID
     LEFT  JOIN {databaseOwner}[{objectQualifier}TabModules]     AS TM ON M.ModuleID = TM.ModuleID
     LEFT  JOIN {databaseOwner}[{objectQualifier}Tabs]           AS T  ON TM.TabID = T.TabID
    WHERE (MC.ControlKey IS NULL)
GO

/***********************/
/* Update TabModules table to Remove Index*/
/***********************/
IF EXISTS (SELECT * FROM sys.indexes WHERE name ='IX_{objectQualifier}TabModules_ModuleID')
BEGIN 
    DROP INDEX {databaseOwner}[{objectQualifier}TabModules].[IX_{objectQualifier}TabModules_ModuleID]
END
GO

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}TabModules_ModuleID] ON {databaseOwner}[{objectQualifier}TabModules] ([ModuleID], [TabID]) INCLUDE ([Alignment], [Border], [CacheMethod], [CacheTime], [Color], [ContainerSrc], [CultureCode], [DefaultLanguageGuid], [DisplayPrint], [DisplaySyndicate], [DisplayTitle], [Footer], [Header], [IconFile], [IsDeleted], [LocalizedVersionGuid], [ModuleOrder], [ModuleTitle], [PaneName], [TabModuleID], [UniqueId], [VersionGuid], [Visibility])
GO

IF EXISTS (SELECT * FROM sys.indexes WHERE name ='IX_{objectQualifier}TabModules_ModuleOrder')
BEGIN 
    DROP INDEX {databaseOwner}[{objectQualifier}TabModules].[IX_{objectQualifier}TabModules_ModuleOrder]
END
GO 

CREATE NONCLUSTERED INDEX [IX_{objectQualifier}TabModules_ModuleOrder] ON {databaseOwner}[{objectQualifier}TabModules] ([TabID], [PaneName], [ModuleOrder]) INCLUDE ([Alignment], [Border], [CacheMethod], [CacheTime], [Color], [ContainerSrc], [CreatedByUserID], [CreatedOnDate], [CultureCode], [DefaultLanguageGuid], [DisplayPrint], [DisplaySyndicate], [DisplayTitle], [Footer], [Header], [IconFile], [IsDeleted], [LastModifiedByUserID], [LastModifiedOnDate], [LocalizedVersionGuid], [ModuleID], [ModuleTitle], [TabModuleID], [UniqueId], [VersionGuid], [Visibility])
GO



/***********************/
/* Update TabModules table to Remove [IsWebSlice], [WebSliceTitle], [WebSliceExpiryDate], [WebSliceTTL] Columns*/
/***********************/
IF OBJECT_ID('{databaseOwner}[DF_abModules_IsWebSlice]', 'D') IS NOT NULL 
    ALTER TABLE {databaseOwner}[{objectQualifier}TabModules]
    DROP CONSTRAINT DF_abModules_IsWebSlice

ALTER TABLE {databaseOwner}[{objectQualifier}TabModules]
DROP COLUMN [IsWebSlice], [WebSliceTitle], [WebSliceExpiryDate], [WebSliceTTL]


/*****************************/
/* Add tables for API Tokens */
/*****************************/

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}ApiTokens') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}ApiTokens (
	[ApiTokenId] [int] IDENTITY(1,1) NOT NULL,
	[TokenHash] [varchar](96) NOT NULL,
	[ExpiresOn] [datetime] NOT NULL,
	[Scope] [int] NOT NULL,
	[PortalId] [int] NOT NULL,
	[IsRevoked] [bit] NOT NULL,
	[RevokedOnDate] [datetime] NULL,
	[CreatedByUserId] [int] NOT NULL,
	[CreatedOnDate] [datetime] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}ApiTokens] PRIMARY KEY CLUSTERED 
(
	[ApiTokenId] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}ApiTokenKeys') AND type in (N'U'))
BEGIN
CREATE TABLE {databaseOwner}{objectQualifier}ApiTokenKeys (
	[ApiTokenId] [int] NOT NULL,
	[TokenKey] [nvarchar](200) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}ApiTokenKeys] PRIMARY KEY CLUSTERED 
(
	[ApiTokenId] ASC,
	[TokenKey] ASC
) WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
END
GO

ALTER TABLE {databaseOwner}{objectQualifier}ApiTokenKeys ADD CONSTRAINT [FK_{objectQualifier}ApiTokenKeys_ApiTokens] FOREIGN KEY ([ApiTokenId]) REFERENCES {databaseOwner}{objectQualifier}ApiTokens ([ApiTokenId]) ON DELETE CASCADE
GO

