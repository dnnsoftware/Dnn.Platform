/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/

/* Drop Level Column From Tabs Table */
/*************************************/

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME='{objectQualifier}Tabs' AND COLUMN_NAME='Level')
	BEGIN
		ALTER TABLE {databaseOwner}{objectQualifier}Tabs
			DROP CONSTRAINT DF_{objectQualifier}Tabs_Level
		-- Drop Column
		ALTER TABLE {databaseOwner}{objectQualifier}Tabs
			DROP COLUMN Level
	END
GO

/* Drop TabPath Column From Tabs Table */
/***************************************/

IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME='{objectQualifier}Tabs' AND COLUMN_NAME='TabPath')
	BEGIN
		-- Drop Column
		ALTER TABLE {databaseOwner}{objectQualifier}Tabs
			DROP COLUMN  TabPath
	END
GO

/* Add RemoveStringCharacters Function */
/***************************************/

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}RemoveStringCharacters]') and OBJECTPROPERTY(id, N'IsScalarFunction') = 1)
	DROP FUNCTION {databaseOwner}[{objectQualifier}RemoveStringCharacters]
GO

CREATE FUNCTION {databaseOwner}[{objectQualifier}RemoveStringCharacters]
(
		@string nvarchar(max), 
		@remove nvarchar(100)
)
RETURNS nvarchar(max)
AS
BEGIN
    WHILE @string LIKE '%[' + @remove + ']%'
    BEGIN
        SET @string = REPLACE(@string,SUBSTRING(@string,PATINDEX('%[' + @remove + ']%',@string),1),'')
    END

    RETURN @string
END

GO

/* Update Tabs View to use CTEs */
/********************************/

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}vw_Tabs]') and OBJECTPROPERTY(id, N'IsView') = 1)
	DROP VIEW {databaseOwner}[{objectQualifier}vw_Tabs]
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_Tabs]
AS
	WITH RecursiveTabs (TabID, Level, TabPath)
	AS	
	(
		SELECT 
			TabID,
			0 AS Level,
			CAST('//' + {databaseOwner}{objectQualifier}RemoveStringCharacters(TabName, '&? ') AS NVARCHAR(255)) AS TabPath
		FROM {databaseOwner}{objectQualifier}Tabs
		WHERE ParentId IS Null
	  
		UNION ALL
	  
		SELECT 
			T.TabID,
			Level + 1,
			CAST(TabPath + '//' + {databaseOwner}{objectQualifier}RemoveStringCharacters(TabName, '&? ') AS NVARCHAR(255))
		FROM {databaseOwner}{objectQualifier}Tabs T
		INNER JOIN RecursiveTabs R ON T.ParentId = R.TabID
	)

	SELECT     
		T.TabID, 
		T.TabOrder, 
		T.PortalID, 
		T.TabName, 
		T.ParentId, 
		R.[Level], 
		R.TabPath, 
		T.UniqueId, 
		T.VersionGuid, 
		T.DefaultLanguageGuid, 
		T.LocalizedVersionGuid, 
		T.IsVisible, 
		CASE WHEN LEFT(LOWER(T .IconFile), 7) = 'fileid=' THEN
			(SELECT Folder + FileName
				FROM {databaseOwner}{objectQualifier}Files
				WHERE fileid = CAST((RIGHT(LOWER(T.IconFile), Len(T.IconFile) - 7)) AS int)
			) ELSE T.IconFile 
			END AS IconFile, 
		CASE WHEN LEFT(LOWER(T .IconFileLarge), 7) = 'fileid=' THEN
			(SELECT Folder + FileName
				FROM  {databaseOwner}{objectQualifier}Files
				WHERE fileid = CAST((RIGHT(LOWER(T.IconFileLarge), Len(T.IconFileLarge) - 7)) AS int)
			) ELSE T.IconFileLarge
			END AS IconFileLarge, 
		T.DisableLink, 
		T.Title, 
		T.Description, 
		T.KeyWords, 
		T.IsDeleted, 
		T.SkinSrc, 
		T.ContainerSrc, 
		T.StartDate, 
		T.EndDate, 
		T.Url, 
		CASE WHEN EXISTS (SELECT 1 FROM {databaseOwner}{objectQualifier}Tabs T2 WHERE T2.ParentId = T.TabId) THEN 'true' ELSE 'false' END AS HasChildren, 
		T.RefreshInterval, 
		T.PageHeadText, 
		T.IsSecure, 
		T.PermanentRedirect, 
		T.SiteMapPriority, 
		CI.ContentItemID, 
		CI.[Content], 
		CI.ContentTypeID, 
		CI.ModuleID, 
		CI.ContentKey, 
		CI.Indexed, 
		T.CultureCode, 
		T.CreatedByUserID, 
		T.CreatedOnDate, 
		T.LastModifiedByUserID, 
		T.LastModifiedOnDate
	FROM  RecursiveTabs R 
		INNER JOIN {databaseOwner}{objectQualifier}Tabs AS T ON R.TabID = T.TabID
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}ContentItems AS CI ON T.ContentItemID = CI.ContentItemID

GO

/* Update AddTab Procedure */
/***************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}AddTab]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}AddTab]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddTab] 
    @ContentItemID			int,
    @PortalID				int,
    @TabOrder				int,
    @UniqueId				uniqueidentifier,
    @VersionGuid			uniqueidentifier,
    @DefaultLanguageGuid	uniqueidentifier,
    @LocalizedVersionGuid	uniqueidentifier,
    @TabName				nvarchar(50),
    @IsVisible				bit,
    @DisableLink			bit,
    @ParentId				int,
    @IconFile				nvarchar(100),
    @IconFileLarge			nvarchar(100),
    @Title					nvarchar(200),
    @Description			nvarchar(500),
    @KeyWords				nvarchar(500),
    @Url					nvarchar(255),
    @SkinSrc				nvarchar(200),
    @ContainerSrc			nvarchar(200),
    @StartDate				datetime,
    @EndDate				datetime,
    @RefreshInterval		int,
    @PageHeadText			nvarchar(500),
    @IsSecure				bit,
    @PermanentRedirect		bit,
    @SiteMapPriority		float,
    @CreatedByUserID		int,
    @CultureCode			nvarchar(50)

AS

    INSERT INTO {databaseOwner}{objectQualifier}Tabs (
        ContentItemID,
        PortalID,
        TabOrder,
        UniqueId,
        VersionGuid,
        DefaultLanguageGuid,
        LocalizedVersionGuid,
        TabName,
        IsVisible,
        DisableLink,
        ParentId,
        IconFile,
        IconFileLarge,
        Title,
        Description,
        KeyWords,
        IsDeleted,
        Url,
        SkinSrc,
        ContainerSrc,
        StartDate,
        EndDate,
        RefreshInterval,
        PageHeadText,
        IsSecure,
        PermanentRedirect,
        SiteMapPriority,
        CreatedByUserID,
        CreatedOnDate,
        LastModifiedByUserID,
        LastModifiedOnDate,
        CultureCode
    )
    VALUES (
        @ContentItemID,
        @PortalID,
        @TabOrder,
        @UniqueId,
        @VersionGuid,
        @DefaultLanguageGuid,
        @LocalizedVersionGuid,
        @TabName,
        @IsVisible,
        @DisableLink,
        @ParentId,
        @IconFile,
        @IconFileLarge,
        @Title,
        @Description,
        @KeyWords,
        0,
        @Url,
        @SkinSrc,
        @ContainerSrc,
        @StartDate,
        @EndDate,
        @RefreshInterval,
        @PageHeadText,
        @IsSecure,
        @PermanentRedirect,
        @SiteMapPriority,
        @CreatedByUserID,
        getdate(),
        @CreatedByUserID,
        getdate(),
        @CultureCode
    )

    SELECT SCOPE_IDENTITY()

GO

/* Update GetAllTabs Procedure */
/*******************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetAllTabs]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetAllTabs]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetAllTabs] 
AS
	SELECT *
		FROM {databaseOwner}{objectQualifier}vw_Tabs
		ORDER BY Level, ParentID, TabOrder
GO

/* Update GetTabPaths Procedure */
/*******************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetTabPaths]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetTabPaths]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabPaths] 
	@PortalID		int,
	@CultureCode	nvarchar(10)
AS
	SELECT
		TabID, 
		PortalID, 
		TabPath
	FROM {databaseOwner}{objectQualifier}vw_Tabs
	WHERE (PortalID = @PortalID AND (CultureCode = @CultureCode OR CultureCode Is Null))
		OR @PortalID Is NULL
GO

/* Update UpdateTabOrder Procedure */
/***********************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdateTabOrder]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateTabOrder]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateTabOrder] 
	@TabId					int,
	@TabOrder				int,
	@ParentId				int,
	@LastModifiedByUserID	int
AS

	UPDATE {databaseOwner}{objectQualifier}Tabs
		SET
			TabOrder				= @TabOrder,
			ParentId				= @ParentId,
			LastModifiedByUserID	= @LastModifiedByUserID,
			LastModifiedOnDate		= getdate()
	WHERE  TabId = @TabId
GO

/* Add AddTabBefore Procedure */
/******************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}AddTabBefore]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}AddTabBefore]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddTabBefore] 
	@BeforeTabID			int,
	@ContentItemID			int,
    @PortalID				int,
    @UniqueId				uniqueidentifier,
    @VersionGuid			uniqueidentifier,
    @DefaultLanguageGuid	uniqueidentifier,
    @LocalizedVersionGuid	uniqueidentifier,
    @TabName				nvarchar(50),
    @IsVisible				bit,
    @DisableLink			bit,
    @ParentId				int,
    @IconFile				nvarchar(100),
    @IconFileLarge			nvarchar(100),
    @Title					nvarchar(200),
    @Description			nvarchar(500),
    @KeyWords				nvarchar(500),
    @Url					nvarchar(255),
    @SkinSrc				nvarchar(200),
    @ContainerSrc			nvarchar(200),
    @StartDate				datetime,
    @EndDate				datetime,
    @RefreshInterval		int,
    @PageHeadText			nvarchar(500),
    @IsSecure				bit,
    @PermanentRedirect		bit,
    @SiteMapPriority		float,
    @CreatedByUserID		int,
    @CultureCode			nvarchar(50)

AS

	BEGIN
		DECLARE @TabId int
		DECLARE @TabOrder INT 
		SELECT @TabOrder = TabOrder FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @BeforeTabID
		
		-- Update TabOrders for all Tabs higher than @TabOrder
		UPDATE {databaseOwner}{objectQualifier}Tabs
			SET TabOrder = TabOrder + 2
			WHERE (ParentId = @ParentId OR (ParentId IS NULL AND @ParentID IS NULL))
				AND TabOrder >= @TabOrder
		
		-- Create Tab
		EXECUTE @TabId = {databaseOwner}{objectQualifier}AddTab 
							@ContentItemID,
							@PortalID,
							@TabOrder,
							@UniqueId,
							@VersionGuid,
							@DefaultLanguageGuid,
							@LocalizedVersionGuid,
							@TabName,
							@IsVisible,
							@DisableLink,
							@ParentId,
							@IconFile,
							@IconFileLarge,
							@Title,
							@Description,
							@KeyWords,
							@Url,
							@SkinSrc,
							@ContainerSrc,
							@StartDate,
							@EndDate,
							@RefreshInterval,
							@PageHeadText,
							@IsSecure,
							@PermanentRedirect,
							@SiteMapPriority,
							@CreatedByUserID,
							@CultureCode;
		
		-- Update Content Item
		UPDATE {databaseOwner}{objectQualifier}ContentItems
			SET TabID = @TabId
			WHERE ContentItemID = @ContentItemID

		SELECT @TabId
	END
GO

/* Add AddTabAfter Procedure */
/*****************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}AddTabAfter]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}AddTabAfter]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddTabAfter] 
	@AfterTabID				int,
	@ContentItemID			int,
    @PortalID				int,
    @UniqueId				uniqueidentifier,
    @VersionGuid			uniqueidentifier,
    @DefaultLanguageGuid	uniqueidentifier,
    @LocalizedVersionGuid	uniqueidentifier,
    @TabName				nvarchar(50),
    @IsVisible				bit,
    @DisableLink			bit,
    @ParentId				int,
    @IconFile				nvarchar(100),
    @IconFileLarge			nvarchar(100),
    @Title					nvarchar(200),
    @Description			nvarchar(500),
    @KeyWords				nvarchar(500),
    @Url					nvarchar(255),
    @SkinSrc				nvarchar(200),
    @ContainerSrc			nvarchar(200),
    @StartDate				datetime,
    @EndDate				datetime,
    @RefreshInterval		int,
    @PageHeadText			nvarchar(500),
    @IsSecure				bit,
    @PermanentRedirect		bit,
    @SiteMapPriority		float,
    @CreatedByUserID		int,
    @CultureCode			nvarchar(50)

AS

	BEGIN
		DECLARE @TabId int
		DECLARE @TabOrder INT 
		SET @TabOrder = (SELECT TabOrder FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @AfterTabID)
		
		-- Update TabOrders for all Tabs higher than @TabOrder
		UPDATE {databaseOwner}{objectQualifier}Tabs
			SET TabOrder = TabOrder + 2
			WHERE (ParentId = @ParentId OR (ParentId IS NULL AND @ParentID IS NULL))
				AND TabOrder > @TabOrder
		
		-- Create Tab
		SET @TabOrder = @TabOrder + 2
		EXECUTE @TabId = {databaseOwner}{objectQualifier}AddTab 
							@ContentItemID,
							@PortalID,
							@TabOrder,
							@UniqueId,
							@VersionGuid,
							@DefaultLanguageGuid,
							@LocalizedVersionGuid,
							@TabName,
							@IsVisible,
							@DisableLink,
							@ParentId,
							@IconFile,
							@IconFileLarge,
							@Title,
							@Description,
							@KeyWords,
							@Url,
							@SkinSrc,
							@ContainerSrc,
							@StartDate,
							@EndDate,
							@RefreshInterval,
							@PageHeadText,
							@IsSecure,
							@PermanentRedirect,
							@SiteMapPriority,
							@CreatedByUserID,
							@CultureCode;
		
		-- Update Content Item
		UPDATE {databaseOwner}{objectQualifier}ContentItems
			SET TabID = @TabId
			WHERE ContentItemID = @ContentItemID

		SELECT @TabId
	END
GO

/* Add AddTabToEnd Procedure */
/*****************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}AddTabToEnd]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}AddTabToEnd]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddTabToEnd] 
	@ContentItemID			int,
    @PortalID				int,
    @UniqueId				uniqueidentifier,
    @VersionGuid			uniqueidentifier,
    @DefaultLanguageGuid	uniqueidentifier,
    @LocalizedVersionGuid	uniqueidentifier,
    @TabName				nvarchar(50),
    @IsVisible				bit,
    @DisableLink			bit,
    @ParentId				int,
    @IconFile				nvarchar(100),
    @IconFileLarge			nvarchar(100),
    @Title					nvarchar(200),
    @Description			nvarchar(500),
    @KeyWords				nvarchar(500),
    @Url					nvarchar(255),
    @SkinSrc				nvarchar(200),
    @ContainerSrc			nvarchar(200),
    @StartDate				datetime,
    @EndDate				datetime,
    @RefreshInterval		int,
    @PageHeadText			nvarchar(500),
    @IsSecure				bit,
    @PermanentRedirect		bit,
    @SiteMapPriority		float,
    @CreatedByUserID		int,
    @CultureCode			nvarchar(50)

AS

	BEGIN
		DECLARE @TabId int
		DECLARE @TabOrder int 
		SET @TabOrder = (SELECT MAX(TabOrder) FROM {databaseOwner}{objectQualifier}Tabs WHERE (ParentId = @ParentId OR (ParentId IS NULL AND @ParentID IS NULL)))
		IF @TabOrder IS NULL
			SET @TabOrder = 1
		ELSE
			SET @TabOrder = @TabOrder + 2

		-- Create Tab
		EXECUTE @TabId = {databaseOwner}{objectQualifier}AddTab 
							@ContentItemID,
							@PortalID,
							@TabOrder,
							@UniqueId,
							@VersionGuid,
							@DefaultLanguageGuid,
							@LocalizedVersionGuid,
							@TabName,
							@IsVisible,
							@DisableLink,
							@ParentId,
							@IconFile,
							@IconFileLarge,
							@Title,
							@Description,
							@KeyWords,
							@Url,
							@SkinSrc,
							@ContainerSrc,
							@StartDate,
							@EndDate,
							@RefreshInterval,
							@PageHeadText,
							@IsSecure,
							@PermanentRedirect,
							@SiteMapPriority,
							@CreatedByUserID,
							@CultureCode;
		
		-- Update Content Item
		UPDATE {databaseOwner}{objectQualifier}ContentItems
			SET TabID = @TabId
			WHERE ContentItemID = @ContentItemID

		SELECT @TabId
	END
GO

/* Update DeleteTab Procedure */
/******************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteTab]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteTab]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteTab] 
	@TabId int
AS
	BEGIN
		DECLARE @TabOrder INT
		SET @TabOrder = (SELECT TabOrder FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @TabId)

		DECLARE @ParentID INT
		SET @ParentID = (SELECT ParentID FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @TabId)

		DECLARE @ContentItemID INT
		SET @ContentItemID = (SELECT ContentItemID FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @TabId)

		-- Delete Tab --
		DELETE FROM {databaseOwner}{objectQualifier}Tabs
			WHERE  TabId = @TabId

		-- Update TabOrder of remaining Tabs --
		UPDATE {databaseOwner}{objectQualifier}Tabs
			SET TabOrder = TabOrder - 2
			WHERE (ParentId = @ParentId OR (ParentId IS NULL AND @ParentID IS NULL))
				AND TabOrder > @TabOrder
			
		-- Delete Content Item --
		DELETE {databaseOwner}{objectQualifier}ContentItems
			WHERE ContentItemID = @ContentItemID
	END

GO

/* Add MoveTabAfter Procedure */
/******************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}MoveTabAfter]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}MoveTabAfter]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}MoveTabAfter] 
	@TabId					int,
	@AfterTabId				int,
	@LastModifiedByUserID	int
AS
	BEGIN
		DECLARE @OldParentId int
		DECLARE @NewParentId int
		
		SET @OldParentId = (SELECT ParentId FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @TabId)
		SET @NewParentId = (SELECT ParentId FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @AfterTabId)
		
		DECLARE @TabOrder int
		SET @TabOrder = (SELECT TabOrder FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @TabId)
		
		IF (@OldParentId <> @NewParentId OR NOT (@OldParentId IS NULL AND @NewParentId IS NULL))
			-- Parent has changed
			BEGIN
				-- update TabOrder of Tabs with same original Parent
				UPDATE {databaseOwner}{objectQualifier}Tabs
					SET TabOrder = TabOrder - 2
					WHERE (ParentId = @OldParentId OR (ParentId IS NULL AND @OldParentId IS NULL)) 
						AND TabOrder > @TabOrder

				-- Get TabOrder of AfterTab
				SET @TabOrder = (SELECT TabOrder FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @AfterTabId)
						
				-- update TabOrder of Tabs with same new Parent
				UPDATE {databaseOwner}{objectQualifier}Tabs
					SET TabOrder = TabOrder + 2
					WHERE (ParentId = @NewParentId OR (ParentId IS NULL AND @NewParentId IS NULL)) 
						AND TabOrder > @TabOrder

				-- Update Tab with new TabOrder
				UPDATE {databaseOwner}{objectQualifier}Tabs
					SET 
						ParentId				= @NewParentId,
						TabOrder				= @TabOrder + 2,
						LastModifiedByUserID	= @LastModifiedByUserID,
						LastModifiedOnDate		= getdate()					
					WHERE TabID = @TabId
				
			END
		ELSE
			-- Parent has not changed
			BEGIN
				-- Remove Tab from TabOrder
				UPDATE {databaseOwner}{objectQualifier}Tabs
					SET TabOrder = -1
					WHERE TabID = @TabId
					
				-- Reorder
				UPDATE {databaseOwner}{objectQualifier}Tabs
					SET TabOrder = TabOrder - 2
					WHERE (ParentId = @OldParentId OR (ParentId IS NULL AND @OldParentId IS NULL)) 
						AND TabOrder > @TabOrder
						AND TabId <> @TabId
						
				-- Get TabOrder of AfterTab
				SET @TabOrder = (SELECT TabOrder FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @AfterTabId)
										
				-- Reorder					
				UPDATE {databaseOwner}{objectQualifier}Tabs
					SET TabOrder = TabOrder + 2
					WHERE (ParentId = @OldParentId OR (ParentId IS NULL AND @OldParentId IS NULL)) 
						AND TabOrder > @TabOrder

				-- Update Tab with new TabOrder
				UPDATE {databaseOwner}{objectQualifier}Tabs
					SET 
						TabOrder				= @TabOrder + 2,
						LastModifiedByUserID	= @LastModifiedByUserID,
						LastModifiedOnDate		= getdate()					
					WHERE TabID = @TabId
			END			
	END

GO

/* Add MoveTabBefore Procedure */
/*******************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}MoveTabBefore]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}MoveTabBefore]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}MoveTabBefore] 
	@TabId					int,
	@BeforeTabId			int,
	@LastModifiedByUserID	int
AS
	BEGIN
		DECLARE @OldParentId int
		DECLARE @NewParentId int
		
		SET @OldParentId = (SELECT ParentId FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @TabId)
		SET @NewParentId = (SELECT ParentId FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @BeforeTabId)
		
		DECLARE @TabOrder int
		SET @TabOrder = (SELECT TabOrder FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @TabId)
		
		IF (@OldParentId <> @NewParentId OR NOT (@OldParentId IS NULL AND @NewParentId IS NULL))
			-- Parent has changed
			BEGIN
				-- update TabOrder of Tabs with same original Parent
				UPDATE {databaseOwner}{objectQualifier}Tabs
					SET TabOrder = TabOrder - 2
					WHERE (ParentId = @OldParentId OR (ParentId IS NULL AND @OldParentId IS NULL)) 
						AND TabOrder > @TabOrder

				-- Get TabOrder of AfterTab
				SET @TabOrder = (SELECT TabOrder FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @BeforeTabId)
						
				-- update TabOrder of Tabs with same new Parent
				UPDATE {databaseOwner}{objectQualifier}Tabs
					SET TabOrder = TabOrder + 2
					WHERE (ParentId = @NewParentId OR (ParentId IS NULL AND @NewParentId IS NULL)) 
						AND TabOrder >= @TabOrder

				-- Update Tab with new TabOrder
				UPDATE {databaseOwner}{objectQualifier}Tabs
					SET 
						ParentId				= @NewParentId,
						TabOrder				= @TabOrder,
						LastModifiedByUserID	= @LastModifiedByUserID,
						LastModifiedOnDate		= getdate()					
					WHERE TabID = @TabId
				
			END
		ELSE
			-- Parent has not changed
			BEGIN
				-- Remove Tab from TabOrder
				UPDATE {databaseOwner}{objectQualifier}Tabs
					SET TabOrder = -1
					WHERE TabID = @TabId
					
				-- Reorder
				UPDATE {databaseOwner}{objectQualifier}Tabs
					SET TabOrder = TabOrder - 2
					WHERE (ParentId = @OldParentId OR (ParentId IS NULL AND @OldParentId IS NULL)) 
						AND TabOrder > @TabOrder
						AND TabId <> @TabId
						
				-- Get TabOrder of BeforeTab
				SET @TabOrder = (SELECT TabOrder FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @BeforeTabId)
										
				-- Reorder					
				UPDATE {databaseOwner}{objectQualifier}Tabs
					SET TabOrder = TabOrder + 2
					WHERE (ParentId = @OldParentId OR (ParentId IS NULL AND @OldParentId IS NULL)) 
						AND TabOrder >= @TabOrder

				-- Update Tab with new TabOrder
				UPDATE {databaseOwner}{objectQualifier}Tabs
					SET 
						TabOrder				= @TabOrder,
						LastModifiedByUserID	= @LastModifiedByUserID,
						LastModifiedOnDate		= getdate()					
					WHERE TabID = @TabId
			END			
	END

GO

/* Add MoveTabToParent Procedure */
/*********************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}MoveTabToParent]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}MoveTabToParent]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}MoveTabToParent] 
	@TabId					int,
	@NewParentId			int,
	@LastModifiedByUserID	int
AS
	BEGIN
		DECLARE @OldParentId int
		SET @OldParentId = (SELECT ParentId FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @TabId)
		
		DECLARE @TabOrder int
		SET @TabOrder = (SELECT TabOrder FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @TabId)
		
		-- Get New TabOrder
		DECLARE @NewTabOrder int
		SET @NewTabOrder = (SELECT MAX(TabOrder) FROM {databaseOwner}{objectQualifier}Tabs WHERE (ParentId = @NewParentId OR (ParentId IS NULL AND @NewParentId IS NULL)))
		IF @NewTabOrder IS NULL 
			SET @NewTabOrder = 1
		ELSE
			SET @NewTabOrder = @NewTabOrder + 2			
				
		BEGIN
			-- update TabOrder of Tabs with same original Parent
			UPDATE {databaseOwner}{objectQualifier}Tabs
				SET TabOrder = TabOrder - 2
				WHERE (ParentId = @OldParentId OR (ParentId IS NULL AND @OldParentId IS NULL)) 
					AND TabOrder > @TabOrder

			-- Update Tab with new TabOrder
			UPDATE {databaseOwner}{objectQualifier}Tabs
				SET 
					ParentId				= @NewParentId,
					TabOrder				= @NewTabOrder,
					LastModifiedByUserID	= @LastModifiedByUserID,
					LastModifiedOnDate		= getdate()					
				WHERE TabID = @TabId
		END
	END
GO

/* Update UpdateTab Procedure */
/******************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdateTab]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateTab]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateTab] 
    @TabId					int,
    @ContentItemID			int,
    @PortalId				int,
    @VersionGuid			uniqueidentifier,
    @DefaultLanguageGuid	uniqueidentifier,
    @LocalizedVersionGuid	uniqueidentifier,
    @TabName				nvarchar(50),
    @IsVisible				bit,
    @DisableLink			bit,
    @ParentId				int,
    @IconFile				nvarchar(100),
    @IconFileLarge			nvarchar(100),
    @Title					nvarchar(200),
    @Description			nvarchar(500),
    @KeyWords				nvarchar(500),
    @IsDeleted				bit,
    @Url					nvarchar(255),
    @SkinSrc				nvarchar(200),
    @ContainerSrc			nvarchar(200),
    @StartDate				datetime,
    @EndDate				datetime,
    @RefreshInterval		int,
    @PageHeadText			nvarchar(500),
    @IsSecure				bit,
    @PermanentRedirect		bit,
    @SiteMapPriority		float,
    @LastModifiedByUserID	int,
    @CultureCode			nvarchar(50)

AS
	BEGIN
		DECLARE @OldParentId int
		SET @OldParentId = (SELECT ParentId FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @TabId)

		DECLARE @TabOrder int
		SET @TabOrder = (SELECT TabOrder FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @TabId)
				
		-- Get New TabOrder
		DECLARE @NewTabOrder int
		SET @NewTabOrder = (SELECT MAX(TabOrder) FROM {databaseOwner}{objectQualifier}Tabs WHERE (ParentId = @ParentId OR (ParentId IS NULL AND @ParentId IS NULL)))
		IF @NewTabOrder IS NULL 
			SET @NewTabOrder = 1
		ELSE
			SET @NewTabOrder = @NewTabOrder + 2
		
		UPDATE {databaseOwner}{objectQualifier}Tabs
			SET
				ContentItemID			= @ContentItemID,
				PortalId				= @PortalId,
				VersionGuid				= @VersionGuid,
				DefaultLanguageGuid		= @DefaultLanguageGuid,
				LocalizedVersionGuid	= @LocalizedVersionGuid,
				TabName					= @TabName,
				IsVisible				= @IsVisible,
				DisableLink				= @DisableLink,
				ParentId				= @ParentId,
				IconFile				= @IconFile,
				IconFileLarge			= @IconFileLarge,
				Title					= @Title,
				Description				= @Description,
				KeyWords				= @KeyWords,
				IsDeleted				= @IsDeleted,
				Url						= @Url,
				SkinSrc					= @SkinSrc,
				ContainerSrc			= @ContainerSrc,
				StartDate				= @StartDate,
				EndDate					= @EndDate,
				RefreshInterval			= @RefreshInterval,
				PageHeadText			= @PageHeadText,
				IsSecure				= @IsSecure,
				PermanentRedirect		= @PermanentRedirect,
				SiteMapPriority			= @SiteMapPriority,
				LastModifiedByUserID	= @LastModifiedByUserID,
				LastModifiedOnDate		= getdate(),
				CultureCode				= @CultureCode
		WHERE  TabId = @TabId
		
		IF (@OldParentId <> @ParentId)
			BEGIN
				-- update TabOrder of Tabs with same original Parent
				UPDATE {databaseOwner}{objectQualifier}Tabs
					SET TabOrder = TabOrder - 2
					WHERE (ParentId = @OldParentId) 
						AND TabOrder > @TabOrder

				-- Update Tab with new TabOrder
				UPDATE {databaseOwner}{objectQualifier}Tabs
					SET 
						TabOrder = @NewTabOrder
					WHERE TabID = @TabId
			END
    END
GO

/* Update LocalizeTab Procedure */
/********************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}LocalizeTab]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}LocalizeTab]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}LocalizeTab] 
	@TabId					int,
	@CultureCode			nvarchar(10),
	@LastModifiedByUserID	int
AS
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}Tabs
			SET 
				CultureCode				= @CultureCode,
				LastModifiedByUserID	= @LastModifiedByUserID,
				LastModifiedOnDate		= getdate()					
			WHERE TabID = @TabId
			
		UPDATE {databaseOwner}{objectQualifier}TabModules
			SET 
				CultureCode				= @CultureCode,
				LastModifiedByUserID	= @LastModifiedByUserID,
				LastModifiedOnDate		= getdate()					
			WHERE TabID = @TabId
	END
GO

--Schema creation for Relationships
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}RelationshipTypes]') AND type in (N'U'))
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}RelationshipTypes]
		(
			[RelationshipTypeID] [int] IDENTITY(1,1) NOT NULL,
			[Direction] [int] NOT NULL,
			[Name] [nvarchar](50) NOT NULL,
			[Description] [nvarchar](500) NULL,
			[CreatedByUserID] [int] NOT NULL,
			[CreatedOnDate] [datetime] CONSTRAINT [DF_{objectQualifier}RelationshipTypes_CreatedOnDate]  DEFAULT (getdate()) NOT NULL ,
			[LastModifiedByUserID] [int] NOT NULL,
			[LastModifiedOnDate] [datetime] CONSTRAINT [DF_{objectQualifier}RelationshipTypes_LastModifiedOnDate]  DEFAULT (getdate()) NOT NULL,
			CONSTRAINT [PK_{objectQualifier}RelationshipTypes] PRIMARY KEY CLUSTERED ( [RelationshipTypeID] ASC )
		)		
	END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Relationships]') AND type in (N'U'))
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}Relationships]
		(
			[RelationshipID] [int] IDENTITY(1,1) NOT NULL,
			[RelationshipTypeID] [int] NOT NULL,
			[Name] [nvarchar](50) NOT NULL,
			[Description] [nvarchar](500) NULL,			
			[PortalID] [int] NULL,
			[UserID] [int] NULL,
			[DefaultResponse] [int] NOT NULL,
			[CreatedByUserID] [int] NOT NULL,
			[CreatedOnDate] [datetime] CONSTRAINT [DF_{objectQualifier}Relationships_CreatedOnDate]  DEFAULT (getdate()) NOT NULL ,
			[LastModifiedByUserID] [int] NOT NULL,
			[LastModifiedOnDate] [datetime] CONSTRAINT [DF_{objectQualifier}Relationships_LastModifiedOnDate]  DEFAULT (getdate()) NOT NULL,
			CONSTRAINT [PK_{objectQualifier}Relationships] PRIMARY KEY CLUSTERED ( [RelationshipID] ASC )
		)		

		CREATE NONCLUSTERED INDEX [IX_{objectQualifier}Relationships_UserID] ON {databaseOwner}[{objectQualifier}Relationships] ([UserID] ASC)		
	
		ALTER TABLE {databaseOwner}[{objectQualifier}Relationships]  
			ADD CONSTRAINT [FK_{objectQualifier}Relationships_{objectQualifier}Portals] FOREIGN KEY([PortalID]) REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID]) ON DELETE CASCADE		
		ALTER TABLE {databaseOwner}[{objectQualifier}Relationships]  
			ADD CONSTRAINT [FK_{objectQualifier}Relationships_{objectQualifier}Users] FOREIGN KEY([UserID]) REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID]) ON DELETE CASCADE			
		ALTER TABLE {databaseOwner}[{objectQualifier}Relationships]  
			ADD CONSTRAINT [FK_{objectQualifier}Relationships_{objectQualifier}RelationshipTypes] FOREIGN KEY([RelationshipTypeID]) REFERENCES {databaseOwner}[{objectQualifier}RelationshipTypes] ([RelationshipTypeID]) ON DELETE CASCADE			
	END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UserRelationships]') AND type in (N'U'))
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}UserRelationships]
		(
			[UserRelationshipID] [int] IDENTITY(1,1) NOT NULL,
			[UserID] [int] NOT NULL,
			[RelatedUserID] [int] NOT NULL,
			[RelationshipID] [int] NOT NULL,
			[Status] [int] NOT NULL,
			[CreatedByUserID] [int] NOT NULL,
			[CreatedOnDate] [datetime] CONSTRAINT [DF_{objectQualifier}UserRelationships_CreatedOnDate]  DEFAULT (getdate()) NOT NULL ,
			[LastModifiedByUserID] [int] NOT NULL,
			[LastModifiedOnDate] [datetime] CONSTRAINT [DF_{objectQualifier}UserRelationships_LastModifiedOnDate]  DEFAULT (getdate()) NOT NULL,
			CONSTRAINT [PK_{objectQualifier}UserRelationships] PRIMARY KEY CLUSTERED ( [UserRelationshipID] ASC )
		)		

		CREATE UNIQUE NONCLUSTERED INDEX [IX_{objectQualifier}UserRelationships_UserID_RelatedUserID_RelationshipID] ON {databaseOwner}[{objectQualifier}UserRelationships] ([UserID] ASC, [RelatedUserID] ASC, [RelationshipID] ASC)
		CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UserRelationships_UserID] ON {databaseOwner}[{objectQualifier}UserRelationships] ([UserID] ASC)
		CREATE NONCLUSTERED INDEX [IX_{objectQualifier}UserRelationships_RelatedUserID] ON {databaseOwner}[{objectQualifier}UserRelationships] ([RelatedUserID] ASC)
		
		ALTER TABLE {databaseOwner}[{objectQualifier}UserRelationships]  
			ADD CONSTRAINT [FK_{objectQualifier}UserRelationships_{objectQualifier}Relationships] FOREIGN KEY([RelationshipID]) REFERENCES {databaseOwner}[{objectQualifier}Relationships] ([RelationshipID]) ON DELETE CASCADE		
		ALTER TABLE {databaseOwner}[{objectQualifier}UserRelationships]
			ADD CONSTRAINT [FK_{objectQualifier}UserRelationships_{objectQualifier}Users] FOREIGN KEY([UserID]) REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID]) 
		ALTER TABLE {databaseOwner}[{objectQualifier}UserRelationships]			
			ADD CONSTRAINT [FK_{objectQualifier}UserRelationships_{objectQualifier}Users_OnRelatedUser] FOREIGN KEY([RelationshipID]) REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID]) 
	END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UserRelationshipPreferences]') AND type in (N'U'))
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}UserRelationshipPreferences]
		(		
			[PreferenceID] [int] IDENTITY(1,1) NOT NULL,	
			[UserID] [int] NOT NULL,
			[RelationshipID] [int] NOT NULL,
			[DefaultResponse] [int] NOT NULL,
			[CreatedByUserID] [int] NOT NULL,
			[CreatedOnDate] [datetime] CONSTRAINT [DF_{objectQualifier}UserRelationshipPreferences_CreatedOnDate]  DEFAULT (getdate()) NOT NULL ,
			[LastModifiedByUserID] [int] NOT NULL,
			[LastModifiedOnDate] [datetime] CONSTRAINT [DF_{objectQualifier}UserRelationshipPreferences_LastModifiedOnDate]  DEFAULT (getdate()) NOT NULL,
			CONSTRAINT [PK_{objectQualifier}UserRelationshipPreferences] PRIMARY KEY CLUSTERED ( [PreferenceID] ASC, [RelationshipID] ASC )
		)				
		
		ALTER TABLE {databaseOwner}[{objectQualifier}UserRelationshipPreferences]  
			ADD CONSTRAINT [FK_{objectQualifier}UserRelationshipPreferences_{objectQualifier}Relationships] FOREIGN KEY([RelationshipID]) REFERENCES {databaseOwner}[{objectQualifier}Relationships] ([RelationshipID]) ON DELETE CASCADE		
		ALTER TABLE {databaseOwner}[{objectQualifier}UserRelationshipPreferences]
			ADD CONSTRAINT [FK_{objectQualifier}UserRelationshipPreferences_{objectQualifier}Users] FOREIGN KEY([UserID]) REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID]) 
	END
GO

-- Add rows to {databaseOwner}[{objectQualifier}RelationshipTypes
IF NOT EXISTS (SELECT * FROM {databaseOwner}[{objectQualifier}RelationshipTypes] WHERE [Name] = N'Friends')
    BEGIN
	    INSERT INTO {databaseOwner}[{objectQualifier}RelationshipTypes] ([Direction], [Name], [Description],[CreatedByUserID],[LastModifiedByUserID]) VALUES (2, N'Friends', N'Friends',-1,-1)
	END
GO
IF NOT EXISTS (SELECT * FROM {databaseOwner}[{objectQualifier}RelationshipTypes] WHERE [Name] = N'Followers')
    BEGIN
	    INSERT INTO {databaseOwner}[{objectQualifier}RelationshipTypes] ([Direction], [Name], [Description],[CreatedByUserID],[LastModifiedByUserID]) VALUES (1, N'Followers', N'Followers',-1,-1)
	END
GO

--CRUD SPs for RelationshipType
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetAllRelationshipTypes]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetAllRelationshipTypes]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetAllRelationshipTypes]
AS 
    SELECT  RelationshipTypeID,
            Direction,
            Name ,            
            Description,
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}RelationshipTypes    
	ORDER BY RelationshipTypeID ASC
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetRelationshipType]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetRelationshipType]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetRelationshipType] @RelationshipTypeID INT
AS 
    SELECT  RelationshipTypeID,
            Direction,
            Name ,            
            Description,
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}RelationshipTypes    
	WHERE RelationshipTypeID = @RelationshipTypeID
	ORDER BY RelationshipTypeID ASC    
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteRelationshipType]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteRelationshipType]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteRelationshipType] @RelationshipTypeID INT	
AS 
	BEGIN
		DELETE FROM {databaseOwner}{objectQualifier}RelationshipTypes  
			WHERE RelationshipTypeID = @RelationshipTypeID
	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SaveRelationshipType]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}SaveRelationshipType]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SaveRelationshipType]
    @RelationshipTypeID INT ,
    @Direction INT ,
    @Name NVARCHAR(50) ,
    @Description NVARCHAR(500) ,
    @UserID INT
AS 
    IF ( @RelationshipTypeID = -1 ) 
        BEGIN
            INSERT  {databaseOwner}{objectQualifier}RelationshipTypes
                    ( Direction,
                      Name ,            
                      Description,					
                      CreatedByUserID ,
                      CreatedOnDate ,
                      LastModifiedByUserID ,
                      LastModifiedOnDate
			        
                    )
            VALUES  ( @Direction , --  @Direction INT 
                      @Name , -- Name - nvarchar(50)
                      @Description , -- @Description NVARCHAR(500)
                      @UserID , -- CreatedBy - int
                      GETDATE() , -- CreatedOn - datetime
                      @UserID , -- LastModifiedBy - int
                      GETDATE() -- LastModifiedOn - datetime
			        
                    )
                    
            SELECT  @RelationshipTypeID = SCOPE_IDENTITY()
        END
    ELSE 
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}RelationshipTypes
            SET     Name = @Name ,
                    Direction = @Direction ,
                    Description = @Description ,
                    LastModifiedByUserID = @UserID ,
                    LastModifiedOnDate = GETDATE()
            WHERE   RelationshipTypeID = @RelationshipTypeID
        END
        
    SELECT  @RelationshipTypeID
GO

--CRUD SPs for Relationships

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetRelationship]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetRelationship]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetRelationship] @RelationshipID INT
AS 
    SELECT  RelationshipID,
            RelationshipTypeID,            
            Name,            
            Description,
            UserID,
            PortalID,
            DefaultResponse,
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}Relationships    
	WHERE RelationshipID = @RelationshipID
	ORDER BY RelationshipID ASC    
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetRelationshipsByUserID]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetRelationshipsByUserID]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetRelationshipsByUserID] @UserID INT
AS 
    SELECT  RelationshipID,
			RelationshipTypeID,            
            Name,            
            Description,
			UserID,
			PortalID,
			DefaultResponse,
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}Relationships    
	WHERE UserID = @UserID
	ORDER BY RelationshipID ASC    
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetRelationshipsByPortalID]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetRelationshipsByPortalID]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetRelationshipsByPortalID] @PortalID INT
AS 
    SELECT  RelationshipID,
			RelationshipTypeID,            
            Name,            
            Description,
			UserID,
			PortalID,
			DefaultResponse,
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}Relationships    
	WHERE PortalID = @PortalID AND UserID IS NULL
	ORDER BY RelationshipID ASC    
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteRelationship]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteRelationship]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteRelationship] @RelationshipID INT	
AS 
	BEGIN
		DELETE FROM {databaseOwner}{objectQualifier}Relationships  
			WHERE RelationshipID = @RelationshipID
	END
GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SaveRelationship]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}SaveRelationship]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SaveRelationship]
    @RelationshipID INT,
    @RelationshipTypeID INT,    
    @Name NVARCHAR(50),
    @Description NVARCHAR(500),
	@UserID INT,
	@PortalID INT,
	@DefaultResponse INT,
	@CreateUpdateUserID INT
    
AS 
    IF ( @RelationshipID = -1 ) 
        BEGIN
            INSERT  {databaseOwner}{objectQualifier}Relationships
                    ( RelationshipTypeID,
                      Name ,            
                      Description,					
					  UserID,
					  PortalID,		
					  DefaultResponse,			
                      CreatedByUserID ,
                      CreatedOnDate ,
                      LastModifiedByUserID ,
                      LastModifiedOnDate
			        
                    )
            VALUES  ( @RelationshipTypeID , -- @RelationshipTypeID INT
                      @Name , -- Name - nvarchar(50)
                      @Description , -- @Description NVARCHAR(500)
					  @UserID , -- @UserID int
					  @PortalID , -- @PortalID int
					  @DefaultResponse, -- @DefaultResponse int
                      @CreateUpdateUserID , -- CreatedBy - int
                      GETDATE() , -- CreatedOn - datetime
                      @CreateUpdateUserID , -- LastModifiedBy - int
                      GETDATE() -- LastModifiedOn - datetime
			        
                    )
                    
            SELECT  @RelationshipID = SCOPE_IDENTITY()
        END
    ELSE 
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}Relationships
            SET     Name = @Name ,                    
                    Description = @Description,
					RelationshipTypeID = @RelationshipTypeID,
					UserID = @UserID,
					PortalID = @PortalID,
					DefaultResponse = @DefaultResponse,
                    LastModifiedByUserID = @CreateUpdateUserID,
                    LastModifiedOnDate = GETDATE()
            WHERE   RelationshipID = @RelationshipID
        END
        
    SELECT  @RelationshipID
GO

--CRUD SPs for UserRelationships

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetUserRelationship]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationship]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationship] @UserRelationshipID INT
AS 
    SELECT  UserRelationshipID,
			UserID,
			RelatedUserID,
			RelationshipID,            
			Status,            
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}UserRelationships    
	WHERE UserRelationshipID = @UserRelationshipID
	ORDER BY UserRelationshipID ASC    
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetUserRelationshipsByMultipleIDs]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationshipsByMultipleIDs]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationshipsByMultipleIDs] 
	@UserID INT,
	@RelatedUserID INT,
	@RelationshipID INT,
	@Direction INT
AS 
	IF ( @Direction = 1 ) --OneWay
	  BEGIN
		SELECT  UserRelationshipID,
				UserID,
				RelatedUserID,
				RelationshipID,            
				Status,            
				CreatedByUserID ,
				CreatedOnDate ,
				LastModifiedByUserID ,
				LastModifiedOnDate
		FROM    {databaseOwner}{objectQualifier}UserRelationships    
		WHERE UserID = @UserID
		AND   RelatedUserID = @RelatedUserID
		AND   RelationshipID = @RelationshipID
		ORDER BY UserRelationshipID ASC    
	  END
	  ELSE IF ( @Direction = 2 ) --TwoWay
	  BEGIN
		SELECT  UserRelationshipID,
				UserID,
				RelatedUserID,
				RelationshipID,            
				Status,            
				CreatedByUserID ,
				CreatedOnDate ,
				LastModifiedByUserID ,
				LastModifiedOnDate
		FROM    {databaseOwner}{objectQualifier}UserRelationships    		
		WHERE (  (UserID = @UserID AND RelatedUserID = @RelatedUserID) 
			  OR (RelatedUserID = @UserID AND UserID = @RelatedUserID) --swap userids and check
			  )
		AND   RelationshipID = @RelationshipID
		ORDER BY UserRelationshipID ASC    
	  END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteUserRelationship]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteUserRelationship]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteUserRelationship] @UserRelationshipID INT	
AS 
	BEGIN
		DELETE FROM {databaseOwner}{objectQualifier}UserRelationships  
			WHERE UserRelationshipID = @UserRelationshipID
	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SaveUserRelationship]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}SaveUserRelationship]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SaveUserRelationship]
    @UserRelationshipID INT,
	@UserID INT,
	@RelatedUserID INT,
	@RelationshipID INT,
	@Status INT,
	@CreateUpdateUserID INT
    
AS 
    IF ( @UserRelationshipID = -1 ) 
        BEGIN
            INSERT  {databaseOwner}{objectQualifier}UserRelationships
                    ( UserID,
					  RelatedUserID,					
					  RelationshipID,
					  Status,
                      CreatedByUserID ,
                      CreatedOnDate ,
                      LastModifiedByUserID ,
                      LastModifiedOnDate
			        
                    )
            VALUES  ( @UserID , -- @UserID int
					  @RelatedUserID , -- @RelatedUserlID int
					  @RelationshipID, -- @RelationshipID int
					  @Status , -- @Status int
                      @CreateUpdateUserID , -- CreatedBy - int
                      GETDATE() , -- CreatedOn - datetime
                      @CreateUpdateUserID , -- LastModifiedBy - int
                      GETDATE() -- LastModifiedOn - datetime
			        
                    )
                    
            SELECT  @UserRelationshipID = SCOPE_IDENTITY()
        END
    ELSE 
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}UserRelationships
            SET     UserID = @UserID,
					RelatedUserID = @RelatedUserID,
					RelationshipID = @RelationshipID,
					Status = @Status,
                    LastModifiedByUserID = @CreateUpdateUserID,
                    LastModifiedOnDate = GETDATE()
            WHERE   UserRelationshipID = @UserRelationshipID
        END
        
    SELECT  @UserRelationshipID
GO

--CRUD SPs for UserRelationshipPreferences

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetUserRelationshipPreferenceByID]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationshipPreferenceByID]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationshipPreferenceByID] 
	@PreferenceID INT	
AS 
    SELECT  PreferenceID,
			UserID,
			RelationshipID,            
			DefaultResponse,            
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}UserRelationshipPreferences    
	WHERE @PreferenceID = @PreferenceID	  
	ORDER BY PreferenceID ASC
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetUserRelationshipPreference]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationshipPreference]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationshipPreference] 
	@UserID INT,
	@RelationshipID INT
AS 
    SELECT  PreferenceID,
			UserID,
			RelationshipID,            
			DefaultResponse,            
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}UserRelationshipPreferences    
	WHERE UserID = @UserID
	  AND RelationshipID = @RelationshipID
	ORDER BY UserID ASC, RelationshipID ASC
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteUserRelationshipPreference]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteUserRelationshipPreference]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteUserRelationshipPreference]
	@PreferenceID INT	
AS 
	BEGIN
		DELETE FROM {databaseOwner}{objectQualifier}UserRelationshipPreferences  
		WHERE PreferenceID = @PreferenceID

	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SaveUserRelationshipPreference]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}SaveUserRelationshipPreference]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SaveUserRelationshipPreference]
    @PreferenceID INT,
	@UserID INT,	
	@RelationshipID INT,
	@DefaultResponse INT,
	@CreateUpdateUserID INT
    
AS 
    IF ( @PreferenceID = -1 ) 
        BEGIN
            INSERT  {databaseOwner}{objectQualifier}UserRelationshipPreferences
                    ( UserID,					  
					  RelationshipID,
					  DefaultResponse,
                      CreatedByUserID ,
                      CreatedOnDate ,
                      LastModifiedByUserID ,
                      LastModifiedOnDate
			        
                    )
            VALUES  ( @UserID , -- @UserID int					  
					  @RelationshipID, -- @RelationshipID int
					  @DefaultResponse , -- @DefaultResponse int
                      @CreateUpdateUserID , -- CreatedBy - int
                      GETDATE() , -- CreatedOn - datetime
                      @CreateUpdateUserID , -- LastModifiedBy - int
                      GETDATE() -- LastModifiedOn - datetime
			        
                    )
                    
            SELECT  @PreferenceID = SCOPE_IDENTITY()
        END
    ELSE 
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}UserRelationshipPreferences
            SET     UserID = @UserID,					
					RelationshipID = @RelationshipID,
					DefaultResponse = @DefaultResponse,
                    LastModifiedByUserID = @CreateUpdateUserID,
                    LastModifiedOnDate = GETDATE()
            WHERE   PreferenceID = @PreferenceID
        END
        
    SELECT  @PreferenceID
        
GO

/* Add ReadOnly Column To ProfilePropertyDefinition Table */
/**********************************************************/

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME='{databaseOwner}{objectQualifier}ProfilePropertyDefinition' AND COLUMN_NAME='ReadOnly')
	BEGIN
		-- Add new Column
		ALTER TABLE {databaseOwner}{objectQualifier}ProfilePropertyDefinition
			ADD ReadOnly bit CONSTRAINT [DF_{objectQualifier}ProfilePropertyDefinition_ReadOnly]  DEFAULT (0) NOT NULL
	END
GO

/* Update AddPropertyDefinition Procedure */
/******************************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}AddPropertyDefinition]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}AddPropertyDefinition]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddPropertyDefinition]
	@PortalId int,
	@ModuleDefId int,
	@DataType int,
	@DefaultValue nvarchar(max),
	@PropertyCategory nvarchar(50),
	@PropertyName nvarchar(50),
	@ReadOnly bit,
	@Required bit,
	@ValidationExpression nvarchar(2000),
	@ViewOrder int,
	@Visible bit,
    @Length int,
    @DefaultVisibility int,
	@CreatedByUserID int

AS
	DECLARE @PropertyDefinitionId int

	SELECT @PropertyDefinitionId = PropertyDefinitionId
		FROM   {databaseOwner}{objectQualifier}ProfilePropertyDefinition
		WHERE  (PortalId = @PortalId OR (PortalId IS NULL AND @PortalId IS NULL))
			AND PropertyName = @PropertyName
			
	IF @vieworder=-1
		BEGIN
			SELECT	@vieworder = MAX(ViewOrder) + 1 
			FROM	{databaseOwner}{objectQualifier}ProfilePropertyDefinition
		END

	IF @PropertyDefinitionId IS NULL
		BEGIN
			INSERT {databaseOwner}{objectQualifier}ProfilePropertyDefinition	(
					PortalId,
					ModuleDefId,
					Deleted,
					DataType,
					DefaultValue,
					PropertyCategory,
					PropertyName,
					ReadOnly,
					Required,
					ValidationExpression,
					ViewOrder,
					Visible,
					Length,
                    DefaultVisibility,
					[CreatedByUserID],
					[CreatedOnDate],
					[LastModifiedByUserID],
					[LastModifiedOnDate]

				)
				VALUES	(
					@PortalId,
					@ModuleDefId,
					0,
					@DataType,
					@DefaultValue,
					@PropertyCategory,
					@PropertyName,
					@ReadOnly,
					@Required,
					@ValidationExpression,
					@ViewOrder,
					@Visible,
					@Length,
                    @DefaultVisibility,
					@CreatedByUserID,
  					getdate(),
  					@CreatedByUserID,
  					getdate()
				)

			SELECT @PropertyDefinitionId = SCOPE_IDENTITY()
		END
	ELSE
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}ProfilePropertyDefinition 
				SET DataType = @DataType,
					ModuleDefId = @ModuleDefId,
					DefaultValue = @DefaultValue,
					PropertyCategory = @PropertyCategory,
					ReadOnly = @ReadOnly,
					Required = @Required,
					ValidationExpression = @ValidationExpression,
					ViewOrder = @ViewOrder,
					Deleted = 0,
					Visible = @Visible,
					Length = @Length,
                    DefaultVisibility = @DefaultVisibility,
					[LastModifiedByUserID] = @CreatedByUserID,	
					[LastModifiedOnDate] = getdate()
				WHERE PropertyDefinitionId = @PropertyDefinitionId
		END
		
	SELECT @PropertyDefinitionId
GO

/* Update UpdatePropertyDefinition Procedure */
/*********************************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdatePropertyDefinition]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdatePropertyDefinition]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdatePropertyDefinition]
	@PropertyDefinitionId int,
	@DataType int,
	@DefaultValue nvarchar(50),
	@PropertyCategory nvarchar(50),
	@PropertyName nvarchar(50),
	@ReadOnly bit,
	@Required bit,
	@ValidationExpression nvarchar(2000),
	@ViewOrder int,
	@Visible bit,
    @Length int,
    @DefaultVisibility int,
	@LastModifiedByUserID	int

AS
	UPDATE {databaseOwner}{objectQualifier}ProfilePropertyDefinition 
		SET DataType = @DataType,
			DefaultValue = @DefaultValue,
			PropertyCategory = @PropertyCategory,
			PropertyName = @PropertyName,
			ReadOnly = @ReadOnly,
			Required = @Required,
			ValidationExpression = @ValidationExpression,
			ViewOrder = @ViewOrder,
			Visible = @Visible,
			Length = @Length,
            DefaultVisibility = @DefaultVisibility,
			[LastModifiedByUserID] = @LastModifiedByUserID,	
			[LastModifiedOnDate] = getdate()
		WHERE PropertyDefinitionId = @PropertyDefinitionId
GO

/* Add objects for CoreMessaging messaging */
/*************************************/

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypes]') AND type in (N'U')) BEGIN
	CREATE TABLE {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypes](
		[NotificationTypeID] [int] IDENTITY(1,1) NOT NULL,
		[Name] [nvarchar](100) NOT NULL,
		[Description] [nvarchar](2000) NULL,
		[TTL] [int] NULL,
		[DesktopModuleID] [int] NULL,
		[CreatedByUserID] [int] NULL,
		[CreatedOnDate] [datetime] NULL,
		[LastModifiedByUserID] [int] NULL,
		[LastModifiedOnDate] [datetime] NULL,
		CONSTRAINT [PK_{objectQualifier}CoreMessaging_NotificationTypes] PRIMARY KEY CLUSTERED ([NotificationTypeID] ASC)
	)

	CREATE UNIQUE NONCLUSTERED INDEX [IX_{objectQualifier}CoreMessaging_NotificationTypes] ON {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypes] ([Name] ASC)

	ALTER TABLE {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypes]
	ADD CONSTRAINT [FK_{objectQualifier}CoreMessaging_NotificationTypes_{objectQualifier}DesktopModules]
	FOREIGN KEY([DesktopModuleID])
	REFERENCES {databaseOwner}[{objectQualifier}DesktopModules] ([DesktopModuleID])
END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypeActions]') AND type in (N'U')) BEGIN
	CREATE TABLE {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypeActions](
		[NotificationTypeActionID] [int] IDENTITY(1,1) NOT NULL,
		[NotificationTypeID] [int] NOT NULL,
		[NameResourceKey] [nvarchar](100) NOT NULL,
		[DescriptionResourceKey] [nvarchar](100) NULL,
		[ConfirmResourceKey] [nvarchar](100) NULL,
		[Order] [int] NOT NULL,
		[APICall] [nvarchar](500) NOT NULL,
		[CreatedByUserID] [int] NULL,
		[CreatedOnDate] [datetime] NULL,
		[LastModifiedByUserID] [int] NULL,
		[LastModifiedOnDate] [datetime] NULL,
		CONSTRAINT [PK_{objectQualifier}CoreMessaging_NotificationTypeActions] PRIMARY KEY CLUSTERED ([NotificationTypeActionID] ASC)
	)

	ALTER TABLE {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypeActions]
	ADD CONSTRAINT [FK_{objectQualifier}CoreMessaging_NotificationTypeActions_{objectQualifier}CoreMessaging_NotificationTypes]
	FOREIGN KEY([NotificationTypeID])
	REFERENCES {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypes] ([NotificationTypeID])

	CREATE NONCLUSTERED INDEX [IX_{objectQualifier}CoreMessaging_NotificationTypeActions] ON {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypeActions] ([NotificationTypeID] ASC)
END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_Messages]') AND type in (N'U')) BEGIN
	CREATE TABLE {databaseOwner}{objectQualifier}CoreMessaging_Messages(
		[MessageID] [int] IDENTITY(1,1) NOT NULL,
		[PortalID] [int] NULL,
		[NotificationTypeID] int NULL,
		[To] [nvarchar](2000) NULL,
		[From] [nvarchar](200) NULL,
		[Subject] [nvarchar](400) NULL,
		[Body] [nvarchar](max) NULL,
		[ConversationID] [int] NULL,
		[ReplyAllAllowed] [bit] NULL,
		[SenderUserID] [int] NULL,
		[ExpirationDate] [datetime] NULL,
        [Context] [nvarchar](200) NULL,
        [IncludeDismissAction] [bit] NULL,
		[CreatedByUserID] [int] NULL,
		[CreatedOnDate] [datetime] NULL,
		[LastModifiedByUserID] [int] NULL,
		[LastModifiedOnDate] [datetime] NULL,
		CONSTRAINT [PK_{objectQualifier}CoreMessaging_Messages] PRIMARY KEY CLUSTERED ([MessageID] ASC)
	)

	CREATE NONCLUSTERED INDEX [IX_{objectQualifier}CoreMessaging_Messages_SenderUserID] ON {databaseOwner}[{objectQualifier}CoreMessaging_Messages] ([SenderUserID] ASC, [CreatedOnDate] DESC)

	ALTER TABLE {databaseOwner}[{objectQualifier}CoreMessaging_Messages]
	ADD CONSTRAINT [FK_{objectQualifier}CoreMessaging_Messages_{objectQualifier}CoreMessaging_NotificationTypes]
	FOREIGN KEY([NotificationTypeID])
	REFERENCES {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypes] ([NotificationTypeID])
END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients]') AND type in (N'U')) BEGIN
	CREATE TABLE {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients(
		[RecipientID] [int] IDENTITY(1,1) NOT NULL,
		[MessageID] [int] NOT NULL,
		[UserID] [int] NOT NULL,
		[Read] [bit] NOT NULL DEFAULT 0,
		[Archived] [bit] NOT NULL DEFAULT 0,
		[EmailSent] [bit] NOT NULL DEFAULT 0,
		[EmailSentDate] [datetime] NULL,
		[EmailSchedulerInstance] [uniqueidentifier] NULL,
		[CreatedByUserID] [int] NULL,
		[CreatedOnDate] [datetime] NULL,
		[LastModifiedByUserID] [int] NULL,
		[LastModifiedOnDate] [datetime] NULL,
		CONSTRAINT [PK_{objectQualifier}CoreMessaging_MessageRecipients] PRIMARY KEY CLUSTERED ([RecipientID] ASC)
	)

	CREATE NONCLUSTERED INDEX [IX_{objectQualifier}CoreMessaging_MessageRecipients_UserID] ON {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] ([UserID] ASC, [Read] DESC, [Archived] ASC)

	ALTER TABLE {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients]
	ADD CONSTRAINT [FK_{objectQualifier}CoreMessaging_MessageRecipients_{objectQualifier}CoreMessaging_Messages]
	FOREIGN KEY([MessageID])
	REFERENCES {databaseOwner}[{objectQualifier}CoreMessaging_Messages] ([MessageID]) ON DELETE CASCADE
END
GO

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_MessageAttachments]') AND type in (N'U')) BEGIN
	CREATE TABLE {databaseOwner}{objectQualifier}CoreMessaging_MessageAttachments(
		[MessageAttachmentID] [int] IDENTITY(1,1) NOT NULL,
		[MessageID] [int] NOT NULL,
		[FileID] [int] NULL,
		[CreatedByUserID] [int] NULL,
		[CreatedOnDate] [datetime] NULL,
		[LastModifiedByUserID] [int] NULL,
		[LastModifiedOnDate] [datetime] NULL,
		CONSTRAINT [PK_{objectQualifier}CoreMessaging_MessageAttachments] PRIMARY KEY CLUSTERED ([MessageAttachmentID] ASC)
	)

	CREATE NONCLUSTERED INDEX [IX_{objectQualifier}CoreMessaging_MessageAttachments_MessageID] ON {databaseOwner}[{objectQualifier}CoreMessaging_MessageAttachments] ([MessageID] ASC)

	ALTER TABLE {databaseOwner}[{objectQualifier}CoreMessaging_MessageAttachments]
	ADD CONSTRAINT [FK_{objectQualifier}CoreMessaging_MessageAttachments_{objectQualifier}CoreMessaging_Messages]
	FOREIGN KEY([MessageID])
	REFERENCES {databaseOwner}[{objectQualifier}CoreMessaging_Messages] ([MessageID]) ON DELETE CASCADE
END
GO

--CRUD for CoreMessaging_Messages

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_SaveMessage]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_SaveMessage]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_SaveMessage]
    @MessageID INT,
	@PortalID INT,
	@To nvarchar(2000),
	@From nvarchar(200),
    @Subject nvarchar(400),
    @Body nvarchar(max),
    @ConversationID int,
    @ReplyAllAllowed bit,
    @SenderUserID int,
	@CreateUpdateUserID INT
    
AS 
    IF ( @MessageID = -1 ) 
        BEGIN
            INSERT {databaseOwner}{objectQualifier}CoreMessaging_Messages(                    
  					[PortalID],
					[To],
					[From],					
					[Subject],
					[Body],
					[ConversationID],
					[ReplyAllAllowed],
					[SenderUserID],
                    [CreatedByUserID],
                    [CreatedOnDate],
                    [LastModifiedByUserID],
                    [LastModifiedOnDate]			        
                    )
            VALUES  (       
     			    @PortalID,
					@To,
					@From,
				    @Subject,			
					@Body,
					NULL,
					@ReplyAllAllowed,
					@SenderUserID,
                    @CreateUpdateUserID , -- CreatedBy - int
                    GETUTCDATE(), -- CreatedOn - datetime
                    @CreateUpdateUserID , -- LastModifiedBy - int
                    GETDATE() -- LastModifiedOn - datetime			        
                    )
                    
            SELECT  @MessageID = SCOPE_IDENTITY()
			UPDATE  {databaseOwner}{objectQualifier}CoreMessaging_Messages SET [ConversationID] = @MessageID WHERE [MessageID] = @MessageID 
        END
    ELSE 
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}CoreMessaging_Messages
            SET     [To] = @To,
					[From] = @From,
					[Subject] = @Subject,			
					[Body] = @Body,
					[ConversationID] = @ConversationID,
					[ReplyAllAllowed] = @ReplyAllAllowed,
					[SenderUserID] = SenderUserID,
                    LastModifiedByUserID = @CreateUpdateUserID,
                    LastModifiedOnDate = GETDATE()
            WHERE   MessageID = @MessageID
        END
        
    SELECT  @MessageID
        
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_GetMessage]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetMessage]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetMessage]
    @MessageID INT
AS 
	SELECT [MessageID], [To], [From], [Subject], [Body], [ConversationID], [ReplyAllAllowed], [SenderUserID], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate] 
	FROM   {databaseOwner}[{objectQualifier}CoreMessaging_Messages] 
	WHERE  [MessageID] = @MessageID 

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_GetMessagesBySender]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetMessagesBySender]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetMessagesBySender]
    @SenderUserID INT,
	@PortalID INT
AS
BEGIN
	SELECT [MessageID], [To], [From], [Subject], [Body], [ConversationID], [ReplyAllAllowed], [SenderUserID], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate] 
	FROM   {databaseOwner}[{objectQualifier}CoreMessaging_Messages] 
	WHERE  [SenderUserID] = @SenderUserID AND [PortalID] = @PortalID
	AND [NotificationTypeID] IS NULL
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_DeleteMessage]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_DeleteMessage]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_DeleteMessage]
	@MessageID int
AS
	DELETE FROM {databaseOwner}{objectQualifier}CoreMessaging_Messages
	WHERE  [MessageID] = @MessageID
GO

--CRUD for CoreMessaging_MessageRecipients

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_SaveMessageRecipient]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_SaveMessageRecipient]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_SaveMessageRecipient]
    @RecipientID int,
    @MessageID int,
    @UserID int,
    @Read bit,
	@Archived bit,
	@CreateUpdateUserID INT
AS
BEGIN
    IF ( @RecipientID = -1 )
        BEGIN
            INSERT {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients(
					[MessageID],
					[UserID],
					[Read],
					[Archived],
                    [CreatedByUserID],
                    [CreatedOnDate],
                    [LastModifiedByUserID],
                    [LastModifiedOnDate]
                    )
            VALUES  (
					@MessageID,
					@UserID,
					@Read,
					@Archived,
                    @CreateUpdateUserID , -- CreatedBy - int
                    GETDATE(), -- CreatedOn - datetime
                    @CreateUpdateUserID , -- LastModifiedBy - int
                    GETDATE() -- LastModifiedOn - datetime
                    )

            SELECT  @RecipientID = SCOPE_IDENTITY()
        END
    ELSE
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients
            SET     [MessageID] = @MessageID,
					[UserID] = @UserID,
					[Read] = @Read,
					[Archived] = @Archived,
                    LastModifiedByUserID = @CreateUpdateUserID,
                    LastModifiedOnDate = GETDATE()
            WHERE   RecipientID = @RecipientID
        END

    SELECT  @RecipientID
END
GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_CreateMessageRecipientsForRole]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CreateMessageRecipientsForRole]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CreateMessageRecipientsForRole]
    @MessageID int,         -- message id
    @RoleIDs nvarchar(max), -- comma separated list of RoleIds
	@CreateUpdateUserID INT -- create / update user id
AS
BEGIN    
    ;WITH CTE_RoleIDs(RowNumber, RowValue)
    AS
    (
	SELECT * FROM {databaseOwner}{objectQualifier}ConvertListToTable(',', @RoleIDs)
    ),
	CTE_DistinctUserIDs(UserID)
    AS
    (
  		SELECT DISTINCT UserID
	    FROM {databaseOwner}{objectQualifier}vw_UserRoles ur
        INNER JOIN CTE_RoleIDs cr ON ur.RoleID = cr.RowValue
    )

    INSERT {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients(
			[MessageID],
			[UserID],
			[Read],
			[Archived],
            [CreatedByUserID],
            [CreatedOnDate],
            [LastModifiedByUserID],
            [LastModifiedOnDate]
            )
			SELECT
			  @MessageID,
			  UserID,
			  0,
			  0,
              @CreateUpdateUserID , -- CreatedBy - int
              GETDATE(), -- CreatedOn - datetime
              @CreateUpdateUserID , -- LastModifiedBy - int
              GETDATE() -- LastModifiedOn - datetime
           FROM CTE_DistinctUserIDs
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_CreateMessageReply]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CreateMessageReply]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CreateMessageReply]
    @ConversationID    INT,           -- parent message id
	@PortalID			INT,			--portalID of message
    @Body               nvarchar(max), -- message body
    @SenderUserID       INT,           -- create / update user id
    @From               nvarchar(200), -- message from
	@CreateUpdateUserID INT            -- create / update user id
AS
    DECLARE @ReplyAllAllowed BIT
    DECLARE @NewMessageID INT
    DECLARE @OriginalSenderUserID INT
    DECLARE @OriginalTo nvarchar(2000)
    DECLARE @OriginalSubject nvarchar(400)

	--Was Sender a Recipient in the Original Message.
	SELECT @ReplyAllAllowed = [ReplyAllAllowed],
	       @OriginalSenderUserID = [SenderUserID],
		   @OriginalTo = [TO],
		   @OriginalSubject = [Subject]
	FROM {databaseOwner}{objectQualifier}CoreMessaging_Messages m
	INNER JOIN {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients mr ON m.MessageID = mr.MessageID
	AND m.MessageID = @ConversationID
	AND mr.UserID = @SenderUserID

	--Reply can only be create if Sender was Recipient of Orginial message
	IF @ReplyAllAllowed IS NULL
	BEGIN
		SELECT -1
		RETURN
	END

	--Create new message
	INSERT {databaseOwner}{objectQualifier}CoreMessaging_Messages(
					[PortalID],
  					[To],
					[From],
					[Subject],
					[Body],
					[ConversationID],
					[ReplyAllAllowed],
					[SenderUserID],
                    [CreatedByUserID],
                    [CreatedOnDate],
                    [LastModifiedByUserID],
                    [LastModifiedOnDate]
                    )
            VALUES  (
					@PortalID,
     			    @OriginalTo,
					@From,
				    @OriginalSubject,
					@Body,
					@ConversationID,
					@ReplyAllAllowed,
					@SenderUserID,
                    @CreateUpdateUserID , -- CreatedBy - int
                    GETUTCDATE() , -- CreatedOn - datetime
                    @CreateUpdateUserID , -- LastModifiedBy - int
                    GETDATE() -- LastModifiedOn - datetime
                    )

	SELECT @NewMessageID = SCOPE_IDENTITY()

	IF (@ReplyAllAllowed = 0) --original message was sent to a Role, reply will be sent to the original sender only
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients
		        ( [MessageID],
		          [UserID],
		          [Read],
		          [Archived],
		          CreatedByUserID,
		          CreatedOnDate,
		          LastModifiedByUserID,
		          LastModifiedOnDate
		        )
		VALUES  ( @NewMessageID, -- MessageID - int
		          @OriginalSenderUserID, -- UserID - int
		          0, -- Read - bit
		          0, -- Archived - bit
		          @CreateUpdateUserID , -- CreatedByUserID - int
		          GETDATE() , -- CreatedOnDate - datetime
		          @CreateUpdateUserID , -- LastModifiedByUserID - int
		          GETDATE()  -- LastModifiedOnDate - datetime
		        )
	END
	ELSE --Reply should be sent to all the original Recipients
	BEGIN
		INSERT {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients(
			[MessageID],
			[UserID],
			[Read],
			[Archived],
            [CreatedByUserID],
            [CreatedOnDate],
            [LastModifiedByUserID],
            [LastModifiedOnDate]
            )
			SELECT
			  @NewMessageID,
			  UserID,
			  0,
			  0,
              @CreateUpdateUserID , -- CreatedBy - int
              GETDATE() , -- CreatedOn - datetime
              @CreateUpdateUserID , -- LastModifiedBy - int
              GETDATE() -- LastModifiedOn - datetime
           FROM {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients
           WHERE MessageID = @ConversationID
	END

	SELECT  @NewMessageID
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_GetMessageRecipient]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetMessageRecipient]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetMessageRecipient]
    @RecipientID INT
AS
	SELECT [RecipientID], [MessageID], [UserID], [Read], [Archived], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate]
	FROM   {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients
	WHERE  [RecipientID] = @RecipientID
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_GetMessageRecipientsByUser]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetMessageRecipientsByUser]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetMessageRecipientsByUser]
    @UserID INT
AS
	SELECT [RecipientID], [MessageID], [UserID], [Read], [Archived], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate]
	FROM   {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients
	WHERE  [UserID] = @UserID
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_GetMessageRecipientsByMessage]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetMessageRecipientsByMessage]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetMessageRecipientsByMessage]
    @MessageID INT
AS
	SELECT [RecipientID], [MessageID], [UserID], [Read], [Archived], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate]
	FROM   {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients
	WHERE  [MessageID] = @MessageID
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_GetMessageRecipientsByMessageAndUser]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetMessageRecipientsByMessageAndUser]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetMessageRecipientsByMessageAndUser]
    @MessageID INT,
    @UserID INT
AS
	SELECT [RecipientID], [MessageID], [UserID], [Read], [Archived], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate]
	FROM   {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients
	WHERE  [MessageID] = @MessageID
	AND   [UserID] = @UserID
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_DeleteMessageRecipient]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_DeleteMessageRecipient]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_DeleteMessageRecipient]
    @RecipientID int
AS
	DELETE FROM {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients
	WHERE  [RecipientID] = @RecipientID
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_DeleteMessageRecipientByMessageAndUser]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_DeleteMessageRecipientByMessageAndUser]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_DeleteMessageRecipientByMessageAndUser]
    @MessageID int,
    @UserID int
AS
BEGIN
	DELETE
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients]
	WHERE [MessageID] = @MessageID AND [UserID] = @UserID
END
GO

--CRUD for CoreMessaging_MessageAttachments

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_SaveMessageAttachment]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_SaveMessageAttachment]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_SaveMessageAttachment]
    @MessageAttachmentID int,
    @MessageID int,
    @FileID int,
	@CreateUpdateUserID INT
AS
    IF ( @MessageAttachmentID = -1 )
        BEGIN
            INSERT {databaseOwner}{objectQualifier}CoreMessaging_MessageAttachments(
					[FileID],
					[MessageID],
                    [CreatedByUserID],
                    [CreatedOnDate],
                    [LastModifiedByUserID],
                    [LastModifiedOnDate]
                    )
            VALUES  (
					@FileID,
					@MessageID,
                    @CreateUpdateUserID , -- CreatedBy - int
                    GETDATE() , -- CreatedOn - datetime
                    @CreateUpdateUserID , -- LastModifiedBy - int
                    GETDATE() -- LastModifiedOn - datetime
                    )

            SELECT  @MessageAttachmentID = SCOPE_IDENTITY()
        END
    ELSE
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}CoreMessaging_MessageAttachments
            SET     [FileID] = @FileID,
					[MessageID] = @MessageID,
                    LastModifiedByUserID = @CreateUpdateUserID,
                    LastModifiedOnDate = GETDATE()
            WHERE   MessageAttachmentID = @MessageAttachmentID
        END

    SELECT  @MessageAttachmentID
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_GetMessageAttachment]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetMessageAttachment]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetMessageAttachment]
    @MessageAttachmentID INT
AS
	SELECT [MessageID], [FileID], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate]
	FROM   {databaseOwner}{objectQualifier}CoreMessaging_MessageAttachments
	WHERE  [MessageAttachmentID] = @MessageAttachmentID
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_GetMessageAttachmentsByMessage]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetMessageAttachmentsByMessage]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetMessageAttachmentsByMessage]
    @MessageID INT
AS
	SELECT [MessageID], [FileID], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate]
	FROM   {databaseOwner}{objectQualifier}CoreMessaging_MessageAttachments
	WHERE  [MessageID] = @MessageID
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_DeleteMessageAttachment]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_DeleteMessageAttachment]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_DeleteMessageAttachment]
    @MessageAttachmentID int
AS
	DELETE FROM {databaseOwner}{objectQualifier}CoreMessaging_MessageAttachments
	WHERE  [MessageAttachmentID] = @MessageAttachmentID
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_DeleteLegacyMessage]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_DeleteLegacyMessage]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_DeleteLegacyMessage]
    @MessageID int
AS
	DELETE FROM {databaseOwner}{objectQualifier}Messaging_Messages
	WHERE  [MessageID] = @MessageID
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_CountLegacyMessages]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CountLegacyMessages]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CountLegacyMessages]    
AS
	--Return total records
	SELECT COUNT(*) AS TotalRecords
	FROM {databaseOwner}[{objectQualifier}Messaging_Messages]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_ConvertLegacyMessages]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_ConvertLegacyMessages]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_ConvertLegacyMessages]    
	@PageIndex       int,
	@PageSize        int
AS

-- Set the page bounds
DECLARE @PageLowerBound INT, @PageUpperBound INT;

SET @PageLowerBound =  (@PageIndex * @PageSize) + 1
SET @PageUpperBound =  (@PageIndex * @PageSize) + @PageSize

	DECLARE @MessageID bigint	
	DECLARE @PortalID INT
	DECLARE @FromUserName nvarchar(50)
	DECLARE @FromUserID INT
	DECLARE @ToUserName nvarchar(50)
	DECLARE @ToUserID int
	DECLARE @Status tinyint
	DECLARE @Subject nvarchar(max)
	DECLARE @Body nvarchar(max)
	DECLARE @Date datetime
	DECLARE @EmailSent bit
	DECLARE @EmailSentDate datetime
	DECLARE @EmailSchedulerInstance UNIQUEIDENTIFIER
	DECLARE @RowNumber INT
	
	DECLARE @NewMessageID int	
	DECLARE @Counter int		

	DECLARE MessageList cursor FAST_FORWARD for

	WITH messageItems  AS
	(
		SELECT  [MessageID], [PortalID],[FromUserName],[FromUserID], [ToUserName], [ToUserID], [Status], [Subject], [Body], [Date], [EmailSent], [EmailSentDate], [EmailSchedulerInstance] 
				,ROW_NUMBER() OVER(ORDER BY MessageID ASC) AS RowNumber
		FROM	{databaseOwner}[{objectQualifier}Messaging_Messages]
	)
	
	SELECT * from messageItems where RowNumber BETWEEN @PageLowerBound AND @PageUpperBound
	ORDER BY RowNumber ASC
	OPEN MessageList
	FETCH NEXT FROM MessageList 
		INTO @MessageID, @PortalID, @FromUserName, @FromUserID, @ToUserName, @ToUserID, @Status, @Subject, @Body, @Date, @EmailSent, @EmailSentDate, @EmailSchedulerInstance, @RowNumber 

	WHILE @@FETCH_STATUS = 0
	BEGIN
			--Create SocialMessage Record
            INSERT {databaseOwner}[{objectQualifier}CoreMessaging_Messages](                    
  					[PortalID],
					[To],
					[From],					
					[Subject],
					[Body],
					[ConversationID],
					[ReplyAllAllowed],
					[SenderUserID],
                    [CreatedByUserID],
                    [CreatedOnDate],
                    [LastModifiedByUserID],
                    [LastModifiedOnDate]			        
                    )
            VALUES  (       
					@PortalID,
					@ToUserName,
					@FromUserName,
					@Subject,
					@Body,
					NULL,
					1, --ReplyAllAllowed,
					@FromUserID,
                    @FromUserID , -- CreatedBy - int
					dateadd(second, (-1 * datediff(second, getutcdate(), getdate())), @Date), -- CreatedOn - utc datetime
                    @FromUserID , -- LastModifiedBy - int
                    GETDATE() -- LastModifiedOn - datetime			        
                    )
            -- update conversation id                       
            SELECT  @NewMessageID = SCOPE_IDENTITY()
			UPDATE  {databaseOwner}[{objectQualifier}CoreMessaging_Messages] SET [ConversationID] = @NewMessageID WHERE [MessageID] = @NewMessageID 															
			
			--Create SocialRecipient Record for recipient and sender. 2 records total
			Set @Counter = 0 
			
			--No need to create two records if message sent to self	
			IF @ToUserID = @FromUserID BEGIN Set @Counter = 1 END
					
			WHILE @Counter < 2
			BEGIN
				SET @Counter = @Counter + 1
			
				INSERT {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients](
						[MessageID],
						[UserID],
						[Read],
						[Archived],
						[CreatedByUserID],
						[CreatedOnDate],
						[LastModifiedByUserID],
						[LastModifiedOnDate],
						[EmailSent],
						[EmailSentDate],
						[EmailSchedulerInstance]                    
						)
				VALUES  (
						@NewMessageID,
						CASE @Counter
							WHEN 1 THEN @ToUserID 
							ELSE @FromUserID 
						END,												
						CASE @Status
							WHEN 1 THEN 0 --Status 1 means Unread, 2 means Read, 3 means Deleted
							ELSE 1
						END,
						CASE @Status
							WHEN 3 THEN 1 --Status 1 means Unread, 2 means Read, 3 means Deleted
							ELSE 0
						END,
						@FromUserID , -- CreatedBy - int
						@Date , -- CreatedOn - datetime
						@FromUserID , -- LastModifiedBy - int
						@Date, -- LastModifiedOn - datetime
						@EmailSent,
						@EmailSentDate,
						@EmailSchedulerInstance
						)			
			END
		
		--Delete the Legacy record
		DELETE FROM {databaseOwner}[{objectQualifier}Messaging_Messages] WHERE MessageID = @MessageID
		
		FETCH NEXT FROM MessageList 
			INTO @MessageID,@PortalID, @FromUserName, @FromUserID, @ToUserName, @ToUserID, @Status, @Subject, @Body, @Date, @EmailSent, @EmailSentDate, @EmailSchedulerInstance, @RowNumber 
	END
	CLOSE MessageList
	DEALLOCATE MessageList

GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_CreateNotificationType]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CreateNotificationType]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CreateNotificationType]
	@Name nvarchar(100),
	@Description nvarchar(2000),
	@TTL int,
	@DesktopModuleId int,
	@CreatedUpdatedUserID int
AS
BEGIN
	INSERT INTO {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypes] (
		[Name],
		[Description],
		[TTL],
		[DesktopModuleId],
		[CreatedByUserID],
		[CreatedOnDate],
		[LastModifiedByUserID],
		[LastModifiedOnDate]
	) VALUES (
		@Name,
		@Description,
		@TTL,
		@DesktopModuleId,
		@CreatedUpdatedUserID,
		GETDATE(),
		@CreatedUpdatedUserID,
		GETDATE()
	)
		
	SELECT SCOPE_IDENTITY()	
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_DeleteNotificationType]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_DeleteNotificationType]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_DeleteNotificationType]
	@NotificationTypeID int
AS
BEGIN
	-- First delete related data
	DELETE
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages]
	WHERE [NotificationTypeID] = @NotificationTypeID
	
	DELETE
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypeActions]
	WHERE [NotificationTypeID] = @NotificationTypeID

	-- Finally delete the Notification type
	DELETE
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypes]
	WHERE [NotificationTypeID] = @NotificationTypeID
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationType]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationType]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationType]
	@NotificationTypeID int
AS
BEGIN
	SELECT [NotificationTypeID], [Name], [Description], [TTL], [DesktopModuleId], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate]
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypes]
	WHERE [NotificationTypeID] = @NotificationTypeID
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationTypeByName]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationTypeByName]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationTypeByName]
	@Name nvarchar(100)
AS
BEGIN
	SELECT [NotificationTypeID], [Name], [Description], [TTL], [DesktopModuleId], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate]
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypes]
	WHERE [Name] LIKE @Name
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_AddNotificationTypeAction]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_AddNotificationTypeAction]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_AddNotificationTypeAction]
	@NotificationTypeID int,
	@NameResourceKey nvarchar(100),
	@DescriptionResourceKey nvarchar(100),
	@ConfirmResourceKey nvarchar(100),
	@APICall nvarchar(500),
	@CreatedByUserID int
AS
BEGIN
	DECLARE @Order int 
	
	SELECT @Order = MAX([Order])
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypeActions]
	WHERE [NotificationTypeID] = @NotificationTypeID
	
	IF @Order IS NULL
		SET @Order = 1
	ELSE
		SET @Order = @Order + 2
		
	INSERT INTO {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypeActions] (
		[NotificationTypeID],
		[NameResourceKey],
		[DescriptionResourceKey],
		[ConfirmResourceKey],
		[Order],
		[APICall],
		[CreatedByUserID],
		[CreatedOnDate],
		[LastModifiedByUserID],
		[LastModifiedOnDate]
	) VALUES (
		@NotificationTypeID,
		@NameResourceKey,
		@DescriptionResourceKey,
		@ConfirmResourceKey,
		@Order,
		@APICall,
		@CreatedByUserID,
		GETDATE(),
		@CreatedByUserID,
		GETDATE()
	)
	
	SELECT SCOPE_IDENTITY()
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_DeleteNotificationTypeAction]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_DeleteNotificationTypeAction]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_DeleteNotificationTypeAction]
	@NotificationTypeActionID int
AS
BEGIN
	DELETE 
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypeActions]
	WHERE [NotificationTypeActionID] = @NotificationTypeActionID
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationTypeAction]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationTypeAction]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationTypeAction]
	@NotificationTypeActionID int
AS
BEGIN
	SELECT [NotificationTypeActionID], [NotificationTypeID], [NameResourceKey], [DescriptionResourceKey], [ConfirmResourceKey], [Order], [APICall], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate]
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypeActions]
	WHERE [NotificationTypeActionID] = @NotificationTypeActionID
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationTypeActionByName]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationTypeActionByName]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationTypeActionByName]
	@NotificationTypeID int,
	@NameResourceKey nvarchar(100)
AS
BEGIN
	SELECT [NotificationTypeActionID], [NotificationTypeID], [NameResourceKey], [DescriptionResourceKey], [ConfirmResourceKey], [Order], [APICall], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate]
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypeActions]
	WHERE [NotificationTypeID] = @NotificationTypeID AND [NameResourceKey] LIKE @NameResourceKey
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationTypeActions]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationTypeActions]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationTypeActions]
	@NotificationTypeID int
AS
BEGIN
	SELECT [NotificationTypeActionID], [NotificationTypeID], [NameResourceKey], [DescriptionResourceKey], [ConfirmResourceKey], [Order], [APICall], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate]
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypeActions]
	WHERE [NotificationTypeID] = @NotificationTypeID
	ORDER BY [Order]
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_SendNotification]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_SendNotification]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_SendNotification]
	@NotificationTypeID int,
	@PortalID INT,
	@To nvarchar(2000),
	@From nvarchar(200),
    @Subject nvarchar(400),
    @Body nvarchar(max),
    @SenderUserID int,
	@CreateUpdateUserID int,
	@ExpirationDate datetime,
    @IncludeDismissAction bit,
    @Context nvarchar(200)
AS
BEGIN
	INSERT {databaseOwner}[{objectQualifier}CoreMessaging_Messages] (
		[NotificationTypeID],
		[PortalID],
		[To],
		[From],
		[Subject],
		[Body],
		[SenderUserID],
		[ExpirationDate],
        [IncludeDismissAction],
        [Context],
		[CreatedByUserID],
		[CreatedOnDate],
		[LastModifiedByUserID],
		[LastModifiedOnDate]
	) VALUES (
		@NotificationTypeID,
		@PortalID,
		@To,
		@From,
		@Subject,
		@Body,
		@SenderUserID,
		@ExpirationDate,
        @IncludeDismissAction,
        @Context,
		@CreateUpdateUserID, -- CreatedBy
		GETUTCDATE(), -- CreatedOn
		@CreateUpdateUserID, -- LastModifiedBy
		GETDATE() -- LastModifiedOn
	)

	SELECT  SCOPE_IDENTITY()
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_GetNotifications]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNotifications]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNotifications]
	@UserID int,
	@PortalID int,
	@AfterNotificationID int,
	@NumberOfRecords int
AS
BEGIN
	--Get the top message for each conversation
	;WITH Notifications AS
	(
		SELECT
			M.[MessageID],
			M.[NotificationTypeId],
			M.[To],
			M.[From],
			M.[Subject],
			M.[Body],
			M.[SenderUserID],
			M.[ExpirationDate],
            M.[IncludeDismissAction],
			M.[CreatedByUserID],
			M.[CreatedOnDate],
			M.[LastModifiedByUserID],
			M.[LastModifiedOnDate],
            M.[Context],
			ROW_NUMBER() OVER(ORDER BY M.[CreatedOnDate] DESC) AS RowNumber
		FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages] AS M
		JOIN {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] MR ON M.MessageID = MR.MessageID
		WHERE [NotificationTypeId] IS NOT NULL
		AND MR.UserID = @UserID
		AND M.PortalID = @PortalID
		AND (M.[ExpirationDate] IS NULL OR (M.[ExpirationDate] IS NOT NULL AND M.[ExpirationDate] > GETUTCDATE()))
	)	
	SELECT * FROM Notifications
	WHERE (@AfterNotificationID > 0 AND RowNumber BETWEEN (SELECT RowNumber + 1 FROM Notifications WHERE [MessageID] = @AfterNotificationID) AND (SELECT RowNumber + @NumberOfRecords FROM Notifications WHERE [MessageID] = @AfterNotificationID)) OR
	(@AfterNotificationID = -1 AND RowNumber BETWEEN 1 AND @NumberOfRecords)
	ORDER BY RowNumber ASC
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_GetNotification]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNotification]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNotification]
	@NotificationId int
AS
BEGIN
	SELECT
		M.[MessageID],
		M.[NotificationTypeId],
		M.[To],
		M.[From],
		M.[Subject],
		M.[Body],
		M.[SenderUserID],
		M.[ExpirationDate],
        M.[IncludeDismissAction],
		M.[CreatedByUserID],
		M.[CreatedOnDate],
		M.[LastModifiedByUserID],
		M.[LastModifiedOnDate],
        M.[Context]
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages] AS M
	WHERE [NotificationTypeId] IS NOT NULL
	AND M.MessageID = @NotificationId
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationByContext]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationByContext]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationByContext]
	@notificationTypeId int,
	@Context nvarchar(200)
AS
BEGIN
	SELECT
		M.[MessageID],
		M.[NotificationTypeId],
		M.[To],
		M.[From],
		M.[Subject],
		M.[Body],
		M.[SenderUserID],
		M.[ExpirationDate],
        M.[IncludeDismissAction],
		M.[CreatedByUserID],
		M.[CreatedOnDate],
		M.[LastModifiedByUserID],
		M.[LastModifiedOnDate],
        M.[Context]
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages] AS M
	WHERE [NotificationTypeId] IS NOT NULL
	AND M.NotificationTypeId = @notificationTypeId
	AND M.Context = @context
END
GO


IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_DeleteNotification]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_DeleteNotification]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_DeleteNotification]
	@NotificationID int
AS
BEGIN
	DELETE
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages]
	WHERE [MessageID] = @NotificationID AND [NotificationTypeID] IS NOT NULL
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_CountNotifications]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CountNotifications]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CountNotifications]
	@UserID int,
	@PortalID INT
AS
BEGIN
	-- Return total notifications for user
	SELECT COUNT(*) AS TotalNotifications
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] MR
	JOIN {databaseOwner}[{objectQualifier}CoreMessaging_Messages] M ON MR.MessageID = M.MessageID
	WHERE M.NotificationTypeId IS NOT NULL
	AND M.PortalID=@PortalID
	AND MR.UserID = @UserID
	AND (M.ExpirationDate IS NULL OR (M.ExpirationDate IS NOT NULL AND M.ExpirationDate > GETDATE())) -- Do not return expired notifications
END
GO

/* Add ExtendedVisibility To UserProfile Table */
/***********************************************/

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME='{objectQualifier}UserProfile' AND COLUMN_NAME='ExtendedVisibility')
	BEGIN
		-- Add Column
		ALTER TABLE {databaseOwner}{objectQualifier}UserProfile
			ADD ExtendedVisibility varchar(400) NULL
	END
GO

/* Update UpdateUserProfileProperty */
/************************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdateUserProfileProperty]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateUserProfileProperty]
GO

CREATE PROC {databaseOwner}[{objectQualifier}UpdateUserProfileProperty] 

	@ProfileID				int,
	@UserID					int,
	@PropertyDefinitionID	int,
	@PropertyValue			ntext,
	@Visibility				int,
	@ExtendedVisibility		varchar(400),
	@LastUpdatedDate		datetime

AS
	IF @ProfileID IS NULL OR @ProfileID = -1
		-- Try the UserID/PropertyDefinitionID to see if the Profile property exists
		SELECT @ProfileID = ProfileID
			FROM   {databaseOwner}{objectQualifier}UserProfile
			WHERE  UserID = @UserID AND PropertyDefinitionID = @PropertyDefinitionID
	 
	IF @ProfileID IS NOT NULL
		-- Update Property
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}UserProfile
				SET PropertyValue = case when (DATALENGTH(@PropertyValue) > 7500) then NULL else @PropertyValue end,
					PropertyText = case when (DATALENGTH(@PropertyValue) > 7500) then @PropertyValue else NULL end,
					Visibility = @Visibility,
					ExtendedVisibility = @ExtendedVisibility,
					LastUpdatedDate = @LastUpdatedDate
				WHERE  ProfileID = @ProfileID
			SELECT @ProfileID
		END
	ELSE
		-- Insert New Property
		BEGIN
			INSERT INTO {databaseOwner}{objectQualifier}UserProfile (
				UserID,
				PropertyDefinitionID,
				PropertyValue,
				PropertyText,
				Visibility,
				ExtendedVisibility,
				LastUpdatedDate
			  )
			VALUES (
				@UserID,
				@PropertyDefinitionID,
				case when (DATALENGTH(@PropertyValue) > 7500) then NULL else @PropertyValue end,
				case when (DATALENGTH(@PropertyValue) > 7500) then @PropertyValue else NULL end,
				@Visibility,
				@ExtendedVisibility,
				@LastUpdatedDate
			  )

		SELECT SCOPE_IDENTITY()
	END
GO

/* Update GetUserProfile */
/*************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetUserProfile]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUserProfile]
GO

CREATE PROC {databaseOwner}[{objectQualifier}GetUserProfile] 
	@UserID int
AS
	SELECT
		ProfileID,
		UserID,
		PropertyDefinitionID,
		CASE WHEN (PropertyValue Is Null) THEN PropertyText ELSE PropertyValue END AS 'PropertyValue',
		Visibility,
		ExtendedVisibility,
		LastUpdatedDate
	FROM	{databaseOwner}{objectQualifier}UserProfile
	WHERE   UserId = @UserID
GO

/* Journal Items */
/*************************/

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_{objectQualifier}Journal_JournalTypes]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Journal] DROP CONSTRAINT [FK_{objectQualifier}Journal_JournalTypes]
GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Journal_ProfileId]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Journal] DROP CONSTRAINT [DF_{objectQualifier}Journal_ProfileId]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Journal_GroupId]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Journal] DROP CONSTRAINT [DF_{objectQualifier}Journal_GroupId]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}JournalTypes_PortalId]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] DROP CONSTRAINT [DF_{objectQualifier}JournalTypes_PortalId]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}JournalTypes_IsEnabled]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] DROP CONSTRAINT [DF_{objectQualifier}JournalTypes_IsEnabled]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}JournalTypes_AppliesToProfile]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] DROP CONSTRAINT [DF_{objectQualifier}JournalTypes_AppliesToProfile]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}JournalTypes_AppliesToGroup]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] DROP CONSTRAINT [DF_{objectQualifier}JournalTypes_AppliesToGroup]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}JournalTypes_AppliesToStream]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] DROP CONSTRAINT [DF_{objectQualifier}JournalTypes_AppliesToStream]
END

GO

IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}JournalTypes_SupportsNotify]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] DROP CONSTRAINT [DF_{objectQualifier}JournalTypes_SupportsNotify]
END
GO
IF  EXISTS (SELECT * FROM dbo.sysobjects WHERE id = OBJECT_ID(N'[DF_{objectQualifier}Journal_Types_EnableComments]') AND type = 'D')
BEGIN
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] DROP CONSTRAINT [DF_{objectQualifier}Journal_Types_EnableComments]
END

GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_{objectQualifier}Journal_Data_Journal]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Data]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Data] DROP CONSTRAINT [FK_{objectQualifier}Journal_Data_Journal]
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'[dbo].[FK_{objectQualifier}JournalComments_Journal]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Comments]'))
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Comments] DROP CONSTRAINT [FK_{objectQualifier}JournalComments_Journal]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Journal]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Security]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Journal_Security]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Access]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Journal_Access]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_TypeFilters]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Journal_TypeFilters]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Types]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Journal_Types]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Data]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Journal_Data]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Comments]') AND type in (N'U'))
DROP TABLE {databaseOwner}[{objectQualifier}Journal_Comments]
GO

CREATE TABLE {databaseOwner}[{objectQualifier}Journal](
	[JournalId] [int] IDENTITY(1,1) NOT NULL,
	[JournalTypeId] [int] NOT NULL,
	[UserId] [int] NULL,
	[DateCreated] [datetime] NULL,
	[DateUpdated] [datetime] NULL,
	[PortalId] [int] NULL,
	[ProfileId] [int] NOT NULL,
	[GroupId] [int] NOT NULL,
	[Title] [nvarchar](255) NULL,
	[Summary] [nvarchar](2000) NULL,
	[ItemData] [nvarchar](2000) NULL,
	[ImageURL] [nvarchar](255) NULL,
	[ObjectKey] [nvarchar](255) NULL,
	[AccessKey] [uniqueidentifier] NULL,
	[ContentItemId] [int] NULL,
	CONSTRAINT [PK_{objectQualifier}Journal] PRIMARY KEY CLUSTERED ([JournalId] ASC)
)

GO

CREATE TABLE {databaseOwner}[{objectQualifier}Journal_Security](
	[JournalSecurityId] [int] IDENTITY(1,1) NOT NULL,
	[JournalId] [int] NOT NULL,
	[SecurityKey] [nvarchar](50) NOT NULL,
	CONSTRAINT [PK_{objectQualifier}Journal_Security] PRIMARY KEY CLUSTERED ( [JournalSecurityId] ASC),
	CONSTRAINT [IX_{objectQualifier}Journal_Security] UNIQUE NONCLUSTERED ( [JournalId] DESC, [SecurityKey] ASC )
)

GO

CREATE TABLE {databaseOwner}[{objectQualifier}Journal_Access](
	[JournalAccessId] [int] IDENTITY(1,1) NOT NULL,
	[JournalTypeId] [int] NOT NULL,
	[PortalId] [int] NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[AccessKey] [uniqueidentifier] NOT NULL,
	[IsEnabled] [bit] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
	CONSTRAINT [PK_{objectQualifier}Journal_Access] PRIMARY KEY CLUSTERED (	[JournalAccessId] ASC )
)

GO

CREATE TABLE {databaseOwner}[{objectQualifier}Journal_TypeFilters](
	[JournalTypeFilterId] [int] IDENTITY(1,1) NOT NULL,
	[PortalId] [int] NOT NULL,
	[ModuleId] [int] NOT NULL,
	[JournalTypeId] [int] NOT NULL,
	CONSTRAINT [PK_{objectQualifier}Journal_TypeFilters] PRIMARY KEY CLUSTERED ([JournalTypeFilterId] ASC)
)

GO

CREATE TABLE {databaseOwner}[{objectQualifier}Journal_Types](
	[JournalTypeId] [int] NOT NULL,
	[JournalType] [nvarchar](25) NULL,
	[icon] [nvarchar](25) NULL,
	[PortalId] [int] NOT NULL,
	[IsEnabled] [bit] NOT NULL,
	[AppliesToProfile] [bit] NOT NULL,
	[AppliesToGroup] [bit] NOT NULL,
	[AppliesToStream] [bit] NOT NULL,
	[Options] [nvarchar](max) NULL,
	[SupportsNotify] [bit] NOT NULL,
	[EnableComments] [bit] NOT NULL,
	CONSTRAINT [PK_{objectQualifier}JournalTypes] PRIMARY KEY CLUSTERED ([JournalTypeId] ASC)
)

GO

CREATE TABLE {databaseOwner}[{objectQualifier}Journal_Data](
	[JournalDataId] [int] IDENTITY(1,1) NOT NULL,
	[JournalId] [int] NOT NULL,
	[JournalXML] [xml] NOT NULL,
	CONSTRAINT [PK_{objectQualifier}Journal_Data] PRIMARY KEY CLUSTERED ([JournalDataId] ASC)
)

GO

CREATE TABLE {databaseOwner}[{objectQualifier}Journal_Comments](
	[CommentId] [int] IDENTITY(1,1) NOT NULL,
	[JournalId] [int] NOT NULL,
	[UserId] [int] NOT NULL,
	[Comment] [nvarchar](2000) NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateUpdated] [datetime] NOT NULL,
	[CommentXML] [xml] NULL,
	CONSTRAINT [PK_{objectQualifier}Journal_Comments] PRIMARY KEY CLUSTERED (	[CommentId] ASC)
)

GO

ALTER TABLE {databaseOwner}[{objectQualifier}Journal]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}Journal_JournalTypes] FOREIGN KEY([JournalTypeId])
REFERENCES {databaseOwner}[{objectQualifier}Journal_Types] ([JournalTypeId])
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Journal] NOCHECK CONSTRAINT [FK_{objectQualifier}Journal_JournalTypes]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Journal] ADD  CONSTRAINT [DF_{objectQualifier}Journal_ProfileId]  DEFAULT ((-1)) FOR [ProfileId]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Journal] ADD  CONSTRAINT [DF_{objectQualifier}Journal_GroupId]  DEFAULT ((-1)) FOR [GroupId]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] ADD  CONSTRAINT [DF_{objectQualifier}JournalTypes_PortalId]  DEFAULT ((-1)) FOR [PortalId]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] ADD  CONSTRAINT [DF_{objectQualifier}JournalTypes_IsEnabled]  DEFAULT ((1)) FOR [IsEnabled]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] ADD  CONSTRAINT [DF_{objectQualifier}JournalTypes_AppliesToProfile]  DEFAULT ((1)) FOR [AppliesToProfile]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] ADD  CONSTRAINT [DF_{objectQualifier}JournalTypes_AppliesToGroup]  DEFAULT ((1)) FOR [AppliesToGroup]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] ADD  CONSTRAINT [DF_{objectQualifier}JournalTypes_AppliesToStream]  DEFAULT ((1)) FOR [AppliesToStream]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] ADD  CONSTRAINT [DF_{objectQualifier}JournalTypes_SupportsNotify]  DEFAULT ((0)) FOR [SupportsNotify]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] ADD  CONSTRAINT [DF_{objectQualifier}Journal_Types_EnableComments]  DEFAULT ((1)) FOR [EnableComments]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Data]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}Journal_Data_Journal] FOREIGN KEY([JournalId])
REFERENCES {databaseOwner}[{objectQualifier}Journal] ([JournalId])
ON DELETE CASCADE
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Data] NOCHECK CONSTRAINT [FK_{objectQualifier}Journal_Data_Journal]
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Comments]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}JournalComments_Journal] FOREIGN KEY([JournalId])
REFERENCES {databaseOwner}[{objectQualifier}Journal] ([JournalId])
ON DELETE CASCADE
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Comments] NOCHECK CONSTRAINT [FK_{objectQualifier}JournalComments_Journal]
GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Split]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION {databaseOwner}[{objectQualifier}Journal_Split]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_SplitText]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION {databaseOwner}[{objectQualifier}Journal_SplitText]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_User_Permissions]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
DROP FUNCTION {databaseOwner}[{objectQualifier}Journal_User_Permissions]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE FUNCTION {databaseOwner}[{objectQualifier}Journal_Split](@text varchar(8000), @delimiter char(1))
RETURNS @words TABLE (objectid smallint primary key, id int)
AS
BEGIN
	DECLARE @pos smallint,
		@i smallint,
		@j smallint,
		@s varchar(255)

	SET @pos = 1

	WHILE @pos <= LEN(@text)
	BEGIN
		SET @i = CHARINDEX(' ', @text, @pos)
		SET @j = CHARINDEX(@delimiter, @text, @pos)

		IF @i > 0 OR @j > 0
		BEGIN
			IF @i = 0 OR (@j > 0 AND @j < @i)
				SET @i = @j

			IF @i > @pos
			BEGIN
				-- @i now holds the earliest delimiter in the string
				SET @s = SUBSTRING(@text, @pos, @i - @pos)
	
				INSERT INTO @words
				VALUES (@pos, @s)
			END

			SET @pos = @i + 1
			WHILE @pos < LEN(@text) AND SUBSTRING(@text, @pos, 1) IN (' ', ',')
				SET @pos = @pos + 1
		END
		ELSE
		BEGIN
			INSERT INTO @words
			VALUES (@pos, SUBSTRING(@text, @pos, LEN(@text) - @pos + 1))

			SET @pos = LEN(@text) + 1
		END
	END
	
	RETURN
END


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO






CREATE FUNCTION {databaseOwner}[{objectQualifier}Journal_SplitText](@text varchar(8000), @delimiter char(1))
RETURNS @words TABLE (objectid smallint primary key, string varchar(1000), optionalid int)
AS
BEGIN
	DECLARE @pos smallint,
		@i smallint,
		@j smallint,
		@s varchar(255),
        @o int

	SET @pos = 1

	WHILE @pos <= LEN(@text)
	BEGIN
		SET @i = CHARINDEX(' ', @text, @pos)
		SET @j = CHARINDEX(@delimiter, @text, @pos)

		IF @i > 0 OR @j > 0
		BEGIN
			IF @i = 0 OR (@j > 0 AND @j < @i)
				SET @i = @j

			IF @i > @pos
			BEGIN
				-- @i now holds the earliest delimiter in the string
				SET @s = SUBSTRING(@text, @pos, @i - @pos)
				SET @o = 0
	            IF CHARINDEX('|',@s,0) > 0
					BEGIN
						SET @o = SUBSTRING(@s,0,CHARINDEX('|',@s,0))
						SET @s = SUBSTRING(@s,CHARINDEX('|',@s,0)+1,LEN(@s))
						
					END
				INSERT INTO @words
				VALUES (@pos, @s, @o)
			END

			SET @pos = @i + 1
			WHILE @pos < LEN(@text) AND SUBSTRING(@text, @pos, 1) IN (' ', ',')
				SET @pos = @pos + 1
		END
		ELSE
		BEGIN
SET @s = SUBSTRING(@text, @pos, LEN(@text) - @pos + 1)
IF CHARINDEX('|',@s,0) > 0
					BEGIN
						SET @o = SUBSTRING(@s,0,CHARINDEX('|',@s,0))
						SET @s = SUBSTRING(@s,CHARINDEX('|',@s,0)+1,LEN(@s))
						
					END

				
			INSERT INTO @words
			VALUES (@pos, @s ,@o)

			SET @pos = LEN(@text) + 1
		END
	END
	
	RETURN
END


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE FUNCTION {databaseOwner}[{objectQualifier}Journal_User_Permissions]
(
	@PortalId int,
	@UserId int,
	@RegisteredRoleId int
)
RETURNS 
@tmp TABLE (seckey nvarchar(200))

AS
BEGIN
IF @UserId > 0
		BEGIN
			INSERT INTO @tmp (seckey) VALUES ('U' + Cast(@UserId as nvarchar(200)))
			INSERT INTO @tmp (seckey) VALUES ('P' + Cast(@UserId as nvarchar(200)))
			INSERT INTO @tmp (seckey) VALUES ('F' + Cast(@UserId as nvarchar(200)))
			IF EXISTS(SELECT RoleId FROM {databaseOwner}[{objectQualifier}UserRoles] WHERE UserID = @UserId AND RoleId = @RegisteredRoleId
						AND    (EffectiveDate <= getdate() or EffectiveDate is null)
						AND    (ExpiryDate >= getdate() or ExpiryDate is null))
					INSERT INTO @tmp (seckey) VALUES ('C')
			
		END
		
	INSERT INTO @tmp (seckey) VALUES ('E')
	
	INSERT INTO @tmp (seckey)
	SELECT 'R' + CAST(ur.RoleId as nvarchar(200)) 
		FROM {databaseOwner}[{objectQualifier}UserRoles] as ur
			INNER JOIN {databaseOwner}[{objectQualifier}Users] as u on ur.UserId = u.UserId
			INNER JOIN {databaseOwner}[{objectQualifier}Roles] as r on ur.RoleId = r.RoleId
		WHERE  u.UserId = @UserId
			AND    r.PortalId = @PortalId
			AND    (EffectiveDate <= getdate() or EffectiveDate is null)
			AND    (ExpiryDate >= getdate() or ExpiryDate is null)
	INSERT INTO @tmp (seckey)
		SELECT 'F' + CAST(RelatedUserID as nvarchar(200)) 
		FROM {databaseOwner}[{objectQualifier}UserRelationships] WHERE UserId = @UserId AND Status = 1
	RETURN 
END

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_ListForSummary]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_ListForSummary]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_ListForProfile]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_ListForProfile]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Save]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_Save]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Comment_Delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_Comment_Delete]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Comment_List]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_Comment_List]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Comment_Save]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_Comment_Save]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Comment_Like]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_Comment_Like]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Comment_ListByJournalIds]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_Comment_ListByJournalIds]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Comment_Get]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_Comment_Get]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Types_List]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_Types_List]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Types_Save]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_Types_Save]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Types_Delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_Types_Delete]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Types_Get]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_Types_Get]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Types_GetById]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_Types_GetById]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_UpdateContentItemId]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_UpdateContentItemId]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_Delete]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Get]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_Get]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_Like]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_Like]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_LikeList]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_LikeList]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_ListForGroup]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_ListForGroup]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_GetStatsForGroup]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_GetStatsForGroup]
GO
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_TypeFilters_Save]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_TypeFilters_Save]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_TypeFilters_Delete]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_TypeFilters_Delete]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_TypeFilters_List]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_TypeFilters_List]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_DeleteByKey]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_DeleteByKey]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_GetByKey]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_GetByKey]
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}Journal_DeleteByGroupId]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}Journal_DeleteByGroupId]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_ListForGroup]
@PortalId int,
@ModuleId int,
@CurrentUserId int,
@GroupId int,
@RowIndex int,
@MaxRows int
AS
DECLARE @EndRow int
SET @EndRow = @RowIndex + @MaxRows;

DECLARE @j TABLE(id int IDENTITY, journalid int, datecreated datetime)
IF EXISTS(SELECT * from {databaseOwner}[{objectQualifier}Journal_TypeFilters] WHERE ModuleId = @ModuleId)
INSERT INTO @j 
	SELECT j.journalid, jt.datecreated from (
		SELECT DISTINCT js.JournalId from {databaseOwner}[{objectQualifier}Journal] as j
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_Security] as js ON js.JournalId = j.JournalId
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@CurrentUserId ,1) as t 
				ON t.seckey = js.SecurityKey AND (js.SecurityKey = 'R' + CAST(@GroupId as nvarchar(100)) OR js.SecurityKey = 'E')
				WHERE j.PortalId = @PortalId
		) as j INNER JOIN {databaseOwner}[{objectQualifier}Journal] jt ON jt.JournalId = j.JournalId AND jt.PortalId = @PortalId AND jt.GroupId = @GroupId
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_TypeFilters] as jf ON jf.JournalTypeId = jt.JournalTypeId AND jf.ModuleId = @ModuleId
		ORDER BY jt.DateCreated DESC, jt.JournalId DESC;
ELSE
INSERT INTO @j 
	SELECT j.journalid, jt.datecreated from (
		SELECT DISTINCT js.JournalId from {databaseOwner}[{objectQualifier}Journal] as j
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_Security] as js ON js.JournalId = j.JournalId
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@CurrentUserId ,1) as t 
				ON t.seckey = js.SecurityKey AND (js.SecurityKey = 'R' + CAST(@GroupId as nvarchar(100)) OR js.SecurityKey = 'E')
				WHERE j.PortalId = @PortalId
		) as j INNER JOIN {databaseOwner}[{objectQualifier}Journal] jt ON jt.JournalId = j.JournalId AND jt.PortalId = @PortalId AND jt.GroupId = @GroupId
		ORDER BY jt.DateCreated DESC, jt.JournalId DESC;


WITH journalItems  AS
(
	SELECT	j.JournalId,
			ROW_NUMBER() OVER (ORDER BY j.JournalId DESC) AS RowNumber
	FROM	{databaseOwner}[{objectQualifier}Journal] as j INNER JOIN @j as jtmp ON jtmp.JournalId = j.JournalId
	WHERE j.PortalId = @PortalId
)
SELECT	j.JournalId, j.JournalTypeId, j.Title, j.Summary, j.UserId, j.DateCreated, j.DateUpdated, j.PortalId,
			j.ProfileId, j.GroupId, j.ObjectKey, j.AccessKey,
			"JournalOwner" = '<entity><id>' + CAST(r.RoleId as nvarchar(150)) + '</id><name>' + r.RoleName + '</name></entity>',
			"JournalAuthor" = CASE WHEN ISNULL(a.UserId,-1) >0 THEN '<entity><id>' + CAST(a.UserId as nvarchar(150)) + '</id><name>' + a.DisplayName + '</name></entity>' ELSE '' END,
			"JournalOwnerId" = ISNULL(j.ProfileId,j.UserId),
			 jt.Icon, jt.JournalType,
			"Profile" = CASE WHEN j.ProfileId > 0 THEN '<entity><id>' + CAST(p.UserID as nvarchar(150)) + '</id><name><![CDATA[' + p.DisplayName + ']]></name><vanity></vanity></entity>' ELSE '' END,
			jd.JournalXML, j.ContentItemId, j.ItemData, RowNumber
FROM	journalItems as ji INNER JOIN 
	{databaseOwner}[{objectQualifier}Journal] as j ON j.JournalId = ji.JournalId INNER JOIN
	{databaseOwner}[{objectQualifier}Journal_Types] as jt ON jt.JournalTypeId = j.JournalTypeId INNER JOIN
	{databaseOwner}[{objectQualifier}Roles] as r ON j.GroupId = r.RoleId LEFT OUTER JOIN
			{databaseOwner}[{objectQualifier}Journal_Data] as jd on jd.JournalId = j.JournalId LEFT OUTER JOIN
            {databaseOwner}[{objectQualifier}Users] AS p ON j.ProfileId = p.UserID LEFT OUTER JOIN
            {databaseOwner}[{objectQualifier}Users] AS a ON j.UserId = a.UserID
WHERE	RowNumber BETWEEN @RowIndex AND @EndRow
ORDER BY RowNumber ASC;

GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_ListForSummary]
@PortalId int,
@ModuleId int,
@CurrentUserId int,
@RowIndex int,
@MaxRows int
AS
DECLARE @EndRow int
SET @EndRow = @RowIndex + @MaxRows;

DECLARE @j TABLE(id int IDENTITY, journalid int, datecreated datetime)
IF EXISTS(SELECT * from {databaseOwner}[{objectQualifier}Journal_TypeFilters] WHERE ModuleId = @ModuleId)
INSERT INTO @j 
	SELECT j.journalid, jt.datecreated from (
		SELECT DISTINCT js.JournalId from {databaseOwner}[{objectQualifier}Journal] as j
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_Security] as js ON js.JournalId = j.JournalId
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@CurrentUserId ,1) as t ON t.seckey = js.SecurityKey
			WHERE j.PortalId = @PortalId
		) as j INNER JOIN {databaseOwner}[{objectQualifier}Journal] jt ON jt.JournalId = j.JournalId AND jt.PortalId = @PortalId
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_TypeFilters] as jf ON jf.JournalTypeId = jt.JournalTypeId AND jf.ModuleId = @ModuleId
		ORDER BY jt.DateCreated DESC, jt.JournalId DESC;

ELSE
INSERT INTO @j 
	SELECT j.journalid, jt.datecreated from (
		SELECT DISTINCT js.JournalId from {databaseOwner}[{objectQualifier}Journal] as j
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_Security] as js ON js.JournalId = j.JournalId
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@CurrentUserId ,1) as t ON t.seckey = js.SecurityKey
			WHERE j.PortalId = @PortalId
		) as j INNER JOIN {databaseOwner}[{objectQualifier}Journal] jt ON jt.JournalId = j.JournalId AND jt.PortalId = @PortalId
		ORDER BY jt.DateCreated DESC, jt.JournalId DESC;


WITH journalItems  AS
(
	SELECT	j.JournalId,
			ROW_NUMBER() OVER (ORDER BY j.JournalId DESC) AS RowNumber
	FROM	{databaseOwner}[{objectQualifier}Journal] as j INNER JOIN @j as jtmp ON jtmp.JournalId = j.JournalId
	WHERE j.PortalId = @PortalId
)
SELECT	j.JournalId, j.JournalTypeId, j.Title, j.Summary, j.UserId, j.DateCreated, j.DateUpdated, j.PortalId,
			j.ProfileId, j.GroupId, j.ObjectKey, j.AccessKey,
			"JournalOwner" = '<entity><id>' + CAST(p.UserId as nvarchar(150)) + '</id><name>' + p.DisplayName + '</name></entity>',
			"JournalAuthor" = CASE WHEN ISNULL(a.UserId,-1) >0 THEN '<entity><id>' + CAST(a.UserId as nvarchar(150)) + '</id><name>' + a.DisplayName + '</name></entity>' ELSE '' END,
			"JournalOwnerId" = ISNULL(j.ProfileId,j.UserId),
			 jt.Icon, jt.JournalType,
			"Profile" = CASE WHEN j.ProfileId > 0 THEN '<entity><id>' + CAST(p.UserID as nvarchar(150)) + '</id><name><![CDATA[' + p.DisplayName + ']]></name><vanity></vanity></entity>' ELSE '' END,
			jd.JournalXML, j.ContentItemId, j.ItemData, RowNumber
FROM	journalItems as ji INNER JOIN 
	{databaseOwner}[{objectQualifier}Journal] as j ON j.JournalId = ji.JournalId INNER JOIN
{databaseOwner}[{objectQualifier}Journal_Types] as jt ON jt.JournalTypeId = j.JournalTypeId LEFT OUTER JOIN
			{databaseOwner}[{objectQualifier}Journal_Data] as jd on jd.JournalId = j.JournalId LEFT OUTER JOIN
            {databaseOwner}[{objectQualifier}Users] AS p ON j.ProfileId = p.UserID LEFT OUTER JOIN
            {databaseOwner}[{objectQualifier}Users] AS a ON j.UserId = a.UserID
WHERE	RowNumber BETWEEN @RowIndex AND @EndRow
ORDER BY RowNumber ASC;



GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_ListForProfile]
@PortalId int,
@ModuleId int,
@CurrentUserId int,
@ProfileId int,
@RowIndex int,
@MaxRows int
AS
DECLARE @EndRow int
SET @EndRow = @RowIndex + @MaxRows;

DECLARE @j TABLE(id int IDENTITY, journalid int, datecreated datetime)
IF EXISTS(SELECT * from {databaseOwner}[{objectQualifier}Journal_TypeFilters] WHERE ModuleId = @ModuleId)
INSERT INTO @j 
	SELECT j.journalid, jt.datecreated from (
		SELECT DISTINCT js.JournalId from {databaseOwner}[{objectQualifier}Journal] as j
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_Security] as js ON js.JournalId = j.JournalId
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@CurrentUserId ,1) as t ON t.seckey = js.SecurityKey
			WHERE j.ProfileId = @ProfileId AND j.PortalId = @PortalId
		) as j INNER JOIN {databaseOwner}[{objectQualifier}Journal] jt ON jt.JournalId = j.JournalId AND jt.PortalId = @PortalId
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_TypeFilters] as jf ON jf.JournalTypeId = jt.JournalTypeId AND jf.ModuleId = @ModuleId
		ORDER BY jt.DateCreated DESC, jt.JournalId DESC;

ELSE
INSERT INTO @j 
	SELECT j.journalid, jt.datecreated from (
		SELECT DISTINCT js.JournalId from {databaseOwner}[{objectQualifier}Journal] as j
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_Security] as js ON js.JournalId = j.JournalId
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@CurrentUserId ,1) as t ON t.seckey = js.SecurityKey
			WHERE j.ProfileId = @ProfileId AND j.PortalId = @PortalId
		) as j INNER JOIN {databaseOwner}[{objectQualifier}Journal] jt ON jt.JournalId = j.JournalId AND jt.PortalId = @PortalId
		ORDER BY jt.DateCreated DESC, jt.JournalId DESC;


WITH journalItems  AS
(
	SELECT	j.JournalId,
			ROW_NUMBER() OVER (ORDER BY j.JournalId DESC) AS RowNumber
	FROM	{databaseOwner}[{objectQualifier}Journal] as j INNER JOIN @j as jtmp ON jtmp.JournalId = j.JournalId
	WHERE j.PortalId = @PortalId AND j.ProfileId = @ProfileId
)
SELECT	j.JournalId, j.JournalTypeId, j.Title, j.Summary, j.UserId, j.DateCreated, j.DateUpdated, j.PortalId,
			j.ProfileId, j.GroupId, j.ObjectKey, j.AccessKey,
			"JournalOwner" = '<entity><id>' + CAST(p.UserId as nvarchar(150)) + '</id><name>' + p.DisplayName + '</name></entity>',
			"JournalAuthor" = CASE WHEN ISNULL(a.UserId,-1) >0 THEN '<entity><id>' + CAST(a.UserId as nvarchar(150)) + '</id><name>' + a.DisplayName + '</name></entity>' ELSE '' END,
			"JournalOwnerId" = ISNULL(j.ProfileId,j.UserId),
			 jt.Icon, jt.JournalType,
			"Profile" = CASE WHEN j.ProfileId > 0 THEN '<entity><id>' + CAST(p.UserID as nvarchar(150)) + '</id><name><![CDATA[' + p.DisplayName + ']]></name><vanity></vanity></entity>' ELSE '' END,
			jd.JournalXML, j.ContentItemId, j.ItemData, RowNumber
FROM	journalItems as ji INNER JOIN 
	{databaseOwner}[{objectQualifier}Journal] as j ON j.JournalId = ji.JournalId INNER JOIN
{databaseOwner}[{objectQualifier}Journal_Types] as jt ON jt.JournalTypeId = j.JournalTypeId LEFT OUTER JOIN
			{databaseOwner}[{objectQualifier}Journal_Data] as jd on jd.JournalId = j.JournalId LEFT OUTER JOIN
            {databaseOwner}[{objectQualifier}Users] AS p ON j.ProfileId = p.UserID LEFT OUTER JOIN
            {databaseOwner}[{objectQualifier}Users] AS a ON j.UserId = a.UserID
WHERE	RowNumber BETWEEN @RowIndex AND @EndRow
ORDER BY RowNumber ASC;



GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Save]
@PortalId int,
@JournalId int,
@JournalTypeId int,
@UserId int,
@ProfileId int,
@GroupId int,
@Title nvarchar(255),
@Summary nvarchar(2000),
@ItemData nvarchar(2000),
@JournalXML xml,
@ObjectKey nvarchar(255),
@AccessKey uniqueidentifier,
@SecuritySet nvarchar(2000)
AS
INSERT INTO {databaseOwner}[{objectQualifier}Journal]
	(JournalTypeId, UserId, DateCreated, DateUpdated, PortalId, ProfileId, GroupId,Title,Summary, ObjectKey, AccessKey, ItemData)
	VALUES
	(@JournalTypeId, @UserId, GETUTCDATE(), GETUTCDATE(), @PortalId, @ProfileId, @GroupId, @Title, @Summary, @ObjectKey, @AccessKey, @ItemData)
SET @JournalId = SCOPE_IDENTITY()
BEGIN
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Security]
	(JournalId, SecurityKey) 
	SELECT @JournalId, string from {databaseOwner}[{objectQualifier}Journal_SplitText](@SecuritySet,',')
END
IF @JournalXML IS NOT NULL
BEGIN
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Data]
	(JournalId, JournalXML)
	VALUES
	(@JournalId, @JournalXML)
END
SELECT @JournalId


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Comment_Delete]
@JournalId int,
@CommentId int
AS
DELETE FROM {databaseOwner}[{objectQualifier}Journal_Comments] 
	WHERE 
		(JournalId = @JournalId AND CommentId = @CommentId)
		OR
		(JournalId = @JournalId AND CommentId = -1)


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Comment_List]
@JournalId int
AS
SELECT jc.*, u.* FROM {databaseOwner}[{objectQualifier}Journal_Comments] as jc 
	INNER JOIN {databaseOwner}[{objectQualifier}Users] as u ON jc.UserId = u.UserId
WHERE jc.JournalId = @JournalId
ORDER BY jc.CommentId


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Comment_Save]
@JournalId int,
@CommentId int,
@UserId int,
@Comment nvarchar(2000),
@CommentXML xml
AS
IF EXISTS(SELECT * FROM {databaseOwner}[{objectQualifier}Journal_Comments] WHERE JournalId = @JournalId AND CommentId = @CommentId)
	BEGIN
		UPDATE {databaseOwner}[{objectQualifier}Journal_Comments]
			SET Comment = @Comment,
				CommentXML = @CommentXML,
				DateUpdated = GETUTCDATE()
			WHERE JournalId = @JournalId AND CommentId = @CommentId
	END
ELSE
	BEGIN
	INSERT INTO {databaseOwner}[{objectQualifier}Journal_Comments]
		(JournalId, UserId, Comment, CommentXML, DateCreated, DateUpdated)
		VALUES
		(@JournalId, @UserId, @Comment, @CommentXML, GETUTCDATE(), GETUTCDATE())
	SET @CommentId = SCOPE_IDENTITY()
	END
SELECT @CommentId


GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO









CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Comment_Like]
@JournalId int,
@CommentId int,
@UserId int,
@UserName nvarchar(50)
AS
DECLARE @cxml xml
SET @cxml = (SELECT CommentXML FROM {databaseOwner}[{objectQualifier}Journal_Comment] WHERE CommentId = @CommentId AND JournalId = @JournalId)
IF @cxml IS NULL 
	BEGIN
	DECLARE @x xml
		SET @x = '<root></root>';
		UPDATE {databaseOwner}[{objectQualifier}Journal_Comments] 
			SET CommentXML = @x
			WHERE JournalId = @JournalId AND CommentId = @CommentId
	END
IF EXISTS(SELECT CommentId
			FROM {databaseOwner}[{objectQualifier}Journal_Comments] 
			WHERE JournalId = @JournalId AND CommentId = @CommentId
				AND 
				CommentXML.exist('/root/likes/u[@uid=sql:variable("@userid")]') = 1)
	BEGIN
		UPDATE {databaseOwner}[{objectQualifier}Journal_Comments]
			SET CommentXML.modify('delete (/root/likes/u[@uid=sql:variable("@UserId")])')
			WHERE JournalId = @JournalId AND CommentId = @CommentId
			AND journalxml.exist('/root/likes/u[@uid=sql:variable("@UserId")]') = 1
	END
ELSE
	BEGIN
		BEGIN
			IF NOT EXISTS(SELECT CommentId FROM {databaseOwner}[{objectQualifier}Journal_Comments]
							WHERE JournalId = @JournalId AND CommentId = @CommentID
									AND
								CommentXML.exist('/root/likes') = 1)
				BEGIN
					UPDATE {databaseOwner}[{objectQualifier}Journal_Comments]
					SET CommentXML.modify('insert <likes /> as last into (/root)[1]') 
					WHERE JournalId = @JournalId AND CommentId = @CommentId AND CommentXML.exist('/root') = 1
					
				END
		END
		BEGIN
			UPDATE {databaseOwner}[{objectQualifier}Journal_Comments]
			SET CommentXML.modify('insert <u uid="{xs:string(sql:variable("@UserId"))}" un="{xs:string(sql:variable("@UserName"))}" /> as last into (/root/likes)[1]')
			Where JournalId = @JournalId AND CommentId = @CommentId AND CommentXML.exist('/root/likes') = 1

		END
	END







GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Comment_ListByJournalIds]
@JounalIds nvarchar(max) = ''
AS
SELECT jc.*, u.* FROM {databaseOwner}[{objectQualifier}Journal_Comments] as jc 
	INNER JOIN {databaseOwner}[{objectQualifier}Users] as u ON jc.UserId = u.UserId
	INNER JOIN {databaseOwner}[{objectQualifier}Journal_Split](@JounalIds,';') as j ON j.id = jc.JournalId
ORDER BY jc.CommentId ASC






GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Comment_Get]
@CommentId int
AS
SELECT jc.*, u.* FROM {databaseOwner}[{objectQualifier}Journal_Comments] as jc 
	INNER JOIN {databaseOwner}[{objectQualifier}Users] as u ON jc.UserId = u.UserId
WHERE jc.CommentId = @CommentId




GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Types_List]
@PortalId int
AS
SELECT * 
FROM {databaseOwner}[{objectQualifier}Journal_Types]
WHERE (PortalId = -1 OR PortalId = @PortalId)



GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO





CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Types_Save]
@JournalTypeId int,
@JournalType nvarchar(25),
@icon nvarchar(25),
@PortalId int,
@IsEnabled bit,
@AppliesToProfile bit,
@AppliesToGroup bit,
@AppliesToStream bit,
@options nvarchar(max),
@SupportsNotify bit
AS
IF EXISTS(SELECT JournalTypeId from {databaseOwner}[{objectQualifier}Journal_Types] WHERE JournalTypeId=@JournalTypeId AND PortalId = @PortalId)
	BEGIN
		UPDATE {databaseOwner}[{objectQualifier}Journal_Types]
			SET
				JournalType=@JournalType,
				icon=@icon,
				IsEnabled = @IsEnabled,
				AppliesToProfile = @AppliesToProfile,
				AppliesToGroup = @AppliesToGroup,
				AppliesToStream = @AppliesToStream,
				Options = @options,
				SupportsNotify = @SupportsNotify
			WHERE
				PortalId = @PortalId AND JournalTypeId = @JournalTypeId
	END
ELSE
	BEGIN
		SET @JournalTypeId = (SELECT MAX(JournalTypeId)+1 FROM {databaseOwner}[{objectQualifier}Journal_Types])
		INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
			(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify)
			VALUES
			(@JournalTypeId, @JournalType, @icon, @PortalId, @IsEnabled, @AppliesToProfile, @AppliesToGroup, @AppliesToStream, @options, @SupportsNotify)
	END
SELECT @JournalTypeId	




GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Types_Delete]
@JournalTypeId int,
@PortalId int
AS
IF @JournalTypeId > 200
	BEGIN
		DELETE FROM {databaseOwner}[{objectQualifier}Journal_Security]
		WHERE JournalId IN (SELECT JournalId FROM {databaseOwner}[{objectQualifier}Journal] WHERE JournalTypeId=@JournalTypeId AND PortalId=@PortalId)
		DELETE FROM {databaseOwner}[{objectQualifier}Journal]
		WHERE 
			JournalTypeId = @JournalTypeId 
			AND 
			PortalId = @PortalId
		DELETE FROM {databaseOwner}[{objectQualifier}Journal_TypeFilters]
		WHERE
			JournalTypeId = @JournalTypeId
			AND 
			PortalId = @PortalId
		DELETE FROM {databaseOwner}[{objectQualifier}Journal_Types]
		WHERE 
			JournalTypeId = @JournalTypeId
			AND
			PortalId = @PortalId
	END




GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO




CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Types_GetById]
@JournalTypeId int
AS
SELECT * from {databaseOwner}[{objectQualifier}Journal_Types] WHERE JournalTypeId = @JournalTypeId
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Types_Get]
@JournalType nvarchar(25)
AS
SELECT * from {databaseOwner}[{objectQualifier}Journal_Types] WHERE JournalType = @JournalType
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_UpdateContentItemId]
@JournalId int,
@ContentItemId int
AS
UPDATE {databaseOwner}[{objectQualifier}Journal]
	SET ContentItemId = @ContentItemId
WHERE JournalId = @JournalId

GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Delete]
@JournalId int
AS
DELETE FROM {databaseOwner}[{objectQualifier}Journal_Security] WHERE JournalId = @JournalId
DELETE FROM {databaseOwner}[{objectQualifier}Journal_Comments] WHERE JournalId = @JournalId
DELETE FROM {databaseOwner}[{objectQualifier}Journal] WHERE JournalId = @JournalId

GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Get]
@PortalId int,
@CurrentUserId int,
@JournalId int
AS
SELECT     j.JournalId, j.JournalTypeId, j.Title, j.Summary, j.UserId, j.DateCreated, j.DateUpdated, j.PortalId,
			j.ProfileId, j.GroupId, j.ObjectKey, j.AccessKey,
			"JournalOwner" = '<entity><id>' + CAST(p.UserId as nvarchar(150)) + '</id><name>' + p.DisplayName + '</name></entity>',
			"JournalAuthor" = CASE WHEN ISNULL(a.UserId,-1) >0 THEN '<entity><id>' + CAST(a.UserId as nvarchar(150)) + '</id><name>' + a.DisplayName + '</name></entity>' ELSE '' END,
			"JournalOwnerId" = ISNULL(j.ProfileId,j.UserId),
			 jt.Icon, jt.JournalType,
			"Profile" = CASE WHEN j.ProfileId > 0 THEN '<entity><id>' + CAST(p.UserID as nvarchar(150)) + '</id><name><![CDATA[' + p.DisplayName + ']]></name><vanity></vanity></entity>' ELSE '' END,
			jd.JournalXML, ContentItemId, j.ItemData			
FROM       	{databaseOwner}[{objectQualifier}Journal] AS j INNER JOIN
			{databaseOwner}[{objectQualifier}Journal_Types] as jt ON jt.JournalTypeId = j.JournalTypeId LEFT OUTER JOIN
			{databaseOwner}[{objectQualifier}Journal_Data] as jd on jd.JournalId = j.JournalId LEFT OUTER JOIN
            {databaseOwner}[{objectQualifier}Users] AS p ON j.ProfileId = p.UserID LEFT OUTER JOIN
            {databaseOwner}[{objectQualifier}Users] AS a ON j.UserId = a.UserID
WHERE j.JournalId = @JournalId

GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Like]
@JournalId int,
@UserId int,
@UserName nvarchar(50)
AS 
IF NOT EXISTS (SELECT JournalId from {databaseOwner}[{objectQualifier}Journal_Data] WHERE JournalId = @JournalId)
	BEGIN
		DECLARE @x xml
		SET @x = '<items><item /></items>';
		INSERT INTO {databaseOwner}[{objectQualifier}Journal_Data] 
			(JournalId, JournalXML)
			VALUES
			(@JournalId, @x)
	END
IF EXISTS(SELECT j.JournalId 
			FROM {databaseOwner}{objectQualifier}Journal as j INNER JOIN
				{databaseOwner}{objectQualifier}Journal_Data as jx ON j.JournalId = jx.JournalId 
			WHERE j.JournalId = @JournalId 
				AND 
				jx.journalxml.exist('/items/likes/u[@uid=sql:variable("@userid")]') = 1)
BEGIN
UPDATE {databaseOwner}{objectQualifier}Journal_Data
SET JournalXML.modify('delete (/items/likes/u[@uid=sql:variable("@UserId")])')
WHERE JournalId = @JournalId 
	AND journalxml.exist('/items/likes/u[@uid=sql:variable("@UserId")]') = 1
END
ELSE
	BEGIN
		BEGIN
			IF NOT EXISTS(SELECT JournalId FROM {databaseOwner}{objectQualifier}Journal_Data
							WHERE JournalId = @JournalId 
									AND
								journalxml.exist('/items/likes') = 1)
				BEGIN
					UPDATE {databaseOwner}{objectQualifier}Journal_Data
					SET JournalXML.modify('insert <likes /> as last into (/items)[1]') 
					WHERE JournalId = @JournalId AND journalxml.exist('/items') = 1
				END
		END
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}Journal_Data
			SET JournalXML.modify('insert <u uid="{xs:string(sql:variable("@UserId"))}" un="{xs:string(sql:variable("@UserName"))}" /> as last into (/items/likes)[1]')
			Where JournalId = @JournalId AND journalxml.exist('/items/likes') = 1
		END
	END

GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_LikeList]
@PortalId int,
@JournalId int
AS
DECLARE @xdoc xml
set @xdoc = (SELECT journalxml.query('//likes') 
				from {databaseOwner}[{objectQualifier}Journal_Data] as jd
				INNER JOIN {databaseOwner}[{objectQualifier}Journal] as j ON j.JournalId = jd.JournalId
				 WHERE j.JournalId = @JournalId AND j.PortalId = @PortalId)
Select u.UserId, u.DisplayName,u.FirstName,u.LastName,u.Email,u.Username 
	FROM @xdoc.nodes('/likes//u') as e(x) 
CROSS APPLY {databaseOwner}[{objectQualifier}Users] as u
WHERE u.UserID = x.value('@uid[1]','int')

GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_GetStatsForGroup]
@PortalId int,
@GroupId int
AS
SELECT Count(j.JournalTypeId) as JournalTypeCount, jt.JournalType from {databaseOwner}[{objectQualifier}Journal] as j 
	INNER JOIN {databaseOwner}[{objectQualifier}Journal_Types] as jt ON jt.JournalTypeId = j.JournalTypeId
WHERE j.GroupId = @GroupId AND j.PortalId = @PortalId
Group BY j.JournalTypeId, jt.JournalType

GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_TypeFilters_Save]
@PortalId int,
@ModuleId int,
@JournalTypeId int
AS
INSERT INTO {databaseOwner}[{objectQualifier}Journal_TypeFilters] 
	(PortalId, ModuleId, JournalTypeId)
	VALUES
	(@PortalId, @ModuleId, @JournalTypeId)

GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_TypeFilters_Delete]
@PortalId int,
@ModuleId int
AS
DELETE FROM {databaseOwner}[{objectQualifier}Journal_TypeFilters] WHERE PortalId = @PortalId AND ModuleId=@ModuleId

GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_TypeFilters_List]
@PortalId int,
@ModuleId int
AS
SELECT jt.JournalTypeId, jt.JournalType from {databaseOwner}[{objectQualifier}Journal_Types] as jt INNER JOIN
	{databaseOwner}[{objectQualifier}Journal_TypeFilters] as jf ON jf.JournalTypeId = jt.JournalTypeId
WHERE jt.PortalId = @PortalId AND jf.ModuleId = @ModuleId

GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_GetByKey]
@PortalId int,
@ObjectKey nvarchar(255)
AS
SELECT     j.JournalId, j.JournalTypeId, j.Title, j.Summary, j.UserId, j.DateCreated, j.DateUpdated, j.PortalId,
			j.ProfileId, j.GroupId, j.ObjectKey, j.AccessKey,
			"JournalOwner" = '<entity><id>' + CAST(p.UserId as nvarchar(150)) + '</id><name>' + p.DisplayName + '</name></entity>',
			"JournalAuthor" = CASE WHEN ISNULL(a.UserId,-1) >0 THEN '<entity><id>' + CAST(a.UserId as nvarchar(150)) + '</id><name>' + a.DisplayName + '</name></entity>' ELSE '' END,
			"JournalOwnerId" = ISNULL(j.ProfileId,j.UserId),
			 jt.Icon, jt.JournalType,
			"Profile" = CASE WHEN j.ProfileId > 0 THEN '<entity><id>' + CAST(p.UserID as nvarchar(150)) + '</id><name><![CDATA[' + p.DisplayName + ']]></name><vanity></vanity></entity>' ELSE '' END,
			jd.JournalXML, ContentItemId, j.ItemData			
FROM       	{databaseOwner}[{objectQualifier}Journal] AS j INNER JOIN
			{databaseOwner}[{objectQualifier}Journal_Types] as jt ON jt.JournalTypeId = j.JournalTypeId LEFT OUTER JOIN
			{databaseOwner}[{objectQualifier}Journal_Data] as jd on jd.JournalId = j.JournalId LEFT OUTER JOIN
            {databaseOwner}[{objectQualifier}Users] AS p ON j.ProfileId = p.UserID LEFT OUTER JOIN
            {databaseOwner}[{objectQualifier}Users] AS a ON j.UserId = a.UserID
WHERE j.ObjectKey = @ObjectKey AND j.ObjectKey IS NOT NULL AND @ObjectKey <> ''


GO



CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_DeleteByKey]
@PortalId int,
@ObjectKey nvarchar(255) 
AS
DECLARE @JournalId int
SET @JournalId = (SELECT JournalId FROM {databaseOwner}[{objectQualifier}Journal] WHERE PortalId = @PortalId AND ObjectKey = @ObjectKey AND @ObjectKey <> '' AND ObjectKey IS NOT NULL)
IF @JournalId > 0
BEGIN
DELETE FROM {databaseOwner}[{objectQualifier}Journal_Security] WHERE JournalId = @JournalId
DELETE FROM {databaseOwner}[{objectQualifier}Journal_Comments] WHERE JournalId = @JournalId
DELETE FROM {databaseOwner}[{objectQualifier}Journal] WHERE JournalId = @JournalId
END


GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_DeleteByGroupId]
@PortalId int,
@GroupId int 
AS
DELETE {databaseOwner}[{objectQualifier}Journal_Security] 
FROM {databaseOwner}[{objectQualifier}Journal_Security] as js  INNER JOIN {databaseOwner}[{objectQualifier}Journal] as j 
   ON js.JournalId = j.JournalId
WHERE j.PortalId = @PortalId AND j.GroupId = @GroupId AND @GroupId > 0 AND j.GroupId IS NOT NULL

DELETE {databaseOwner}[{objectQualifier}Journal_Comments] 
FROM {databaseOwner}[{objectQualifier}Journal_Comments] as jc  INNER JOIN {databaseOwner}[{objectQualifier}Journal] as j 
   ON jc.JournalId = j.JournalId
WHERE j.PortalId = @PortalId AND j.GroupId = @GroupId AND @GroupId > 0 AND j.GroupId IS NOT NULL

DELETE FROM {databaseOwner}[{objectQualifier}Journal] WHERE PortalId = @PortalId AND GroupId = @GroupId AND @GroupId > 0 AND GroupId IS NOT NULL



GO



INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify)
	VALUES
	(1, 'status', '', -1, 1, 1, 1, 1, null, 1)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify)
	VALUES
	(2, 'link', '', -1, 1, 1, 1, 1, null, 1)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify)
	VALUES
	(3, 'photo', '', -1, 1, 1, 1, 1, null, 1)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify)
	VALUES
	(4, 'file', '', -1, 1, 1, 1, 1, null, 1)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify)
	VALUES
	(5, 'forum_topic', '', -1, 1, 1, 1, 1, null, 1)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify)
	VALUES
	(6, 'forum_reply', '', -1, 1, 1, 1, 1, null, 1)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify)
	VALUES
	(7, 'blog', '', -1, 1, 1, 1, 1, null, 1)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify)
	VALUES
	(8, 'friend', '', -1, 1, 1, 1, 1, null, 1)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify)
	VALUES
	(9, 'groupcreate', '', -1, 1, 1, 1, 1, null, 1)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify)
	VALUES
	(10, 'groupjoin', '', -1, 1, 1, 1, 1, null, 1)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify)
	VALUES
	(11, 'wikiadd', '', -1, 1, 1, 1, 1, null, 1)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify)
	VALUES
	(12, 'wikiupdate', '', -1, 1, 1, 1, 1, null, 1)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify)
	VALUES
	(13, 'documentadd', '', -1, 1, 1, 1, 1, null, 1)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify)
	VALUES
	(14, 'documentupdate', '', -1, 1, 1, 1, 1, null, 1)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify, EnableComments)
	VALUES
	(15, 'articleadd', '', -1, 1, 1, 1, 1, null, 1, 0)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify)
	VALUES
	(16, 'videoadd', '', -1, 1, 1, 1, 1, null, 1)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify)
	VALUES
	(17, 'vote', '', -1, 1, 1, 1, 1, null, 1)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify, EnableComments)
	VALUES
	(18, 'comment', '', -1, 1, 1, 1, 1, null, 1, 0)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify, EnableComments)
	VALUES
	(19, 'question', '', -1, 1, 1, 1, 1, null, 1, 0)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify, EnableComments)
	VALUES
	(20, 'answer', '', -1, 1, 1, 1, 1, null, 1, 0)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify)
	VALUES
	(21, 'eventcreate', '', -1, 1, 1, 1, 1, null, 1)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify)
	VALUES
	(22, 'eventattend', '', -1, 1, 1, 1, 1, null, 1)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify)
	VALUES
	(23, 'projectcreated', '', -1, 1, 1, 1, 1, null, 1)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify)
	VALUES
	(24, 'projectupdated', '', -1, 1, 1, 1, 1, null, 1)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify)
	VALUES
	(25, 'reviewadd', '', -1, 1, 1, 1, 1, null, 1)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify)
	VALUES
	(26, 'reviewupdate', '', -1, 1, 1, 1, 1, null, 1)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify)
	VALUES
	(27, 'survey', '', -1, 1, 1, 1, 1, null, 1)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify)
	VALUES
	(28, 'taskadd', '', -1, 1, 1, 1, 1, null, 1)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify)
	VALUES
	(29, 'taskupdate', '', -1, 1, 1, 1, 1, null, 1)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify)
	VALUES
	(30, 'privilege', '', -1, 1, 1, 1, 1, null, 1)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify, EnableComments)
	VALUES
	(31, 'ideaadd', '', -1, 1, 1, 1, 1, null, 1, 0)
GO
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
	(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify, EnableComments)
	VALUES
	(32, 'ideaupdate', '', -1, 1, 1, 1, 1, null, 1, 0)
GO


/* Add GetMessageConversations Procedure */
/*****************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_GetMessageConversations]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetMessageConversations]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetMessageConversations]
	@UserID int,
	@PortalID int,
	@AfterMessageID int,
	@NumberOfRecords int,
	@SortField nvarchar(25) = 'CreatedOnDate',
	@SortAscending bit = 0,
	@Read bit = 0,
	@Archived bit = 0,
	@SentOnly bit = 0
AS
BEGIN
	--Get the top message for each conversation
	;WITH RollUpMessageIDs AS
	(
		SELECT MAX(m.MessageID) AS TopMessageID
		FROM {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] mr
		INNER JOIN {databaseOwner}[{objectQualifier}CoreMessaging_Messages] m ON mr.MessageID = m.MessageID
		WHERE ((Archived = @Archived) or (@Archived is null AND [Archived] IS NOT null))
		AND (([Read] = @Read) or (@Read is null AND [READ] IS NOT null))
		AND ((@SentOnly = 1 AND SenderUserID = @UserID) or (@SentOnly is NULL AND UserID = @UserID) or (@SentOnly = 0 AND UserID = @UserID))
		AND m.NotificationTypeID IS NULL AND m.PortalID=@PortalID
		GROUP BY ConversationID
	)
	,Conversations  AS
	(
		SELECT  DISTINCT [MessageID], [ConversationID], [Subject], convert(nvarchar(50), [Body]) AS Body,
				[To], [From], [ReplyAllAllowed], [SenderUserID],
				[CreatedByUserID], [CreatedOnDate],
				[LastModifiedByUserID], [LastModifiedOnDate],
				(SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}CoreMessaging_MessageAttachments WHERE MessageID IN (SELECT MessageID FROM {databaseOwner}{objectQualifier}CoreMessaging_Messages WHERE ConversationID = m.ConversationID)) AS AttachmentCount,
				(SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients WHERE MessageID IN (SELECT MessageID FROM {databaseOwner}{objectQualifier}CoreMessaging_Messages WHERE ConversationID = m.ConversationID) AND UserID = @UserID AND [READ] = 0) AS NewThreadCount,
				(SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients WHERE MessageID IN (SELECT MessageID FROM {databaseOwner}{objectQualifier}CoreMessaging_Messages WHERE ConversationID = m.ConversationID) AND UserID = @UserID) AS ThreadCount,
				ROW_NUMBER() OVER(ORDER BY
					 CASE WHEN @SortField = 'CreatedOnDate' AND @SortAscending = 1 THEN [CreatedOnDate] END ASC,
					 CASE WHEN @SortField = 'CreatedOnDate' AND @SortAscending = 0 THEN [CreatedOnDate] END DESC,
					 CASE WHEN @SortField = 'From' AND @SortAscending = 1 THEN [From] END ASC,
					 CASE WHEN @SortField = 'From' AND @SortAscending = 0 THEN [From] END DESC,
					 CASE WHEN @SortField = 'Subject' AND @SortAscending = 1 THEN [Subject] END ASC,
					 CASE WHEN @SortField = 'Subject' AND @SortAscending = 0 THEN [Subject] END DESC
					) AS RowNumber
		FROM {databaseOwner}{objectQualifier}CoreMessaging_Messages AS m
		WHERE MessageID IN (SELECT TopMessageID FROM RollUpMessageIDs)
	)
	SELECT * FROM Conversations
	WHERE (@AfterMessageID > 0 AND RowNumber BETWEEN (SELECT RowNumber + 1 FROM Conversations WHERE [MessageID] = @AfterMessageID) AND (SELECT RowNumber + @NumberOfRecords FROM Conversations WHERE [MessageID] = @AfterMessageID)) OR
	(@AfterMessageID = -1 AND RowNumber BETWEEN 1 AND @NumberOfRecords)
	ORDER BY RowNumber ASC
END
GO

/* Add GetMessageThread Procedure */
/************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_GetMessageThread]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetMessageThread]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetMessageThread]
    @ConversationID int,
	@UserID int,
	@AfterMessageID int,
	@NumberOfRecords int,
	@SortField nvarchar(25) = 'CreatedOnDate',
	@SortAscending bit = 0
AS
BEGIN
	--Cannot return thread if user was not a recipient
	IF NOT EXISTS (SELECT MR.RecipientID FROM {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] MR JOIN {databaseOwner}[{objectQualifier}CoreMessaging_Messages] M ON MR.MessageID = M.MessageID WHERE MR.UserID = @UserID AND M.NotificationTypeID IS NULL) BEGIN
		SELECT 0
		RETURN
	END

	;WITH inboxItems  AS
	(
		SELECT  DISTINCT [RecipientID], [Subject], [Body], [SenderUserID],
				[Read], [Archived], [UserID], [To], [From], [ReplyAllAllowed], [ConversationID],
				m.[MessageID],
				m.[CreatedByUserID], m.[CreatedOnDate],
				m.[LastModifiedByUserID], m.[LastModifiedOnDate],
				(SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}CoreMessaging_MessageAttachments WHERE MessageID = mr.MessageID) AS AttachmentCount,
				(SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients WHERE MessageID IN (SELECT MessageID FROM {databaseOwner}{objectQualifier}CoreMessaging_Messages WHERE ConversationID = m.ConversationID) AND UserID = @UserID AND [READ] = 0) AS NewThreadCount,
				(SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients WHERE MessageID IN (SELECT MessageID FROM {databaseOwner}{objectQualifier}CoreMessaging_Messages WHERE ConversationID = m.ConversationID) AND UserID = @UserID) AS ThreadCount,
				ROW_NUMBER() OVER(ORDER BY
					 CASE WHEN @SortField = 'CreatedOnDate' AND @SortAscending = 1 THEN m.[CreatedOnDate] END ASC,
					 CASE WHEN @SortField = 'CreatedOnDate' AND @SortAscending = 0 THEN m.[CreatedOnDate] END DESC,
					 CASE WHEN @SortField = 'From' AND @SortAscending = 1 THEN [From] END ASC,
					 CASE WHEN @SortField = 'From' AND @SortAscending = 0 THEN [From] END DESC,
					 CASE WHEN @SortField = 'Subject' AND @SortAscending = 1 THEN [Subject] END ASC,
					 CASE WHEN @SortField = 'Subject' AND @SortAscending = 0 THEN [Subject] END DESC
					) AS RowNumber
		FROM	{databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients AS mr
		INNER JOIN {databaseOwner}{objectQualifier}CoreMessaging_Messages AS m ON mr.MessageID = m.MessageID
		WHERE mr.UserID = @UserID
		AND ConversationID = @ConversationID
	)
	SELECT * FROM inboxItems
	WHERE (@AfterMessageID > 0 AND RowNumber BETWEEN (SELECT RowNumber + 1 FROM inboxItems WHERE [MessageID] = @AfterMessageID) AND (SELECT RowNumber + @NumberOfRecords FROM inboxItems WHERE [MessageID] = @AfterMessageID)) OR
	(@AfterMessageID = -1 AND RowNumber BETWEEN 1 AND @NumberOfRecords)
	ORDER BY RowNumber ASC
END
GO

/* Add GetSentBox Procedure */
/************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_GetSentBox]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetSentBox]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetSentBox]
	@UserID int,
	@PortalID int,
	@AfterMessageId int,
	@NumberOfRecords int,
	@SortField nvarchar(25) = 'CreatedOnDate',
	@SortAscending bit = 0
AS
BEGIN
	;WITH SentBox AS
	(
		SELECT DISTINCT [MessageID], [ConversationID], [Subject], convert(nvarchar(50), [Body]) AS Body,
				[To], [From], [ReplyAllAllowed], [SenderUserID],
				[CreatedByUserID], [CreatedOnDate],
				[LastModifiedByUserID], [LastModifiedOnDate],
				(SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}CoreMessaging_MessageAttachments WHERE MessageID = m.MessageID) AS AttachmentCount,
				(SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients WHERE MessageID IN (SELECT MessageID FROM {databaseOwner}{objectQualifier}CoreMessaging_Messages WHERE ConversationID = m.ConversationID) AND UserID = @UserID AND [READ] = 0) AS NewThreadCount,
				(SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients WHERE MessageID IN (SELECT MessageID FROM {databaseOwner}{objectQualifier}CoreMessaging_Messages WHERE ConversationID = m.ConversationID) AND UserID = @UserID) AS ThreadCount,
				ROW_NUMBER() OVER(ORDER BY
					 CASE WHEN @SortField = 'CreatedOnDate' AND @SortAscending = 1 THEN [CreatedOnDate] END ASC,
					 CASE WHEN @SortField = 'CreatedOnDate' AND @SortAscending = 0 THEN [CreatedOnDate] END DESC,
					 CASE WHEN @SortField = 'From' AND @SortAscending = 1 THEN [From] END ASC,
					 CASE WHEN @SortField = 'From' AND @SortAscending = 0 THEN [From] END DESC,
					 CASE WHEN @SortField = 'Subject' AND @SortAscending = 1 THEN [Subject] END ASC,
					 CASE WHEN @SortField = 'Subject' AND @SortAscending = 0 THEN [Subject] END DESC
					) AS RowNumber
		FROM {databaseOwner}{objectQualifier}CoreMessaging_Messages AS m
		WHERE SenderUserID = @UserID
		AND NotificationTypeID IS NULL AND PortalID = @PortalID
	)
	SELECT * FROM SentBox
	WHERE (@AfterMessageID > 0 AND RowNumber BETWEEN (SELECT RowNumber + 1 FROM SentBox WHERE [MessageID] = @AfterMessageID) AND (SELECT RowNumber + @NumberOfRecords FROM SentBox WHERE [MessageID] = @AfterMessageID)) OR
	(@AfterMessageID = -1 AND RowNumber BETWEEN 1 AND @NumberOfRecords)
	ORDER BY RowNumber ASC
END
GO

/* Add GetArchiveBox Procedure */
/*******************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_GetArchiveBox]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetArchiveBox]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetArchiveBox]
	@UserID int,
	@PortalID int,
	@AfterMessageID int,
	@NumberOfRecords int,
	@SortField nvarchar(25) = 'CreatedOnDate',
	@SortAscending bit = 0
AS
BEGIN
	;WITH ArchiveBox AS
	(
		SELECT DISTINCT m.[MessageID], [ConversationID], [Subject], convert(nvarchar(50), [Body]) AS Body,
				[To], [From], [ReplyAllAllowed], [SenderUserID],
				m.[CreatedByUserID], m.[CreatedOnDate],
				m.[LastModifiedByUserID], m.[LastModifiedOnDate],
				(SELECT COUNT(*) FROM {databaseOwner}[{objectQualifier}CoreMessaging_MessageAttachments] WHERE MessageID = m.MessageID) AS AttachmentCount,
				(SELECT COUNT(*) FROM {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] WHERE MessageID IN (SELECT MessageID FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages] WHERE ConversationID = m.ConversationID) AND UserID = @UserID AND [READ] = 0) AS NewThreadCount,
				(SELECT COUNT(*) FROM {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] WHERE MessageID IN (SELECT MessageID FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages] WHERE ConversationID = m.ConversationID) AND UserID = @UserID) AS ThreadCount,
				ROW_NUMBER() OVER(ORDER BY
					 CASE WHEN @SortField = 'CreatedOnDate' AND @SortAscending = 1 THEN m.[CreatedOnDate] END ASC,
					 CASE WHEN @SortField = 'CreatedOnDate' AND @SortAscending = 0 THEN m.[CreatedOnDate] END DESC,
					 CASE WHEN @SortField = 'From' AND @SortAscending = 1 THEN [From] END ASC,
					 CASE WHEN @SortField = 'From' AND @SortAscending = 0 THEN [From] END DESC,
					 CASE WHEN @SortField = 'Subject' AND @SortAscending = 1 THEN [Subject] END ASC,
					 CASE WHEN @SortField = 'Subject' AND @SortAscending = 0 THEN [Subject] END DESC
					) AS RowNumber
		FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages] AS m
		JOIN {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] AS MR ON m.MessageID = MR.MessageID
		WHERE NotificationTypeID IS NULL AND PortalID = @PortalID AND MR.UserID = @UserID AND MR.Archived = 1
	)
	SELECT * FROM ArchiveBox
	WHERE (@AfterMessageID > 0 AND RowNumber BETWEEN (SELECT RowNumber + 1 FROM ArchiveBox WHERE [MessageID] = @AfterMessageID) AND (SELECT RowNumber + @NumberOfRecords FROM ArchiveBox WHERE [MessageID] = @AfterMessageID)) OR
	(@AfterMessageID = -1 AND RowNumber BETWEEN 1 AND @NumberOfRecords)
	ORDER BY RowNumber ASC
END
GO

/* Add GetLastSentMessage Procedure */
/************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_GetLastSentMessage]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetLastSentMessage]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetLastSentMessage]
	@UserID int,
	@PortalID INT
AS
BEGIN
	SELECT TOP 1 *	
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages]
	WHERE SenderUserID = @UserID	
	AND PortalID=@PortalID
	AND NotificationTypeID IS NULL
	ORDER BY MessageID DESC
END
GO

/* Add CountNewThreads Procedure */
/*********************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_CountNewThreads]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CountNewThreads]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CountNewThreads]
	@UserID int,
	@PortalID INT
AS
BEGIN
	SELECT COUNT(*) AS TotalNewThreads
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] MR
	JOIN {databaseOwner}[{objectQualifier}CoreMessaging_Messages] M ON MR.MessageID = M.MessageID
	WHERE MR.UserID = @UserID
	AND MR.[Read] = 0
	AND M.PortalID=@PortalID
	AND M.NotificationTypeID IS NULL
END
GO

/* Add CountTotalConversations Procedure */
/*****************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_CountTotalConversations]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CountTotalConversations]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CountTotalConversations]
	@UserID int,
	@PortalID int
AS
BEGIN
	SELECT COUNT(DISTINCT M.ConversationID) AS TotalConversations
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages] M
	JOIN {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] MR ON M.MessageID = MR.MessageID
	WHERE NotificationTypeID IS NULL AND PortalID = @PortalID AND Archived = 0 AND UserID = @UserID
END
GO

/* Add CountMessagesByConversation Procedure */
/*********************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_CountMessagesByConversation]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CountMessagesByConversation]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CountMessagesByConversation]
	@ConversationID int
AS
BEGIN
	SELECT COUNT(*) AS TotalRecords
	FROM {databaseOwner}{objectQualifier}CoreMessaging_Messages
	WHERE (ConversationID = @ConversationID)
END
GO

/* Add CountArchivedMessagesByConversation Procedure */
/*****************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_CountArchivedMessagesByConversation]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CountArchivedMessagesByConversation]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CountArchivedMessagesByConversation]
	@ConversationID int
AS
BEGIN
	SELECT COUNT(*) AS TotalArchivedThreads
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients]
	WHERE MessageID IN (SELECT MessageID FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages] WHERE ConversationID = @ConversationID)
	AND [Archived] = 1
END
GO

/* Add CountSentMessages Procedure */
/***********************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_CountSentMessages]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CountSentMessages]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CountSentMessages]
	@UserID int,
	@PortalID int
AS
BEGIN
	SELECT COUNT(MessageID) AS TotalRecords
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages]
	WHERE SenderUserID = @UserID
	AND NotificationTypeID IS NULL AND PortalID = @PortalID
END
GO

/* Add CountArchivedMessages Procedure */
/***************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_CountArchivedMessages]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CountArchivedMessages]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CountArchivedMessages]
	@UserID int,
	@PortalID int
AS
BEGIN
	SELECT COUNT(DISTINCT M.MessageID) AS TotalRecords
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages] M
	JOIN {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] MR ON M.MessageID = MR.MessageID
	WHERE Archived = 1
	AND NotificationTypeID IS NULL AND PortalID = @PortalID AND UserID = @UserID
END
GO

/* Add UpdateMessageReadStatus Procedure */
/***********************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_UpdateMessageReadStatus]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_UpdateMessageReadStatus]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_UpdateMessageReadStatus]
	@ConversationID int,
	@UserID          int,
	@Read			 bit
AS
BEGIN
UPDATE {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] SET [Read]=@Read 
WHERE UserID = @UserID
AND MessageID IN (SELECT MessageID FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages] WHERE ConversationID=@ConversationID)
END
GO

/* Add UpdateMessageArchivedStatus Procedure */
/***************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_UpdateMessageArchivedStatus]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_UpdateMessageArchivedStatus]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_UpdateMessageArchivedStatus]
	@ConversationID int,
	@UserID int,
	@Archived bit
AS
BEGIN
	UPDATE {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients]
	SET [Archived] = @Archived
	WHERE UserID = @UserID
	AND MessageID IN (SELECT MessageID FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages] WHERE ConversationID = @ConversationID)

	IF @Archived = 1 BEGIN
		-- If archiving, set also as read
		UPDATE {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients]
		SET [Read] = 1
		WHERE [UserID] = @UserID
		AND MessageID IN (SELECT MessageID FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages] WHERE ConversationID = @ConversationID)
	END
END
GO

/* Add GetUserRelationships Procedure */
/**************************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetUserRelationships]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationships]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationships]
	@UserID INT
AS 
	SELECT  UserRelationshipID,
			UserID,
			RelatedUserID,
			RelationshipID,            
			Status,            
			CreatedByUserID ,
			CreatedOnDate ,
			LastModifiedByUserID ,
			LastModifiedOnDate
	FROM    {databaseOwner}{objectQualifier}UserRelationships    		
	WHERE UserID = @UserID OR RelatedUserID = @UserID
GO

/* Update UserProfile Table */
/****************************/

ALTER TABLE {databaseOwner}[{objectQualifier}UserProfile]
ALTER COLUMN PropertyText nvarchar(max)

/* Add Profile View */
/********************/

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}vw_Profile]') and OBJECTPROPERTY(id, N'IsView') = 1)
	DROP VIEW {databaseOwner}[{objectQualifier}vw_Profile]
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_Profile]
AS
	SELECT     
		UP.UserID, 
		PD.PortalId, 
		PD.PropertyName, 
		CASE WHEN PropertyText IS NULL THEN PropertyValue ELSE PropertyText END AS PropertyValue
	FROM  {databaseOwner}{objectQualifier}UserProfile AS UP 
		INNER JOIN {databaseOwner}{objectQualifier}ProfilePropertyDefinition AS PD ON PD.PropertyDefinitionID = UP.PropertyDefinitionID 
GO


/* Add GetProfileFieldSql Function */
/***********************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetProfileFieldSql]') AND type in (N'FN', N'TF'))
	DROP FUNCTION {databaseOwner}[{objectQualifier}GetProfileFieldSql]
GO

CREATE FUNCTION {databaseOwner}[{objectQualifier}GetProfileFieldSql]
(
	@PortalID int,
	@TemplateSql nvarchar(max)
)
RETURNS nvarchar(max)
AS
	BEGIN
		DECLARE @sql nvarchar(max)
		SELECT @sql = COALESCE(@sql + ',','') + '[' + PropertyName + ']' + @TemplateSql
		FROM {databaseOwner}{objectQualifier}ProfilePropertyDefinition 
		WHERE PortalID = @PortalID 
			AND Deleted = 0
		RETURN(@sql) 
	END
GO

/* Add GetSortSql Function */
/***************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetSortSql]') AND type in (N'FN', N'TF'))
	DROP FUNCTION {databaseOwner}[{objectQualifier}GetSortSql]
GO

CREATE FUNCTION {databaseOwner}[{objectQualifier}GetSortSql]
(
	@SortBy nvarchar(100),
	@SortAscending BIT,
	@Default nvarchar(100)
)
RETURNS nvarchar(max)
AS
	BEGIN
		DECLARE @sortSql nvarchar(max)
		SET @sortSql = ''
		IF @SortBy = ''
			SET @SortBy = @Default
		SET @sortSql = N'ORDER BY [' + @SortBy + CASE WHEN @SortAscending = 1 THEN N'] ASC' ELSE N'] DESC' END
		
		RETURN(@sortSql)
	END	
GO

/* Add ConvertListToTable Function */
/***********************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}ConvertListToTable]') AND type in (N'FN', N'TF', N'IF'))
	DROP FUNCTION {databaseOwner}[{objectQualifier}ConvertListToTable]
GO

CREATE FUNCTION {databaseOwner}[{objectQualifier}ConvertListToTable]
(  
	@Delimiter	nvarchar(5), 
    @List		nvarchar(max)
) 
RETURNS @TableOfValues TABLE 
(  
	RowNumber	smallint IDENTITY(1,1), 
    RowValue	nvarchar(50) 
) 
AS 
   BEGIN
      DECLARE @LenString int 
 
      WHILE len( @List ) > 0 
         BEGIN 
         
            SELECT @LenString = 
               (CASE charindex( @Delimiter, @List ) 
                   WHEN 0 THEN len( @List ) 
                   ELSE ( charindex( @Delimiter, @List ) -1 )
                END
               ) 
                                
            INSERT INTO @TableOfValues 
               SELECT substring( @List, 1, @LenString )
                
            SELECT @List = 
               (CASE ( len( @List ) - @LenString ) 
                   WHEN 0 THEN '' 
                   ELSE right( @List, len( @List ) - @LenString - 1 ) 
                END
               ) 
         END
      RETURN 
   END 
GO

/* Add GetUsersByPropertyName Function */
/***************************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetUsersByPropertyName]') AND type in (N'FN', N'TF', N'IF'))
	DROP FUNCTION {databaseOwner}[{objectQualifier}GetUsersByPropertyName]
GO

CREATE FUNCTION {databaseOwner}[{objectQualifier}GetUsersByPropertyName]
(
	@PropertyName nvarchar(100),
	@PropertyValue nvarchar(max),
	@PortalID int
)
RETURNS TABLE
AS
	RETURN
		SELECT *
			FROM {databaseOwner}{objectQualifier}vw_Profile
			WHERE PropertyName = @PropertyName 
				AND PropertyValue LIKE @PropertyValue
				AND PortalID = @PortalID

GO


/* Add GetUsersAdvancedSearch Procedure */
/****************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetUsersAdvancedSearch]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUsersAdvancedSearch]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUsersAdvancedSearch]
(
	@PortalID int,					-- portal	
	@UserId int,					-- for determining correct visibility permissions
	@FilterUserId int,				-- for filtering relationships on	
	@FilterRoleId int,				-- for filtering by roles
	@RelationshipTypeId int,		-- for filtering by relationships
	@IsAdmin bit,					-- determines visibility
	@PageSize int,					-- page size
	@PageIndex int,					-- 0 based page index
	@SortBy nvarchar(100),			-- sort field
	@SortAscending bit,				-- sort flag indicating whether sort is asc or desc
	@PropertyNames nvarchar(max),	-- list of property names to filter
	@PropertyValues nvarchar(max)	-- list of property values to filter
)
AS
	-- Setup Top XX
	DECLARE @topSql nvarchar(20) SET @topSql = ''
	IF @PageSize > -1 BEGIN SET @topSql = ' TOP ' + CONVERT(nvarchar(20), @PageSize) END
	
	-- Setup Specific Page
	DECLARE @minRowNumberSql nvarchar(20) SET @minRowNumberSql =  CONVERT(nvarchar(20), ((@PageIndex * @PageSize) + 1))
	-- Setup Pivot Field List
	DECLARE @pivotSql nvarchar(max) SELECT @pivotSql = {databaseOwner}{objectQualifier}GetProfileFieldSql(@PortalID, '')

	-- Get User specific columns
	DECLARE @UserColumns TABLE(ColumnName NVARCHAR(100))
	INSERT INTO @UserColumns SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{databaseOwner}{objectQualifier}vw_Users'

	-- Lists Filters names and values into tables
	DECLARE @PropertyNamesTable TABLE (RowNumber INT, RowValue nvarchar(MAX))
	DECLARE @PropertyValuesTable TABLE (RowNumber INT, RowValue nvarchar(MAX))
	INSERT INTO @PropertyNamesTable SELECT * FROM {databaseOwner}{objectQualifier}ConvertListToTable(',', @PropertyNames)		
	INSERT INTO @PropertyValuesTable SELECT * FROM {databaseOwner}{objectQualifier}ConvertListToTable(',', @PropertyValues)
	
	-- Gets filters that are on the User rather than Profile Properties
	DECLARE @UserFiltersTable TABLE (RowNumber Int, RowValue NVARCHAR(MAX))
	INSERT INTO @UserFiltersTable SELECT * FROM {databaseOwner}{objectQualifier}ConvertListToTable(',',@PropertyNames) WHERE RowValue IN (SELECT * FROM @UserColumns)


	DECLARE @sql nvarchar(max) SET @sql = ''
	DECLARE @filterSql nvarchar(max)SET @filterSql = ''


	-- ///////////////////////////////////////////////////
	-- FILTERING by PROFILE PROPERTY or USER PROPERTY
	-- ///////////////////////////////////////////////////
	--IF @PropertyNames IS NOT NULL AND @PropertyNames <> ''
	IF ((SELECT COUNT(*) FROM @PropertyNamesTable) > 0) AND ((SELECT COUNT(*) FROM @PropertyValuesTable)> 0) 
	BEGIN
		DECLARE @propertyFilter nvarchar(max)
		DECLARE @userFilter nvarchar(max)
		DECLARE @userFilterJoin nvarchar(max) SET @userFilterJoin = ''
		DECLARE @profilePropertyCount INT
		DECLARE @userFilterCount INT
		DECLARE @propertyAndUserFilter nvarchar(10) SET @propertyAndUserFilter = ''
		DECLARE @groupBy NVARCHAR(300)

		-- Filters on Profile Properties	
		;WITH CTE_PropertyNames(RowNumber, RowValue) AS
		(	SELECT * FROM @PropertyNamesTable
			WHERE RowValue NOT IN (SELECT ColumnName FROM @UserColumns)),
		CTE_PropertyValues(RowNumber, RowValue) AS
		(	SELECT * FROM @PropertyValuesTable
			WHERE RowValue NOT IN (SELECT ColumnName FROM @UserColumns))

		SELECT @propertyFilter = COALESCE(@propertyFilter + ' OR ' , ' ') 
									+ ' (PropertyName=''' + N.RowValue 
									+ ''' AND ((PropertyValue LIKE ''' + V.RowValue +'%'') OR (PropertyValue LIKE ''% ' + V.RowValue +'%'')))'
		FROM CTE_PropertyNames AS N INNER JOIN CTE_PropertyValues AS V ON N.RowNumber = V.RowNumber
		
		-- Filters on User Property		
		SELECT @userFilter = COALESCE(@userFilter + ' AND ', ' ')  
									+ ' ((u.' + N.RowValue + ' LIKE ''' + V.RowValue +'%'') OR (u.' + N.RowValue + ' LIKE ''% ' + V.RowValue +'%'')) '
		FROM @UserFiltersTable AS N	INNER JOIN @PropertyValuesTable AS V ON N.RowNumber = V.RowNumber
		
		SELECT @userFilterCount = COUNT(*) FROM @UserFiltersTable
		IF @userFilterCount > 0 BEGIN SET @userFilterJoin = ' INNER JOIN {databaseOwner}{objectQualifier}vw_Users u ON u.UserId = p.UserId ' END


		-- Determining the Group By Clause -- dependant on types of filters used
		SELECT @profilePropertyCount = COUNT(*) FROM {databaseOwner}{objectQualifier}ConvertListToTable(',', @PropertyNames)
												WHERE RowValue IN (SELECT PropertyName FROM {databaseOwner}{objectQualifier}ProfilePropertyDefinition WHERE PortalID = @PortalId)
												AND RowValue NOT IN (SELECT ColumnName FROM @UserColumns)
		IF @profilePropertyCount > 0
			BEGIN SET @groupBy = ' GROUP BY p.UserId HAVING COUNT(*) = ' + CONVERT(nvarchar(20),@profilePropertyCount ) END
		ELSE
			BEGIN SET @groupBy = ' GROUP BY p.UserId HAVING COUNT(*) > 0 '	END

		IF ( @profilePropertyCount > 0 AND @userFilterCount > 0)
		BEGIN SET @propertyAndUserFilter = ' AND ' END

		-- CREATE FINAL FILTER
		SET @filterSql = ' DECLARE @MatchingUsers TABLE (UserID INT, Occurrances INT) INSERT INTO @MatchingUsers SELECT p.UserID, COUNT(*) AS occurances ' 
						+ ' FROM {databaseOwner}{objectQualifier}vw_profile p ' + @userFilterJoin
						+ ' WHERE ' + COALESCE(' ( ' + @propertyFilter + ') ', ' ') + @propertyAndUserFilter + COALESCE(@userFilter, ' ') 
						+ @groupBy
	END


	-- ///////////////////////////////////////////////////	
	-- SETUP ROLE AND RELATIONSHIP FILTERS
	-- ///////////////////////////////////////////////////
	DECLARE @roleAndRelationshipFilter nvarchar(1000)
	DECLARE @roleFilter nvarchar(100) SET @roleFilter = ''
	DECLARE @relationshipFilter nvarchar(1000) SET @relationshipFilter = ''
	DECLARE @roleAndRelationshipFlag bit SET @roleAndRelationshipFlag  = 0
	DECLARE @RoleAndRelationshipSelect nvarchar(100) SET @RoleAndRelationshipSelect = ''
		
	-- Filter by Role
	IF @FilterRoleId <> -1 
		BEGIN
			SET @roleAndRelationshipFlag = 1
			SET @roleFilter = ' JOIN {databaseOwner}{objectQualifier}UserRoles UR ON U.UserID = UR.UserID AND UR.RoleID = ' + CONVERT(nvarchar(20), @FilterRoleId)
		END

	-- Filter by Relationship
	IF @RelationshipTypeId <> -1  
		BEGIN
			SET @roleAndRelationshipFlag = 1
			SET @relationshipFilter = ' JOIN {databaseOwner}{objectQualifier}Relationships REL ON REL.PortalID = ' + CONVERT(nvarchar(20), @PortalID)
									+ ' AND RelationshipTypeID = ' + CONVERT(nvarchar(20), @RelationshipTypeId) 
									+ ' JOIN {databaseOwner}{objectQualifier}UserRelationships UREL ON REL.RelationshipID = UREL.RelationshipID AND
									((UREL.UserID = ' + CONVERT(nvarchar(20), @FilterUserId) + ' AND UREL.RelatedUserID = U.UserID) OR
									(UREL.UserID = U.UserID AND UREL.RelatedUserID = ' + CONVERT(nvarchar(20), @FilterUserId) + '))'
									+ ' WHERE UREL.Status = 2'
		END 

	IF @roleAndRelationshipFlag = 1 BEGIN SET @RoleAndRelationshipSelect = ' AND s.UserId IN (SELECT userID FROM  RoleAndRelationUsers) ' END

	SET @roleAndRelationshipFilter =  ', RoleAndRelationUsers AS ( SELECT U.userId FROM {databaseOwner}{objectQualifier}vw_Users U ' + @roleFilter + @relationshipFilter + ' )' 


	-- ///////////////////////////////////////////////////  
   	-- SET UP SORT
	-- ///////////////////////////////////////////////////
   	DECLARE @sortSql nvarchar(1000) SET @sortSql = ''
   	DECLARE @propertySort nvarchar(1000) SET @propertySort = ''
   	DECLARE @filterJoin nvarchar(100) SET @filterJoin = ''
	DECLARE @filterSortSql nvarchar(1000) SET @filterSortSql = ''
	DECLARE @sortByUserProperty BIT	
	SELECT @sortByUserProperty = COUNT(*) FROM @UserColumns WHERE ColumnName = @SortBy

	IF ( @profilePropertyCount > 0 OR @userFilterCount > 0)
	BEGIN SET @filterJoin = ' INNER JOIN @MatchingUsers m ON m.UserID = s.UserID ' END

	-- Determine the Type of Sort
	IF (@SortBy IS NOT NULL AND @SortBy <> '') AND @sortByUserProperty <> 1
	BEGIN -- Sort By Profile Property
		SET @sortSql = {databaseOwner}{objectQualifier}GetSortSql(@SortBy,@SortAscending,'UserID')
		SET @propertySort = {databaseOwner}{objectQualifier}GetSortSql('PropertyValue',@SortAscending,'UserID')
		SET @filterSortSql = ' ;WITH SortedUsers AS ( SELECT ROW_NUMBER() OVER( ' + @propertySort + ' ) AS RowNumber, *  ' 
							+ ' FROM {databaseOwner}{objectQualifier}vw_Profile WHERE PortalId = ' + CONVERT(nvarchar(20), @PortalID) + ' AND PropertyName = ''' + @SortBy + ''' )'
							+ ' , MatchingSorted AS ( SELECT ROW_NUMBER() OVER(ORDER BY [RowNumber]) AS RowNumber, s.UserId FROM SortedUsers s '
							+ @filterJoin + ' ) '
	END
	ELSE
	BEGIN 	
		-- Sort By User Property
		IF @sortByUserProperty = 1 BEGIN SET @sortSql = {databaseOwner}{objectQualifier}GetSortSql(@SortBy,@SortAscending,'UserID')END
		
		-- Default: Sort By UserID
		ELSE BEGIN SET @sortSql = {databaseOwner}{objectQualifier}GetSortSql('UserID',@SortAscending,'UserID') END		
		SET @filterSortSql = ' ;WITH SortedUsers AS ( SELECT ROW_NUMBER() OVER( ' + @sortSql + ' ) AS RowNumber, * '
							+ ' FROM {databaseOwner}{objectQualifier}vw_Users WHERE PortalId = ' + CONVERT(nvarchar(20), @PortalID) + ')'							
							+ ' , MatchingSorted AS ( SELECT ROW_NUMBER() OVER(ORDER BY [RowNumber]) AS RowNumber, s.UserId FROM SortedUsers s '
							+ @filterJoin + ' ) '
	END

	-- ///////////////////////////////////////////////////
	-- CREATE FINAL QUERY
	-- ///////////////////////////////////////////////////
	SET @sql =	@filterSql
				+ ' DECLARE @TempUsers TABLE (SortOrder INT, UserID INT) '
				+ @filterSortSql
				+ @roleAndRelationshipFilter
				+ ' INSERT INTO @TempUsers SELECT ' + @topSql
				+ ' s.RowNumber, s.UserId FROM MatchingSorted s ' 
				+ ' WHERE RowNumber >= ' + @minRowNumberSql 
				+ @roleAndRelationshipSelect
				+ ' ;WITH PivotedUsers AS ( SELECT	U.UserID, U.PortalID, U.Username, U.Email, U.DisplayName, U.IsSuperUser, U.IsDeleted,        
													U.AffiliateID, U.UpdatePassword, U.Authorised, U.CreateDate, U.LastActivityDate, U.LastLockoutDate,
													U.LastLoginDate, U.LastPasswordChangedDate, U.IsLockedOut, U.PasswordQuestion, U.IsApproved, Prop.PropertyName,
													CASE
														WHEN (p.Visibility = 0) THEN p.PropertyValue
														WHEN (p.Visibility = 1 AND ' + CONVERT(nvarchar(20), @IsAdmin) + ' = 1) THEN p.PropertyValue
														WHEN (p.Visibility = 1 AND ' + CONVERT(nvarchar(20), @IsAdmin) + ' = 0 AND ' + CONVERT(nvarchar(20), @UserId) + '> 0) THEN p.PropertyValue
														WHEN U.UserID = ' + CONVERT(nvarchar(20), @UserId) + 'OR (p.Visibility = 2 AND ' + CONVERT(nvarchar(20), @IsAdmin) + ' = 1) THEN p.PropertyValue
														ELSE NULL
													END AS PropertyValue
											FROM	{databaseOwner}{objectQualifier}vw_Users AS U
												INNER JOIN {databaseOwner}{objectQualifier}UserProfile AS P ON U.UserID = P.UserID
												INNER JOIN {databaseOwner}{objectQualifier}ProfilePropertyDefinition AS Prop ON Prop.PropertyDefinitionID = p.PropertyDefinitionID
											WHERE	U.UserId IN (SELECT UserId FROM @TempUsers)
													AND u.PortalID = ' + CONVERT(nvarchar(20), @PortalID) + '  AND u.IsDeleted = 0 
											)
					SELECT * FROM PivotedUsers PIVOT (MAX(PropertyValue) for PropertyName in (' + @pivotSql + ') ) as pivotTable '
				+ @sortSql		
	EXEC(@sql)
GO

/* Update Users View */
/*********************/

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}vw_Users]') and OBJECTPROPERTY(id, N'IsView') = 1)
	DROP VIEW {databaseOwner}[{objectQualifier}vw_Users]
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_Users]
AS
	SELECT DISTINCT TOP (100) PERCENT 
		U.UserID, 
		(CASE WHEN IsSuperUser = 1 THEN NULL ELSE UP.PortalId END) AS PortalId, 
		U.Username, 
		U.FirstName, 
		U.LastName,
		U.DisplayName, 
		U.IsSuperUser, 
		U.Email, 
		U.AffiliateId, 
		U.UpdatePassword, 
		UP.Authorised, 
		(CASE WHEN UP.PortalId IS NULL THEN U.IsDeleted ELSE UP.IsDeleted END) AS IsDeleted, 
		UP.RefreshRoles, 
		U.LastIPAddress, 
		U.CreatedByUserID, 
		U.CreatedOnDate, 
		U.LastModifiedByUserID, 
		U.LastModifiedOnDate, 
		dbo.aspnet_Membership.CreateDate, 
		dbo.aspnet_Users.LastActivityDate, 
		dbo.aspnet_Membership.LastLockoutDate, 
		dbo.aspnet_Membership.LastLoginDate, 
		dbo.aspnet_Membership.LastPasswordChangedDate, 
		dbo.aspnet_Membership.IsLockedOut, 
		dbo.aspnet_Membership.PasswordQuestion, 
		dbo.aspnet_Membership.IsApproved
	FROM  {databaseOwner}{objectQualifier}UserPortals AS UP 
		RIGHT OUTER JOIN {databaseOwner}{objectQualifier}Users AS U 
		INNER JOIN dbo.aspnet_Membership 
		INNER JOIN dbo.aspnet_Users ON dbo.aspnet_Membership.UserId = dbo.aspnet_Users.UserId 
			ON U.Username = dbo.aspnet_Users.UserName
			ON UP.UserId = U.UserID
GO

/* Add GetUsersBasicSearch Procedure */
/*************************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetUsersBasicSearch]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUsersBasicSearch]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUsersBasicSearch]
(
	@PortalID int,					-- portal
	@PageSize int,					-- page size
	@PageIndex int,					-- 0 based page index
	@SortBy nvarchar(100),			-- sort field
	@SortAscending bit,				-- sort flag indicating whether sort is asc or desc
	@PropertyName nvarchar(256),    -- property to filter by (username, diaplayname, email)
	@PropertyValue nvarchar(256)	-- value of property
)
AS
	-- Set up Top XX
	DECLARE @topSql nvarchar(20)
	SET @topSql = CONVERT(nvarchar(20), @PageSize)
	
	--Set up Count
	DECLARE @minRowNumberSql nvarchar(20)
	SET @minRowNumberSql =  CONVERT(nvarchar(20), ((@PageIndex * @PageSize) + 1))
	
	-- Set up Sort
	DECLARE @sortSql nvarchar(1000)
	SET @sortSql = {databaseOwner}{objectQualifier}GetSortSql(@SortBy, @SortAscending, 'UserID')

	-- Setup Pivot Field List
	DECLARE @pivotSql nvarchar(max)
	SELECT @pivotSql = {databaseOwner}{objectQualifier}GetProfileFieldSql(@PortalID, '')

	-- Setup FieldName Field List for temporary table
	DECLARE @fieldNames nvarchar(max)
	SELECT @fieldNames = {databaseOwner}{objectQualifier}GetProfileFieldSql(@PortalID, ' nvarchar(max)')
	
	DECLARE @sql nvarchar(max)
	SELECT @sql=
				'
					DECLARE @pivotedUsers TABLE
					(
						RowNumber int,
						UserID int,
						PortalID int,
						Username nvarchar(100),
						Email nvarchar(256),
						DisplayName nvarchar(128),
						IsSuperUser bit,
						IsDeleted bit,
						AffiliateID int,
						UpdatePassword bit,
						Authorised bit,
						CreateDate datetime,
						LastActivityDate datetime,
						LastLockoutDate datetime,
						LastLoginDate datetime,
						LastPasswordChangedDate datetime,
						IsLockedOut bit,
						PasswordQuestion nvarchar(256),
						IsApproved bit,
						' + @fieldNames + '
					);

					WITH TempUsers
					AS
					(
						SELECT TOP ' + @topSql + ' * FROM (
							SELECT 	
								ROW_NUMBER() OVER(' + @sortSql + ') AS RowNumber,
								U.UserID,
								U.PortalID,
								U.Username,
								U.Email,
								U.DisplayName,
								U.IsSuperUser,
								U.IsDeleted,
								U.AffiliateID,
								U.UpdatePassword,
								U.Authorised,
								U.CreateDate,
								U.LastActivityDate,
								U.LastLockoutDate,
								U.LastLoginDate,
								U.LastPasswordChangedDate,
								U.IsLockedOut,
								U.PasswordQuestion,
								U.IsApproved
								FROM {databaseOwner}{objectQualifier}vw_Users AS U
							WHERE U.PortalID = ' + CONVERT(nvarchar(20), @PortalID) + '
								AND (U.' + @PropertyName + ' LIKE ''' + @PropertyValue + '%'')
									OR ((U.' + @PropertyName + ' LIKE ''% ' + @PropertyValue + '%''))
								AND U.IsDeleted = 0
						) AS U
						WHERE RowNumber >= ' + @minRowNumberSql + ' 
					),
					TempUsersWithProfile
					AS
					(
						SELECT 
							U.UserID,
							U.PortalID,
							U.Username,
							U.Email,
							U.DisplayName,
							U.IsSuperUser,
							U.IsDeleted,
							U.AffiliateID,
							U.UpdatePassword,
							U.Authorised,
							U.CreateDate,
							U.LastActivityDate,
							U.LastLockoutDate,
							U.LastLoginDate,
							U.LastPasswordChangedDate,
							U.IsLockedOut,
							U.PasswordQuestion,
							U.IsApproved,
							P.PropertyName,
							P.PropertyValue
						FROM TempUsers U
							INNER JOIN {databaseOwner}{objectQualifier}vw_Profile P ON P.UserID = U.UserID
								AND P.PortalId = U.PortalId	
					)
										
					SELECT  * FROM TempUsersWithProfile
					PIVOT 
					(
						MAX(PropertyValue) for PropertyName in (' + @pivotSql + ')
					) as pivotTable
					' + @sortSql
	EXEC(@sql)
GO

/* Insert Unverified Users Role in existing portals  */
/*****************************************************/

IF (SELECT COUNT(PortalID) FROM {databaseOwner}[{objectQualifier}Portals]) > 0 BEGIN
	DECLARE @PortalID int
	
	DECLARE portal_cursor CURSOR FOR
	SELECT PortalID FROM {databaseOwner}[{objectQualifier}Portals]

	OPEN portal_cursor

	FETCH NEXT FROM portal_cursor INTO @PortalID

	WHILE @@FETCH_STATUS = 0
	BEGIN
		IF NOT EXISTS(SELECT RoleID FROM {databaseOwner}[{objectQualifier}Roles] WHERE PortalID = @PortalID AND RoleName = 'Unverified Users')
		BEGIN
			EXECUTE {databaseOwner}[{objectQualifier}AddRole] @PortalID, NULL, 'Unverified Users', 'Unverified Users', 0, 0, 'M', 0, 0, 'N', 0, 0, '', '', -1
		END

		FETCH NEXT FROM portal_cursor INTO @PortalID
	END
	
	CLOSE portal_cursor
	DEALLOCATE portal_cursor
END
GO

/* Add new Columns To Roles Table */
/************************************/

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME='{objectQualifier}Roles' AND COLUMN_NAME='Status')
	BEGIN
		ALTER TABLE {databaseOwner}{objectQualifier}Roles
			ADD [Status] int NOT NULL CONSTRAINT DF_{objectQualifier}Roles_Status DEFAULT 1
	END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME='{objectQualifier}Roles' AND COLUMN_NAME='SecurityMode')
	BEGIN
		ALTER TABLE {databaseOwner}{objectQualifier}Roles
			ADD SecurityMode int NOT NULL CONSTRAINT DF_{objectQualifier}Roles_SecurityMode DEFAULT 0
	END
GO

/* Update GetRoles Procedure */
/*****************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetRoles]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetRoles]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetRoles]
AS 
	SELECT 
		R.*,
		(SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}UserRoles U WHERE U.RoleID = R.RoleID) AS UserCount
	FROM   {databaseOwner}{objectQualifier}Roles AS R

GO

/* Update GetPortalRoles Procedure */
/***********************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetPortalRoles]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetPortalRoles]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPortalRoles]
	@PortalId     int

AS
	SELECT R.RoleId,
		   R.PortalId,
		   R.RoleGroupId,
		   R.RoleName,
		   R.Description,
		   R.ServiceFee,
		   case when convert(int,R.ServiceFee) <> 0 then R.BillingPeriod else null end AS BillingPeriod,
		   case when convert(int,R.ServiceFee) <> 0 then L1.Text else '' end AS BillingFrequency,
		   R.TrialFee,
		   case when R.TrialFrequency <> 'N' then R.TrialPeriod else null end AS TrialPeriod,
		   case when R.TrialFrequency <> 'N' then L2.Text else '' end AS TrialFrequency,
		   R.IsPublic,
		   R.AutoAssignment,
		   R.RSVPCode,
		   R.IconFile,
		   R.Status,
		   R.SecurityMode,
		   (SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}UserRoles U WHERE U.RoleID = R.RoleID) AS UserCount,
		   R.CreatedByUserID,
		   R.CreatedOnDate,
		   R.LastModifiedByUserID,
		   R.LastModifiedOnDate
	FROM {databaseOwner}{objectQualifier}Roles R
	LEFT OUTER JOIN {databaseOwner}{objectQualifier}Lists L1 ON R.BillingFrequency = L1.Value AND L1.ListName='Frequency'
	LEFT OUTER JOIN {databaseOwner}{objectQualifier}Lists L2 ON R.TrialFrequency = L2.Value AND L2.ListName='Frequency'
	WHERE  ( R.PortalId = @PortalId OR R.PortalId is null )
	ORDER BY R.RoleName
GO

/* Drop GetRole Procedure */
/**************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetRole]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetRole]
GO

/* Drop GetRoleByName Procedure */
/********************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetRoleByName]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetRoleByName]
GO

/* Drop GetRolesByGroup Procedure */
/**********************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetRolesByGroup]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetRolesByGroup]
GO

/* Update DeleteUserPortal Procedure */
/*************************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteUserPortal]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteUserPortal]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteUserPortal]
	@UserID		int,
	@PortalID   int
AS
	IF @PortalID IS NULL
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}Users
				SET
					IsDeleted = 1
				WHERE  UserId = @UserID
		END
	ELSE
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}UserPortals
				SET
					IsDeleted = 1
				WHERE  UserId = @UserID
					AND PortalId = @PortalID
					
			DELETE
				FROM {databaseOwner}{objectQualifier}UserRoles
				WHERE  UserID = @UserID
		END
GO


/* Add RoleSettings Table */
/**************************/

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}RoleSettings]') AND type in (N'U'))
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}RoleSettings]
		(
			[RoleSettingID] [int] IDENTITY(1,1) NOT NULL,
			[RoleID] [int] NOT NULL,
			[SettingName] [nvarchar](50) NOT NULL,
			[SettingValue] [nvarchar](2000) NOT NULL,
			[CreatedByUserID] [int] NOT NULL,
			[CreatedOnDate] [datetime] CONSTRAINT [DF_{objectQualifier}RoleSettings_CreatedOnDate]  DEFAULT (getdate()) NOT NULL ,
			[LastModifiedByUserID] [int] NOT NULL,
			[LastModifiedOnDate] [datetime] CONSTRAINT [DF_{objectQualifier}RoleSettings_LastModifiedOnDate]  DEFAULT (getdate()) NOT NULL,
			CONSTRAINT [PK_{objectQualifier}RoleSettings] PRIMARY KEY CLUSTERED ( [RoleSettingID] ASC )
		)		
	END
GO

/* Add GetRoleSettings Procedure */
/*********************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetRoleSettings]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetRoleSettings]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetRoleSettings]
	@RoleId     int

AS
	SELECT *
	FROM {databaseOwner}{objectQualifier}RoleSettings
	WHERE  RoleID = @RoleId
GO

/* Add UpdateRoleSetting Procedure */
/***********************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdateRoleSetting]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateRoleSetting]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateRoleSetting]
	@RoleID				int,
	@SettingName		nvarchar(50),
	@SettingValue		nvarchar(2000),
	@UserID				int

AS
	IF (SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}RoleSettings WHERE RoleID = @RoleID AND SettingName = @SettingName) > 0
		--Update
		UPDATE  {databaseOwner}{objectQualifier}RoleSettings
			SET SettingValue = @SettingValue,
				[LastModifiedByUserID]=@UserID,
				[LastModifiedOnDate]=getdate()
		WHERE RoleID = @RoleID
			AND SettingName = @SettingName
			
	ELSE
		--Add
		INSERT INTO {databaseOwner}{objectQualifier}RoleSettings 
		( 
			RoleID, 
			SettingName, 
			SettingValue, 
			CreatedByUserID, 
			CreatedOnDate, 
			LastModifiedByUserID, 
			LastModifiedOnDate
		) 
		VALUES 
		( 
			@RoleID, 
			@SettingName,
			@SettingValue ,
			@UserID ,
			getdate() ,
			@UserID,
			getdate()
		)

GO

/*Drop UpdateRole Procedure*/
/***************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdateRole]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateRole]
GO

/*Add UpdateRole Procedure*/
/**************************/

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateRole] 
	@RoleId					int,
	@RoleGroupId			int,
	@Description			nvarchar(1000),
	@ServiceFee				money,
	@BillingPeriod			int,
	@BillingFrequency		char(1),
	@TrialFee				money,
	@TrialPeriod			int,
	@TrialFrequency			char(1),
	@IsPublic				bit,
	@AutoAssignment			bit,
	@RSVPCode				nvarchar(50),
	@IconFile				nvarchar(100),
	@LastModifiedByUserID	int,
	@Status					int,
	@SecurityMode			int
AS

	UPDATE {databaseOwner}{objectQualifier}Roles
	SET    RoleGroupId			= @RoleGroupId,
		   Description			= @Description,
		   ServiceFee			= @ServiceFee,
		   BillingPeriod		= @BillingPeriod,
		   BillingFrequency		= @BillingFrequency,
		   TrialFee				= @TrialFee,
		   TrialPeriod			= @TrialPeriod,
		   TrialFrequency		= @TrialFrequency,
		   IsPublic				= @IsPublic,
		   AutoAssignment		= @AutoAssignment,
		   RSVPCode				= @RSVPCode,
		   IconFile				= @IconFile,
		   LastModifiedByUserID = @LastModifiedByUserID,
		   LastModifiedOnDate		= getdate(),
		   Status				= @Status,
		   SecurityMode			= @SecurityMode
	WHERE  RoleId = @RoleId
GO

/*Drop AddRole Procedure*/
/************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}AddRole]') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}[{objectQualifier}AddRole]
GO

/* Add AddRole Procedure */
/*************************/

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddRole] 
	@PortalID         int,
	@RoleGroupId      int,
	@RoleName         nvarchar(50),
	@Description      nvarchar(1000),
	@ServiceFee       money,
	@BillingPeriod    int,
	@BillingFrequency char(1),
	@TrialFee         money,
	@TrialPeriod      int,
	@TrialFrequency   char(1),
	@IsPublic         bit,
	@AutoAssignment   bit,
	@RSVPCode         nvarchar(50),
	@IconFile         nvarchar(100),
	@CreatedByUserID  int,
	@Status			  int,
	@SecurityMode   bit
AS

	INSERT INTO {databaseOwner}{objectQualifier}Roles (
	  PortalId,
	  RoleGroupId,
	  RoleName,
	  Description,
	  ServiceFee,
	  BillingPeriod,
	  BillingFrequency,
	  TrialFee,
	  TrialPeriod,
	  TrialFrequency,
	  IsPublic,
	  AutoAssignment,
	  RSVPCode,
	  IconFile,
	  CreatedByUserID,
	  CreatedOnDate,
	  LastModifiedByUserID,
	  LastModifiedOnDate,
	  Status,
	  SecurityMode
	)

	VALUES (
	  @PortalID,
	  @RoleGroupId,
	  @RoleName,
	  @Description,
	  @ServiceFee,
	  @BillingPeriod,
	  @BillingFrequency,
	  @TrialFee,
	  @TrialPeriod,
	  @TrialFrequency,
	  @IsPublic,
	  @AutoAssignment,
	  @RSVPCode,
	  @IconFile,
	  @CreatedByUserID,
	  getdate(),
	  @CreatedByUserID,
	  getdate(),
	  @Status,
	  @SecurityMode
	)

	SELECT SCOPE_IDENTITY()

GO



/* Add default host settings for Client Resource Management */
/************************************************************/

IF NOT EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}HostSettings WHERE [SettingName] = N'CrmEnableCompositeFiles')
  BEGIN
    INSERT INTO {databaseOwner}{objectQualifier}HostSettings(SettingName, SettingValue, SettingIsSecure, CreatedByUserID, CreatedOnDate, LastModifiedByUserID, LastModifiedOnDate)
    VALUES('CrmEnableCompositeFiles', 'False', 0, -1, GETDATE(), -1, GETDATE())
  END

IF NOT EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}HostSettings WHERE [SettingName] = N'CrmMinifyCss')
  BEGIN
    INSERT INTO {databaseOwner}{objectQualifier}HostSettings(SettingName, SettingValue, SettingIsSecure, CreatedByUserID, CreatedOnDate, LastModifiedByUserID, LastModifiedOnDate)
    VALUES('CrmMinifyCss', 'False', 0, -1, GETDATE(), -1, GETDATE())
  END

IF NOT EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}HostSettings WHERE [SettingName] = N'CrmMinifyJs')
  BEGIN
    INSERT INTO {databaseOwner}{objectQualifier}HostSettings(SettingName, SettingValue, SettingIsSecure, CreatedByUserID, CreatedOnDate, LastModifiedByUserID, LastModifiedOnDate)
    VALUES('CrmMinifyJs', 'False', 0, -1, GETDATE(), -1, GETDATE())
  END

IF NOT EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}HostSettings WHERE [SettingName] = N'CrmVersion')
  BEGIN
    INSERT INTO {databaseOwner}{objectQualifier}HostSettings(SettingName, SettingValue, SettingIsSecure, CreatedByUserID, CreatedOnDate, LastModifiedByUserID, LastModifiedOnDate)
    VALUES('CrmVersion', '1', 0, -1, GETDATE(), -1, GETDATE())
  END

/* Add stored procedure for return roles based on progressive search (auto-complete) */
/*************************************************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetRolesBasicSearch]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetRolesBasicSearch]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetRolesBasicSearch]
(
	@PortalID int,					-- portal
	@PageSize int,					-- page size
	@FilterBy nvarchar(100)			-- filter field
)
AS
BEGIN
	SELECT TOP (@PageSize) 
	RoleID,PortalID,RoleName,Description,ServiceFee,BillingFrequency,TrialPeriod,TrialFrequency,BillingPeriod,TrialFee,IsPublic,AutoAssignment,RoleGroupID,RSVPCode,CASE WHEN LEFT(LOWER(IconFile), 7) = 'fileid=' THEN
			(SELECT Folder + FileName
				FROM {databaseOwner}[{objectQualifier}Files]
				WHERE fileid = CAST((RIGHT(LOWER(IconFile), Len(IconFile) - 7)) AS int)
			) ELSE ''
			END AS IconFile,
			CreatedByUserID,CreatedOnDate,LastModifiedByUserID,LastModifiedOnDate, Status, SecurityMode
	FROM {databaseOwner}[{objectQualifier}Roles]
	WHERE RoleName LIKE '%' + @FilterBy + '%'
	AND (PortalID = @PortalID OR (@PortalID is null))
	ORDER BY RoleName
END
GO

/* Update to use new Register control */
/*************************************/

UPDATE {databaseOwner}{objectQualifier}ModuleControls
	SET ControlSrc = 'DesktopModules/Admin/Security/Register.ascx'
	WHERE ControlSrc = 'DesktopModules/Admin/Security/ManageUsers.ascx'
		AND ModuleDefID IS NULL
		AND ControlKey = 'Register'
GO

/* Add GetUserByDisplayName */
/****************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetUserByDisplayName]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUserByDisplayName]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserByDisplayName]

	@PortalID int,
	@DisplayName nvarchar(128)

AS
	SELECT * FROM {databaseOwner}{objectQualifier}vw_Users
	WHERE  DisplayName = @DisplayName
		AND  ((@PortalId IS NULL) OR (PortalId = @PortalID) OR IsSuperUser = 1)
GO

/*Add CoreMessaging_GetNextMessagesForDispatch */
/*******************************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}CoreMessaging_GetNextMessagesForDispatch]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}CoreMessaging_GetNextMessagesForDispatch
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNextMessagesForDispatch]
	@SchedulerInstance uniqueidentifier,
	@BatchSize int
AS
BEGIN
	WITH CTE AS
	(
		SELECT TOP (@BatchSize) *
		FROM {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients
		WHERE EmailSent = 0 AND (EmailSchedulerInstance IS NULL OR EmailSchedulerInstance = '00000000-0000-0000-0000-000000000000')
		ORDER BY CreatedOnDate DESC
	)
	UPDATE CTE
	SET EmailSchedulerInstance = @SchedulerInstance
	
	SELECT TOP (@BatchSize) *
	FROM {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients
	WHERE EmailSent = 0 AND EmailSchedulerInstance = @SchedulerInstance
	ORDER BY CreatedOnDate DESC
END
GO

/* Add CoreMessaging_MarkMessageAsDispatched */
/*******************************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}CoreMessaging_MarkMessageAsDispatched]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}CoreMessaging_MarkMessageAsDispatched
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_MarkMessageAsDispatched]
	@MessageId int,
	@RecipientId int
AS
BEGIN
	Update {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients set EmailSent = 1, EmailSentDate =GETDATE()   where MessageID =@MessageId AND RecipientId=@RecipientId
END

GO

/* Update to move UserSettings and Profile Proeprties */
/******************************************************/

UPDATE {databaseOwner}{objectQualifier}ModuleControls
	SET ControlKey = 'Settings'
	WHERE ControlSrc = 'DesktopModules/Admin/Security/UserSettings.ascx'
		AND ControlKey = 'UserSettings'
GO

DELETE FROM {databaseOwner}{objectQualifier}ModuleControls
	WHERE ControlSrc = 'DesktopModules/Admin/Security/ProfileDefinitions.ascx'
		AND ControlKey = 'ManageProfile'
GO

UPDATE {databaseOwner}{objectQualifier}ModuleControls
	SET ModuleDefID = NULL
	WHERE ControlSrc = 'DesktopModules/Admin/Security/EditProfileDefinition.ascx'
		AND ControlKey = 'EditProfileProperty'
GO

/* Update legacy messaging scheduler to use CoreMessagingScheduler */
/******************************************************/

UPDATE {databaseOwner}[{objectQualifier}Schedule] SET  [TypeFullName]='DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler, DotNetNuke' WHERE [TypeFullName]='DotNetNuke.Services.Messaging.Scheduler.MessagingScheduler, DotNetNuke'
GO

/* Update DeleteUserPortal */
/***************************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}DeleteUserPortal]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}DeleteUserPortal
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteUserPortal]
	@UserID		int,
	@PortalID   int
AS
	IF @PortalID IS NULL
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}Users
				SET
					IsDeleted = 1
				WHERE  UserId = @UserID
		END
	ELSE
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}UserPortals
				SET
					IsDeleted = 1
				WHERE  UserId = @UserID
					AND PortalId = @PortalID
		END
GO

/* Update RemoveUser */
/*********************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}RemoveUser]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}RemoveUser
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}RemoveUser]
	@UserID		int,
	@PortalID   int
AS
	IF @PortalID IS NULL
		BEGIN
			-- Delete SuperUser
			DELETE FROM {databaseOwner}{objectQualifier}Users
				WHERE  UserId = @UserID
		END
	ELSE
		BEGIN
			-- Remove User from Portal			
			DELETE FROM {databaseOwner}{objectQualifier}UserPortals
				WHERE  UserId = @UserID
                 AND PortalId = @PortalID
			IF NOT EXISTS (SELECT 1 FROM {databaseOwner}{objectQualifier}UserPortals WHERE  UserId = @UserID) 
				-- Delete User (but not if SuperUser)
				BEGIN
					DELETE FROM {databaseOwner}{objectQualifier}Users
						WHERE  UserId = @UserID
							AND IsSuperUser = 0
					DELETE FROM {databaseOwner}{objectQualifier}UserRoles
						WHERE  UserID = @UserID
				END								
		END
GO

/* Add new Columns To UserRoles Table */
/**************************************/

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME='{objectQualifier}UserRoles' AND COLUMN_NAME='Status')
	BEGIN
		ALTER TABLE {databaseOwner}{objectQualifier}UserRoles
			ADD [Status] int NOT NULL CONSTRAINT DF_{objectQualifier}UserRoles_Status DEFAULT 1
	END
GO

IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME='{objectQualifier}UserRoles' AND COLUMN_NAME='IsOwner')
	BEGIN
		ALTER TABLE {databaseOwner}{objectQualifier}UserRoles
			ADD IsOwner bit NOT NULL CONSTRAINT DF_{objectQualifier}UserRoles_IsOwner DEFAULT 0
	END
GO

/* Update UserRoles View */
/*************************/

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}vw_UserRoles]') and OBJECTPROPERTY(id, N'IsView') = 1)
	DROP VIEW {databaseOwner}[{objectQualifier}vw_UserRoles]
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_UserRoles]
AS
	SELECT     
		UR.UserRoleID, 
		R.RoleID, 
		U.UserID, 
		R.PortalID, 
		R.RoleName, 
		U.Username, 
		R.Description, 
		U.DisplayName, 
		U.Email,
		UR.Status, 
		UR.IsOwner,
		R.SecurityMode,
		R.ServiceFee, 
		R.BillingFrequency, 
		R.TrialPeriod, 
        R.TrialFrequency, 
		R.BillingPeriod, 
		R.TrialFee, 
		R.IsPublic, 
		R.AutoAssignment, 
		R.RoleGroupID, 
		R.RSVPCode, 
		R.IconFile, 
		UR.EffectiveDate, 
		UR.ExpiryDate, 
        UR.IsTrialUsed, 
		UR.CreatedByUserID, 
		UR.CreatedOnDate, 
		UR.LastModifiedByUserID, 
		UR.LastModifiedOnDate 
	FROM {databaseOwner}{objectQualifier}UserRoles AS UR 
		INNER JOIN {databaseOwner}{objectQualifier}Users AS U ON UR.UserID = U.UserID 
		INNER JOIN {databaseOwner}{objectQualifier}Roles AS R ON UR.RoleID = R.RoleID
	WHERE R.Status = 1

GO

/* Update AddUserRole */
/**********************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}AddUserRole]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}AddUserRole
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddUserRole]
	@PortalID		int,
	@UserID			int,
	@RoleId			int,
	@Status			int,
	@IsOwner		bit,
	@EffectiveDate	datetime = null,
	@ExpiryDate		datetime = null,
	@CreatedByUserID  int
AS

DECLARE @UserRoleId int

SELECT @UserRoleId = null

SELECT @UserRoleId = UserRoleId
	FROM {databaseOwner}{objectQualifier}UserRoles
	WHERE  UserId = @UserID AND RoleId = @RoleId
 
IF @UserRoleId IS NOT NULL
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}UserRoles
			SET 
				Status = @Status,
				IsOwner = @IsOwner,
				ExpiryDate = @ExpiryDate,
				EffectiveDate = @EffectiveDate,
				IsTrialUsed = 1,
				LastModifiedByUserID = @CreatedByUserID,
				LastModifiedOnDate = getdate()
			WHERE  UserRoleId = @UserRoleId
		SELECT @UserRoleId
	END
ELSE
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}UserRoles (
			UserId,
			RoleId,
			Status,
			IsOwner,
			EffectiveDate,
			ExpiryDate,
			IsTrialUsed,
			CreatedByUserID,
			CreatedOnDate,
			LastModifiedByUserID,
			LastModifiedOnDate
		  )
		VALUES (
			@UserID,
			@RoleId,
			@Status,
			@IsOwner,
			@EffectiveDate,
			@ExpiryDate,
			1,
			@CreatedByUserID,
			getdate(),
			@CreatedByUserID,
			getdate()
		  )

	SELECT SCOPE_IDENTITY()
    END
GO

/* Update UpdateUserRole */
/*************************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}UpdateUserRole]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}UpdateUserRole
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateUserRole]
    @UserRoleId		int, 
	@Status			int,
	@IsOwner		bit,
	@EffectiveDate	datetime = null,
	@ExpiryDate		datetime = null,
	@LastModifiedByUserID			int
AS
	UPDATE {databaseOwner}{objectQualifier}UserRoles 
		SET 
			Status = @Status,
			IsOwner = @IsOwner,
			ExpiryDate = @ExpiryDate,
			EffectiveDate = @EffectiveDate,
			IsTrialUsed = 1,
			LastModifiedByUserID = @LastModifiedByUserID,
			LastModifiedOnDate = getdate()
		WHERE  UserRoleId = @UserRoleId
GO

/* Update SettingValue */
/***********************/

ALTER TABLE {databaseOwner}{objectQualifier}ModuleSettings
	ALTER COLUMN SettingValue nvarchar(max) NOT NULL

GO

ALTER TABLE {databaseOwner}{objectQualifier}TabModuleSettings
	ALTER COLUMN SettingValue nvarchar(max) NOT NULL

GO

/* Update AddModuleSetting */
/***************************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}AddModuleSetting]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}AddModuleSetting
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddModuleSetting]
	@ModuleId			int,
	@SettingName		nvarchar(50),
	@SettingValue		nvarchar(max),
	@CreatedByUserID	int
AS
	INSERT INTO {databaseOwner}{objectQualifier}ModuleSettings ( 
		ModuleId,
		SettingName,
		SettingValue,
		CreatedByUserID,
		CreatedOnDate,
		LastModifiedByUserID,
		LastModifiedOnDate
	) 
	VALUES ( 
		@ModuleId, 
		@SettingName, 
		@SettingValue,
		@CreatedByUserID,
		getdate(),
		@CreatedByUserID,
		getdate()
	)
GO

/* Update AddTabModuleSetting */
/******************************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}AddTabModuleSetting]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}AddTabModuleSetting
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddTabModuleSetting]
	@TabModuleId   		int,
	@SettingName   		nvarchar(50),
	@SettingValue  		nvarchar(max),
	@CreatedByUserID  	int
AS
	INSERT INTO {databaseOwner}{objectQualifier}TabModuleSettings ( 
		TabModuleId,
		SettingName, 
		SettingValue,
		CreatedByUserID,
		CreatedOnDate,
		LastModifiedByUserID,
		LastModifiedOnDate
	) 
	VALUES ( 
		@TabModuleId,
		@SettingName, 
		@SettingValue,
		@CreatedByUserID,
		getdate(),
		@CreatedByUserID,
		getdate()
	)

GO

/* Update UpdateModuleSetting */
/******************************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}UpdateModuleSetting]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}UpdateModuleSetting
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateModuleSetting]
	@ModuleId				int,
	@SettingName			nvarchar(50),
	@SettingValue			nvarchar(max),
	@LastModifiedByUserID  	int
AS
	UPDATE 	{databaseOwner}{objectQualifier}ModuleSettings
		SET 	SettingValue = @SettingValue,
				LastModifiedByUserID = @LastModifiedByUserID,
				LastModifiedOnDate = getdate()
		WHERE ModuleId = @ModuleId
		AND SettingName = @SettingName
GO

/* Update UpdateTabModuleSetting */
/*********************************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}UpdateTabModuleSetting]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}UpdateTabModuleSetting
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateTabModuleSetting]
	@TabModuleId			int,
	@SettingName			nvarchar(50),
	@SettingValue			nvarchar(max),
	@LastModifiedByUserID	int

AS
	UPDATE {databaseOwner}{objectQualifier}TabModuleSettings
		SET    SettingValue = @SettingValue,
			   LastModifiedByUserID = @LastModifiedByUserID,
			   LastModifiedOnDate = getdate()
		WHERE  TabModuleId = @TabModuleId
		AND    SettingName = @SettingName

GO

/* Update GetServices */
/*********************************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetServices]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}GetServices
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetServices]
	@PortalId  int,
	@UserId    int

AS
	SELECT     
		R.*,
		UR.IsOwner, 
		UR.UserRoleID, 
		UR.UserID, 
		UR.ExpiryDate, 
		UR.IsTrialUsed, 
		UR.EffectiveDate, 
		U.DisplayName, 
		U.Email
	FROM {databaseOwner}{objectQualifier}Users U 
		INNER JOIN {databaseOwner}{objectQualifier}UserRoles AS UR ON U.UserID = UR.UserID 
		RIGHT OUTER JOIN {databaseOwner}{objectQualifier}Roles AS R ON UR.RoleID = R.RoleID AND UR.UserID = @UserId
	WHERE  R.PortalId = @PortalId AND R.IsPublic = 1
	ORDER BY R.RoleName

GO

/* Update version number in DesktopModules */
/*******************************************/
DECLARE @version nvarchar(8)
SET @version = '06.02.00'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='SiteWizard'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Lists'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Authentication'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='FileManager'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='SiteLog'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Newsletters'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Portals'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='SQL'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='HostSettings'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='RecycleBin'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='LogViewer'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Scheduler'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='SearchAdmin'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Security'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Tabs'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Vendors'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Banners'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='ProfessionalPreview'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='SearchInput'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='SearchResults'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='FeedExplorer'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Extensions'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Solutions'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='WhatsNew'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Dashboard'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Languages'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Skins'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='SkinDesigner'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Console'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='GoogleAnalytics'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Marketplace'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='ViewProfile'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Sitemap'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='ContentList'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='ConfigurationManager'

UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Authentication'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Banners'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.FeedExplorer'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.FileManager'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.HostSettings'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Lists'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LogViewer'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Newsletters'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Portals'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.RecycleBin'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Scheduler'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SearchAdmin'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SearchInput'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SearchResults'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Security'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SiteLog'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SiteWizard'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Tabs'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SQL'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Vendors'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.ACTIONBUTTONSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.ACTIONSSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.BANNERSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.BREADCRUMBSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.COPYRIGHTSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.CURRENTDATESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.DOTNETNUKESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.DROPDOWNACTIONSSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.HELPSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.HOSTNAMESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.ICONSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LANGUAGESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LINKACTIONSSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LINKSSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LOGINSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LOGOSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.MENUSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.NAVSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.PRINTMODULESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.PRIVACYSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SEARCHSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SIGNINSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SOLPARTACTIONSSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SOLPARTMENUSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.TERMSSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.TITLESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.TREEVIEWSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.USERSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.VISIBILITYSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Extensions'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Solutions'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.TEXTSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.WhatsNew'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.STYLESSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LEFTMENUSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.JQUERYSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.CONTROLPANEL.SkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Dashboard'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Languages'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Skins'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Skin Designer'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Console'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Google Analytics'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DefaultAuthentication'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Marketplace'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.ViewProfile'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Sitemap'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.TagsSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.ContentList'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Configuration Manager'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.ProfessionalPreview'

UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1619' WHERE ControlSrc='DesktopModules/Admin/Security/Roles.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1625' WHERE ControlSrc='DesktopModules/Admin/Security/EditRoles.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1582' WHERE ControlSrc='DesktopModules/Admin/Tabs/Tabs.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1586' WHERE ControlSrc='DesktopModules/Admin/Tabs/ManageTabs.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1387' WHERE ControlSrc='DesktopModules/Admin/Portals/SiteSettings.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1700' WHERE ControlSrc='DesktopModules/Admin/Security/Users.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1709' WHERE ControlSrc='DesktopModules/Admin/Security/ManageUsers.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1733' WHERE ControlSrc='DesktopModules/Admin/Vendors/Vendors.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1743' WHERE ControlSrc='DesktopModules/Admin/Vendors/EditVendors.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=190' WHERE ControlSrc='DesktopModules/Admin/Banners/DisplayBanners.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=195' WHERE ControlSrc='DesktopModules/Admin/Banners/BannerOptions.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1464' WHERE ControlSrc='DesktopModules/Admin/FileManager/FileManager.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1480' WHERE ControlSrc='DesktopModules/Admin/FileManager/WebUpload.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1640' WHERE ControlSrc='DesktopModules/Admin/SiteLog/SiteLog.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1515' WHERE ControlSrc='DesktopModules/Admin/Newsletters/Newsletter.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1748' WHERE ControlSrc='DesktopModules/Admin/Vendors/EditBanner.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1618' WHERE ControlSrc='DesktopModules/Admin/Security/SecurityRoles.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1189' WHERE ControlSrc='DesktopModules/Admin/Portals/Portals.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1207' WHERE ControlSrc='DesktopModules/Admin/SQL/SQL.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1121' WHERE ControlSrc='DesktopModules/Admin/HostSettings/HostSettings.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1601' WHERE ControlSrc='DesktopModules/Admin/RecycleBin/RecycleBin.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1756' WHERE ControlSrc='DesktopModules/Admin/Vendors/EditAffiliate.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1436' WHERE ControlSrc='DesktopModules/Admin/LogViewer/LogViewer.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1449' WHERE ControlSrc='DesktopModules/Admin/LogViewer/EditLogTypes.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1211' WHERE ControlSrc='DesktopModules/Admin/Scheduler/ViewSchedule.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1219' WHERE ControlSrc='DesktopModules/Admin/Scheduler/EditSchedule.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1213' WHERE ControlSrc='DesktopModules/Admin/Scheduler/ViewScheduleHistory.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1214' WHERE ControlSrc='DesktopModules/Admin/Scheduler/ViewScheduleStatus.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1221' WHERE ControlSrc='DesktopModules/Admin/SearchAdmin/SearchAdmin.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1221' WHERE ControlSrc='DesktopModules/Admin/SearchResults/SearchResults.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1663' WHERE ControlSrc='DesktopModules/Admin/SiteWizard/SiteWizard.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1507' WHERE ControlSrc='DesktopModules/Admin/Lists/ListEditor.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1632' WHERE ControlSrc='DesktopModules/Admin/Security/EditGroups.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=332' WHERE ControlSrc='Admin/Users/ViewProfile.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1263' WHERE ControlSrc='DesktopModules/Admin/Extensions/Extensions.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1295' WHERE ControlSrc='DesktopModules/Admin/WhatsNew/WhatsNew.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1293' WHERE ControlSrc='DesktopModules/Admin/Dashboard/Dashboard.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1524' WHERE ControlSrc='DesktopModules/Admin/Languages/languageEnabler.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=212' WHERE ControlSrc='DesktopModules/Admin/Console/ViewConsole.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1611' WHERE ControlSrc='DesktopModules/Admin/Sitemap/SitemapSettings.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=2019' WHERE ControlSrc='DesktopModules/MemberDirectory/View.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=2018' WHERE ControlSrc='DesktopModules/SocialGroups/Loader.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=2018' WHERE ControlSrc='DesktopModules/SocialGroups/Create.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=2018' WHERE ControlSrc='DesktopModules/SocialGroups/ListSettings.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1665' WHERE ControlSrc='DesktopModules/Admin/Skins/editskins.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1297' WHERE ControlSrc='DesktopModules/Admin/XmlMerge/XmlMerge.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=2038' WHERE ControlSrc='DesktopModules/Admin/FiftyOneClientCapabilityProvider/Administration.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=1304' WHERE ControlSrc='DesktopModules/Admin/RadEditorProvider/ProviderConfig.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/Default.aspx?tabid=111' WHERE ControlSrc='DesktopModules/Admin/ViewProfile/ViewProfile.ascx'

GO


/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/
