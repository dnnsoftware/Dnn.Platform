/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/

if exists (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetUsersByRolename]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUsersByRolename]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUsersByRolename]

	@PortalId	int,
	@Rolename	nvarchar(50)

AS

SELECT     
		U.UserID, 
		UP.PortalId, 
		U.Username, 
		U.FirstName, 
		U.LastName, 
		U.DisplayName, 
		U.IsSuperUser, 
		U.Email, 
		U.AffiliateId, 
		U.UpdatePassword
	FROM {databaseOwner}{objectQualifier}UserPortals AS UP 
			RIGHT OUTER JOIN {databaseOwner}{objectQualifier}UserRoles  UR 
			INNER JOIN {databaseOwner}{objectQualifier}Roles R ON UR.RoleID = R.RoleID 
			RIGHT OUTER JOIN {databaseOwner}{objectQualifier}Users AS U ON UR.UserID = U.UserID 
		ON UP.UserId = U.UserID	
	WHERE ( UP.PortalId = @PortalId OR @PortalId IS Null )
		AND (R.RoleName = @Rolename)
		AND (R.PortalId = @PortalId OR @PortalId IS Null )
	ORDER BY U.FirstName + ' ' + U.LastName
    
GO

UPDATE {databaseOwner}{objectQualifier}HostSettings
	SET SettingValue = 'D'
	WHERE SettingName = 'ModuleCaching'
    
GO

If (SELECT {databaseOwner}{objectQualifier}fn_GetVersion(3,3,6)) = 0
	BEGIN
		IF (SELECT COLUMNPROPERTY( OBJECT_ID('{databaseOwner}[{objectQualifier}DesktopModules]'),'CompatibleVersions','AllowsNull')) IS Null
		ALTER TABLE {databaseOwner}{objectQualifier}DesktopModules ADD
			CompatibleVersions nvarchar(500) NULL
	END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}AddDesktopModule]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
DROP PROCEDURE {databaseOwner}{objectQualifier}AddDesktopModule

GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}AddDesktopModule
    
	@ModuleName		nvarchar(128),
	@FolderName		nvarchar(128),
	@FriendlyName		nvarchar(128),
	@Description		nvarchar(2000),
	@Version		nvarchar(8),
	@IsPremium		bit,
	@IsAdmin		bit,
	@BusinessController 	nvarchar(200),
	@SupportedFeatures	int,
	@CompatibleVersions	nvarchar(500)

AS

INSERT INTO {databaseOwner}{objectQualifier}DesktopModules (
	ModuleName,
	FolderName,
	FriendlyName,
	Description,
	Version,
	IsPremium,
	IsAdmin,
	BusinessControllerClass,
	SupportedFeatures,
	CompatibleVersions
)
VALUES (
	@ModuleName,
	@FolderName,
	@FriendlyName,
	@Description,
	@Version,
	@IsPremium,
	@IsAdmin,
	@BusinessController,
	@SupportedFeatures,
	@CompatibleVersions
)

SELECT SCOPE_IDENTITY()

GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetDesktopModulesByPortal]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
DROP PROCEDURE {databaseOwner}{objectQualifier}GetDesktopModulesByPortal

GO


CREATE PROCEDURE {databaseOwner}{objectQualifier}GetDesktopModulesByPortal

	@PortalId int

AS

SELECT distinct({databaseOwner}{objectQualifier}DesktopModules.DesktopModuleId) AS DesktopModuleId,
       {databaseOwner}{objectQualifier}DesktopModules.FriendlyName,
       {databaseOwner}{objectQualifier}DesktopModules.Description,
       {databaseOwner}{objectQualifier}DesktopModules.Version,
       {databaseOwner}{objectQualifier}DesktopModules.IsPremium,
       {databaseOwner}{objectQualifier}DesktopModules.IsAdmin,
       {databaseOwner}{objectQualifier}DesktopModules.businesscontrollerclass,
       {databaseOwner}{objectQualifier}DesktopModules.foldername,
       {databaseOwner}{objectQualifier}DesktopModules.modulename,
       {databaseOwner}{objectQualifier}DesktopModules.supportedfeatures,
       {databaseOwner}{objectQualifier}DesktopModules.compatibleversions
FROM {databaseOwner}{objectQualifier}DesktopModules
LEFT OUTER JOIN {databaseOwner}{objectQualifier}PortalDesktopModules on {databaseOwner}{objectQualifier}DesktopModules.DesktopModuleId = {databaseOwner}{objectQualifier}PortalDesktopModules.DesktopModuleId
WHERE  IsAdmin = 0
AND    ( IsPremium = 0 OR (PortalId = @PortalId AND PortalDesktopModuleId IS NOT Null)) 
ORDER BY FriendlyName

GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}UpdateDesktopModule]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
DROP PROCEDURE {databaseOwner}{objectQualifier}UpdateDesktopModule

GO

CREATE  PROCEDURE {databaseOwner}{objectQualifier}UpdateDesktopModule

	@DesktopModuleId	int,    
	@ModuleName		nvarchar(128),
	@FolderName		nvarchar(128),
	@FriendlyName		nvarchar(128),
	@Description		nvarchar(2000),
	@Version		nvarchar(8),
	@IsPremium		bit,
	@IsAdmin		bit,
	@BusinessController 	nvarchar(200),
	@SupportedFeatures	int,
	@CompatibleVersions 	nvarchar(500)

AS

UPDATE 	{databaseOwner}{objectQualifier}DesktopModules
SET    	ModuleName = @ModuleName,
	FolderName = @FolderName,
	FriendlyName = @FriendlyName,
	Description = @Description,
	Version = @Version,
	IsPremium = @IsPremium,
	IsAdmin = @IsAdmin,
	BusinessControllerClass = @BusinessController,
	SupportedFeatures = @SupportedFeatures,
	CompatibleVersions = @CompatibleVersions
WHERE  DesktopModuleId = @DesktopModuleId

GO

/* NOTE: the script below was added AFTER the initial private release AND needs to be manually executed by the Platinum Benefactors */
GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}DF_{objectQualifier}Folders_LastUpdated') AND OBJECTPROPERTY(id, N'IsConstraint') = 1)
ALTER TABLE {databaseOwner}{objectQualifier}Folders
	DROP CONSTRAINT DF_{objectQualifier}Folders_LastUpdated
    
GO

IF (SELECT COLUMNPROPERTY( OBJECT_ID('{databaseOwner}[{objectQualifier}Folders]'),'LastUpdated','AllowsNull')) IS NOT Null
ALTER TABLE {databaseOwner}{objectQualifier}Folders
	DROP COLUMN LastUpdated

GO

ALTER TABLE {databaseOwner}{objectQualifier}Folders ADD
	LastUpdated datetime NULL

GO
   
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}AddFolder]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
DROP PROCEDURE {databaseOwner}{objectQualifier}AddFolder

GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}AddFolder

	@PortalID int,
	@FolderPath varchar(300),
	@StorageLocation int,
	@IsProtected bit,
	@IsCached bit,
	@LastUpdated datetime

AS

INSERT INTO {databaseOwner}{objectQualifier}Folders (
  PortalID, 
  FolderPath, 
  StorageLocation, 
  IsProtected, 
  IsCached, 
  LastUpdated
)
VALUES (
  @PortalID, 
  @FolderPath, 
  @StorageLocation, 
  @IsProtected, 
  @IsCached, 
  @LastUpdated
)

SELECT SCOPE_IDENTITY()

GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}UpdateFolder]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
DROP PROCEDURE {databaseOwner}{objectQualifier}UpdateFolder
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}UpdateFolder

	@PortalID int,
	@FolderID int,
	@FolderPath varchar(300),
	@StorageLocation int,
	@IsProtected bit,
        @IsCached bit,
        @LastUpdated datetime

AS

UPDATE {databaseOwner}{objectQualifier}Folders
SET    FolderPath = @FolderPath,
       StorageLocation = @StorageLocation,
       IsProtected = @IsProtected,
       IsCached = @IsCached,
       LastUpdated = @LastUpdated
WHERE  ((PortalID = @PortalID) OR (PortalID IS Null AND @PortalID IS Null))
AND    FolderID = @FolderID

GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}AddFile]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
DROP PROCEDURE {databaseOwner}{objectQualifier}AddFile
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}AddFile

	@PortalId    int,
	@FileName    nvarchar(100),
	@Extension   nvarchar(100),
	@Size        int,
	@Width       int,
	@Height      int,
	@ContentType nvarchar(200),
	@Folder      nvarchar(200),
	@FolderID    int
AS

DECLARE @FileID int

SELECT @FileId = FileID FROM {databaseOwner}{objectQualifier}Files WHERE FolderID = @FolderID AND FileName = @FileName

IF @FileID IS Null
    BEGIN
      INSERT INTO {databaseOwner}{objectQualifier}Files (
        PortalId,
        FileName,
        Extension,
        Size,
        Width,
        Height,
        ContentType,
        Folder,
        FolderID
      )
      VALUES (
        @PortalId,
        @FileName,
        @Extension,
        @Size,
        @Width,
        @Height,
        @ContentType,
        @Folder,
        @FolderID
      )

      SELECT @FileID = SCOPE_IDENTITY()
    END
ELSE
    BEGIN
      UPDATE {databaseOwner}{objectQualifier}Files
      SET    FileName = @FileName,
             Extension = @Extension,
             Size = @Size,
             Width = @Width,
             Height = @Height,
             ContentType = @ContentType,
             Folder = @Folder,
             FolderID = @FolderID
      WHERE  FileId = @FileID
    END

SELECT @FileID

GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}DeleteFile]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
DROP PROCEDURE {databaseOwner}{objectQualifier}DeleteFile
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DeleteFile
	@PortalId int,
	@FileName nvarchar(100),
	@FolderID int

AS

DELETE 
FROM   {databaseOwner}{objectQualifier}Files
WHERE  FileName = @FileName
AND    FolderID = @FolderID
AND    ((PortalId = @PortalId) OR (@PortalId IS Null AND PortalId IS Null))

GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}UpdateFile]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
DROP PROCEDURE {databaseOwner}{objectQualifier}UpdateFile

GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}UpdateFile
	@FileId      int,
	@FileName    nvarchar(100),
	@Extension   nvarchar(100),
	@Size        int,
	@Width       int,
	@Height      int,
	@ContentType nvarchar(200),
	@Folder      nvarchar(200),
	@FolderID    int

AS

UPDATE {databaseOwner}{objectQualifier}Files
SET    FileName = @FileName,
       Extension = @Extension,
       Size = @Size,
       Width = @Width,
       Height = @Height,
       ContentType = @ContentType,
       Folder = @Folder,
       FolderID = @FolderID
WHERE  FileId = @FileId

GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetFoldersByUser]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
DROP PROCEDURE {databaseOwner}{objectQualifier}GetFoldersByUser

GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetFoldersByUser
	@PortalID int,
	@UserID int,
	@IncludeSecure bit,
	@IncludeDatabase bit,
	@AllowAccess bit,
	@PermissionKeys nvarchar(200)

AS
SELECT DISTINCT
	F.FolderID,
	F.PortalID,
	F.FolderPath,
	F.StorageLocation,
	F.IsProtected,
	F.IsCached,
	F.LastUpdated
FROM {databaseOwner}{objectQualifier}Roles R
	INNER JOIN {databaseOwner}{objectQualifier}UserRoles UR ON R.RoleID = UR.RoleID 
	RIGHT OUTER JOIN {databaseOwner}{objectQualifier}Folders F
		INNER JOIN {databaseOwner}{objectQualifier}FolderPermission FP ON F.FolderID = FP.FolderID 
		INNER JOIN {databaseOwner}{objectQualifier}Permission P ON FP.PermissionID = P.PermissionID 
	ON R.RoleID = FP.RoleID
WHERE (	UR.UserID = @UserID
			OR (FP.RoleID = - 1 AND @UserID IS NOT Null)
			OR (FP.RoleID = - 3)
			)
		AND CHARINDEX(P.PermissionKey, @PermissionKeys) > 0
		AND FP.AllowAccess = @AllowAccess
	AND F.PortalID = @PortalID
	AND (F.StorageLocation = 0 
		OR (F.StorageLocation = 1 AND @IncludeSecure = 1) 
		OR (F.StorageLocation = 2 AND @IncludeDatabase = 1)
	)
ORDER BY F.FolderPath

GO

UPDATE {databaseOwner}{objectQualifier}Schedule
SET    Enabled = 0
WHERE  TypeFullName = 'DotNetNuke.Services.FileSystem.SynchronizeFileSystem, DOTNETNUKE'

GO


/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/
