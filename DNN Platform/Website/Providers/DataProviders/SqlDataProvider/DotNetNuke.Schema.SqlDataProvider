/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/

/****** Object:  UserDefinedFunction {databaseOwner}[{objectQualifier}AdjustedReferrer]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION {databaseOwner}[{objectQualifier}AdjustedReferrer](
	@Referrer 	 nVarChar(2000),
	@PortalAlias nVarChar( 255)
	)
RETURNS nVarChar(2000)
AS
BEGIN
	RETURN CASE 
		WHEN @Referrer LIKE '%' + @PortalAlias + '%' THEN Null 
		ELSE @Referrer
	END
END
GO
/****** Object:  UserDefinedFunction {databaseOwner}[{objectQualifier}AdministratorRoleId]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- new function to return RoleID for Administrators of the Portal passed in as parameter
CREATE FUNCTION {databaseOwner}[{objectQualifier}AdministratorRoleId](
    @PortalId	 		 Int -- Needs to be >= 0, otherwise false is returned
) 
	RETURNS 			 int
AS
	BEGIN
		DECLARE @adminRoleId int = 0
		SELECT  @adminRoleId = AdministratorRoleId FROM {databaseOwner}[{objectQualifier}Portals] WHERE PortalID = @PortalId
		RETURN  @adminRoleId
	END
GO
/****** Object:  UserDefinedFunction {databaseOwner}[{objectQualifier}BrowserFromUserAgent]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION {databaseOwner}[{objectQualifier}BrowserFromUserAgent]
	(@UserAgent nVarChar(2000))
RETURNS nVarChar(2000)
AS
BEGIN
	DECLARE @ident1		 nVarChar( 20) = '';
	DECLARE @ident2		 nVarChar( 20) = '';
	DECLARE @Browser     nVarChar(100) = '';
	DECLARE @Version	 nVarChar( 10) = '';
	DECLARE @Pos         Smallint = -1;
	DECLARE @End		 Smallint =  0;
	
	-- Detect Browser family (Name|Version Prefix):
	SET @Browser =	CASE
		WHEN @UserAgent LIKE '%Opera Mini/%'	THEN 'Opera Mini|Opera Mini/|Version/'
		WHEN @UserAgent LIKE '%Opera Mobi/%'	THEN 'Opera Mobile|Version/|Opera Mobi/'
		WHEN @UserAgent LIKE '%Opera/%'			THEN 'Opera|Version/|Opera/'
		WHEN @UserAgent LIKE '%Opera %'			THEN 'Opera|Opera '
		WHEN @UserAgent LIKE '%Opera'			THEN 'Opera|Opera'
		WHEN @UserAgent LIKE '%Firefox/%'		THEN 'Mozilla Firefox|Firefox/'
		WHEN @UserAgent LIKE '%Firebird/%'		THEN 'Mozilla Firebird|Firebird/'
		WHEN @UserAgent LIKE '%SeaMonkey/%'		THEN 'Mozilla SeaMonkey|SeaMonkey/'
		WHEN @UserAgent LIKE '%Kindle/%'		THEN 'Amazon Kindle|Kindle/'
		WHEN @UserAgent LIKE '%Kindle %'		THEN 'Amazon Kindle|Version/'
		WHEN @UserAgent LIKE '%Silk/%'			THEN 'Amazon Kindle|Version/'
		WHEN @UserAgent LIKE '%Chrome/%'		THEN 'Google Chrome|Chrome/'
		WHEN @UserAgent Like '%Blackberry'		THEN 'Blackberry|Mobile Safari/'
		WHEN @UserAgent LIKE '%Android%' 		THEN 'Android|Mobile Safari/'
		WHEN @UserAgent LIKE '%Safari/%'		THEN 'Apple Safari|Safari/'
		WHEN @UserAgent LIKE '%ChromePlus/%'	THEN 'ChromePlus|ChromePlus/'
		WHEN @UserAgent LIKE '%AOL %'			THEN 'AOL Browser|AOL '
		WHEN @USerAgent LIKE '%Crazy Browser %' THEN 'Crazy Browser|Crazy Browser '
		WHEN @USerAgent LIKE '%Maxthon/%'		THEN 'Maxthon|Maxthon/'
		WHEN @USerAgent LIKE '%IEMobile %'		THEN 'IE Mobile|IEMobile '
		WHEN @USerAgent LIKE '%IEMobile/%'		THEN 'IE Mobile|IEMobile/'
		WHEN @UserAgent LIKE '%MSIE %'      	THEN 'Internet Explorer|MSIE '
		WHEN @UserAgent LIKE '%(IE %'      		THEN 'Internet Explorer|(IE '
		WHEN @UserAgent LIKE '%Netscape/%' 		THEN 'Netscape Navigator|Netscape/'
		WHEN @UserAgent LIKE '%Navigator/%'		THEN 'Netscape Navigator|Navigator/'
		WHEN @UserAgent LIKE '%PLAYSTATION %' 	THEN 'Sony Playstation|PLAYSTATION '
		WHEN @UserAgent LIKE '%WGet/%'			THEN 'WGet|WGet/'
	END
	IF @Browser <> '' -- separate elements:
		SET @Pos = CharIndex('|', @Browser)
		IF @Pos > 0 BEGIN	
			SET @ident1  = SubString(@Browser, @Pos + 1, 100)
			SET @Browser = Left(@Browser, @Pos - 1)
			SET @Pos     = CharIndex('|', @ident1)
			IF  @Pos > 0 BEGIN
				SET @Ident2 = SubString(@Ident1, @Pos + 1, 100)
				SET @Ident1 = Left(@Ident1, @Pos - 1)
			END 
			-- get major version number from UserAgent string:
			SET @Pos = CharIndex(@ident1, @UserAgent) + Len(@ident1 + '|') - 1 -- correct to catch trailing space
			IF @Pos = 0 SET @Pos = CharIndex(@ident2, @UserAgent) + Len(@ident2 + '|') - 1 -- again
			IF @Pos > 0 BEGIN
				WHILE SubString(@UserAgent, @Pos + @End, 1) >= '0' AND SubString(@UserAgent, @Pos + @End, 1) <= 9
					SET @End = @End + 1
				IF @End > 0 SET @Version = SubString(@UserAgent, @Pos, @End)
			END
		END
	ELSE -- Search bots, ignore version
		SET @Browser = CASE 
		WHEN @UserAgent LIKE '%GoogleBot%'		THEN 'Google Bot'
		WHEN @UserAgent LIKE 'BingBot%'			THEN 'Bing Bot'
		WHEN @UserAgent LIKE 'MSNBot%'			THEN 'MSN Bot'
		WHEN @UserAgent LIKE '%BaiduSpider%'	THEN 'Baidu Spider'
		WHEN @UserAgent LIKE '%Arachmo%'		THEN 'Arachmo Bot'
		WHEN @UserAgent LIKE '%NewsGator%'		THEN 'NewsGator Bot'
		WHEN @UserAgent LIKE '%Seekbot%'		THEN 'SeekPort Bot'
		WHEN @UserAgent LIKE '%Yahoo%'			THEN 'Yahoo Bot'
		WHEN @UserAgent LIKE '%Yandex%'			THEN 'Yandex Bot'
		WHEN @UserAgent LIKE '%Bot%'			THEN 'Other Bot'
		ELSE 'Other'
	END
	RETURN RTRIM(@Browser + ' ' + @Version)
END
GO
/****** Object:  UserDefinedFunction {databaseOwner}[{objectQualifier}ConvertListToTable]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION {databaseOwner}[{objectQualifier}ConvertListToTable]
(  
	@Delimiter	NVARCHAR(5), 
    @List		NVARCHAR(MAX)
) 
RETURNS @TableOfValues TABLE 
(  
	RowNumber	SMALLINT IDENTITY(1,1), 
    RowValue	NVARCHAR(1000) 
) 
AS 
   BEGIN
      DECLARE @LenString INT 
 
      WHILE len( @List ) > 0 
         BEGIN 
         
            SELECT @LenString = 
               (CASE charindex( @Delimiter, @List ) 
                   WHEN 0 THEN len( @List ) 
                   ELSE ( charindex( @Delimiter, @List ) -1 )
                END
               ) 
                                
            INSERT INTO @TableOfValues 
               SELECT substring( @List, 1, @LenString )
                
            SELECT @List = 
               (CASE ( len( @List ) - @LenString ) 
                   WHEN 0 THEN '' 
                   ELSE right( @List, len( @List ) - @LenString - 1 ) 
                END
               ) 
         END
      RETURN 
   END 
GO
/****** Object:  UserDefinedFunction {databaseOwner}[{objectQualifier}FilePath]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION {databaseOwner}[{objectQualifier}FilePath]
(
    @StrMayContainFileId nVarChar(255)
)
	RETURNS 			 nVarChar(500)
AS
	BEGIN
		DECLARE @Path AS nVarChar(500);

		IF ISNULL(@StrMayContainFileId,'') = ''
			SET @Path = ''
		 ELSE IF Lower(@StrMayContainFileId) LIKE 'fileid=%'
			SELECT @Path = IsNull(Folder, '') + FileName FROM {databaseOwner}[{objectQualifier}vw_Files]
			 WHERE fileid = CAST(SUBSTRING(@StrMayContainFileId, 8, 10) AS Int)
		 ELSE
			SET @Path = @StrMayContainFileId
		RETURN @Path -- never Null!
	END
GO
/****** Object:  UserDefinedFunction {databaseOwner}[{objectQualifier}fn_CompareVersion]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION {databaseOwner}[{objectQualifier}fn_CompareVersion]
(
	@Version		nvarchar(20),
	@CurrentVersion nvarchar(20)
)
RETURNS int

AS
	BEGIN

		DECLARE @MajorVersion int
		DECLARE @MajorCurrentVersion int
		DECLARE @MinorVersion int
		DECLARE @MinorCurrentVersion int
		DECLARE @BuildVersion int
		DECLARE @BuildCurrentVersion int

		SELECT @MajorVersion = Major, @MinorVersion = Minor, @BuildVersion = Build
		FROM {databaseOwner}[{objectQualifier}fn_ParseVersion](@Version)
		SELECT @MajorCurrentVersion = Major, @MinorCurrentVersion = Minor, @BuildCurrentVersion = Build
		FROM {databaseOwner}[{objectQualifier}fn_ParseVersion](@CurrentVersion)

		IF @CurrentVersion IS NULL
			-- Assembly Not Registered -  Set ReturnCode = 0, so assembly is copied
			RETURN 0
		ELSE
			IF @Version = @CurrentVersion
				-- Same Version - Set ReturnCode = 2, so assembly is only copied on repair
				RETURN 2
			ELSE
				-- Different Version
				-- Compare Major, Minor, Revision
				IF @MajorVersion > @MajorCurrentVersion
					OR (@MajorVersion = @MajorCurrentVersion AND @MinorVersion > @MinorCurrentVersion)
						OR (@MajorVersion = @MajorCurrentVersion AND @MinorVersion = @MinorCurrentVersion AND @BuildVersion > @BuildCurrentVersion)
					-- Newer version - at least on of Major, Minor, Revision is larger - Set ReturnCode = 1, so assembly is copied
					RETURN 1
				ELSE
					-- Older Version - Set ReturnCode = 3, so assembly is not copied
					RETURN 3

		RETURN 3
	END
GO
/****** Object:  UserDefinedFunction {databaseOwner}[{objectQualifier}fn_GetVersion]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION {databaseOwner}[{objectQualifier}fn_GetVersion]
(
	@maj AS int,
	@min AS int,
	@bld AS int
)
RETURNS bit

AS
BEGIN
	IF Exists (SELECT * FROM {databaseOwner}{objectQualifier}Version
					WHERE Major = @maj
						AND Minor = @min
						AND Build = @bld
				)
		BEGIN
			RETURN 1
		END
	RETURN 0
END
GO
/****** Object:  UserDefinedFunction {databaseOwner}[{objectQualifier}FormattedString]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- added for easier string handling
CREATE FUNCTION {databaseOwner}[{objectQualifier}FormattedString]
(
    @InputStr nVarChar(2000), -- might be null or empty, in this case an empty string is returned (format ignored)!
    @Format   nVarChar(2000)  -- not null or empty, contains token @@@
)
	RETURNS   nVarChar(4000)  -- replaced string, e.g. FormattedString('World', 'Hello @0!') returns 'Hello World!' 
AS
BEGIN
	DECLARE @RetVal AS nVarChar(4000) = ''
	IF NOT IsNull(@InputStr,'') = ''
		SET @retVal = REPLACE(@Format, N'@0', @InputStr)
	RETURN @RetVal
END
GO
/****** Object:  UserDefinedFunction {databaseOwner}[{objectQualifier}GetElement]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION {databaseOwner}[{objectQualifier}GetElement]
(
	@ord AS INT,
	@str AS VARCHAR(8000),
	@delim AS VARCHAR(1) 
)
RETURNS INT

AS

BEGIN
	-- If input is invalid, return null.
	IF  @str IS NULL
		OR LEN(@str) = 0
		OR @ord IS NULL
		OR @ord < 1
		-- @ord > [is the] expression that calculates the number of elements.
		OR @ord > LEN(@str) - LEN(REPLACE(@str, @delim, '')) + 1
		RETURN NULL
 
	DECLARE @pos AS INT, @curord AS INT
	SELECT @pos = 1, @curord = 1
	-- Find next element's start position and increment index.
	WHILE @curord < @ord
		SELECT
			@pos = CHARINDEX(@delim, @str, @pos) + 1,
			@curord = @curord + 1
	RETURN    CAST(SUBSTRING(@str, @pos, CHARINDEX(@delim, @str + @delim, @pos) - @pos) AS INT)
END
GO
/****** Object:  UserDefinedFunction {databaseOwner}[{objectQualifier}GetFileFolderFunc]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION {databaseOwner}[{objectQualifier}GetFileFolderFunc](@FolderD INT)
RETURNS nvarchar(246) 
AS
BEGIN
    DECLARE @folderPath nvarchar(246)
    select @folderPath=folderpath from {databaseOwner}[{objectQualifier}Folders] where folderid=@FolderD
return @folderPath
  
END;
GO
/****** Object:  UserDefinedFunction {databaseOwner}[{objectQualifier}GetListParentKey]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION {databaseOwner}[{objectQualifier}GetListParentKey]
(
	@ParentID AS int,
	@ListName as nvarchar(500),
	@Type as nvarchar(50),
	@Count as int 
)
RETURNS nvarchar(2000)

AS
	BEGIN
		DECLARE @KeyValue nvarchar(2000)
		DECLARE @ListValue nvarchar(2000)
		DECLARE @TextValue nvarchar(2000)
		DECLARE @ReturnValue nvarchar(2000)
		DECLARE @Key nvarchar(2000)
		
		IF @ParentID = 0
			IF @Count = 0
				SET @ReturnValue = ''
			ELSE
				SET @ReturnValue = @ListName
		ELSE
			BEGIN
				SELECT	@KeyValue = ListName + '.' + [Value],
						@TextValue = ListName + '.' + [Text], 
						@ListValue = ListName, 
						@ParentID = ParentID  
					FROM {databaseOwner}{objectQualifier}Lists 
					WHERE EntryID = @ParentID
				If @Type = 'ParentKey' Or (@Type = 'ParentList' AND @Count > 0)
					SET @ReturnValue = @KeyValue
				ELSE 
					IF @Type = 'ParentList'
						SET @ReturnValue = @ListValue
					ELSE
						SET @ReturnValue = @TextValue
				IF @Count > 0
					If @Count = 1 AND @Type = 'ParentList'
						SET @ReturnValue = @ReturnValue + ':' + @ListName
					ELSE
						SET @ReturnValue = @ReturnValue + '.' + @ListName
				SET @ReturnValue = {databaseOwner}{objectQualifier}GetListParentKey(@ParentID, @ReturnValue, @Type, @Count+1)
			END

		RETURN    @ReturnValue
	END
GO
/****** Object:  UserDefinedFunction {databaseOwner}[{objectQualifier}GetProfileElement]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION {databaseOwner}[{objectQualifier}GetProfileElement]
(
	@fieldName AS NVARCHAR(100),
	@fields AS NVARCHAR(4000),
	@values AS NVARCHAR(4000)
)

RETURNS NVARCHAR(4000)

AS

BEGIN

	-- If input is invalid, return null.
	IF  @fieldName IS NULL
		OR LEN(@fieldName) = 0
		OR @fields IS NULL
		OR LEN(@fields) = 0
		OR @values IS NULL
		OR LEN(@values) = 0
		RETURN NULL

	-- locate FieldName in Fields
	DECLARE @fieldNameToken AS NVARCHAR(20)
	DECLARE @fieldNameStart AS INTEGER, @valueStart AS INTEGER, @valueLength AS INTEGER

	-- Only handle string type fields (:S:)
	SET @fieldNameStart = CHARINDEX(@fieldName + ':S',@Fields,0)

	-- If field is not found, return null
	IF @fieldNameStart = 0 RETURN NULL
	SET @fieldNameStart = @fieldNameStart + LEN(@fieldName) + 3

	-- Get the field token which I've defined as the start of the field offset to the end of the length
	SET @fieldNameToken =
	SUBSTRING(@Fields,@fieldNameStart,LEN(@Fields)-@fieldNameStart)

	-- Get the values for the offset and length
	SET @valueStart = {databaseOwner}{objectQualifier}getelement(1,@fieldNameToken,':')
	SET @valueLength = {databaseOwner}{objectQualifier}getelement(2,@fieldNameToken,':')

	-- Check for sane values, 0 length means the profile item was stored, just no data
	IF @valueLength = 0 RETURN ''

	-- Return the string
	RETURN SUBSTRING(@values, @valueStart+1, @valueLength)
END
GO
/****** Object:  UserDefinedFunction {databaseOwner}[{objectQualifier}GetProfileFieldSQL]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- results order added
CREATE FUNCTION {databaseOwner}[{objectQualifier}GetProfileFieldSQL]
(
    @PortalID 	 Int,
    @TemplateSql nVarChar(max)
)
	RETURNS 	 nVarChar(max)
AS
	BEGIN
		DECLARE @sql nVarChar(max);

		SELECT @sql = COALESCE(@sql + ',','') + '[' + PropertyName + ']' + @TemplateSql
		 FROM {databaseOwner}[{objectQualifier}ProfilePropertyDefinition]
		 WHERE IsNull(PortalID, -1) = IsNull(@PortalID, -1)
		   AND Deleted = 0
		ORDER BY ViewOrder
		RETURN (@sql)
	END
GO
/****** Object:  UserDefinedFunction {databaseOwner}[{objectQualifier}GetProfilePropertyDefinitionID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- optimized
CREATE FUNCTION {databaseOwner}[{objectQualifier}GetProfilePropertyDefinitionID]
(   @PortalID     Int,         -- might be 0
    @PropertyName nVarChar(50) -- required
)   
	RETURNS 	  Int
AS
	BEGIN
		DECLARE @DefinitionID Int = -1
		IF NOT IsNull(@PropertyName, '') = ''
			SELECT @DefinitionID = PropertyDefinitionID
			  FROM {databaseOwner}[{objectQualifier}ProfilePropertyDefinition]
			  WHERE IsNull(PortalID, -1) = IsNull(@PortalID, -1) AND PropertyName = @PropertyName
		RETURN @DefinitionID
	END
GO
/****** Object:  UserDefinedFunction {databaseOwner}[{objectQualifier}GetSortSQL]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION {databaseOwner}[{objectQualifier}GetSortSQL]
(   -- deprecated, please call SortFieldSQL and FormattedString instead
    @SortBy        nVarChar(100),
    @SortAscending Bit,
    @Default       nVarChar(100)
)
	RETURNS 	   nVarChar(120)
AS
	BEGIN
		RETURN {databaseOwner}[{objectQualifier}FormattedString]({databaseOwner}[{objectQualifier}SortFieldSQL](@SortBy, @SortAscending, @Default), N'ORDER BY @0')
	END
GO
/****** Object:  UserDefinedFunction {databaseOwner}[{objectQualifier}HasChildTab]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION {databaseOwner}[{objectQualifier}HasChildTab]
(
   @TabId   Int
) 
	RETURNS Bit
AS
BEGIN
    RETURN CASE WHEN EXISTS (SELECT 1 FROM {databaseOwner}{objectQualifier}Tabs WHERE ParentId = @TabId) THEN 1 ELSE 0 END
END
GO
/****** Object:  UserDefinedFunction {databaseOwner}[{objectQualifier}Journal_Split]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION {databaseOwner}[{objectQualifier}Journal_Split](@text varchar(8000), @delimiter char(1))
RETURNS @words TABLE (objectid smallint primary key, id int)
AS
BEGIN
	DECLARE @pos smallint,
		@i smallint,
		@j smallint,
		@s varchar(255)

	SET @pos = 1

	WHILE @pos <= LEN(@text)
	BEGIN
		SET @i = CHARINDEX(' ', @text, @pos)
		SET @j = CHARINDEX(@delimiter, @text, @pos)

		IF @i > 0 OR @j > 0
		BEGIN
			IF @i = 0 OR (@j > 0 AND @j < @i)
				SET @i = @j

			IF @i > @pos
			BEGIN
				-- @i now holds the earliest delimiter in the string
				SET @s = SUBSTRING(@text, @pos, @i - @pos)
	
				INSERT INTO @words
				VALUES (@pos, @s)
			END

			SET @pos = @i + 1
			WHILE @pos < LEN(@text) AND SUBSTRING(@text, @pos, 1) IN (' ', ',')
				SET @pos = @pos + 1
		END
		ELSE
		BEGIN
			INSERT INTO @words
			VALUES (@pos, SUBSTRING(@text, @pos, LEN(@text) - @pos + 1))

			SET @pos = LEN(@text) + 1
		END
	END
	
	RETURN
END
GO
/****** Object:  UserDefinedFunction {databaseOwner}[{objectQualifier}Journal_SplitText]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION {databaseOwner}[{objectQualifier}Journal_SplitText](@text varchar(8000), @delimiter char(1))
RETURNS @words TABLE (objectid smallint primary key, string varchar(1000), optionalid int)
AS
BEGIN
	DECLARE @pos smallint,
		@i smallint,
		@j smallint,
		@s varchar(255),
        @o int

	SET @pos = 1

	WHILE @pos <= LEN(@text)
	BEGIN
		SET @i = CHARINDEX(' ', @text, @pos)
		SET @j = CHARINDEX(@delimiter, @text, @pos)

		IF @i > 0 OR @j > 0
		BEGIN
			IF @i = 0 OR (@j > 0 AND @j < @i)
				SET @i = @j

			IF @i > @pos
			BEGIN
				-- @i now holds the earliest delimiter in the string
				SET @s = SUBSTRING(@text, @pos, @i - @pos)
				SET @o = 0
	            IF CHARINDEX('|',@s,0) > 0
					BEGIN
						SET @o = SUBSTRING(@s,0,CHARINDEX('|',@s,0))
						SET @s = SUBSTRING(@s,CHARINDEX('|',@s,0)+1,LEN(@s))

					END

				IF NOT EXISTS (SELECT 1 FROM @words WHERE [string]=@s)
				BEGIN
					INSERT INTO @words
					VALUES (@pos, @s, @o)
				END
			END

			SET @pos = @i + 1
			WHILE @pos < LEN(@text) AND SUBSTRING(@text, @pos, 1) IN (' ', ',')
				SET @pos = @pos + 1
		END
		ELSE
		BEGIN
			SET @s = SUBSTRING(@text, @pos, LEN(@text) - @pos + 1)
			IF CHARINDEX('|',@s,0) > 0
			BEGIN
				SET @o = SUBSTRING(@s,0,CHARINDEX('|',@s,0))
				SET @s = SUBSTRING(@s,CHARINDEX('|',@s,0)+1,LEN(@s))

			END

			IF NOT EXISTS (SELECT 1 FROM @words WHERE [string]=@s)
			BEGIN
				INSERT INTO @words
				VALUES (@pos, @s ,@o)
			END

			SET @pos = LEN(@text) + 1
		END
	END

	RETURN
END
GO
/****** Object:  UserDefinedFunction {databaseOwner}[{objectQualifier}Journal_User_Permissions]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION {databaseOwner}[{objectQualifier}Journal_User_Permissions]
(
    @PortalId int,
    @UserId int,
    @RegisteredRoleId int
)
RETURNS 
@tmp TABLE (seckey nvarchar(200))

AS
BEGIN
IF @UserId > 0
        BEGIN
            IF @RegisteredRoleId = 1
                SELECT @RegisteredRoleId = RegisteredRoleId FROM {databaseOwner}[{objectQualifier}Portals] WHERE PortalID = @PortalId
            INSERT INTO @tmp (seckey) VALUES ('U' + Cast(@UserId as nvarchar(200)))
            INSERT INTO @tmp (seckey) VALUES ('P' + Cast(@UserId as nvarchar(200)))
            INSERT INTO @tmp (seckey) VALUES ('F' + Cast(@UserId as nvarchar(200)))
            IF EXISTS(SELECT RoleId FROM {databaseOwner}[{objectQualifier}UserRoles] WHERE UserID = @UserId AND RoleId = @RegisteredRoleId
                        AND    (EffectiveDate <= getdate() or EffectiveDate is null)
                        AND    (ExpiryDate >= getdate() or ExpiryDate is null))
                    INSERT INTO @tmp (seckey) VALUES ('C')
            
        END
        
    INSERT INTO @tmp (seckey) VALUES ('E')
    
    INSERT INTO @tmp (seckey)
    SELECT 'R' + CAST(ur.RoleId as nvarchar(200)) 
        FROM {databaseOwner}[{objectQualifier}UserRoles] as ur
            INNER JOIN {databaseOwner}[{objectQualifier}Users] as u on ur.UserId = u.UserId
            INNER JOIN {databaseOwner}[{objectQualifier}Roles] as r on ur.RoleId = r.RoleId
        WHERE  u.UserId = @UserId
            AND    r.PortalId = @PortalId
            AND    (EffectiveDate <= getdate() or EffectiveDate is null)
            AND    (ExpiryDate >= getdate() or ExpiryDate is null)
    INSERT INTO @tmp (seckey)
        SELECT (SELECT CASE WHEN @UserID = ur.UserId 
                        THEN 'F' + CAST(RelatedUserID as nvarchar(200))
                        ELSE 'F' + CAST(ur.UserId as nvarchar(200)) END) 
        FROM {databaseOwner}[{objectQualifier}UserRelationships] ur
        INNER JOIN {databaseOwner}[{objectQualifier}Relationships] r ON ur.RelationshipID = r.RelationshipID AND r.RelationshipTypeID = 1
        WHERE (ur.UserId = @UserId OR RelatedUserID = @UserId) AND Status = 2
    RETURN 
END
GO
/****** Object:  UserDefinedFunction {databaseOwner}[{objectQualifier}MasterPortalId]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- new helper function
CREATE FUNCTION {databaseOwner}[{objectQualifier}MasterPortalId]
(
    @PortalId Int  -- ID of the portal or Null for Host
) 
	RETURNS   Int
AS
	BEGIN
		DECLARE @MasterPortalId  Int = Null
		IF IsNull(@PortalId, -1) >= 0
			SELECT @MasterPortalId = MasterPortalId FROM {databaseOwner}[{objectQualifier}vw_MasterPortals] WHERE PortalId = @PortalId
		RETURN @MasterPortalId
	END
GO
/****** Object:  UserDefinedFunction {databaseOwner}[{objectQualifier}PageLowerBound]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- new helperfunction for paging, replacing inefficient stored procedure
CREATE FUNCTION {databaseOwner}[{objectQualifier}PageLowerBound]
(
    @PageIndex Int, -- Page number starting with 0 or Null for all
    @PageSize  Int  -- number of items per page or Null for all
) 
	RETURNS    Int
AS
BEGIN
    DECLARE @bound Int = 1
    IF IsNull(@PageSize, -1) > 0 AND IsNull(@PageIndex, -1) >= 0 AND IsNull(@PageIndex, 0) <= (Cast(0x7fffffff AS Int) / IsNull(@PageSize, 1) -1)
        SET @bound  = @PageSize * @PageIndex + 1
    RETURN @bound
END
GO
/****** Object:  UserDefinedFunction {databaseOwner}[{objectQualifier}PageUpperBound]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- new helper function for paging, replacing inefficient stored procedure
CREATE FUNCTION {databaseOwner}[{objectQualifier}PageUpperBound]
(
    @PageIndex Int, -- Page number starting with 0 or Null for all
    @PageSize  Int  -- number of items per page or Null for all
) 
	RETURNS    Int
AS
BEGIN
    DECLARE @bound Int = Cast(0x7fffffff AS Int)
    IF IsNull(@PageSize, -1) > 0 AND IsNull(@PageIndex, -1) >= 0 AND IsNull(@PageIndex, 0) <= (Cast(0x7fffffff AS Int) / IsNull(@PageSize, 1) -1)
        SET @Bound = @PageSize * (@PageIndex + 1)
    RETURN @Bound
END
GO
/****** Object:  UserDefinedFunction {databaseOwner}[{objectQualifier}RemoveStringCharacters]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION {databaseOwner}[{objectQualifier}RemoveStringCharacters]
(
		@string nvarchar(max), 
		@remove nvarchar(100)
)
RETURNS nvarchar(max)
AS
BEGIN
    WHILE @string LIKE '%[' + @remove + ']%'
    BEGIN
        SET @string = REPLACE(@string,SUBSTRING(@string,PATINDEX('%[' + @remove + ']%',@string),1),'')
    END

    RETURN @string
END
GO
/****** Object:  UserDefinedFunction {databaseOwner}[{objectQualifier}SortFieldSQL]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- added, provides more flexibility, e.g. may be called again for multiple sort columns
CREATE FUNCTION {databaseOwner}[{objectQualifier}SortFieldSQL]
(
    @SortBy        nVarChar(100), -- should be a field name
    @SortAscending Bit,			  -- ascending or descending?
    @Default       nVarChar(100)  -- name of field to be used if @sortby is empty
)
	RETURNS 	   nVarChar(110)
AS
	BEGIN
		DECLARE @sortSql nVarChar(110) =  ''
		IF IsNull(@SortBy, '') = ''
			SET @SortBy = IsNull(@Default, '')
		IF @SortBy <>  ''
			SET @sortSql = N'[' + @SortBy + CASE WHEN IsNull(@SortAscending, 1) = 0 THEN N'] DESC' ELSE N'] ASC' END
		RETURN @sortSql
	END
GO
/****** Object:  UserDefinedFunction {databaseOwner}[{objectQualifier}SplitDelimitedIDs]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- new helper function to return a table with id's, passed as a single string with delimiter
CREATE FUNCTION {databaseOwner}[{objectQualifier}SplitDelimitedIDs]
(
	@RecordIDList VarChar(2000),
	@Delimiter    VarChar(   2) = ','
)
RETURNS 
	@IntegerList Table (RecordID Int)
AS
	BEGIN
		DECLARE @RecordID VarChar(10)
		DECLARE @Start    Int        = 0
		DECLARE @Pos      Int        = 1

		SET @RecordIDList = @RecordIDList + @Delimiter
		SET @Pos = CHARINDEX(@Delimiter, @RecordIDList, 1)

		WHILE @Pos > 0 BEGIN
			SET @RecordID = LTRIM(RTRIM(SUBSTRING(@RecordIDList, @Start, @Pos - @Start)))
			IF @RecordID <> ''
				INSERT INTO @IntegerList (RecordID) VALUES (CAST(@RecordID AS Int)) -- use appropriate conversion
			SET @Start = @Pos + len(@Delimiter)
			SET @Pos = CHARINDEX(@Delimiter, @RecordIDList, @Start)
		END
		RETURN
	END
GO
/****** Object:  UserDefinedFunction {databaseOwner}[{objectQualifier}SuperUserTabID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION {databaseOwner}[{objectQualifier}SuperUserTabID]
() 
	RETURNS Int
AS
BEGIN
    DECLARE @HostTabId Int = Null
    SELECT  TOP (1) @HostTabId = TabID
		FROM  {databaseOwner}{objectQualifier}Tabs
		WHERE (PortalID IS NULL) AND (ParentId IS NULL)
		ORDER BY TabID
    RETURN @HostTabId
END
GO
/****** Object:  UserDefinedFunction {databaseOwner}[{objectQualifier}TemplatedString]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- added for easier string handling
CREATE FUNCTION {databaseOwner}[{objectQualifier}TemplatedString]
(
    @template nVarChar(3500), -- use tokens @1, @2, @3, @4, @5 to be replaced by param1 .. param5
    @param1   nVarChar( 100) = '', -- empty param values will just remove token!
	@param2	  nVarChar( 100) = '',
	@param3	  nVarChar( 100) = '',
	@param4	  nVarChar( 100) = '',
	@param5	  nVarChar( 100) = ''
)
	RETURNS   nVarChar(4000)
AS
BEGIN
    RETURN REPLACE(
			REPLACE(
			 REPLACE(
			  REPLACE(
			   REPLACE(IsNull(@template, ''), 
					   N'@1', IsNull(@param1,'')), 
					  N'@2', IsNull(@param2,'')), 
					 N'@3', IsNull(@param3,'')), 
					N'@4', IsNull(@param4,'')), 
				   N'@5', IsNull(@param5,''))
END
GO
/****** Object:  UserDefinedFunction {databaseOwner}[{objectQualifier}UserDisplayName]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- new helper function, returning Displayname for a userid
CREATE FUNCTION {databaseOwner}[{objectQualifier}UserDisplayName]
(
	@userId Int
)
RETURNS 
	nVarChar(255)
AS
	BEGIN
		DECLARE @DisplayName AS nVarChar(255)

		SELECT  @DisplayName = DisplayName FROM {databaseOwner}[{objectQualifier}Users] WHERE UserID = @UserId
		RETURN  @DisplayName
	END
GO
/****** Object:  UserDefinedFunction {databaseOwner}[{objectQualifier}UserIsInRole]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- new helper function
CREATE FUNCTION {databaseOwner}[{objectQualifier}UserIsInRole]
(
	@UserId Int,
	@RoleId Int
)
RETURNS 	Bit
AS
	BEGIN
		RETURN CASE WHEN EXISTS (SELECT * FROM {databaseOwner}[{objectQualifier}UserRoles] WHERE UserID = @UserId AND RoleID = @RoleId 
														   AND IsNull(EffectiveDate, GetDate()) >= GetDate() 
														   AND IsNull(ExpiryDate, GetDate())    <= GetDate()) THEN 1 ELSE 0 END
	END
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Users]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Users](
	[UserID] [int] IDENTITY(1,1) NOT NULL,
	[Username] [nvarchar](100) NOT NULL,
	[FirstName] [nvarchar](50) NOT NULL,
	[LastName] [nvarchar](50) NOT NULL,
	[IsSuperUser] [bit] NOT NULL,
	[AffiliateId] [int] NULL,
	[Email] [nvarchar](256) NULL,
	[DisplayName] [nvarchar](128) NOT NULL,
	[UpdatePassword] [bit] NOT NULL,
	[LastIPAddress] [nvarchar](50) NULL,
	[IsDeleted] [bit] NOT NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
	[PasswordResetToken] [uniqueidentifier] NULL,
	[PasswordResetExpiration] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}Users] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_{objectQualifier}Users] UNIQUE NONCLUSTERED 
(
	[Username] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}PortalPermission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}PortalPermission](
	[PortalPermissionId] [int] IDENTITY(1,1) NOT NULL,
	[PortalId] [int] NULL,
	[PermissionId] [int] NOT NULL,
	[AllowAccess] [bit] NOT NULL,
	[RoleID] [int] NULL,
	[UserID] [int] NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}PortalPermission] PRIMARY KEY CLUSTERED 
(
	[PortalPermissionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Roles]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Roles](
	[RoleID] [int] IDENTITY(0,1) NOT NULL,
	[PortalID] [int] NULL,
	[RoleName] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](1000) NULL,
	[ServiceFee] [money] NULL,
	[BillingFrequency] [char](1) NULL,
	[TrialPeriod] [int] NULL,
	[TrialFrequency] [char](1) NULL,
	[BillingPeriod] [int] NULL,
	[TrialFee] [money] NULL,
	[IsPublic] [bit] NOT NULL,
	[AutoAssignment] [bit] NOT NULL,
	[RoleGroupID] [int] NULL,
	[RSVPCode] [nvarchar](50) NULL,
	[IconFile] [nvarchar](100) NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
	[Status] [int] NOT NULL,
	[SecurityMode] [int] NOT NULL,
	[IsSystemRole] [bit] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}Roles] PRIMARY KEY CLUSTERED 
(
	[RoleID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_{objectQualifier}RoleName] UNIQUE NONCLUSTERED 
(
	[PortalID] ASC,
	[RoleName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Permission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Permission](
	[PermissionID] [int] IDENTITY(1,1) NOT NULL,
	[PermissionCode] [varchar](50) NOT NULL,
	[ModuleDefID] [int] NOT NULL,
	[PermissionKey] [varchar](50) NOT NULL,
	[PermissionName] [varchar](50) NOT NULL,
	[ViewOrder] [int] NOT NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}Permission] PRIMARY KEY CLUSTERED 
(
	[PermissionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_{objectQualifier}Permission] UNIQUE NONCLUSTERED 
(
	[PermissionCode] ASC,
	[ModuleDefID] ASC,
	[PermissionKey] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View {databaseOwner}[{objectQualifier}vw_PortalPermissions]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_PortalPermissions]
AS
SELECT  PP.PortalPermissionID,
        PP.PortalId,
        P.PermissionID,
        PP.RoleID,
        R.RoleName,
        PP.AllowAccess,
        PP.UserID,
        U.Username,
        U.DisplayName,
        P.PermissionCode,
        P.ModuleDefID,
        P.PermissionKey,
        P.PermissionName,
        PP.CreatedByUserID,
        PP.CreatedOnDate,
        PP.LastModifiedByUserID,
        PP.LastModifiedOnDate
FROM        {databaseOwner}[{objectQualifier}PortalPermission] AS PP
 INNER JOIN {databaseOwner}[{objectQualifier}Permission]       AS P  ON PP.PermissionID = P.PermissionID
 LEFT  JOIN {databaseOwner}[{objectQualifier}Roles]            AS R  ON PP.RoleID       = R.RoleID
 LEFT  JOIN {databaseOwner}[{objectQualifier}Users]            AS U  ON PP.UserID       = U.UserID
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Tabs]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Tabs](
	[TabID] [int] IDENTITY(0,1) NOT NULL,
	[TabOrder] [int] NOT NULL,
	[PortalID] [int] NULL,
	[TabName] [nvarchar](200) NOT NULL,
	[IsVisible] [bit] NOT NULL,
	[ParentId] [int] NULL,
	[IconFile] [nvarchar](255) NULL,
	[DisableLink] [bit] NOT NULL,
	[Title] [nvarchar](200) NULL,
	[Description] [nvarchar](500) NULL,
	[KeyWords] [nvarchar](500) NULL,
	[IsDeleted] [bit] NOT NULL,
	[Url] [nvarchar](255) NULL,
	[SkinSrc] [nvarchar](200) NULL,
	[ContainerSrc] [nvarchar](200) NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[RefreshInterval] [int] NULL,
	[PageHeadText] [nvarchar](max) NULL,
	[IsSecure] [bit] NOT NULL,
	[PermanentRedirect] [bit] NOT NULL,
	[SiteMapPriority] [float] NOT NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
	[IconFileLarge] [nvarchar](255) NULL,
	[CultureCode] [nvarchar](10) NULL,
	[ContentItemID] [int] NULL,
	[UniqueId] [uniqueidentifier] NOT NULL,
	[VersionGuid] [uniqueidentifier] NOT NULL,
	[DefaultLanguageGuid] [uniqueidentifier] NULL,
	[LocalizedVersionGuid] [uniqueidentifier] NOT NULL,
	[Level] [int] NOT NULL,
	[TabPath] [nvarchar](255) NOT NULL,
	[HasBeenPublished] [bit] NOT NULL,
	[IsSystem] [bit] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}Tabs] PRIMARY KEY CLUSTERED 
(
	[TabID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_{objectQualifier}Tabs_UniqueId] UNIQUE NONCLUSTERED 
(
	[UniqueId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}ContentWorkflows]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}ContentWorkflows](
	[WorkflowID] [int] IDENTITY(1,1) NOT NULL,
	[PortalID] [int] NULL,
	[WorkflowName] [nvarchar](40) NOT NULL,
	[Description] [nvarchar](256) NULL,
	[IsDeleted] [bit] NOT NULL,
	[StartAfterCreating] [bit] NOT NULL,
	[StartAfterEditing] [bit] NOT NULL,
	[DispositionEnabled] [bit] NOT NULL,
	[IsSystem] [bit] NOT NULL,
	[WorkflowKey] [nvarchar](40) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}ContentWorkflows] PRIMARY KEY CLUSTERED 
(
	[WorkflowID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_{objectQualifier}ContentWorkflows] UNIQUE NONCLUSTERED 
(
	[PortalID] ASC,
	[WorkflowName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}ContentItems_MetaData]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}ContentItems_MetaData](
	[ContentItemMetaDataID] [int] IDENTITY(1,1) NOT NULL,
	[ContentItemID] [int] NOT NULL,
	[MetaDataID] [int] NOT NULL,
	[MetaDataValue] [nvarchar](max) NULL,
 CONSTRAINT [PK_{objectQualifier}Content_MetaData] PRIMARY KEY CLUSTERED 
(
	[ContentItemMetaDataID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}PortalSettings]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}PortalSettings](
	[PortalSettingID] [int] IDENTITY(1,1) NOT NULL,
	[PortalID] [int] NOT NULL,
	[SettingName] [nvarchar](50) NOT NULL,
	[SettingValue] [nvarchar](max) NOT NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
	[CultureCode] [nvarchar](10) NULL,
	[IsSecure] [bit] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}PortalSettings] PRIMARY KEY NONCLUSTERED 
(
	[PortalSettingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Folders]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Folders](
	[FolderID] [int] IDENTITY(1,1) NOT NULL,
	[PortalID] [int] NULL,
	[FolderPath] [nvarchar](300) NOT NULL,
	[StorageLocation] [int] NOT NULL,
	[IsProtected] [bit] NOT NULL,
	[IsCached] [bit] NOT NULL,
	[LastUpdated] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
	[UniqueId] [uniqueidentifier] NOT NULL,
	[VersionGuid] [uniqueidentifier] NOT NULL,
	[FolderMappingID] [int] NOT NULL,
	[ParentID] [int] NULL,
	[IsVersioned] [bit] NOT NULL,
	[WorkflowID] [int] NULL,
	[MappedPath] [nvarchar](300) NULL,
 CONSTRAINT [PK_{objectQualifier}Folders] PRIMARY KEY CLUSTERED 
(
	[FolderID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_{objectQualifier}FolderPath] UNIQUE NONCLUSTERED 
(
	[PortalID] ASC,
	[FolderPath] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_{objectQualifier}Folders_UniqueId] UNIQUE NONCLUSTERED 
(
	[UniqueId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}ContentTypes]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}ContentTypes](
	[ContentTypeID] [int] IDENTITY(1,1) NOT NULL,
	[ContentType] [nvarchar](100) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}ContentTypes] PRIMARY KEY CLUSTERED 
(
	[ContentTypeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}ContentItems]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}ContentItems](
	[ContentItemID] [int] IDENTITY(1,1) NOT NULL,
	[Content] [nvarchar](max) NULL,
	[ContentTypeID] [int] NOT NULL,
	[TabID] [int] NOT NULL,
	[ModuleID] [int] NOT NULL,
	[ContentKey] [nvarchar](250) NULL,
	[Indexed] [bit] NOT NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
	[StateID] [int] NULL,
 CONSTRAINT [PK_{objectQualifier}ContentItems] PRIMARY KEY CLUSTERED 
(
	[ContentItemID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}MetaData]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}MetaData](
	[MetaDataID] [int] IDENTITY(1,1) NOT NULL,
	[MetaDataName] [nvarchar](100) NOT NULL,
	[MetaDataDescription] [nvarchar](2500) NULL,
 CONSTRAINT [PK_{objectQualifier}MetaData] PRIMARY KEY CLUSTERED 
(
	[MetaDataID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}ContentWorkflowStates]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}ContentWorkflowStates](
	[StateID] [int] IDENTITY(1,1) NOT NULL,
	[WorkflowID] [int] NOT NULL,
	[StateName] [nvarchar](40) NOT NULL,
	[Order] [int] NOT NULL,
	[IsActive] [bit] NOT NULL,
	[SendEmail] [bit] NOT NULL,
	[SendMessage] [bit] NOT NULL,
	[IsDisposalState] [bit] NOT NULL,
	[OnCompleteMessageSubject] [nvarchar](256) NOT NULL,
	[OnCompleteMessageBody] [nvarchar](1024) NOT NULL,
	[OnDiscardMessageSubject] [nvarchar](256) NOT NULL,
	[OnDiscardMessageBody] [nvarchar](1024) NOT NULL,
	[IsSystem] [bit] NOT NULL,
	[SendNotification] [bit] NOT NULL,
	[SendNotificationToAdministrators] [bit] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}ContentWorkflowStates] PRIMARY KEY CLUSTERED 
(
	[StateID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_{objectQualifier}ContentWorkflowStates] UNIQUE NONCLUSTERED 
(
	[WorkflowID] ASC,
	[StateName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View {databaseOwner}[{objectQualifier}vw_ContentWorkflowUsage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}[{objectQualifier}vw_ContentWorkflowUsage]
AS
    SELECT COALESCE(cm.MetaDataValue, ci.Content) as 'ContentName', ct.ContentType, ws.WorkflowID 
	FROM {databaseOwner}[{objectQualifier}ContentItems] ci
		INNER JOIN {databaseOwner}[{objectQualifier}ContentTypes] ct
			ON ci.ContentTypeID = ct.ContentTypeID
		INNER JOIN {databaseOwner}[{objectQualifier}ContentWorkflowStates] ws 
			ON ci.StateID = ws.StateID
		LEFT JOIN {databaseOwner}[{objectQualifier}ContentItems_MetaData] cm
			ON ci.ContentItemID = cm.ContentItemID 
				AND cm.MetaDataID = (SELECT MetaDataID FROM {databaseOwner}[{objectQualifier}MetaData] WHERE MetaDataName = 'Title')
	WHERE ct.ContentType != 'Tab' -- Tabs will be managed specifically
		AND ct.ContentType != 'File' -- Exclude Files
	UNION ALL
	SELECT t.TabPath, ct.ContentType, ws.WorkflowID 
	FROM {databaseOwner}[{objectQualifier}ContentItems] ci
		INNER JOIN {databaseOwner}[{objectQualifier}ContentTypes] ct
			ON ci.ContentTypeID = ct.ContentTypeID
		INNER JOIN {databaseOwner}[{objectQualifier}Tabs] t
			ON ci.TabID = t.TabID
		INNER JOIN {databaseOwner}[{objectQualifier}ContentWorkflowStates] ws 
			ON ci.StateID = ws.StateID
	WHERE ct.ContentType = 'Tab'
		AND LOWER(t.TabPath) not like '//admin/%'
		AND LOWER(t.TabPath) != '//admin'
		AND t.IsSystem = 0
		AND LOWER(t.TabPath) not like '//host/%'
		AND LOWER(t.TabPath) != '//host'
		AND ci.StateID IS NOT NULL
	UNION ALL
	SELECT t.TabPath, ct.ContentType, 
		(SELECT CAST(ps.SettingValue AS INT) value 
			FROM {databaseOwner}[{objectQualifier}PortalSettings] ps
			WHERE ps.SettingName = 'DefaultTabWorkflowKey' 
			AND ps.PortalID = t.PortalID) as WorkflowID 
	FROM {databaseOwner}[{objectQualifier}ContentItems] ci
		INNER JOIN {databaseOwner}[{objectQualifier}ContentTypes] ct
			ON ci.ContentTypeID = ct.ContentTypeID
		INNER JOIN {databaseOwner}[{objectQualifier}Tabs] t
			ON ci.TabID = t.TabID
	WHERE ct.ContentType = 'Tab'
		AND LOWER(t.TabPath) NOT LIKE '//admin/%'
		AND LOWER(t.TabPath) != '//admin'
		AND t.IsSystem = 0
		AND LOWER(t.TabPath) NOT LIKE '//host/%'
		AND LOWER(t.TabPath) != '//host'
		AND ci.StateID IS NULL
	UNION ALL
	SELECT '/' + f.FolderPath, 'Folder', f.WorkflowID 
	FROM {databaseOwner}[{objectQualifier}Folders] f
	WHERE f.WorkflowID IS NOT NULL
	UNION ALL
	SELECT '/' + f.FolderPath, 'Folder', 
		(SELECT wf.WorkflowID 
			FROM {databaseOwner}[{objectQualifier}ContentWorkflows] wf
			WHERE wf.WorkflowKey = 'DirectPublish' 
			AND wf.PortalID = f.PortalID) AS WorkflowID 
	FROM {databaseOwner}[{objectQualifier}Folders] f
	WHERE f.WorkflowID IS NULL
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Files]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Files](
	[FileId] [int] IDENTITY(1,1) NOT NULL,
	[PortalId] [int] NULL,
	[FileName] [nvarchar](246) NOT NULL,
	[Extension] [nvarchar](100) NOT NULL,
	[Size] [int] NOT NULL,
	[Width] [int] NULL,
	[Height] [int] NULL,
	[ContentType] [nvarchar](200) NOT NULL,
	[FolderID] [int] NOT NULL,
	[Content] [image] NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
	[UniqueId] [uniqueidentifier] NOT NULL,
	[VersionGuid] [uniqueidentifier] NOT NULL,
	[SHA1Hash] [varchar](40) NULL,
	[LastModificationTime] [datetime] NOT NULL,
	[Folder]  AS ({databaseOwner}[{objectQualifier}GetFileFolderFunc]([FolderID])),
	[Title] [nvarchar](256) NULL,
	[StartDate] [date] NOT NULL,
	[EnablePublishPeriod] [bit] NOT NULL,
	[EndDate] [date] NULL,
	[PublishedVersion] [int] NOT NULL,
	[ContentItemID] [int] NULL,
	[HasBeenPublished] [bit] NOT NULL,
	[Description] [nvarchar](500) NULL,
 CONSTRAINT [PK_{objectQualifier}File] PRIMARY KEY CLUSTERED 
(
	[FileId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_{objectQualifier}Files_UniqueId] UNIQUE NONCLUSTERED 
(
	[UniqueId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View {databaseOwner}[{objectQualifier}vw_Files]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}[{objectQualifier}vw_Files]
AS
    SELECT    fi.FileId, 
            fi.PortalId, 
            fi.FileName, 
            fi.Extension, 
            fi.Size, 
            fi.Width, 
            fi.Height, 
            fi.ContentType, 
            fi.FolderID, 
            fi.[Content], 
            fi.CreatedByUserID, 
            fi.CreatedOnDate, 
            fi.LastModifiedByUserID, 
            fi.LastModifiedOnDate, 
            fi.UniqueId, 
            fi.VersionGuid, 
            fi.SHA1Hash, 
            fi.LastModificationTime, 
            fi.Title, 
            fi.Description,
            fi.StartDate, 
            fi.EnablePublishPeriod, 
            fi.EndDate, 
            fi.ContentItemID, 
            fi.PublishedVersion, 
            fo.FolderPath AS Folder,
            fo.IsCached,
            fo.FolderMappingID,
            fo.StorageLocation,
            fi.HasBeenPublished
    FROM         {databaseOwner}[{objectQualifier}Files] AS fi 
    INNER JOIN {databaseOwner}[{objectQualifier}Folders] AS fo 
        ON fi.FolderID = fo.FolderID
GO
/****** Object:  View {databaseOwner}[{objectQualifier}vw_Tabs]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}[{objectQualifier}vw_Tabs]
AS
    SELECT
        T.TabID,
        T.TabOrder,
        T.PortalID,
        T.TabName,
        T.ParentId,
        T.[Level],
        T.TabPath,
        T.UniqueId,
        T.VersionGuid,
        T.DefaultLanguageGuid,
        T.LocalizedVersionGuid,
        T.IsVisible,
		T.HasBeenPublished,
		 Case when t.IconFile LIKE 'fileid=%' 
			then (SELECT IsNull(Folder, '') + [FileName] FROM {databaseOwner}[{objectQualifier}vw_Files]
			 WHERE fileid = CAST(SUBSTRING(t.IconFile, 8, 10) AS Int))
			 else Coalesce(t.IconFile,'')
			 end as IconFile
		,
         Case when t.IconFileLarge LIKE 'fileid=%' 
			then (SELECT IsNull(Folder, '') + [FileName] FROM {databaseOwner}[{objectQualifier}vw_Files]
			 WHERE fileid = CAST(SUBSTRING(t.IconFileLarge, 8, 10) AS Int))
			 else Coalesce(t.IconFileLarge,'')
			 end as IconFileLarge
		,T.DisableLink,
        T.Title,
        T.Description,
        T.KeyWords,
        T.IsDeleted,
        T.SkinSrc,
        T.ContainerSrc,
        T.StartDate,
        T.EndDate,
        T.Url,
        CASE WHEN {databaseOwner}{objectQualifier}HasChildTab(T.TabID) = 1 THEN 'true' ELSE 'false' END AS HasChildren,
        T.RefreshInterval,
        T.PageHeadText,
        T.IsSecure,
        T.PermanentRedirect,
        T.SiteMapPriority,
        CI.ContentItemID,
        CI.[Content],
        CI.ContentTypeID,
        CI.ModuleID,
        CI.ContentKey,
        CI.Indexed,
        CI.StateID,
        T.CultureCode,
        T.CreatedByUserID,
        T.CreatedOnDate,
        T.LastModifiedByUserID,
        T.LastModifiedOnDate,
		T.IsSystem
    FROM       {databaseOwner}[{objectQualifier}Tabs]         AS T
    LEFT  JOIN {databaseOwner}[{objectQualifier}ContentItems] AS CI ON T.ContentItemID = CI.ContentItemID
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}ExceptionEvents]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}ExceptionEvents](
	[LogEventID] [bigint] NOT NULL,
	[AssemblyVersion] [varchar](20) NOT NULL,
	[PortalId] [int] NULL,
	[UserId] [int] NULL,
	[TabId] [int] NULL,
	[RawUrl] [nvarchar](260) NULL,
	[Referrer] [nvarchar](260) NULL,
	[UserAgent] [nvarchar](260) NULL,
 CONSTRAINT [PK_{objectQualifier}ExceptionEvents] PRIMARY KEY CLUSTERED 
(
	[LogEventID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Exceptions]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Exceptions](
	[ExceptionHash] [varchar](100) NOT NULL,
	[Message] [nvarchar](500) NOT NULL,
	[StackTrace] [nvarchar](max) NULL,
	[InnerMessage] [nvarchar](500) NULL,
	[InnerStackTrace] [nvarchar](max) NULL,
	[Source] [nvarchar](500) NULL,
 CONSTRAINT [PK_{objectQualifier}Exceptions] PRIMARY KEY CLUSTERED 
(
	[ExceptionHash] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}EventLog]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}EventLog](
	[LogGUID] [varchar](36) NOT NULL,
	[LogTypeKey] [nvarchar](35) NOT NULL,
	[LogConfigID] [int] NULL,
	[LogUserID] [int] NULL,
	[LogUserName] [nvarchar](50) NULL,
	[LogPortalID] [int] NULL,
	[LogPortalName] [nvarchar](100) NULL,
	[LogCreateDate] [datetime] NOT NULL,
	[LogServerName] [nvarchar](50) NOT NULL,
	[LogProperties] [xml] NULL,
	[LogNotificationPending] [bit] NULL,
	[LogEventID] [bigint] IDENTITY(1,1) NOT NULL,
	[ExceptionHash] [varchar](100) NULL,
 CONSTRAINT [PK_{objectQualifier}EventLogMaster] PRIMARY KEY CLUSTERED 
(
	[LogEventID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View {databaseOwner}[{objectQualifier}vw_EventLog]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}[{objectQualifier}vw_EventLog]
AS
SELECT
 el.*,
 ee.AssemblyVersion,
 ee.PortalId,
 ee.UserId,
 ee.TabId,
 ee.RawUrl,
 ee.Referrer,
 ee.UserAgent,
 e.Message,
 e.StackTrace,
 e.InnerMessage,
 e.InnerStackTrace,
 e.Source
FROM {databaseOwner}{objectQualifier}EventLog el
 LEFT JOIN {databaseOwner}{objectQualifier}ExceptionEvents ee ON el.LogEventID = ee.LogEventID
 LEFT JOIN {databaseOwner}{objectQualifier}Exceptions e ON el.ExceptionHash = e.ExceptionHash
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Modules]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Modules](
	[ModuleID] [int] IDENTITY(0,1) NOT NULL,
	[ModuleDefID] [int] NOT NULL,
	[AllTabs] [bit] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[InheritViewPermissions] [bit] NULL,
	[StartDate] [datetime] NULL,
	[EndDate] [datetime] NULL,
	[PortalID] [int] NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
	[LastContentModifiedOnDate] [datetime] NULL,
	[ContentItemID] [int] NULL,
	[IsShareable] [bit] NOT NULL,
	[IsShareableViewOnly] [bit] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}Modules] PRIMARY KEY CLUSTERED 
(
	[ModuleID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}ModuleDefinitions]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}ModuleDefinitions](
	[ModuleDefID] [int] IDENTITY(1,1) NOT NULL,
	[FriendlyName] [nvarchar](128) NOT NULL,
	[DesktopModuleID] [int] NOT NULL,
	[DefaultCacheTime] [int] NOT NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
	[DefinitionName] [nvarchar](128) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}ModuleDefinitions] PRIMARY KEY CLUSTERED 
(
	[ModuleDefID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}ModuleControls]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}ModuleControls](
	[ModuleControlID] [int] IDENTITY(1,1) NOT NULL,
	[ModuleDefID] [int] NULL,
	[ControlKey] [nvarchar](50) NULL,
	[ControlTitle] [nvarchar](50) NULL,
	[ControlSrc] [nvarchar](256) NULL,
	[IconFile] [nvarchar](100) NULL,
	[ControlType] [int] NOT NULL,
	[ViewOrder] [int] NULL,
	[HelpUrl] [nvarchar](200) NULL,
	[SupportsPartialRendering] [bit] NOT NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
	[SupportsPopUps] [bit] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}ModuleControls] PRIMARY KEY CLUSTERED 
(
	[ModuleControlID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_{objectQualifier}ModuleControls] UNIQUE NONCLUSTERED 
(
	[ModuleDefID] ASC,
	[ControlKey] ASC,
	[ControlSrc] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}TabModules]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}TabModules](
	[TabModuleID] [int] IDENTITY(1,1) NOT NULL,
	[TabID] [int] NOT NULL,
	[ModuleID] [int] NOT NULL,
	[PaneName] [nvarchar](50) NOT NULL,
	[ModuleOrder] [int] NOT NULL,
	[CacheTime] [int] NOT NULL,
	[Alignment] [nvarchar](10) NULL,
	[Color] [nvarchar](20) NULL,
	[Border] [nvarchar](1) NULL,
	[IconFile] [nvarchar](100) NULL,
	[Visibility] [int] NOT NULL,
	[ContainerSrc] [nvarchar](200) NULL,
	[DisplayTitle] [bit] NOT NULL,
	[DisplayPrint] [bit] NOT NULL,
	[DisplaySyndicate] [bit] NOT NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
	[IsDeleted] [bit] NOT NULL,
	[CacheMethod] [varchar](50) NULL,
	[ModuleTitle] [nvarchar](256) NULL,
	[Header] [nvarchar](max) NULL,
	[Footer] [nvarchar](max) NULL,
	[CultureCode] [nvarchar](10) NULL,
	[UniqueId] [uniqueidentifier] NOT NULL,
	[VersionGuid] [uniqueidentifier] NOT NULL,
	[DefaultLanguageGuid] [uniqueidentifier] NULL,
	[LocalizedVersionGuid] [uniqueidentifier] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}TabModules] PRIMARY KEY CLUSTERED 
(
	[TabModuleID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_{objectQualifier}TabModules_UniqueId] UNIQUE NONCLUSTERED 
(
	[UniqueId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}DesktopModules]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}DesktopModules](
	[DesktopModuleID] [int] IDENTITY(1,1) NOT NULL,
	[FriendlyName] [nvarchar](128) NOT NULL,
	[Description] [nvarchar](2000) NULL,
	[Version] [nvarchar](50) NOT NULL,
	[IsPremium] [bit] NOT NULL,
	[IsAdmin] [bit] NOT NULL,
	[BusinessControllerClass] [nvarchar](200) NULL,
	[FolderName] [nvarchar](128) NOT NULL,
	[ModuleName] [nvarchar](128) NOT NULL,
	[SupportedFeatures] [int] NOT NULL,
	[CompatibleVersions] [nvarchar](500) NULL,
	[Dependencies] [nvarchar](400) NULL,
	[Permissions] [nvarchar](400) NULL,
	[PackageID] [int] NOT NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
	[ContentItemId] [int] NOT NULL,
	[Shareable] [int] NOT NULL,
	[AdminPage] [nvarchar](128) NULL,
	[HostPage] [nvarchar](128) NULL,
 CONSTRAINT [PK_{objectQualifier}DesktopModules] PRIMARY KEY CLUSTERED 
(
	[DesktopModuleID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_{objectQualifier}DesktopModules_ModuleName] UNIQUE NONCLUSTERED 
(
	[ModuleName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View {databaseOwner}[{objectQualifier}vw_Modules]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_Modules]
AS
    SELECT
        M.PortalID AS [OwnerPortalID],
        DM.PackageID,
        T.PortalID,
        TM.TabID,
        TM.TabModuleID,
        M.ModuleID,
        M.ModuleDefID,
        TM.ModuleOrder,
        TM.PaneName,
        TM.ModuleTitle,
        TM.CacheTime,
        TM.CacheMethod,
        TM.Alignment,
        TM.Color,
        TM.Border,
        CASE WHEN TM.IconFile LIKE 'fileid=%' 
			THEN (SELECT IsNull(Folder, '') + [FileName] FROM {databaseOwner}[{objectQualifier}vw_Files]
				  WHERE FileId = CAST(SUBSTRING(TM.IconFile, 8, 10) AS Int))
			ELSE Coalesce(TM.IconFile,'')
		END AS IconFile,
        TM.Visibility,
        TM.Header,
        TM.Footer,
        TM.ContainerSrc,
        TM.DisplayTitle,
        TM.DisplayPrint,
        TM.DisplaySyndicate,
        TM.UniqueId,
        TM.VersionGuid,
        TM.DefaultLanguageGuid,
        TM.LocalizedVersionGuid,
        TM.CultureCode,
        M.AllTabs,
        M.StartDate,
        M.EndDate,
        T.StartDate AS TabStartDate,
        T.EndDate AS TabEndDate,
        M.InheritViewPermissions,
        M.IsShareable,
        M.IsShareableViewOnly,
        M.CreatedByUserID,
        M.CreatedOnDate,
        M.LastModifiedByUserID,
        M.LastModifiedOnDate,
        M.LastContentModifiedOnDate,
        MD.DesktopModuleID,
        MD.DefaultCacheTime,
        MD.DefinitionName,
        MC.ModuleControlID,
        DM.BusinessControllerClass,
        DM.IsAdmin,
        DM.SupportedFeatures,
        CI.ContentItemID,
        CI.Content,
        CI.ContentTypeID,
        CI.ContentKey,
        CI.Indexed,
        CI.StateID,
        TM.IsDeleted AS IsDeleted,
        M.IsDeleted  AS IsModuleDeleted,
		T.IsDeleted  AS IsTabDeleted
    FROM        {databaseOwner}[{objectQualifier}ModuleDefinitions] AS MD
     INNER JOIN {databaseOwner}[{objectQualifier}Modules]           AS M  ON M.ModuleDefID = MD.ModuleDefID
     INNER JOIN {databaseOwner}[{objectQualifier}ModuleControls]    AS MC ON MD.ModuleDefID = MC.ModuleDefID
     INNER JOIN {databaseOwner}[{objectQualifier}DesktopModules]    AS DM ON MD.DesktopModuleID = DM.DesktopModuleID
     LEFT  JOIN {databaseOwner}[{objectQualifier}ContentItems]      AS CI ON M.ContentItemID = CI.ContentItemID
     LEFT  JOIN {databaseOwner}[{objectQualifier}TabModules]        AS TM ON M.ModuleID = TM.ModuleID
     LEFT  JOIN {databaseOwner}[{objectQualifier}Tabs]              AS T  ON TM.TabID = T.TabID
    WHERE (MC.ControlKey IS NULL)

GO
/****** Object:  View {databaseOwner}[{objectQualifier}vw_TabModules]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_TabModules]
AS
    SELECT
        M.PortalID AS [OwnerPortalID],
        T.PortalID,
        TM.TabID,
        TM.TabModuleID,
        M.ModuleID,
        M.ModuleDefID,
        TM.ModuleOrder,
        TM.PaneName,
        TM.ModuleTitle,
        TM.CacheTime,
        TM.CacheMethod,
        TM.Alignment,
        TM.Color,
        TM.Border,
         Case when tm.IconFile LIKE 'fileid=%' 
			then (SELECT IsNull(Folder, '') + [FileName] FROM {databaseOwner}[{objectQualifier}vw_Files]
			 WHERE fileid = CAST(SUBSTRING(tm.IconFile, 8, 10) AS Int))
			 else Coalesce(tm.IconFile,'')
			 end as IconFile
		,M.AllTabs,
        TM.Visibility,
        TM.IsDeleted,
        TM.Header,
        TM.Footer,
        M.StartDate,
        M.EndDate,
        TM.ContainerSrc,
        TM.DisplayTitle,
        TM.DisplayPrint,
        TM.DisplaySyndicate,
        M.InheritViewPermissions,
        M.IsShareable,
        M.IsShareableViewOnly,
        MD.DesktopModuleID,
        MD.DefaultCacheTime,
        MC.ModuleControlID,
        DM.BusinessControllerClass,
        DM.IsAdmin,
        DM.SupportedFeatures,
        CI.ContentItemID,
        CI.Content,
        CI.ContentTypeID,
        CI.ContentKey,
        CI.Indexed,
        CI.StateID,
        TM.CreatedByUserID,
        TM.CreatedOnDate,
        TM.LastModifiedByUserID,
        TM.LastModifiedOnDate,
        M.LastContentModifiedOnDate,
        TM.UniqueId,
        TM.VersionGuid,
        TM.DefaultLanguageGuid,
        TM.LocalizedVersionGuid,
        TM.CultureCode
    FROM {databaseOwner}[{objectQualifier}ModuleDefinitions]     AS MD
     INNER JOIN {databaseOwner}[{objectQualifier}Modules]        AS M  ON MD.ModuleDefID = M.ModuleDefID
     INNER JOIN {databaseOwner}[{objectQualifier}ModuleControls] AS MC ON MD.ModuleDefID = MC.ModuleDefID
     INNER JOIN {databaseOwner}[{objectQualifier}DesktopModules] AS DM ON MD.DesktopModuleID = DM.DesktopModuleID
     LEFT  JOIN {databaseOwner}[{objectQualifier}ContentItems]   AS CI ON M.ContentItemID = CI.ContentItemID
     LEFT  JOIN {databaseOwner}[{objectQualifier}TabModules]     AS TM ON M.ModuleID = TM.ModuleID
     LEFT  JOIN {databaseOwner}[{objectQualifier}Tabs]           AS T  ON TM.TabID = T.TabID
    WHERE (MC.ControlKey IS NULL)

GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Portals]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Portals](
	[PortalID] [int] IDENTITY(0,1) NOT NULL,
	[ExpiryDate] [datetime] NULL,
	[UserRegistration] [int] NOT NULL,
	[BannerAdvertising] [int] NOT NULL,
	[AdministratorId] [int] NULL,
	[Currency] [char](3) NULL,
	[HostFee] [money] NOT NULL,
	[HostSpace] [int] NOT NULL,
	[AdministratorRoleId] [int] NULL,
	[RegisteredRoleId] [int] NULL,
	[GUID] [uniqueidentifier] NOT NULL,
	[PaymentProcessor] [nvarchar](50) NULL,
	[ProcessorUserId] [nvarchar](50) NULL,
	[ProcessorPassword] [nvarchar](100) NULL,
	[SiteLogHistory] [int] NULL,
	[DefaultLanguage] [nvarchar](10) NOT NULL,
	[TimezoneOffset] [int] NOT NULL,
	[HomeDirectory] [varchar](100) NOT NULL,
	[PageQuota] [int] NOT NULL,
	[UserQuota] [int] NOT NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
	[PortalGroupID] [int] NULL,
 CONSTRAINT [PK_{objectQualifier}Portals] PRIMARY KEY CLUSTERED 
(
	[PortalID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}ApiTokens]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}ApiTokens](
	[ApiTokenId] [int] IDENTITY(1,1) NOT NULL,
	[TokenName] [nvarchar](100) NULL,
	[TokenHash] [varchar](96) NOT NULL,
	[ExpiresOn] [datetime] NOT NULL,
	[Scope] [int] NOT NULL,
	[PortalId] [int] NOT NULL,
	[IsRevoked] [bit] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[RevokedByUserId] [int] NULL,
	[RevokedOnDate] [datetime] NULL,
	[CreatedByUserId] [int] NOT NULL,
	[CreatedOnDate] [datetime] NOT NULL,
	[LastUsedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}ApiTokens] PRIMARY KEY CLUSTERED 
(
	[ApiTokenId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}ApiTokenKeys]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}ApiTokenKeys](
	[ApiTokenId] [int] NOT NULL,
	[TokenKey] [nvarchar](200) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}ApiTokenKeys] PRIMARY KEY CLUSTERED 
(
	[ApiTokenId] ASC,
	[TokenKey] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}PortalLocalization]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}PortalLocalization](
	[PortalID] [int] NOT NULL,
	[CultureCode] [nvarchar](10) NOT NULL,
	[PortalName] [nvarchar](128) NOT NULL,
	[LogoFile] [nvarchar](50) NULL,
	[FooterText] [nvarchar](100) NULL,
	[Description] [nvarchar](500) NULL,
	[KeyWords] [nvarchar](500) NULL,
	[BackgroundFile] [nvarchar](50) NULL,
	[HomeTabId] [int] NULL,
	[LoginTabId] [int] NULL,
	[UserTabId] [int] NULL,
	[AdminTabId] [int] NULL,
	[SplashTabId] [int] NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
	[RegisterTabId] [int] NULL,
	[SearchTabId] [int] NULL,
	[Custom404TabId] [int] NULL,
	[Custom500TabId] [int] NULL,
	[TermsTabId] [int] NULL,
	[PrivacyTabId] [int] NULL,
 CONSTRAINT [PK_{objectQualifier}PortalLocalization] PRIMARY KEY CLUSTERED 
(
	[PortalID] ASC,
	[CultureCode] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View {databaseOwner}[{objectQualifier}vw_ApiTokens]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_ApiTokens]
AS
SELECT
 a.*,
 portals.PortalName,
 uc.DisplayName CreatedByUser,
 uc.Username CreatedByUsername,
 ur.DisplayName RevokedByUser,
 ur.Username RevokedByUsername,
 (SELECT STUFF((SELECT ',' + atk.TokenKey
   FROM {databaseOwner}[{objectQualifier}ApiTokenKeys] atk WHERE atk.ApiTokenId=a.ApiTokenId
   FOR XML PATH ('')), 1, 1, '')) Keys
FROM {databaseOwner}[{objectQualifier}ApiTokens] a
LEFT JOIN (
 SELECT pl.PortalID, pl.PortalName
 FROM {databaseOwner}[{objectQualifier}Portals] p
 INNER JOIN {databaseOwner}[{objectQualifier}PortalLocalization] pl ON p.PortalID=pl.PortalID AND pl.CultureCode=p.DefaultLanguage
) portals ON portals.PortalID=a.PortalId
LEFT JOIN {databaseOwner}[{objectQualifier}Users] uc ON uc.UserID=a.CreatedByUserId
LEFT JOIN {databaseOwner}[{objectQualifier}Users] ur ON ur.UserID=a.RevokedByUserId

GO
/****** Object:  Table {databaseOwner}[{objectQualifier}ProfilePropertyDefinition]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}ProfilePropertyDefinition](
	[PropertyDefinitionID] [int] IDENTITY(1,1) NOT NULL,
	[PortalID] [int] NULL,
	[ModuleDefID] [int] NULL,
	[Deleted] [bit] NOT NULL,
	[DataType] [int] NOT NULL,
	[DefaultValue] [ntext] NULL,
	[PropertyCategory] [nvarchar](50) NOT NULL,
	[PropertyName] [nvarchar](50) NOT NULL,
	[Length] [int] NOT NULL,
	[Required] [bit] NOT NULL,
	[ValidationExpression] [nvarchar](2000) NULL,
	[ViewOrder] [int] NOT NULL,
	[Visible] [bit] NOT NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
	[DefaultVisibility] [int] NULL,
	[ReadOnly] [bit] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}ProfilePropertyDefinition] PRIMARY KEY CLUSTERED 
(
	[PropertyDefinitionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}UserProfile]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}UserProfile](
	[ProfileID] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [int] NOT NULL,
	[PropertyDefinitionID] [int] NOT NULL,
	[PropertyValue] [nvarchar](3750) NULL,
	[PropertyText] [nvarchar](max) NULL,
	[Visibility] [int] NOT NULL,
	[LastUpdatedDate] [datetime] NOT NULL,
	[ExtendedVisibility] [varchar](400) NULL,
 CONSTRAINT [PK_{objectQualifier}UserProfile] PRIMARY KEY CLUSTERED 
(
	[ProfileID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View {databaseOwner}[{objectQualifier}vw_Profile]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}[{objectQualifier}vw_Profile]
AS
	SELECT     
		UP.UserID, 
		PD.PortalID, 
		PD.PropertyName, 
		CASE WHEN PropertyText IS NULL THEN PropertyValue ELSE PropertyText END AS PropertyValue, 
		UP.Visibility,
		UP.ExtendedVisibility,
		UP.LastUpdatedDate,
		PD.PropertyDefinitionID
	FROM {databaseOwner}[{objectQualifier}UserProfile] AS UP 
		INNER JOIN {databaseOwner}[{objectQualifier}ProfilePropertyDefinition] AS PD ON PD.PropertyDefinitionID = UP.PropertyDefinitionID
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}TabPermission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}TabPermission](
	[TabPermissionID] [int] IDENTITY(1,1) NOT NULL,
	[TabID] [int] NOT NULL,
	[PermissionID] [int] NOT NULL,
	[AllowAccess] [bit] NOT NULL,
	[RoleID] [int] NULL,
	[UserID] [int] NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}TabPermission] PRIMARY KEY CLUSTERED 
(
	[TabPermissionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View {databaseOwner}[{objectQualifier}vw_TabPermissions]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- use new FK
CREATE VIEW {databaseOwner}[{objectQualifier}vw_TabPermissions]
AS
SELECT  TP.TabPermissionID,
        T.TabID,
        T.PortalId,
        P.PermissionID,
        TP.RoleID,
        R.RoleName,
        TP.AllowAccess,
        TP.UserID,
        U.Username,
        U.DisplayName,
        P.PermissionCode,
        P.ModuleDefID,
        P.PermissionKey,
        P.PermissionName,
        TP.CreatedByUserID,
        TP.CreatedOnDate,
        TP.LastModifiedByUserID,
        TP.LastModifiedOnDate
FROM        {databaseOwner}[{objectQualifier}TabPermission]    AS TP
 INNER JOIN {databaseOwner}[{objectQualifier}Tabs]             AS T  ON TP.TabId        = T.TabId
 INNER JOIN {databaseOwner}[{objectQualifier}Permission]       AS P  ON TP.PermissionID = P.PermissionID
 LEFT  JOIN {databaseOwner}[{objectQualifier}Roles]            AS R  ON TP.RoleID       = R.RoleID
 LEFT  JOIN {databaseOwner}[{objectQualifier}Users]            AS U  ON TP.UserID       = U.UserID
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}PortalGroups]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}PortalGroups](
	[PortalGroupID] [int] IDENTITY(1,1) NOT NULL,
	[MasterPortalID] [int] NULL,
	[PortalGroupName] [nvarchar](100) NULL,
	[PortalGroupDescription] [nvarchar](2000) NULL,
	[AuthenticationDomain] [nvarchar](200) NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}PortalGroup] PRIMARY KEY CLUSTERED 
(
	[PortalGroupID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View {databaseOwner}[{objectQualifier}vw_MasterPortals]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}[{objectQualifier}vw_MasterPortals]
AS
	SELECT  P.PortalID,
			P.PortalGroupID,
			IsNull(G.MasterPortalID, P.PortalID) AS MasterPortalID
	FROM      {databaseOwner}[{objectQualifier}Portals] AS P
	LEFT JOIN {databaseOwner}[{objectQualifier}PortalGroups] AS G ON P.PortalGroupID = G.PortalGroupID
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}FolderPermission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}FolderPermission](
	[FolderPermissionID] [int] IDENTITY(1,1) NOT NULL,
	[FolderID] [int] NOT NULL,
	[PermissionID] [int] NOT NULL,
	[AllowAccess] [bit] NOT NULL,
	[RoleID] [int] NULL,
	[UserID] [int] NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}FolderPermission] PRIMARY KEY CLUSTERED 
(
	[FolderPermissionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View {databaseOwner}[{objectQualifier}vw_FolderPermissions]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- use new FK
CREATE VIEW {databaseOwner}[{objectQualifier}vw_FolderPermissions]
AS
SELECT  FP.FolderPermissionID,
        F.FolderID,
        F.FolderPath,
        F.PortalID,
        P.PermissionID,
        FP.RoleID,
        R.RoleName,
        FP.AllowAccess,
        FP.UserID,
        U.Username,
        U.DisplayName,
        P.PermissionCode,
        P.ModuleDefID,
        P.PermissionKey,
        P.PermissionName,
        FP.CreatedByUserID,
        FP.CreatedOnDate,
        FP.LastModifiedByUserID,
        FP.LastModifiedOnDate
FROM         {databaseOwner}[{objectQualifier}FolderPermission] AS FP
 INNER JOIN  {databaseOwner}[{objectQualifier}Folders]          AS F ON FP.FolderID     = F.FolderID
 INNER JOIN  {databaseOwner}[{objectQualifier}Permission]       AS P ON FP.PermissionID = P.PermissionID
 LEFT  JOIN  {databaseOwner}[{objectQualifier}Roles]            AS R ON FP.RoleID       = R.RoleID
 LEFT  JOIN  {databaseOwner}[{objectQualifier}Users]            AS U ON FP.UserID       = U.UserID
GO
/****** Object:  View {databaseOwner}[{objectQualifier}vw_PublishedFiles]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_PublishedFiles]
AS
    SELECT     
       fi.[FileId]
      ,fi.[PortalId]
      ,fi.[FileName]
      ,fi.[Extension]
      ,fi.[Size]
      ,fi.[Width]
      ,fi.[Height]
      ,fi.[ContentType]
      ,fi.[FolderID]
      ,fi.[Content]
      ,fi.[CreatedByUserID]
      ,fi.[CreatedOnDate]
      ,fi.[LastModifiedByUserID]
      ,fi.[LastModifiedOnDate]
      ,fi.[UniqueId]
      ,fi.[VersionGuid]
      ,fi.[SHA1Hash]
      ,fi.[LastModificationTime]
      ,fi.[Title]
      ,fi.[Description]
      ,fi.[StartDate]
      ,fi.[EnablePublishPeriod]
      ,fi.[EndDate]
      ,fi.[ContentItemID]
      ,fi.[PublishedVersion]
      ,fi.[Folder]
      ,fi.[IsCached]
      ,fi.[StorageLocation]
      ,fi.[FolderMappingID]
      ,fi.[HasBeenPublished]
    FROM       {databaseOwner}[{objectQualifier}vw_Files] fi
      WHERE ([EnablePublishPeriod] = 0 AND [HasBeenPublished] = 1)
         OR ([StartDate] <= GETDATE()
            AND ([EndDate] IS NULL OR GETDATE() <= [EndDate]) AND [HasBeenPublished] = 1)
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}UserRoles]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}UserRoles](
	[UserRoleID] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [int] NOT NULL,
	[RoleID] [int] NOT NULL,
	[ExpiryDate] [datetime] NULL,
	[IsTrialUsed] [bit] NULL,
	[EffectiveDate] [datetime] NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
	[Status] [int] NOT NULL,
	[IsOwner] [bit] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}UserRoles] PRIMARY KEY CLUSTERED 
(
	[UserRoleID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View {databaseOwner}[{objectQualifier}vw_UserRoles]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}[{objectQualifier}vw_UserRoles]
AS
	SELECT     
		UR.UserRoleID, 
		R.RoleID, 
		U.UserID, 
		R.PortalID, 
		R.RoleName, 
		U.Username, 
		R.Description, 
		U.DisplayName, 
		U.Email,
		UR.Status, 
		UR.IsOwner,
		R.SecurityMode,
		R.ServiceFee, 
		R.BillingFrequency, 
		R.TrialPeriod, 
        R.TrialFrequency, 
		R.BillingPeriod, 
		R.TrialFee, 
		R.IsPublic, 
		R.AutoAssignment, 
		R.RoleGroupID, 
		R.RSVPCode, 
		R.IconFile, 
		UR.EffectiveDate, 
		UR.ExpiryDate, 
        UR.IsTrialUsed, 
		UR.CreatedByUserID, 
		UR.CreatedOnDate, 
		UR.LastModifiedByUserID, 
		UR.LastModifiedOnDate,
		R.IsSystemRole 
	FROM {databaseOwner}{objectQualifier}UserRoles AS UR 
		INNER JOIN {databaseOwner}{objectQualifier}Users AS U ON UR.UserID = U.UserID 
		INNER JOIN {databaseOwner}{objectQualifier}Roles AS R ON UR.RoleID = R.RoleID
	WHERE R.Status = 1
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}DesktopModulePermission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}DesktopModulePermission](
	[DesktopModulePermissionID] [int] IDENTITY(1,1) NOT NULL,
	[PortalDesktopModuleID] [int] NOT NULL,
	[PermissionID] [int] NOT NULL,
	[AllowAccess] [bit] NOT NULL,
	[RoleID] [int] NULL,
	[UserID] [int] NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}DesktopModulePermission] PRIMARY KEY CLUSTERED 
(
	[DesktopModulePermissionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View {databaseOwner}[{objectQualifier}vw_DesktopModulePermissions]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- use new FK
CREATE VIEW {databaseOwner}[{objectQualifier}vw_DesktopModulePermissions]
AS
SELECT  PP.DesktopModulePermissionID,
        PP.PortalDesktopModuleID,
        P.PermissionID,
        PP.RoleID,
        R.RoleName,
        PP.AllowAccess,
        PP.UserID,
        U.Username,
        U.DisplayName,
        P.PermissionCode,
        P.ModuleDefID,
        P.PermissionKey,
        P.PermissionName,
        PP.CreatedByUserID,
        PP.CreatedOnDate,
        PP.LastModifiedByUserID,
        PP.LastModifiedOnDate
FROM        {databaseOwner}[{objectQualifier}DesktopModulePermission] AS PP
 INNER JOIN {databaseOwner}[{objectQualifier}Permission]              AS P  ON PP.PermissionID = P.PermissionID
 LEFT  JOIN {databaseOwner}[{objectQualifier}Roles]                   AS R  ON PP.RoleID = R.RoleID
 LEFT  JOIN {databaseOwner}[{objectQualifier}Users]                   AS U  ON PP.UserID = U.UserID
GO
/****** Object:  UserDefinedFunction {databaseOwner}[{objectQualifier}GetUsersByPropertyName]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION {databaseOwner}[{objectQualifier}GetUsersByPropertyName]
(
	@PropertyName nvarchar(100),
	@PropertyValue nvarchar(max),
	@PortalID int
)
RETURNS TABLE
AS
	RETURN
		SELECT *
			FROM {databaseOwner}[{objectQualifier}vw_Profile]
			WHERE PropertyName = @PropertyName 
				AND PropertyValue LIKE @PropertyValue
				AND PortalID = @PortalID
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}CoreMessaging_Messages]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}CoreMessaging_Messages](
	[MessageID] [int] IDENTITY(1,1) NOT NULL,
	[PortalID] [int] NULL,
	[NotificationTypeID] [int] NULL,
	[To] [nvarchar](2000) NULL,
	[From] [nvarchar](200) NULL,
	[Subject] [nvarchar](400) NULL,
	[Body] [nvarchar](max) NULL,
	[ConversationID] [int] NULL,
	[ReplyAllAllowed] [bit] NULL,
	[SenderUserID] [int] NULL,
	[ExpirationDate] [datetime] NULL,
	[Context] [nvarchar](200) NULL,
	[IncludeDismissAction] [bit] NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}CoreMessaging_Messages] PRIMARY KEY CLUSTERED 
(
	[MessageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients](
	[RecipientID] [int] IDENTITY(1,1) NOT NULL,
	[MessageID] [int] NOT NULL,
	[UserID] [int] NOT NULL,
	[Read] [bit] NOT NULL,
	[Archived] [bit] NOT NULL,
	[EmailSent] [bit] NOT NULL,
	[EmailSentDate] [datetime] NULL,
	[EmailSchedulerInstance] [uniqueidentifier] NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
	[SendToast] [bit] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}CoreMessaging_MessageRecipients] PRIMARY KEY CLUSTERED 
(
	[RecipientID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View {databaseOwner}[{objectQualifier}vw_CoreMessaging_Messages]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}[{objectQualifier}vw_CoreMessaging_Messages]
AS
	SELECT
		M.MessageID, 
		M.PortalID, 
		M.NotificationTypeID, 
		M.[To], 
		M.[From],
		M.Subject,
		M.Body,
		M.ConversationID, 
		M.ReplyAllAllowed, 
		M.SenderUserID,
		M.ExpirationDate, 
        M.Context, 
		M.IncludeDismissAction,
		M.CreatedByUserID, 
		M.CreatedOnDate, 
		M.LastModifiedByUserID, 
		M.LastModifiedOnDate, 
		MR.RecipientID,
		MR.UserID, 
        MR.[Read], 
		MR.Archived, 
		MR.EmailSent, 
		MR.EmailSentDate, 
		MR.EmailSchedulerInstance
	FROM       {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] MR
	INNER JOIN {databaseOwner}[{objectQualifier}CoreMessaging_Messages]          M ON mr.MessageID = m.MessageID
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}ModulePermission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}ModulePermission](
	[ModulePermissionID] [int] IDENTITY(1,1) NOT NULL,
	[ModuleID] [int] NOT NULL,
	[PermissionID] [int] NOT NULL,
	[AllowAccess] [bit] NOT NULL,
	[RoleID] [int] NULL,
	[UserID] [int] NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
	[PortalID] [int] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}ModulePermission] PRIMARY KEY CLUSTERED 
(
	[ModulePermissionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View {databaseOwner}[{objectQualifier}vw_ModulePermissions]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- use new FK
CREATE VIEW {databaseOwner}[{objectQualifier}vw_ModulePermissions]
AS
SELECT  MP.ModulePermissionID,
        MP.ModuleID,
        MP.PortalID,
        P.PermissionID,
        MP.RoleID,
        R.RoleName,
        MP.AllowAccess,
        MP.UserID,
        U.Username,
        U.DisplayName,
        P.PermissionCode,
        P.ModuleDefID,
        P.PermissionKey,
        P.PermissionName,
        MP.CreatedByUserID,
        MP.CreatedOnDate,
        MP.LastModifiedByUserID,
        MP.LastModifiedOnDate
FROM        {databaseOwner}[{objectQualifier}ModulePermission] AS MP
 INNER JOIN {databaseOwner}[{objectQualifier}Permission]       AS P  ON MP.PermissionID = P.PermissionID
 LEFT  JOIN {databaseOwner}[{objectQualifier}Roles]            AS R  ON MP.RoleID       = R.RoleID
 LEFT  JOIN {databaseOwner}[{objectQualifier}Users]            AS U  ON MP.UserID       = U.UserID
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}ExtensionUrlProviders]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}ExtensionUrlProviders](
	[ExtensionUrlProviderID] [int] IDENTITY(1,1) NOT NULL,
	[ProviderName] [nvarchar](150) NOT NULL,
	[ProviderType] [nvarchar](1000) NOT NULL,
	[SettingsControlSrc] [nvarchar](1000) NULL,
	[IsActive] [bit] NOT NULL,
	[RewriteAllUrls] [bit] NOT NULL,
	[RedirectAllUrls] [bit] NOT NULL,
	[ReplaceAllUrls] [bit] NOT NULL,
	[DesktopModuleId] [int] NULL,
 CONSTRAINT [PK_{objectQualifier}ExtensionUrlProviders] PRIMARY KEY CLUSTERED 
(
	[ExtensionUrlProviderID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}ExtensionUrlProviderConfiguration]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}ExtensionUrlProviderConfiguration](
	[ExtensionUrlProviderID] [int] NOT NULL,
	[PortalID] [int] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}ExtensionUrlProviderConfiguration] PRIMARY KEY CLUSTERED 
(
	[ExtensionUrlProviderID] ASC,
	[PortalID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View {databaseOwner}[{objectQualifier}vw_ExtensionUrlProviders]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}[{objectQualifier}vw_ExtensionUrlProviders]
AS
	SELECT     
		P.ExtensionUrlProviderID, 
		PC.PortalID, 
		P.ProviderName, 
		P.IsActive, 
		P.RewriteAllUrls, 
		P.RedirectAllUrls, 
		P.ReplaceAllUrls, 
		P.DesktopModuleId
	FROM    {databaseOwner}{objectQualifier}ExtensionUrlProviderConfiguration PC
		RIGHT OUTER JOIN {databaseOwner}{objectQualifier}ExtensionUrlProviders P ON PC.ExtensionUrlProviderID = P.ExtensionUrlProviderID
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}ContentWorkflowStatePermission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}ContentWorkflowStatePermission](
	[WorkflowStatePermissionID] [int] IDENTITY(1,1) NOT NULL,
	[StateID] [int] NOT NULL,
	[PermissionID] [int] NOT NULL,
	[AllowAccess] [bit] NOT NULL,
	[RoleID] [int] NULL,
	[UserID] [int] NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}ContentWorkflowStatePermission] PRIMARY KEY CLUSTERED 
(
	[WorkflowStatePermissionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_{objectQualifier}ContentWorkflowStatePermission] UNIQUE NONCLUSTERED 
(
	[StateID] ASC,
	[PermissionID] ASC,
	[RoleID] ASC,
	[UserID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View {databaseOwner}[{objectQualifier}vw_ContentWorkflowStatePermissions]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}[{objectQualifier}vw_ContentWorkflowStatePermissions]
AS
    SELECT     
	    WSP.WorkflowStatePermissionID, 
	    WSP.StateID, 
	    P.PermissionID, 
	    WSP.RoleID,
	    CASE WSP.RoleID
		    when -1 then 'All Users'
		    when -2 then 'Superuser'
		    when -3 then 'Unauthenticated Users'
		    else 	R.RoleName
	    END AS 'RoleName',
	    WSP.AllowAccess, 
	    WSP.UserID,
	    U.Username,
	    U.DisplayName, 
	    P.PermissionCode, 
	    P.ModuleDefID, 
	    P.PermissionKey, 
	    P.PermissionName, 
        WSP.CreatedByUserID, 
        WSP.CreatedOnDate, 
        WSP.LastModifiedByUserID, 
        WSP.LastModifiedOnDate    
    FROM {databaseOwner}{objectQualifier}ContentWorkflowStatePermission AS WSP 
	    LEFT OUTER JOIN {databaseOwner}{objectQualifier}Permission AS P ON WSP.PermissionID = P.PermissionID 
	    LEFT OUTER JOIN {databaseOwner}{objectQualifier}Roles AS R ON WSP.RoleID = R.RoleID
	    LEFT OUTER JOIN {databaseOwner}{objectQualifier}Users AS U ON WSP.UserID = U.UserID
GO
/****** Object:  View {databaseOwner}[{objectQualifier}vw_DesktopModules]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}[{objectQualifier}vw_DesktopModules]
AS
	SELECT
		DM.DesktopModuleID,
		DM.FriendlyName,
		DM.Description,
		DM.Version,
		DM.IsPremium,
		DM.IsAdmin,
		DM.BusinessControllerClass,
		DM.FolderName,
		DM.ModuleName,
		DM.SupportedFeatures,
		DM.CompatibleVersions,
		DM.Dependencies,
		DM.Permissions,
		DM.PackageID,
		DM.CreatedByUserID,
		DM.CreatedOnDate,
		DM.LastModifiedByUserID,
		DM.LastModifiedOnDate,
		CI.ContentItemID,
		CI.[Content],
		CI.ContentTypeID,
		CI.TabID,
		CI.ModuleID,
		CI.ContentKey,
		CI.Indexed,
		DM.Shareable,
		DM.AdminPage,
		DM.HostPage
	FROM {databaseOwner}[{objectQualifier}DesktopModules] AS DM
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}ContentItems] AS CI ON DM.ContentItemId = CI.ContentItemID
GO
/****** Object:  View {databaseOwner}[{objectQualifier}vw_Portals]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_Portals]
AS
    SELECT
        P.PortalID,
        P.PortalGroupID,
        PL.PortalName,
		 Case when PL.LogoFile LIKE 'fileid=%' 
			then (SELECT IsNull(Folder, '') + [FileName] FROM {databaseOwner}[{objectQualifier}vw_Files]
			 WHERE fileid = CAST(SUBSTRING(PL.LogoFile, 8, 10) AS Int))
			 else Coalesce(PL.LogoFile,'')
			 end as LogoFile,
        PL.FooterText,
        P.ExpiryDate,
        P.UserRegistration,
        P.BannerAdvertising,
        P.AdministratorId,
        P.Currency,
        P.HostFee,
        P.HostSpace,
        P.PageQuota,
        P.UserQuota,
        P.AdministratorRoleId,
        P.RegisteredRoleId,
        PL.Description,
        PL.KeyWords,
         Case when PL.BackgroundFile LIKE 'fileid=%' 
			then (SELECT IsNull(Folder, '') + [FileName] FROM {databaseOwner}[{objectQualifier}vw_Files]
			 WHERE fileid = CAST(SUBSTRING(PL.BackgroundFile, 8, 10) AS Int))
			 else Coalesce(PL.BackgroundFile,'')
			 end as BackgroundFile
		,
        P.GUID,
        P.PaymentProcessor,
        P.ProcessorUserId,
        P.ProcessorPassword,
        P.SiteLogHistory,
        U.Email,
        P.DefaultLanguage,
        P.TimezoneOffset,
        PL.AdminTabId,
        P.HomeDirectory,
        PL.SplashTabId,
       PL.HomeTabId,
        PL.LoginTabId,
        PL.RegisterTabId,
        PL.UserTabId,
        PL.SearchTabId,
        PL.Custom404TabId,
        PL.Custom500TabId,
        PL.TermsTabId,
        PL.PrivacyTabId,
        {databaseOwner}{objectQualifier}SuperUserTabID() AS SuperTabId,
        P.CreatedByUserID,
        P.CreatedOnDate,
        P.LastModifiedByUserID,
        P.LastModifiedOnDate,
        PL.CultureCode
    FROM       {databaseOwner}[{objectQualifier}Portals]            AS P
    INNER JOIN {databaseOwner}[{objectQualifier}PortalLocalization] AS PL ON P.PortalID = PL.PortalID
    LEFT  JOIN {databaseOwner}[{objectQualifier}Users]              AS U  ON P.AdministratorId = U.UserID
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Lists]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Lists](
	[EntryID] [int] IDENTITY(1,1) NOT NULL,
	[ListName] [nvarchar](50) NOT NULL,
	[Value] [nvarchar](100) NOT NULL,
	[Text] [nvarchar](150) NOT NULL,
	[ParentID] [int] NOT NULL,
	[Level] [int] NOT NULL,
	[SortOrder] [int] NOT NULL,
	[DefinitionID] [int] NOT NULL,
	[Description] [nvarchar](500) NULL,
	[PortalID] [int] NOT NULL,
	[SystemList] [bit] NOT NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}Lists] PRIMARY KEY CLUSTERED 
(
	[EntryID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_{objectQualifier}Lists_ListName_Value_Text_ParentID] UNIQUE NONCLUSTERED 
(
    [PortalId] ASC,
	[ListName] ASC,
	[Value] ASC,
	[Text] ASC,
	[ParentID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View {databaseOwner}[{objectQualifier}vw_Lists]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- optimized
CREATE VIEW {databaseOwner}[{objectQualifier}vw_Lists]
AS
	SELECT  L.EntryID, 
		L.ListName, 
		L.[Value], 
		L.Text, 
		L.[Level], 
		L.SortOrder, 
		L.DefinitionID, 
		L.ParentID, 
		L.Description, 
		L.PortalID, 
		L.SystemList, 
		{databaseOwner}[{objectQualifier}GetListParentKey](L.ParentID, L.ListName, N'ParentKey',  0) AS ParentKey, 
		{databaseOwner}[{objectQualifier}GetListParentKey](L.ParentID, L.ListName, N'Parent',     0) AS Parent, 
		{databaseOwner}[{objectQualifier}GetListParentKey](L.ParentID, L.ListName, N'ParentList', 0) AS ParentList,
		S.MaxSortOrder,
		S.EntryCount,
		CASE WHEN EXISTS (SELECT 1 FROM {databaseOwner}[{objectQualifier}Lists] WHERE (ParentID = L.EntryID)) THEN 1 ELSE 0 END AS HasChildren, 
		L.CreatedByUserID, 
		L.CreatedOnDate, 
		L.LastModifiedByUserID, 
		L.LastModifiedOnDate
	FROM {databaseOwner}[{objectQualifier}Lists] AS L
	LEFT JOIN (SELECT ListName, ParentID, Max(SortOrder) AS MaxSortOrder, Count(1) AS EntryCount 
			   FROM {databaseOwner}[{objectQualifier}Lists] GROUP BY ListName, ParentID) S 		ON L.ParentID = S.ParentId AND L.ListName = S.ListName
GO
/****** Object:  View {databaseOwner}[{objectQualifier}vw_PortalsDefaultLanguage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_PortalsDefaultLanguage]
AS
SELECT
	*
FROM {databaseOwner}[{objectQualifier}vw_Portals]
WHERE CultureCode = DefaultLanguage
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}UserPortals]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}UserPortals](
	[UserId] [int] NOT NULL,
	[PortalId] [int] NOT NULL,
	[UserPortalId] [int] IDENTITY(1,1) NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[Authorised] [bit] NOT NULL,
	[IsDeleted] [bit] NOT NULL,
	[RefreshRoles] [bit] NOT NULL,
	[VanityUrl] [nvarchar](100) NULL,
	[HasAgreedToTerms] [bit] NOT NULL,
	[HasAgreedToTermsOn] [datetime] NULL,
	[RequestsRemoval] [bit] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}UserPortals] PRIMARY KEY CLUSTERED 
(
	[UserId] ASC,
	[PortalId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View {databaseOwner}[{objectQualifier}vw_Users]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_Users]
AS
	SELECT  U.UserId,
        UP.PortalId,
        U.Username,
        U.FirstName,
        U.LastName,
        U.DisplayName,
        U.IsSuperUser,
        U.Email,
        UP.VanityUrl,
        U.AffiliateId,
        IsNull(UP.IsDeleted, U.IsDeleted) AS IsDeleted,
        UP.RefreshRoles,
        U.LastIPAddress,
        U.UpdatePassword,
        U.PasswordResetToken,
        U.PasswordResetExpiration,
        UP.Authorised,
        UP.HasAgreedToTerms,
        UP.HasAgreedToTermsOn,
        UP.RequestsRemoval,
        U.CreatedByUserId,
        U.CreatedOnDate,
        U.LastModifiedByUserId,
        U.LastModifiedOnDate
	FROM       {databaseOwner}[{objectQualifier}Users]       AS U
		LEFT JOIN {databaseOwner}[{objectQualifier}UserPortals] AS UP 
			ON CASE WHEN U.IsSuperuser = 1 THEN 0 ELSE U.UserId END = UP.UserId
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}CoreMessaging_UserPreferences]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}CoreMessaging_UserPreferences](
	[UserPreferenceId] [int] IDENTITY(1,1) NOT NULL,
	[PortalId] [int] NOT NULL,
	[UserId] [int] NOT NULL,
	[MessagesEmailFrequency] [int] NOT NULL,
	[NotificationsEmailFrequency] [int] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}CoreMessaging_UserPreferences] PRIMARY KEY CLUSTERED 
(
	[UserPreferenceId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View {databaseOwner}[{objectQualifier}vw_MessagesForDispatch]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_MessagesForDispatch]
AS
    SELECT R.[UserID], 
           R.[RecipientID],
           R.[EmailSchedulerInstance], 
           CASE 
            WHEN M.NotificationTypeID IS Null 
            THEN IsNull(P.[MessagesEmailFrequency],      0) -- direct mails are sent immediately by default
            ELSE IsNull(p.[NotificationsEmailFrequency], 2) -- notifications are sent as daily digest by default
           END AS EmailFrequency 
     FROM       {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] AS R 
     INNER JOIN {databaseOwner}[{objectQualifier}CoreMessaging_Messages]          AS M ON R.MessageID = M.MessageID
     LEFT  JOIN {databaseOwner}[{objectQualifier}CoreMessaging_UserPreferences]   AS P ON R.UserID    = P.UserID    AND M.PortalID = P.PortalID
     WHERE [EmailSent] = 0 AND [Read] = 0 AND [Archived] = 0;
GO
/****** Object:  UserDefinedFunction {databaseOwner}[{objectQualifier}fn_ParseVersion]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE FUNCTION {databaseOwner}[{objectQualifier}fn_ParseVersion]
(
	@Version	nvarchar(20)
)
RETURNS @VersionParts TABLE (Major int, Minor int, Build int)
WITH SCHEMABINDING
AS
	BEGIN
		DECLARE @Pos int;
		DECLARE @String nvarchar(20);
		DECLARE @Major int;
		DECLARE @Minor int;
		DECLARE @Build int;

		SET @String = @Version;
		SET @Pos = CHARINDEX('.' , @String);
		SET @Major = CONVERT(int, LEFT(@String, @Pos - 1));
		SET @String = STUFF(@String, 1, @Pos, '');
		SET @Pos = CHARINDEX('.' , @String);
		SET @Minor = CONVERT(int, LEFT(@String, @Pos - 1));
		SET @String = STUFF(@String, 1, @Pos, '');
		SET @Build = CONVERT(int, @String);

		INSERT INTO @VersionParts(Major, Minor, Build)
		VALUES (@Major, @Minor, @Build);

		RETURN;
	END
GO
/****** Object:  UserDefinedFunction {databaseOwner}[{objectQualifier}SplitStrings_CTE]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION {databaseOwner}[{objectQualifier}SplitStrings_CTE]
(
   @List       NVARCHAR(MAX),
   @Delimiter  NVARCHAR(255)
)
RETURNS @Items TABLE (Item NVARCHAR(4000))
WITH SCHEMABINDING
AS
BEGIN
   DECLARE @StringLength INT = LEN(@List) + 1, @DelimiterLength INT = LEN(@Delimiter);
 
   WITH a AS
   (
       SELECT
           [start] = 1,
           [end]   = COALESCE(NULLIF(CHARINDEX(@Delimiter, 
                       @List, 1), 0), @StringLength),
           [value] = SUBSTRING(@List, 1, 
                     COALESCE(NULLIF(CHARINDEX(@Delimiter, 
                       @List, 1), 0), @StringLength) - 1)
       UNION ALL
       SELECT
           [start] = CONVERT(INT, [end]) + @DelimiterLength,
           [end]   = COALESCE(NULLIF(CHARINDEX(@Delimiter, 
                       @List, [end] + @DelimiterLength), 0), @StringLength),
           [value] = SUBSTRING(@List, [end] + @DelimiterLength, 
                     COALESCE(NULLIF(CHARINDEX(@Delimiter, 
                       @List, [end] + @DelimiterLength), 0), @StringLength)-[end]-@DelimiterLength)
       FROM a
       WHERE [end] < @StringLength
   )
   INSERT @Items SELECT [value]
   FROM a
   WHERE LEN([value]) > 0
   OPTION (MAXRECURSION 0);
 
   RETURN;
END
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}AnonymousUsers]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}AnonymousUsers](
	[UserID] [char](36) NOT NULL,
	[PortalID] [int] NOT NULL,
	[TabID] [int] NOT NULL,
	[CreationDate] [datetime] NOT NULL,
	[LastActiveDate] [datetime] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}AnonymousUsers] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC,
	[PortalID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Assemblies]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Assemblies](
	[AssemblyID] [int] IDENTITY(1,1) NOT NULL,
	[PackageID] [int] NULL,
	[AssemblyName] [nvarchar](250) NOT NULL,
	[Version] [nvarchar](20) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}PackageAssemblies] PRIMARY KEY CLUSTERED 
(
	[AssemblyID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}AuthCookies]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}AuthCookies](
	[CookieId] [int] IDENTITY(1,1) NOT NULL,
	[CookieValue] [nvarchar](200) NOT NULL,
	[ExpiresOn] [datetime] NOT NULL,
	[UserId] [int] NOT NULL,
	[CreatedOn] [datetime] NULL,
	[UpdatedOn] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}AuthCookies] PRIMARY KEY CLUSTERED 
(
	[CookieId] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Authentication]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Authentication](
	[AuthenticationID] [int] IDENTITY(1,1) NOT NULL,
	[PackageID] [int] NOT NULL,
	[AuthenticationType] [nvarchar](100) NOT NULL,
	[IsEnabled] [bit] NOT NULL,
	[SettingsControlSrc] [nvarchar](250) NOT NULL,
	[LoginControlSrc] [nvarchar](250) NOT NULL,
	[LogoffControlSrc] [nvarchar](250) NOT NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}Authentication] PRIMARY KEY CLUSTERED 
(
	[AuthenticationID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}ContentItems_Tags]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}ContentItems_Tags](
	[ContentItemTagID] [int] IDENTITY(1,1) NOT NULL,
	[ContentItemID] [int] NOT NULL,
	[TermID] [int] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}ContentItems_Tags] PRIMARY KEY CLUSTERED 
(
	[ContentItemTagID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}ContentWorkflowActions]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}ContentWorkflowActions](
	[ActionId] [int] IDENTITY(1,1) NOT NULL,
	[ContentTypeId] [int] NOT NULL,
	[ActionType] [nvarchar](50) NOT NULL,
	[ActionSource] [nvarchar](256) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}ContentWorkflowActions] PRIMARY KEY CLUSTERED 
(
	[ActionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}ContentWorkflowLogs]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}ContentWorkflowLogs](
	[WorkflowLogID] [int] IDENTITY(1,1) NOT NULL,
	[Action] [nvarchar](40) NOT NULL,
	[Comment] [nvarchar](max) NOT NULL,
	[Date] [datetime] NOT NULL,
	[User] [int] NOT NULL,
	[WorkflowID] [int] NOT NULL,
	[ContentItemID] [int] NOT NULL,
	[Type] [int] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}ContentWorkflowLogs] PRIMARY KEY CLUSTERED 
(
	[WorkflowLogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}ContentWorkflowSources]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}ContentWorkflowSources](
	[SourceID] [int] IDENTITY(1,1) NOT NULL,
	[WorkflowID] [int] NOT NULL,
	[SourceName] [nvarchar](20) NOT NULL,
	[SourceType] [nvarchar](250) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}ContentWorkflowSources] PRIMARY KEY CLUSTERED 
(
	[SourceID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_{objectQualifier}ContentWorkflowSources] UNIQUE NONCLUSTERED 
(
	[WorkflowID] ASC,
	[SourceName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}CoreMessaging_MessageAttachments]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}CoreMessaging_MessageAttachments](
	[MessageAttachmentID] [int] IDENTITY(1,1) NOT NULL,
	[MessageID] [int] NOT NULL,
	[FileID] [int] NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}CoreMessaging_MessageAttachments] PRIMARY KEY CLUSTERED 
(
	[MessageAttachmentID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypeActions]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypeActions](
	[NotificationTypeActionID] [int] IDENTITY(1,1) NOT NULL,
	[NotificationTypeID] [int] NOT NULL,
	[NameResourceKey] [nvarchar](100) NOT NULL,
	[DescriptionResourceKey] [nvarchar](100) NULL,
	[ConfirmResourceKey] [nvarchar](100) NULL,
	[Order] [int] NOT NULL,
	[APICall] [nvarchar](500) NOT NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}CoreMessaging_NotificationTypeActions] PRIMARY KEY CLUSTERED 
(
	[NotificationTypeActionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypes]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypes](
	[NotificationTypeID] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](100) NOT NULL,
	[Description] [nvarchar](2000) NULL,
	[TTL] [int] NULL,
	[DesktopModuleID] [int] NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
	[IsTask] [bit] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}CoreMessaging_NotificationTypes] PRIMARY KEY CLUSTERED 
(
	[NotificationTypeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}CoreMessaging_Subscriptions]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}CoreMessaging_Subscriptions](
	[SubscriptionId] [int] IDENTITY(1,1) NOT NULL,
	[UserId] [int] NOT NULL,
	[PortalId] [int] NULL,
	[SubscriptionTypeId] [int] NOT NULL,
	[ObjectKey] [nvarchar](255) NULL,
	[ObjectData] [nvarchar](max) NULL,
	[Description] [nvarchar](255) NOT NULL,
	[CreatedOnDate] [datetime] NOT NULL,
	[ModuleId] [int] NULL,
	[TabId] [int] NULL,
 CONSTRAINT [PK_{objectQualifier}CoreMessaging_Subscriptions] PRIMARY KEY CLUSTERED 
(
	[SubscriptionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}CoreMessaging_SubscriptionTypes]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}CoreMessaging_SubscriptionTypes](
	[SubscriptionTypeId] [int] IDENTITY(1,1) NOT NULL,
	[SubscriptionName] [nvarchar](50) NOT NULL,
	[FriendlyName] [nvarchar](50) NOT NULL,
	[DesktopModuleId] [int] NULL,
 CONSTRAINT [PK_{objectQualifier}CoreMessaging_SubscriptionTypes] PRIMARY KEY CLUSTERED 
(
	[SubscriptionTypeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}EventLogConfig]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}EventLogConfig](
	[ID] [int] IDENTITY(1,1) NOT NULL,
	[LogTypeKey] [nvarchar](35) NULL,
	[LogTypePortalID] [int] NULL,
	[LoggingIsActive] [bit] NOT NULL,
	[KeepMostRecent] [int] NOT NULL,
	[EmailNotificationIsActive] [bit] NOT NULL,
	[NotificationThreshold] [int] NULL,
	[NotificationThresholdTime] [int] NULL,
	[NotificationThresholdTimeType] [int] NULL,
	[MailFromAddress] [nvarchar](50) NOT NULL,
	[MailToAddress] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EventLogConfig] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}EventLogTypes]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}EventLogTypes](
	[LogTypeKey] [nvarchar](35) NOT NULL,
	[LogTypeFriendlyName] [nvarchar](50) NOT NULL,
	[LogTypeDescription] [nvarchar](128) NOT NULL,
	[LogTypeOwner] [nvarchar](100) NOT NULL,
	[LogTypeCSSClass] [nvarchar](40) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EventLogTypes] PRIMARY KEY CLUSTERED 
(
	[LogTypeKey] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}EventQueue]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}EventQueue](
	[EventMessageID] [int] IDENTITY(1,1) NOT NULL,
	[EventName] [nvarchar](100) NOT NULL,
	[Priority] [int] NOT NULL,
	[ProcessorType] [nvarchar](250) NOT NULL,
	[ProcessorCommand] [nvarchar](250) NOT NULL,
	[Body] [nvarchar](250) NOT NULL,
	[Sender] [nvarchar](250) NOT NULL,
	[Subscriber] [nvarchar](100) NOT NULL,
	[AuthorizedRoles] [nvarchar](250) NOT NULL,
	[ExceptionMessage] [nvarchar](250) NOT NULL,
	[SentDate] [datetime] NOT NULL,
	[ExpirationDate] [datetime] NOT NULL,
	[Attributes] [ntext] NOT NULL,
	[IsComplete] [bit] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}EventQueue] PRIMARY KEY CLUSTERED 
(
	[EventMessageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}ExtensionUrlProviderSetting]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}ExtensionUrlProviderSetting](
	[ExtensionUrlProviderID] [int] NOT NULL,
	[PortalID] [int] NOT NULL,
	[SettingName] [nvarchar](100) NOT NULL,
	[SettingValue] [nvarchar](2000) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}ExtensionUrlProviderSetting] PRIMARY KEY CLUSTERED 
(
	[ExtensionUrlProviderID] ASC,
	[PortalID] ASC,
	[SettingName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}ExtensionUrlProviderTab]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}ExtensionUrlProviderTab](
	[ExtensionUrlProviderID] [int] NOT NULL,
	[PortalID] [int] NOT NULL,
	[TabID] [int] NOT NULL,
	[IsActive] [bit] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}ExtensionUrlProviderTab] PRIMARY KEY CLUSTERED 
(
	[ExtensionUrlProviderID] ASC,
	[PortalID] ASC,
	[TabID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}FileVersions]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}FileVersions](
	[FileId] [int] NOT NULL,
	[Version] [int] NOT NULL,
	[FileName] [nvarchar](246) NOT NULL,
	[Extension] [nvarchar](100) NOT NULL,
	[Size] [int] NOT NULL,
	[Width] [int] NULL,
	[Height] [int] NULL,
	[ContentType] [nvarchar](200) NOT NULL,
	[Content] [image] NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
	[SHA1Hash] [varchar](40) NULL,
 CONSTRAINT [PK_{objectQualifier}FileVersions] PRIMARY KEY CLUSTERED 
(
	[FileId] ASC,
	[Version] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}FolderMappings]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}FolderMappings](
	[FolderMappingID] [int] IDENTITY(1,1) NOT NULL,
	[PortalID] [int] NULL,
	[MappingName] [nvarchar](50) NOT NULL,
	[FolderProviderType] [nvarchar](50) NOT NULL,
	[Priority] [int] NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}FolderMappings] PRIMARY KEY CLUSTERED 
(
	[FolderMappingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_{objectQualifier}FolderMappings] UNIQUE NONCLUSTERED 
(
	[PortalID] ASC,
	[MappingName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}FolderMappingsSettings]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}FolderMappingsSettings](
	[FolderMappingID] [int] NOT NULL,
	[SettingName] [nvarchar](50) NOT NULL,
	[SettingValue] [nvarchar](2000) NOT NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}FolderMappingsSettings] PRIMARY KEY CLUSTERED 
(
	[FolderMappingID] ASC,
	[SettingName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}HostSettings]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}HostSettings](
	[SettingName] [nvarchar](50) NOT NULL,
	[SettingValue] [nvarchar](max) NOT NULL,
	[SettingIsSecure] [bit] NOT NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}HostSettings] PRIMARY KEY CLUSTERED 
(
	[SettingName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}IPFilter]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}IPFilter](
	[IPFilterID] [int] IDENTITY(1,1) NOT NULL,
	[IPAddress] [nvarchar](50) NULL,
	[SubnetMask] [nvarchar](50) NULL,
	[RuleType] [tinyint] NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}IPFilter] PRIMARY KEY CLUSTERED 
(
	[IPFilterID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}JavaScriptLibraries]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}JavaScriptLibraries](
	[JavaScriptLibraryID] [int] IDENTITY(1,1) NOT NULL,
	[PackageID] [int] NOT NULL,
	[LibraryName] [nvarchar](200) NOT NULL,
	[Version] [nvarchar](50) NOT NULL,
	[FileName] [nvarchar](100) NOT NULL,
	[ObjectName] [nvarchar](100) NOT NULL,
	[PreferredScriptLocation] [int] NOT NULL,
	[CDNPath] [nvarchar](250) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}JavaScriptLIbraries] PRIMARY KEY CLUSTERED 
(
	[JavaScriptLibraryID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Journal]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Journal](
	[JournalId] [int] IDENTITY(1,1) NOT NULL,
	[JournalTypeId] [int] NOT NULL,
	[UserId] [int] NULL,
	[DateCreated] [datetime] NULL,
	[DateUpdated] [datetime] NULL,
	[PortalId] [int] NULL,
	[ProfileId] [int] NOT NULL,
	[GroupId] [int] NOT NULL,
	[Title] [nvarchar](255) NULL,
	[Summary] [nvarchar](2000) NULL,
	[ItemData] [nvarchar](2000) NULL,
	[ImageURL] [nvarchar](255) NULL,
	[ObjectKey] [nvarchar](255) NULL,
	[AccessKey] [uniqueidentifier] NULL,
	[ContentItemId] [int] NULL,
	[IsDeleted] [bit] NOT NULL,
	[CommentsDisabled] [bit] NOT NULL,
	[CommentsHidden] [bit] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}Journal] PRIMARY KEY CLUSTERED 
(
	[JournalId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Journal_Access]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Journal_Access](
	[JournalAccessId] [int] IDENTITY(1,1) NOT NULL,
	[JournalTypeId] [int] NOT NULL,
	[PortalId] [int] NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[AccessKey] [uniqueidentifier] NOT NULL,
	[IsEnabled] [bit] NOT NULL,
	[DateCreated] [datetime] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}Journal_Access] PRIMARY KEY CLUSTERED 
(
	[JournalAccessId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Journal_Comments]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Journal_Comments](
	[CommentId] [int] IDENTITY(1,1) NOT NULL,
	[JournalId] [int] NOT NULL,
	[UserId] [int] NOT NULL,
	[Comment] [nvarchar](2000) NULL,
	[DateCreated] [datetime] NOT NULL,
	[DateUpdated] [datetime] NOT NULL,
	[CommentXML] [xml] NULL,
 CONSTRAINT [PK_{objectQualifier}Journal_Comments] PRIMARY KEY CLUSTERED 
(
	[CommentId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Journal_Data]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Journal_Data](
	[JournalDataId] [int] IDENTITY(1,1) NOT NULL,
	[JournalId] [int] NOT NULL,
	[JournalXML] [xml] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}Journal_Data] PRIMARY KEY CLUSTERED 
(
	[JournalDataId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Journal_Security]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Journal_Security](
	[JournalSecurityId] [int] IDENTITY(1,1) NOT NULL,
	[JournalId] [int] NOT NULL,
	[SecurityKey] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}Journal_Security] PRIMARY KEY CLUSTERED 
(
	[JournalSecurityId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_{objectQualifier}Journal_Security] UNIQUE NONCLUSTERED 
(
	[JournalId] DESC,
	[SecurityKey] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Journal_TypeFilters]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Journal_TypeFilters](
	[JournalTypeFilterId] [int] IDENTITY(1,1) NOT NULL,
	[PortalId] [int] NOT NULL,
	[ModuleId] [int] NOT NULL,
	[JournalTypeId] [int] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}Journal_TypeFilters] PRIMARY KEY CLUSTERED 
(
	[JournalTypeFilterId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Journal_Types]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Journal_Types](
	[JournalTypeId] [int] NOT NULL,
	[JournalType] [nvarchar](25) NULL,
	[icon] [nvarchar](25) NULL,
	[PortalId] [int] NOT NULL,
	[IsEnabled] [bit] NOT NULL,
	[AppliesToProfile] [bit] NOT NULL,
	[AppliesToGroup] [bit] NOT NULL,
	[AppliesToStream] [bit] NOT NULL,
	[Options] [nvarchar](max) NULL,
	[SupportsNotify] [bit] NOT NULL,
	[EnableComments] [bit] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}JournalTypes] PRIMARY KEY CLUSTERED 
(
	[JournalTypeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}LanguagePacks]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}LanguagePacks](
	[LanguagePackID] [int] IDENTITY(1,1) NOT NULL,
	[PackageID] [int] NOT NULL,
	[DependentPackageID] [int] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}LanguagePacks] PRIMARY KEY CLUSTERED 
(
	[LanguagePackID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Languages]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Languages](
	[LanguageID] [int] IDENTITY(1,1) NOT NULL,
	[CultureCode] [nvarchar](50) NOT NULL,
	[CultureName] [nvarchar](200) NOT NULL,
	[FallbackCulture] [nvarchar](50) NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}Languages] PRIMARY KEY CLUSTERED 
(
	[LanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Messaging_Messages]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Messaging_Messages](
	[MessageID] [bigint] IDENTITY(1,1) NOT NULL,
	[PortalID] [int] NOT NULL,
	[FromUserID] [int] NOT NULL,
	[ToUserName] [nvarchar](50) NULL,
	[FromUserName] [nvarchar](50) NULL,
	[ToUserID] [int] NULL,
	[ToRoleID] [int] NULL,
	[Status] [tinyint] NOT NULL,
	[Subject] [nvarchar](max) NULL,
	[Body] [nvarchar](max) NULL,
	[Date] [datetime] NOT NULL,
	[Conversation] [uniqueidentifier] NOT NULL,
	[ReplyTo] [bigint] NULL,
	[AllowReply] [bit] NOT NULL,
	[SkipPortal] [bit] NOT NULL,
	[EmailSent] [bit] NOT NULL,
	[EmailSentDate] [datetime] NULL,
	[EmailSchedulerInstance] [uniqueidentifier] NULL,
 CONSTRAINT [PK_{objectQualifier}Messaging_Messages] PRIMARY KEY CLUSTERED 
(
	[MessageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Mobile_PreviewProfiles]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Mobile_PreviewProfiles](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PortalId] [int] NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[Width] [int] NOT NULL,
	[Height] [int] NOT NULL,
	[UserAgent] [nvarchar](260) NOT NULL,
	[SortOrder] [int] NOT NULL,
	[CreatedByUserID] [int] NOT NULL,
	[CreatedOnDate] [datetime] NOT NULL,
	[LastModifiedByUserID] [int] NOT NULL,
	[LastModifiedOnDate] [datetime] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}Mobile_PreviewProfiles] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Mobile_RedirectionRules]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Mobile_RedirectionRules](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[RedirectionId] [int] NOT NULL,
	[Capability] [nvarchar](50) NOT NULL,
	[Expression] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}Mobile_RedirectionRules] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Mobile_Redirections]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Mobile_Redirections](
	[Id] [int] IDENTITY(1,1) NOT NULL,
	[PortalId] [int] NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[Type] [int] NOT NULL,
	[SortOrder] [int] NOT NULL,
	[SourceTabId] [int] NOT NULL,
	[IncludeChildTabs] [bit] NOT NULL,
	[TargetType] [int] NOT NULL,
	[TargetValue] [nvarchar](260) NOT NULL,
	[Enabled] [bit] NOT NULL,
	[CreatedByUserID] [int] NOT NULL,
	[CreatedOnDate] [datetime] NOT NULL,
	[LastModifiedByUserID] [int] NOT NULL,
	[LastModifiedOnDate] [datetime] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}Mobile_Redirections] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}ModuleSettings]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}ModuleSettings](
	[ModuleID] [int] NOT NULL,
	[SettingName] [nvarchar](50) NOT NULL,
	[SettingValue] [nvarchar](max) NOT NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}ModuleSettings] PRIMARY KEY CLUSTERED 
(
	[ModuleID] ASC,
	[SettingName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}OutputCache]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}OutputCache](
	[CacheKey] [varchar](36) NOT NULL,
	[ItemId] [int] NOT NULL,
	[Data] [nvarchar](max) NOT NULL,
	[Expiration] [datetime] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}OutputCache] PRIMARY KEY CLUSTERED 
(
	[CacheKey] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}PackageDependencies]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}PackageDependencies](
	[PackageDependencyID] [int] IDENTITY(1,1) NOT NULL,
	[PackageID] [int] NOT NULL,
	[PackageName] [nvarchar](128) NOT NULL,
	[Version] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}PackageDependencies] PRIMARY KEY CLUSTERED 
(
	[PackageDependencyID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Packages]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Packages](
	[PackageID] [int] IDENTITY(1,1) NOT NULL,
	[PortalID] [int] NULL,
	[Name] [nvarchar](128) NOT NULL,
	[FriendlyName] [nvarchar](250) NOT NULL,
	[Description] [nvarchar](2000) NULL,
	[PackageType] [nvarchar](100) NOT NULL,
	[Version] [nvarchar](50) NOT NULL,
	[License] [ntext] NULL,
	[Manifest] [ntext] NULL,
	[Owner] [nvarchar](100) NULL,
	[Organization] [nvarchar](100) NULL,
	[Url] [nvarchar](250) NULL,
	[Email] [nvarchar](100) NULL,
	[ReleaseNotes] [ntext] NULL,
	[IsSystemPackage] [bit] NOT NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
	[FolderName] [nvarchar](128) NULL,
	[IconFile] [nvarchar](100) NULL,
 CONSTRAINT [PK_{objectQualifier}Packages] PRIMARY KEY CLUSTERED 
(
	[PackageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}PackageTypes]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}PackageTypes](
	[PackageType] [nvarchar](100) NOT NULL,
	[Description] [nvarchar](500) NOT NULL,
	[SecurityAccessLevel] [int] NOT NULL,
	[EditorControlSrc] [nvarchar](250) NULL,
	[SupportsSideBySideInstallation] [bit] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}PackageTypes_1] PRIMARY KEY CLUSTERED 
(
	[PackageType] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}PasswordHistory]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}PasswordHistory](
	[PasswordHistoryID] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [int] NOT NULL,
	[Password] [nvarchar](128) NOT NULL,
	[PasswordSalt] [nvarchar](128) NOT NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}PasswordHistory] PRIMARY KEY CLUSTERED 
(
	[PasswordHistoryID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}PortalAlias]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}PortalAlias](
	[PortalAliasID] [int] IDENTITY(1,1) NOT NULL,
	[PortalID] [int] NOT NULL,
	[HTTPAlias] [nvarchar](200) NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
	[BrowserType] [nvarchar](10) NULL,
	[Skin] [nvarchar](100) NULL,
	[CultureCode] [nvarchar](10) NULL,
	[IsPrimary] [bit] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}PortalAlias] PRIMARY KEY CLUSTERED 
(
	[PortalAliasID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_{objectQualifier}PortalAlias] UNIQUE NONCLUSTERED 
(
	[HTTPAlias] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}PortalDesktopModules]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}PortalDesktopModules](
	[PortalDesktopModuleID] [int] IDENTITY(1,1) NOT NULL,
	[PortalID] [int] NOT NULL,
	[DesktopModuleID] [int] NOT NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}PortalDesktopModules] PRIMARY KEY CLUSTERED 
(
	[PortalDesktopModuleID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_{objectQualifier}PortalDesktopModules] UNIQUE NONCLUSTERED 
(
	[PortalID] ASC,
	[DesktopModuleID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}PortalLanguages]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}PortalLanguages](
	[PortalLanguageID] [int] IDENTITY(1,1) NOT NULL,
	[PortalID] [int] NOT NULL,
	[LanguageID] [int] NOT NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
	[IsPublished] [bit] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}PortalLanguages] PRIMARY KEY CLUSTERED 
(
	[PortalLanguageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Profile]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Profile](
	[ProfileId] [int] IDENTITY(1,1) NOT NULL,
	[UserId] [int] NOT NULL,
	[PortalId] [int] NOT NULL,
	[ProfileData] [ntext] NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}Profile] PRIMARY KEY CLUSTERED 
(
	[ProfileId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}RedirectMessages]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}RedirectMessages](
	[MessageId] [uniqueidentifier] NOT NULL,
	[UserId] [int] NULL,
	[TabId] [int] NULL,
	[MessageText] [nvarchar](max) NOT NULL,
	[CreatedOnDate] [datetime] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}RedirectMessages] PRIMARY KEY CLUSTERED 
(
	[MessageId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Relationships]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Relationships](
	[RelationshipID] [int] IDENTITY(1,1) NOT NULL,
	[RelationshipTypeID] [int] NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[PortalID] [int] NULL,
	[UserID] [int] NULL,
	[DefaultResponse] [int] NOT NULL,
	[CreatedByUserID] [int] NOT NULL,
	[CreatedOnDate] [datetime] NOT NULL,
	[LastModifiedByUserID] [int] NOT NULL,
	[LastModifiedOnDate] [datetime] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}Relationships] PRIMARY KEY CLUSTERED 
(
	[RelationshipID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}RelationshipTypes]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}RelationshipTypes](
	[RelationshipTypeID] [int] IDENTITY(1,1) NOT NULL,
	[Direction] [int] NOT NULL,
	[Name] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](500) NULL,
	[CreatedByUserID] [int] NOT NULL,
	[CreatedOnDate] [datetime] NOT NULL,
	[LastModifiedByUserID] [int] NOT NULL,
	[LastModifiedOnDate] [datetime] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}RelationshipTypes] PRIMARY KEY CLUSTERED 
(
	[RelationshipTypeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}RoleGroups]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}RoleGroups](
	[RoleGroupID] [int] IDENTITY(0,1) NOT NULL,
	[PortalID] [int] NOT NULL,
	[RoleGroupName] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](1000) NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}RoleGroups] PRIMARY KEY CLUSTERED 
(
	[RoleGroupID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_{objectQualifier}RoleGroupName] UNIQUE NONCLUSTERED 
(
	[PortalID] ASC,
	[RoleGroupName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}RoleSettings]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}RoleSettings](
	[RoleSettingID] [int] IDENTITY(1,1) NOT NULL,
	[RoleID] [int] NOT NULL,
	[SettingName] [nvarchar](50) NOT NULL,
	[SettingValue] [nvarchar](max) NOT NULL,
	[CreatedByUserID] [int] NOT NULL,
	[CreatedOnDate] [datetime] NOT NULL,
	[LastModifiedByUserID] [int] NOT NULL,
	[LastModifiedOnDate] [datetime] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}RoleSettings] PRIMARY KEY CLUSTERED 
(
	[RoleSettingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Schedule]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Schedule](
	[ScheduleID] [int] IDENTITY(1,1) NOT NULL,
	[TypeFullName] [varchar](200) NOT NULL,
	[TimeLapse] [int] NOT NULL,
	[TimeLapseMeasurement] [varchar](2) NOT NULL,
	[RetryTimeLapse] [int] NOT NULL,
	[RetryTimeLapseMeasurement] [varchar](2) NOT NULL,
	[RetainHistoryNum] [int] NOT NULL,
	[AttachToEvent] [varchar](50) NOT NULL,
	[CatchUpEnabled] [bit] NOT NULL,
	[Enabled] [bit] NOT NULL,
	[ObjectDependencies] [varchar](300) NOT NULL,
	[Servers] [nvarchar](2000) NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
	[FriendlyName] [nvarchar](200) NULL,
	[ScheduleStartDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}Schedule] PRIMARY KEY CLUSTERED 
(
	[ScheduleID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}ScheduleHistory]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}ScheduleHistory](
	[ScheduleHistoryID] [int] IDENTITY(1,1) NOT NULL,
	[ScheduleID] [int] NOT NULL,
	[StartDate] [datetime] NOT NULL,
	[EndDate] [datetime] NULL,
	[Succeeded] [bit] NULL,
	[LogNotes] [ntext] NULL,
	[NextStart] [datetime] NULL,
	[Server] [nvarchar](150) NULL,
 CONSTRAINT [PK_{objectQualifier}ScheduleHistory] PRIMARY KEY CLUSTERED 
(
	[ScheduleHistoryID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}ScheduleItemSettings]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}ScheduleItemSettings](
	[ScheduleID] [int] NOT NULL,
	[SettingName] [nvarchar](50) NOT NULL,
	[SettingValue] [nvarchar](max) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}ScheduleItemSettings] PRIMARY KEY CLUSTERED 
(
	[ScheduleID] ASC,
	[SettingName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}SearchCommonWords]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}SearchCommonWords](
	[CommonWordID] [int] IDENTITY(1,1) NOT NULL,
	[CommonWord] [nvarchar](255) NOT NULL,
	[Locale] [nvarchar](10) NULL,
 CONSTRAINT [PK_{objectQualifier}SearchCommonWords] PRIMARY KEY CLUSTERED 
(
	[CommonWordID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}SearchDeletedItems]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}SearchDeletedItems](
	[SearchDeletedItemsID] [int] IDENTITY(1,1) NOT NULL,
	[DateCreated] [datetime] NOT NULL,
	[Document] [nvarchar](max) NULL,
 CONSTRAINT [PK_{objectQualifier}SearchDeletedItems] PRIMARY KEY CLUSTERED 
(
	[SearchDeletedItemsID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}SearchIndexer]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}SearchIndexer](
	[SearchIndexerID] [int] IDENTITY(1,1) NOT NULL,
	[SearchIndexerAssemblyQualifiedName] [char](200) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}SearchIndexer] PRIMARY KEY CLUSTERED 
(
	[SearchIndexerID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}SearchStopWords]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}SearchStopWords](
	[StopWordsID] [int] IDENTITY(1,1) NOT NULL,
	[StopWords] [nvarchar](max) NOT NULL,
	[CreatedByUserID] [int] NOT NULL,
	[CreatedOnDate] [datetime] NOT NULL,
	[LastModifiedByUserID] [int] NOT NULL,
	[LastModifiedOnDate] [datetime] NOT NULL,
	[PortalID] [int] NOT NULL,
	[CultureCode] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}SearchStopWords] PRIMARY KEY CLUSTERED 
(
	[StopWordsID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}SearchTypes]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}SearchTypes](
	[SearchTypeId] [int] IDENTITY(1,1) NOT NULL,
	[SearchTypeName] [nvarchar](100) NOT NULL,
	[SearchResultClass] [nvarchar](256) NOT NULL,
	[IsPrivate] [bit] NULL,
 CONSTRAINT [PK_{objectQualifier}SearchTypes] PRIMARY KEY CLUSTERED 
(
	[SearchTypeId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}SiteLog]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}SiteLog](
	[SiteLogId] [int] IDENTITY(1,1) NOT NULL,
	[DateTime] [smalldatetime] NOT NULL,
	[PortalId] [int] NOT NULL,
	[UserId] [int] NULL,
	[Referrer] [nvarchar](255) NULL,
	[Url] [nvarchar](255) NULL,
	[UserAgent] [nvarchar](255) NULL,
	[UserHostAddress] [nvarchar](255) NULL,
	[UserHostName] [nvarchar](255) NULL,
	[TabId] [int] NULL,
	[AffiliateId] [int] NULL,
 CONSTRAINT [PK_{objectQualifier}SiteLog] PRIMARY KEY CLUSTERED 
(
	[SiteLogId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}SkinControls]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}SkinControls](
	[SkinControlID] [int] IDENTITY(1,1) NOT NULL,
	[PackageID] [int] NOT NULL,
	[ControlKey] [nvarchar](50) NULL,
	[ControlSrc] [nvarchar](256) NULL,
	[IconFile] [nvarchar](100) NULL,
	[HelpUrl] [nvarchar](200) NULL,
	[SupportsPartialRendering] [bit] NOT NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}SkinControls] PRIMARY KEY CLUSTERED 
(
	[SkinControlID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}SkinPackages]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}SkinPackages](
	[SkinPackageID] [int] IDENTITY(1,1) NOT NULL,
	[PackageID] [int] NOT NULL,
	[PortalID] [int] NULL,
	[SkinName] [nvarchar](50) NOT NULL,
	[SkinType] [nvarchar](20) NOT NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}SkinPackages] PRIMARY KEY CLUSTERED 
(
	[SkinPackageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Skins]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Skins](
	[SkinID] [int] IDENTITY(1,1) NOT NULL,
	[SkinPackageID] [int] NOT NULL,
	[SkinSrc] [nvarchar](250) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}Skins] PRIMARY KEY CLUSTERED 
(
	[SkinID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}SQLQueries]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}SQLQueries](
	[QueryId] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](200) NOT NULL,
	[Query] [nvarchar](max) NOT NULL,
	[ConnectionStringName] [nvarchar](50) NOT NULL,
	[CreatedByUserId] [int] NOT NULL,
	[CreatedOnDate] [datetime] NOT NULL,
	[LastModifiedByUserId] [int] NOT NULL,
	[LastModifiedOnDate] [datetime] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}SavedQueries] PRIMARY KEY CLUSTERED 
(
	[QueryId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}SynonymsGroups]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}SynonymsGroups](
	[SynonymsGroupID] [int] IDENTITY(1,1) NOT NULL,
	[SynonymsTags] [nvarchar](max) NOT NULL,
	[PortalID] [int] NOT NULL,
	[CultureCode] [nvarchar](50) NOT NULL,
	[CreatedByUserID] [int] NOT NULL,
	[CreatedOnDate] [datetime] NOT NULL,
	[LastModifiedByUserID] [int] NOT NULL,
	[LastModifiedOnDate] [datetime] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}SynonymsGroups] PRIMARY KEY CLUSTERED 
(
	[SynonymsGroupID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}SystemMessages]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}SystemMessages](
	[MessageID] [int] IDENTITY(1,1) NOT NULL,
	[PortalID] [int] NULL,
	[MessageName] [nvarchar](50) NOT NULL,
	[MessageValue] [ntext] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}SystemMessages] PRIMARY KEY CLUSTERED 
(
	[MessageID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_{objectQualifier}SystemMessages] UNIQUE NONCLUSTERED 
(
	[MessageName] ASC,
	[PortalID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}TabAliasSkins]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}TabAliasSkins](
	[TabAliasSkinId] [int] IDENTITY(1,1) NOT NULL,
	[TabId] [int] NOT NULL,
	[PortalAliasId] [int] NOT NULL,
	[SkinSrc] [nvarchar](200) NOT NULL,
	[CreatedByUserId] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserId] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}TabAliasSkin] PRIMARY KEY CLUSTERED 
(
	[TabAliasSkinId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}TabModuleSettings]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}TabModuleSettings](
	[TabModuleID] [int] NOT NULL,
	[SettingName] [nvarchar](50) NOT NULL,
	[SettingValue] [nvarchar](max) NOT NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}TabModuleSettings] PRIMARY KEY CLUSTERED 
(
	[TabModuleID] ASC,
	[SettingName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}TabSettings]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}TabSettings](
	[TabID] [int] NOT NULL,
	[SettingName] [nvarchar](50) NOT NULL,
	[SettingValue] [nvarchar](max) NOT NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}TabSettings] PRIMARY KEY NONCLUSTERED 
(
	[TabID] ASC,
	[SettingName] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}TabUrls]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}TabUrls](
	[TabId] [int] NOT NULL,
	[SeqNum] [int] NOT NULL,
	[Url] [nvarchar](200) NOT NULL,
	[QueryString] [nvarchar](200) NULL,
	[HttpStatus] [nvarchar](50) NOT NULL,
	[CultureCode] [nvarchar](50) NULL,
	[IsSystem] [bit] NOT NULL,
	[PortalAliasId] [int] NULL,
	[PortalAliasUsage] [int] NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}TabRedirect] PRIMARY KEY CLUSTERED 
(
	[TabId] ASC,
	[SeqNum] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}TabVersionDetails]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}TabVersionDetails](
	[TabVersionDetailId] [int] IDENTITY(1,1) NOT NULL,
	[TabVersionId] [int] NOT NULL,
	[ModuleId] [int] NOT NULL,
	[ModuleVersion] [int] NOT NULL,
	[PaneName] [nvarchar](50) NOT NULL,
	[ModuleOrder] [int] NOT NULL,
	[Action] [int] NOT NULL,
	[CreatedByUserID] [int] NOT NULL,
	[CreatedOnDate] [datetime] NOT NULL,
	[LastModifiedByUserID] [int] NOT NULL,
	[LastModifiedOnDate] [datetime] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}TabVersionDetails] PRIMARY KEY CLUSTERED 
(
	[TabVersionDetailId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_{objectQualifier}TabVersionDetails_Unique(TabVersionId_ModuleId)] UNIQUE NONCLUSTERED 
(
	[TabVersionId] ASC,
	[ModuleId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}TabVersions]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}TabVersions](
	[TabVersionId] [int] IDENTITY(1,1) NOT NULL,
	[TabId] [int] NOT NULL,
	[Version] [int] NOT NULL,
	[TimeStamp] [datetime] NOT NULL,
	[IsPublished] [bit] NOT NULL,
	[CreatedByUserID] [int] NOT NULL,
	[CreatedOnDate] [datetime] NOT NULL,
	[LastModifiedByUserID] [int] NOT NULL,
	[LastModifiedOnDate] [datetime] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}TabVersions] PRIMARY KEY CLUSTERED 
(
	[TabVersionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_{objectQualifier}TabVersions] UNIQUE NONCLUSTERED 
(
	[TabId] ASC,
	[Version] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Taxonomy_ScopeTypes]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Taxonomy_ScopeTypes](
	[ScopeTypeID] [int] IDENTITY(1,1) NOT NULL,
	[ScopeType] [nvarchar](250) NULL,
 CONSTRAINT [PK_{objectQualifier}ScopeTypes] PRIMARY KEY CLUSTERED 
(
	[ScopeTypeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Taxonomy_Terms]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Taxonomy_Terms](
	[TermID] [int] IDENTITY(1,1) NOT NULL,
	[VocabularyID] [int] NOT NULL,
	[ParentTermID] [int] NULL,
	[Name] [nvarchar](250) NOT NULL,
	[Description] [nvarchar](2500) NULL,
	[Weight] [int] NOT NULL,
	[TermLeft] [int] NOT NULL,
	[TermRight] [int] NOT NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}Taxonomy_Terms] PRIMARY KEY CLUSTERED 
(
	[TermID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Taxonomy_Vocabularies]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Taxonomy_Vocabularies](
	[VocabularyID] [int] IDENTITY(1,1) NOT NULL,
	[VocabularyTypeID] [int] NOT NULL,
	[Name] [nvarchar](250) NOT NULL,
	[Description] [nvarchar](2500) NULL,
	[Weight] [int] NOT NULL,
	[ScopeID] [int] NULL,
	[ScopeTypeID] [int] NOT NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
	[IsSystem] [bit] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}Taxonomy_Vocabulary] PRIMARY KEY CLUSTERED 
(
	[VocabularyID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Taxonomy_VocabularyTypes]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Taxonomy_VocabularyTypes](
	[VocabularyTypeID] [int] IDENTITY(1,1) NOT NULL,
	[VocabularyType] [nvarchar](50) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}Taxonomy_VocabularyType] PRIMARY KEY CLUSTERED 
(
	[VocabularyTypeID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}UrlLog]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}UrlLog](
	[UrlLogID] [int] IDENTITY(1,1) NOT NULL,
	[UrlTrackingID] [int] NOT NULL,
	[ClickDate] [datetime] NOT NULL,
	[UserID] [int] NULL,
 CONSTRAINT [PK_{objectQualifier}UrlLog] PRIMARY KEY CLUSTERED 
(
	[UrlLogID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Urls]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Urls](
	[UrlID] [int] IDENTITY(1,1) NOT NULL,
	[PortalID] [int] NULL,
	[Url] [nvarchar](255) NOT NULL,
 CONSTRAINT [PK_{objectQualifier}Urls] PRIMARY KEY CLUSTERED 
(
	[UrlID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_{objectQualifier}Urls] UNIQUE NONCLUSTERED 
(
	[Url] ASC,
	[PortalID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}UrlTracking]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}UrlTracking](
	[UrlTrackingID] [int] IDENTITY(1,1) NOT NULL,
	[PortalID] [int] NULL,
	[Url] [nvarchar](255) NOT NULL,
	[UrlType] [char](1) NOT NULL,
	[Clicks] [int] NOT NULL,
	[LastClick] [datetime] NULL,
	[CreatedDate] [datetime] NOT NULL,
	[LogActivity] [bit] NOT NULL,
	[TrackClicks] [bit] NOT NULL,
	[ModuleId] [int] NULL,
	[NewWindow] [bit] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}UrlTracking] PRIMARY KEY CLUSTERED 
(
	[UrlTrackingID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_{objectQualifier}UrlTracking] UNIQUE NONCLUSTERED 
(
	[PortalID] ASC,
	[Url] ASC,
	[ModuleId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}UserAuthentication]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}UserAuthentication](
	[UserAuthenticationID] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [int] NOT NULL,
	[AuthenticationType] [nvarchar](100) NOT NULL,
	[AuthenticationToken] [nvarchar](1000) NOT NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}UserAuthentication] PRIMARY KEY CLUSTERED 
(
	[UserAuthenticationID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}UserRelationshipPreferences]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}UserRelationshipPreferences](
	[PreferenceID] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [int] NOT NULL,
	[RelationshipID] [int] NOT NULL,
	[DefaultResponse] [int] NOT NULL,
	[CreatedByUserID] [int] NOT NULL,
	[CreatedOnDate] [datetime] NOT NULL,
	[LastModifiedByUserID] [int] NOT NULL,
	[LastModifiedOnDate] [datetime] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}UserRelationshipPreferences] PRIMARY KEY CLUSTERED 
(
	[PreferenceID] ASC,
	[RelationshipID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}UserRelationships]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}UserRelationships](
	[UserRelationshipID] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [int] NOT NULL,
	[RelatedUserID] [int] NOT NULL,
	[RelationshipID] [int] NOT NULL,
	[Status] [int] NOT NULL,
	[CreatedByUserID] [int] NOT NULL,
	[CreatedOnDate] [datetime] NOT NULL,
	[LastModifiedByUserID] [int] NOT NULL,
	[LastModifiedOnDate] [datetime] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}UserRelationships] PRIMARY KEY CLUSTERED 
(
	[UserRelationshipID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}UsersOnline]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}UsersOnline](
	[UserID] [int] NOT NULL,
	[PortalID] [int] NOT NULL,
	[TabID] [int] NOT NULL,
	[CreationDate] [datetime] NOT NULL,
	[LastActiveDate] [datetime] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}UsersOnline] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC,
	[PortalID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}Version]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}Version](
	[VersionId] [int] IDENTITY(1,1) NOT NULL,
	[Major] [int] NOT NULL,
	[Minor] [int] NOT NULL,
	[Build] [int] NOT NULL,
	[Name] [nvarchar](50) NULL,
	[CreatedDate] [datetime] NOT NULL,
	[Increment] [int] NULL,
 CONSTRAINT [PK_{objectQualifier}Version] PRIMARY KEY CLUSTERED 
(
	[VersionId] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY],
 CONSTRAINT [IX_{objectQualifier}Version] UNIQUE NONCLUSTERED 
(
	[Major] ASC,
	[Minor] ASC,
	[Build] ASC,
	[Increment] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table {databaseOwner}[{objectQualifier}WebServers]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE {databaseOwner}[{objectQualifier}WebServers](
	[ServerID] [int] IDENTITY(1,1) NOT NULL,
	[ServerName] [nvarchar](50) NOT NULL,
	[CreatedDate] [datetime] NOT NULL,
	[LastActivityDate] [datetime] NOT NULL,
	[URL] [nvarchar](255) NULL,
	[IISAppName] [nvarchar](200) NOT NULL,
	[Enabled] [bit] NOT NULL,
	[ServerGroup] [nvarchar](200) NULL,
	[UniqueId] [nvarchar](200) NULL,
	[PingFailureCount] [int] NOT NULL,
 CONSTRAINT [PK_{objectQualifier}WebServers] PRIMARY KEY CLUSTERED 
(
	[ServerID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}AnonymousUsers] ADD  CONSTRAINT [DF_{objectQualifier}AnonymousUsers_CreationDate]  DEFAULT (getdate()) FOR [CreationDate]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}AnonymousUsers] ADD  CONSTRAINT [DF_{objectQualifier}AnonymousUsers_LastActiveDate]  DEFAULT (getdate()) FOR [LastActiveDate]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ApiTokens] ADD  DEFAULT ((0)) FOR [IsRevoked]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ApiTokens] ADD  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Authentication] ADD  DEFAULT ((-1)) FOR [PackageID]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Authentication] ADD  DEFAULT ((0)) FOR [IsEnabled]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentItems] ADD  CONSTRAINT [DF_{objectQualifier}ContentItems_Indexed]  DEFAULT ((0)) FOR [Indexed]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflowLogs] ADD  DEFAULT ((-1)) FOR [Type]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflows] ADD  CONSTRAINT [DF_ContentWorkflows_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflows] ADD  CONSTRAINT [DF_ContentWorkflows_StartAfterCreating]  DEFAULT ((1)) FOR [StartAfterCreating]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflows] ADD  CONSTRAINT [DF_ContentWorkflows_StartAfterEditing]  DEFAULT ((1)) FOR [StartAfterEditing]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflows] ADD  CONSTRAINT [DF_ContentWorkflows_DispositionEnabled]  DEFAULT ((0)) FOR [DispositionEnabled]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflows] ADD  DEFAULT ((0)) FOR [IsSystem]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflows] ADD  DEFAULT (N'') FOR [WorkflowKey]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflowStates] ADD  CONSTRAINT [DF_ContentWorkflowStates_IsActive]  DEFAULT ((1)) FOR [IsActive]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflowStates] ADD  CONSTRAINT [DF_ContentWorkflowStates_SendEmail]  DEFAULT ((0)) FOR [SendEmail]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflowStates] ADD  CONSTRAINT [DF_ContentWorkflowStates_SendMessage]  DEFAULT ((0)) FOR [SendMessage]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflowStates] ADD  CONSTRAINT [DF_ContentWorkflowStates_IsDisposalState]  DEFAULT ((0)) FOR [IsDisposalState]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflowStates] ADD  CONSTRAINT [DF_ContentWorkflowStates_OnCompleteMessageSubject]  DEFAULT (N'') FOR [OnCompleteMessageSubject]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflowStates] ADD  CONSTRAINT [DF_ContentWorkflowStates_OnCompleteMessageBody]  DEFAULT (N'') FOR [OnCompleteMessageBody]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflowStates] ADD  CONSTRAINT [DF_ContentWorkflowStates_OnDiscardMessageSubject]  DEFAULT (N'') FOR [OnDiscardMessageSubject]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflowStates] ADD  CONSTRAINT [DF_ContentWorkflowStates_OnDiscardMessageBody]  DEFAULT (N'') FOR [OnDiscardMessageBody]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflowStates] ADD  DEFAULT ((0)) FOR [IsSystem]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflowStates] ADD  DEFAULT ((1)) FOR [SendNotification]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflowStates] ADD  DEFAULT ((1)) FOR [SendNotificationToAdministrators]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] ADD  DEFAULT ((0)) FOR [Read]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] ADD  DEFAULT ((0)) FOR [Archived]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] ADD  DEFAULT ((0)) FOR [EmailSent]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] ADD  DEFAULT ((0)) FOR [SendToast]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypes] ADD  DEFAULT ((0)) FOR [IsTask]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}DesktopModules] ADD  CONSTRAINT [DF_{objectQualifier}DesktopModules_SupportedFeatures]  DEFAULT ((0)) FOR [SupportedFeatures]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}DesktopModules] ADD  CONSTRAINT [DF_{objectQualifier}DesktopModules_PackageID]  DEFAULT ((-1)) FOR [PackageID]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}DesktopModules] ADD  CONSTRAINT [DF_{objectQualifier}DesktopModules_ContentItemId]  DEFAULT ((-1)) FOR [ContentItemId]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}DesktopModules] ADD  CONSTRAINT [DF_{objectQualifier}DesktopModules_Shareable]  DEFAULT ((0)) FOR [Shareable]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}EventQueue] ADD  CONSTRAINT [DF_{objectQualifier}EventQueue_IsComplete]  DEFAULT ((0)) FOR [IsComplete]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Files] ADD  CONSTRAINT [DF_{objectQualifier}Files_UniqueId]  DEFAULT (newid()) FOR [UniqueId]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Files] ADD  CONSTRAINT [DF_{objectQualifier}Files_VersionGuid]  DEFAULT (newid()) FOR [VersionGuid]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Files] ADD  DEFAULT (getdate()) FOR [LastModificationTime]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Files] ADD  DEFAULT (getdate()) FOR [StartDate]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Files] ADD  DEFAULT ((0)) FOR [EnablePublishPeriod]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Files] ADD  DEFAULT ((1)) FOR [PublishedVersion]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Files] ADD  DEFAULT ((1)) FOR [HasBeenPublished]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Folders] ADD  CONSTRAINT [DF_{objectQualifier}Folders_StorageLocation]  DEFAULT ((0)) FOR [StorageLocation]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Folders] ADD  CONSTRAINT [DF_{objectQualifier}Folders_IsProtected]  DEFAULT ((0)) FOR [IsProtected]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Folders] ADD  CONSTRAINT [DF_{objectQualifier}Folders_IsCached]  DEFAULT ((0)) FOR [IsCached]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Folders] ADD  CONSTRAINT [DF_{objectQualifier}Folders_UniqueId]  DEFAULT (newid()) FOR [UniqueId]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Folders] ADD  CONSTRAINT [DF_{objectQualifier}Folders_VersionGuid]  DEFAULT (newid()) FOR [VersionGuid]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Folders] ADD  DEFAULT ((0)) FOR [IsVersioned]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}HostSettings] ADD  CONSTRAINT [DF_{objectQualifier}HostSettings_Secure]  DEFAULT ((0)) FOR [SettingIsSecure]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal] ADD  CONSTRAINT [DF_{objectQualifier}Journal_ProfileId]  DEFAULT ((-1)) FOR [ProfileId]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal] ADD  CONSTRAINT [DF_{objectQualifier}Journal_GroupId]  DEFAULT ((-1)) FOR [GroupId]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal] ADD  CONSTRAINT [DF_{objectQualifier}Journal_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal] ADD  CONSTRAINT [DF_{objectQualifier}Journal_CommentsDisabled]  DEFAULT ((0)) FOR [CommentsDisabled]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal] ADD  CONSTRAINT [DF_{objectQualifier}Journal_CommentsHidden]  DEFAULT ((0)) FOR [CommentsHidden]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] ADD  CONSTRAINT [DF_{objectQualifier}JournalTypes_PortalId]  DEFAULT ((-1)) FOR [PortalId]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] ADD  CONSTRAINT [DF_{objectQualifier}JournalTypes_IsEnabled]  DEFAULT ((1)) FOR [IsEnabled]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] ADD  CONSTRAINT [DF_{objectQualifier}JournalTypes_AppliesToProfile]  DEFAULT ((1)) FOR [AppliesToProfile]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] ADD  CONSTRAINT [DF_{objectQualifier}JournalTypes_AppliesToGroup]  DEFAULT ((1)) FOR [AppliesToGroup]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] ADD  CONSTRAINT [DF_{objectQualifier}JournalTypes_AppliesToStream]  DEFAULT ((1)) FOR [AppliesToStream]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] ADD  CONSTRAINT [DF_{objectQualifier}JournalTypes_SupportsNotify]  DEFAULT ((0)) FOR [SupportsNotify]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Types] ADD  CONSTRAINT [DF_{objectQualifier}Journal_Types_EnableComments]  DEFAULT ((1)) FOR [EnableComments]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Lists] ADD  CONSTRAINT [DF_{objectQualifier}Lists_ParentID]  DEFAULT ((0)) FOR [ParentID]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Lists] ADD  CONSTRAINT [DF_{objectQualifier}Lists_Level]  DEFAULT ((0)) FOR [Level]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Lists] ADD  CONSTRAINT [DF_{objectQualifier}Lists_SortOrder]  DEFAULT ((0)) FOR [SortOrder]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Lists] ADD  CONSTRAINT [DF_{objectQualifier}Lists_DefinitionID]  DEFAULT ((0)) FOR [DefinitionID]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Lists] ADD  CONSTRAINT [DF_{objectQualifier}Lists_PortalID]  DEFAULT ((-1)) FOR [PortalID]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Lists] ADD  CONSTRAINT [DF_{objectQualifier}Lists_SystemList]  DEFAULT ((0)) FOR [SystemList]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Mobile_PreviewProfiles] ADD  CONSTRAINT [DF_{objectQualifier}Mobile_PreviewProfiles_SortOrder]  DEFAULT ((0)) FOR [SortOrder]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Mobile_PreviewProfiles] ADD  CONSTRAINT [DF_{objectQualifier}Mobile_PreviewProfiles_CreatedOnDate]  DEFAULT (getdate()) FOR [CreatedOnDate]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Mobile_PreviewProfiles] ADD  CONSTRAINT [DF_{objectQualifier}Mobile_PreviewProfiles_LastModifiedOnDate]  DEFAULT (getdate()) FOR [LastModifiedOnDate]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Mobile_Redirections] ADD  CONSTRAINT [DF_{objectQualifier}Mobile_Redirections_SortOrder]  DEFAULT ((0)) FOR [SortOrder]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Mobile_Redirections] ADD  CONSTRAINT [DF_{objectQualifier}Mobile_Redirections_CreatedOnDate]  DEFAULT (getdate()) FOR [CreatedOnDate]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Mobile_Redirections] ADD  CONSTRAINT [DF_{objectQualifier}Mobile_Redirections_LastModifiedOnDate]  DEFAULT (getdate()) FOR [LastModifiedOnDate]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ModuleControls] ADD  CONSTRAINT [DF_{objectQualifier}ModuleControls_SupportsPartialRendering]  DEFAULT ((0)) FOR [SupportsPartialRendering]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ModuleControls] ADD  CONSTRAINT [DF_{objectQualifier}ModuleControls_SupportsPopUps]  DEFAULT ((0)) FOR [SupportsPopUps]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ModuleDefinitions] ADD  CONSTRAINT [DF_{objectQualifier}ModuleDefinitions_DefaultCacheTime]  DEFAULT ((0)) FOR [DefaultCacheTime]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Modules] ADD  CONSTRAINT [DF_{objectQualifier}Modules_AllTabs]  DEFAULT ((0)) FOR [AllTabs]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Modules] ADD  CONSTRAINT [DF_{objectQualifier}Modules_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Modules] ADD  CONSTRAINT [DF_{objectQualifier}Modules_CreatedOnDate]  DEFAULT (getdate()) FOR [CreatedOnDate]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Modules] ADD  CONSTRAINT [DF_{objectQualifier}Modules_LastModifiedOnDate]  DEFAULT (getdate()) FOR [LastModifiedOnDate]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Modules] ADD  CONSTRAINT [DF_{objectQualifier}Modules_IsShareable]  DEFAULT ((1)) FOR [IsShareable]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Modules] ADD  CONSTRAINT [DF_{objectQualifier}Modules_IsShareableViewOnly]  DEFAULT ((1)) FOR [IsShareableViewOnly]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Packages] ADD  CONSTRAINT [DF_{objectQualifier}Packages_IsSystemPackage]  DEFAULT ((0)) FOR [IsSystemPackage]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}PackageTypes] ADD  DEFAULT ((0)) FOR [SupportsSideBySideInstallation]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Permission] ADD  CONSTRAINT [DF_{objectQualifier}Permission_ViewOrder]  DEFAULT ((9999)) FOR [ViewOrder]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}PortalAlias] ADD  CONSTRAINT [DF_{objectQualifier}PortalAlias_IsPrimary]  DEFAULT ((0)) FOR [IsPrimary]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}PortalLanguages] ADD  CONSTRAINT [DF_{objectQualifier}PortalLanguages_IsPublished]  DEFAULT ((0)) FOR [IsPublished]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Portals] ADD  CONSTRAINT [DF_{objectQualifier}Portals_UserRegistration]  DEFAULT ((0)) FOR [UserRegistration]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Portals] ADD  CONSTRAINT [DF_{objectQualifier}Portals_BannerAdvertising]  DEFAULT ((0)) FOR [BannerAdvertising]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Portals] ADD  CONSTRAINT [DF_{objectQualifier}Portals_HostFee]  DEFAULT ((0)) FOR [HostFee]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Portals] ADD  CONSTRAINT [DF_{objectQualifier}Portals_HostSpace]  DEFAULT ((0)) FOR [HostSpace]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Portals] ADD  CONSTRAINT [DF_{objectQualifier}Portals_GUID]  DEFAULT (newid()) FOR [GUID]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Portals] ADD  CONSTRAINT [DF_{objectQualifier}Portals_DefaultLanguage]  DEFAULT ('en-US') FOR [DefaultLanguage]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Portals] ADD  CONSTRAINT [DF_{objectQualifier}Portals_TimezoneOffset]  DEFAULT ((-8)) FOR [TimezoneOffset]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Portals] ADD  CONSTRAINT [DF_{objectQualifier}Portals_HomeDirectory]  DEFAULT ('') FOR [HomeDirectory]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Portals] ADD  CONSTRAINT [DF_{objectQualifier}Portals_PageQuota]  DEFAULT ((0)) FOR [PageQuota]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Portals] ADD  CONSTRAINT [DF_{objectQualifier}Portals_UserQuota]  DEFAULT ((0)) FOR [UserQuota]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}PortalSettings] ADD  DEFAULT ((0)) FOR [IsSecure]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ProfilePropertyDefinition] ADD  CONSTRAINT [DF_{objectQualifier}ProfilePropertyDefinition_Length]  DEFAULT ((0)) FOR [Length]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ProfilePropertyDefinition] ADD  CONSTRAINT [DF_{objectQualifier}ProfilePropertyDefinition_ReadOnly]  DEFAULT ((0)) FOR [ReadOnly]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}RedirectMessages] ADD  CONSTRAINT [Guid_Default]  DEFAULT (newid()) FOR [MessageId]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}RedirectMessages] ADD  DEFAULT (getdate()) FOR [CreatedOnDate]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Relationships] ADD  CONSTRAINT [DF_{objectQualifier}Relationships_CreatedOnDate]  DEFAULT (getdate()) FOR [CreatedOnDate]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Relationships] ADD  CONSTRAINT [DF_{objectQualifier}Relationships_LastModifiedOnDate]  DEFAULT (getdate()) FOR [LastModifiedOnDate]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}RelationshipTypes] ADD  CONSTRAINT [DF_{objectQualifier}RelationshipTypes_CreatedOnDate]  DEFAULT (getdate()) FOR [CreatedOnDate]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}RelationshipTypes] ADD  CONSTRAINT [DF_{objectQualifier}RelationshipTypes_LastModifiedOnDate]  DEFAULT (getdate()) FOR [LastModifiedOnDate]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Roles] ADD  CONSTRAINT [DF_{objectQualifier}Roles_ServiceFee]  DEFAULT ((0)) FOR [ServiceFee]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Roles] ADD  CONSTRAINT [DF_{objectQualifier}Roles_IsPublic]  DEFAULT ((0)) FOR [IsPublic]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Roles] ADD  CONSTRAINT [DF_{objectQualifier}Roles_AutoAssignment]  DEFAULT ((0)) FOR [AutoAssignment]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Roles] ADD  CONSTRAINT [DF_{objectQualifier}Roles_Status]  DEFAULT ((1)) FOR [Status]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Roles] ADD  CONSTRAINT [DF_{objectQualifier}Roles_SecurityMode]  DEFAULT ((0)) FOR [SecurityMode]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Roles] ADD  CONSTRAINT [DF_{objectQualifier}Roles_IsSystemRole]  DEFAULT ((0)) FOR [IsSystemRole]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}RoleSettings] ADD  CONSTRAINT [DF_{objectQualifier}RoleSettings_CreatedOnDate]  DEFAULT (getdate()) FOR [CreatedOnDate]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}RoleSettings] ADD  CONSTRAINT [DF_{objectQualifier}RoleSettings_LastModifiedOnDate]  DEFAULT (getdate()) FOR [LastModifiedOnDate]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}SearchDeletedItems] ADD  DEFAULT (getutcdate()) FOR [DateCreated]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}SearchTypes] ADD  CONSTRAINT [DF_{objectQualifier}SearchTypes_IsPrivate]  DEFAULT ((0)) FOR [IsPrivate]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}SkinControls] ADD  CONSTRAINT [DF_{objectQualifier}SkinControls_PackageID]  DEFAULT ((-1)) FOR [PackageID]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}SkinControls] ADD  CONSTRAINT [DF_{objectQualifier}SkinControls_SupportsPartialRendering]  DEFAULT ((0)) FOR [SupportsPartialRendering]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabModules] ADD  CONSTRAINT [DF_{objectQualifier}TabModules_DisplayTitle]  DEFAULT ((1)) FOR [DisplayTitle]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabModules] ADD  CONSTRAINT [DF_{objectQualifier}TabModules_DisplayPrint]  DEFAULT ((1)) FOR [DisplayPrint]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabModules] ADD  CONSTRAINT [DF_{objectQualifier}TabModules_DisplaySyndicate]  DEFAULT ((1)) FOR [DisplaySyndicate]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabModules] ADD  CONSTRAINT [DF_{objectQualifier}TabModules_CreatedOnDate]  DEFAULT (getdate()) FOR [CreatedOnDate]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabModules] ADD  CONSTRAINT [DF_{objectQualifier}TabModules_LastModifiedOnDate]  DEFAULT (getdate()) FOR [LastModifiedOnDate]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabModules] ADD  CONSTRAINT [DF_{objectQualifier}TabModules_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabModules] ADD  CONSTRAINT [DF_{objectQualifier}TabModules_Guid]  DEFAULT (newid()) FOR [UniqueId]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabModules] ADD  CONSTRAINT [DF_{objectQualifier}TabModules_VersionGuid]  DEFAULT (newid()) FOR [VersionGuid]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabModules] ADD  CONSTRAINT [DF_{objectQualifier}TabModules_LocalizedVersionGuid]  DEFAULT (newid()) FOR [LocalizedVersionGuid]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Tabs] ADD  CONSTRAINT [DF_{objectQualifier}Tabs_TabOrder]  DEFAULT ((0)) FOR [TabOrder]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Tabs] ADD  CONSTRAINT [DF_{objectQualifier}Tabs_IsVisible]  DEFAULT ((1)) FOR [IsVisible]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Tabs] ADD  CONSTRAINT [DF_{objectQualifier}Tabs_DisableLink]  DEFAULT ((0)) FOR [DisableLink]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Tabs] ADD  CONSTRAINT [DF_{objectQualifier}Tabs_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Tabs] ADD  CONSTRAINT [DF_{objectQualifier}Tabs_IsSecure]  DEFAULT ((0)) FOR [IsSecure]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Tabs] ADD  CONSTRAINT [DF_{objectQualifier}Tabs_PermanentRedirect]  DEFAULT ((0)) FOR [PermanentRedirect]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Tabs] ADD  CONSTRAINT [DF_{objectQualifier}Tabs_SiteMapPriority]  DEFAULT ((0.5)) FOR [SiteMapPriority]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Tabs] ADD  CONSTRAINT [DF_{objectQualifier}Tabs_Guid]  DEFAULT (newid()) FOR [UniqueId]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Tabs] ADD  CONSTRAINT [DF_{objectQualifier}Tabs_VersionGuid]  DEFAULT (newid()) FOR [VersionGuid]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Tabs] ADD  CONSTRAINT [DF_{objectQualifier}Tabs_LocalizedVersionGuid]  DEFAULT (newid()) FOR [LocalizedVersionGuid]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Tabs] ADD  DEFAULT ((0)) FOR [Level]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Tabs] ADD  DEFAULT ('') FOR [TabPath]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Tabs] ADD  DEFAULT ((0)) FOR [HasBeenPublished]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Tabs] ADD  DEFAULT ((0)) FOR [IsSystem]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabUrls] ADD  CONSTRAINT [DF_{objectQualifier}TabUrls_IsSystem]  DEFAULT ((0)) FOR [IsSystem]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Taxonomy_Terms] ADD  CONSTRAINT [DF_{objectQualifier}Taxonomy_Terms_Weight]  DEFAULT ((0)) FOR [Weight]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Taxonomy_Terms] ADD  CONSTRAINT [DF_{objectQualifier}Taxonomy_Terms_TermLeft]  DEFAULT ((0)) FOR [TermLeft]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Taxonomy_Terms] ADD  CONSTRAINT [DF_{objectQualifier}Taxonomy_Terms_TermRight]  DEFAULT ((0)) FOR [TermRight]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Taxonomy_Vocabularies] ADD  CONSTRAINT [DF_{objectQualifier}Taxonomy_Vocabularies_Weight]  DEFAULT ((0)) FOR [Weight]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Taxonomy_Vocabularies] ADD  CONSTRAINT [DF_{objectQualifier}Taxonomy_Vocabularies_IsSystem]  DEFAULT ((0)) FOR [IsSystem]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UrlTracking] ADD  CONSTRAINT [DF_{objectQualifier}UrlTracking_TrackClicks]  DEFAULT ((1)) FOR [TrackClicks]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UrlTracking] ADD  CONSTRAINT [DF_{objectQualifier}UrlTracking_NewWindow]  DEFAULT ((0)) FOR [NewWindow]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserPortals] ADD  CONSTRAINT [DF_{objectQualifier}UserPortals_CreatedDate]  DEFAULT (getdate()) FOR [CreatedDate]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserPortals] ADD  CONSTRAINT [DF_{objectQualifier}UserPortals_Authorised]  DEFAULT ((1)) FOR [Authorised]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserPortals] ADD  CONSTRAINT [DF_{objectQualifier}UserPortals_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserPortals] ADD  CONSTRAINT [DF_{objectQualifier}UserPortals_RefreshRoles]  DEFAULT ((0)) FOR [RefreshRoles]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserPortals] ADD  DEFAULT ((0)) FOR [HasAgreedToTerms]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserPortals] ADD  DEFAULT ((0)) FOR [RequestsRemoval]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserProfile] ADD  DEFAULT ((0)) FOR [Visibility]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserRelationshipPreferences] ADD  CONSTRAINT [DF_{objectQualifier}UserRelationshipPreferences_CreatedOnDate]  DEFAULT (getdate()) FOR [CreatedOnDate]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserRelationshipPreferences] ADD  CONSTRAINT [DF_{objectQualifier}UserRelationshipPreferences_LastModifiedOnDate]  DEFAULT (getdate()) FOR [LastModifiedOnDate]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserRelationships] ADD  CONSTRAINT [DF_{objectQualifier}UserRelationships_CreatedOnDate]  DEFAULT (getdate()) FOR [CreatedOnDate]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserRelationships] ADD  CONSTRAINT [DF_{objectQualifier}UserRelationships_LastModifiedOnDate]  DEFAULT (getdate()) FOR [LastModifiedOnDate]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserRoles] ADD  CONSTRAINT [DF_{objectQualifier}UserRoles_Status]  DEFAULT ((1)) FOR [Status]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserRoles] ADD  CONSTRAINT [DF_{objectQualifier}UserRoles_IsOwner]  DEFAULT ((0)) FOR [IsOwner]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Users] ADD  CONSTRAINT [DF_{objectQualifier}Users_IsSuperUser]  DEFAULT ((0)) FOR [IsSuperUser]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Users] ADD  CONSTRAINT [DF_{objectQualifier}Users_DisplayName]  DEFAULT ('') FOR [DisplayName]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Users] ADD  CONSTRAINT [DF_{objectQualifier}Users_UpdatePassword]  DEFAULT ((0)) FOR [UpdatePassword]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Users] ADD  CONSTRAINT [DF_{objectQualifier}Users_IsDeleted]  DEFAULT ((0)) FOR [IsDeleted]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UsersOnline] ADD  DEFAULT (getdate()) FOR [CreationDate]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UsersOnline] ADD  DEFAULT (getdate()) FOR [LastActiveDate]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}WebServers] ADD  CONSTRAINT [DF_{objectQualifier}WebServers_IISAppName]  DEFAULT ('') FOR [IISAppName]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}WebServers] ADD  CONSTRAINT [DF_{objectQualifier}WebServers_Enabled]  DEFAULT ((1)) FOR [Enabled]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}WebServers] ADD  DEFAULT ((0)) FOR [PingFailureCount]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}AnonymousUsers]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}AnonymousUsers_{objectQualifier}Portals] FOREIGN KEY([PortalID])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}AnonymousUsers] CHECK CONSTRAINT [FK_{objectQualifier}AnonymousUsers_{objectQualifier}Portals]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ApiTokenKeys]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}ApiTokenKeys_ApiTokens] FOREIGN KEY([ApiTokenId])
REFERENCES {databaseOwner}[{objectQualifier}ApiTokens] ([ApiTokenId])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ApiTokenKeys] CHECK CONSTRAINT [FK_{objectQualifier}ApiTokenKeys_ApiTokens]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Assemblies]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}PackageAssemblies_PackageAssemblies] FOREIGN KEY([PackageID])
REFERENCES {databaseOwner}[{objectQualifier}Packages] ([PackageID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Assemblies] CHECK CONSTRAINT [FK_{objectQualifier}PackageAssemblies_PackageAssemblies]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Authentication]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}Authentication_{objectQualifier}Packages] FOREIGN KEY([PackageID])
REFERENCES {databaseOwner}[{objectQualifier}Packages] ([PackageID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Authentication] CHECK CONSTRAINT [FK_{objectQualifier}Authentication_{objectQualifier}Packages]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentItems]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}ContentItems_{objectQualifier}ContentTypes] FOREIGN KEY([ContentTypeID])
REFERENCES {databaseOwner}[{objectQualifier}ContentTypes] ([ContentTypeID])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentItems] CHECK CONSTRAINT [FK_{objectQualifier}ContentItems_{objectQualifier}ContentTypes]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentItems]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}ContentItems_{objectQualifier}ContentWorkflowStates] FOREIGN KEY([StateID])
REFERENCES {databaseOwner}[{objectQualifier}ContentWorkflowStates] ([StateID])
ON DELETE SET NULL
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentItems] CHECK CONSTRAINT [FK_{objectQualifier}ContentItems_{objectQualifier}ContentWorkflowStates]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentItems_MetaData]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}ContentItems_MetaData_{objectQualifier}ContentItems] FOREIGN KEY([ContentItemID])
REFERENCES {databaseOwner}[{objectQualifier}ContentItems] ([ContentItemID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentItems_MetaData] CHECK CONSTRAINT [FK_{objectQualifier}ContentItems_MetaData_{objectQualifier}ContentItems]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentItems_MetaData]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}ContentItems_MetaData{objectQualifier}MetaData] FOREIGN KEY([MetaDataID])
REFERENCES {databaseOwner}[{objectQualifier}MetaData] ([MetaDataID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentItems_MetaData] CHECK CONSTRAINT [FK_{objectQualifier}ContentItems_MetaData{objectQualifier}MetaData]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentItems_Tags]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}ContentItems_Tags_{objectQualifier}ContentItems] FOREIGN KEY([ContentItemID])
REFERENCES {databaseOwner}[{objectQualifier}ContentItems] ([ContentItemID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentItems_Tags] CHECK CONSTRAINT [FK_{objectQualifier}ContentItems_Tags_{objectQualifier}ContentItems]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentItems_Tags]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}ContentItems_Tags_{objectQualifier}Taxonomy_Terms] FOREIGN KEY([TermID])
REFERENCES {databaseOwner}[{objectQualifier}Taxonomy_Terms] ([TermID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentItems_Tags] CHECK CONSTRAINT [FK_{objectQualifier}ContentItems_Tags_{objectQualifier}Taxonomy_Terms]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflowActions]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}ContentWorkflowActions_{objectQualifier}ContentTypes] FOREIGN KEY([ContentTypeId])
REFERENCES {databaseOwner}[{objectQualifier}ContentTypes] ([ContentTypeID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflowActions] CHECK CONSTRAINT [FK_{objectQualifier}ContentWorkflowActions_{objectQualifier}ContentTypes]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflowLogs]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}ContentWorkflowLogs_{objectQualifier}ContentItems] FOREIGN KEY([ContentItemID])
REFERENCES {databaseOwner}[{objectQualifier}ContentItems] ([ContentItemID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflowLogs] CHECK CONSTRAINT [FK_{objectQualifier}ContentWorkflowLogs_{objectQualifier}ContentItems]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflowLogs]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}ContentWorkflowLogs_{objectQualifier}ContentWorkflows] FOREIGN KEY([WorkflowID])
REFERENCES {databaseOwner}[{objectQualifier}ContentWorkflows] ([WorkflowID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflowLogs] CHECK CONSTRAINT [FK_{objectQualifier}ContentWorkflowLogs_{objectQualifier}ContentWorkflows]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflowSources]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}ContentWorkflowSources_{objectQualifier}ContentWorkflows] FOREIGN KEY([WorkflowID])
REFERENCES {databaseOwner}[{objectQualifier}ContentWorkflows] ([WorkflowID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflowSources] CHECK CONSTRAINT [FK_{objectQualifier}ContentWorkflowSources_{objectQualifier}ContentWorkflows]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflowStatePermission]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}ContentWorkflowStatePermission_{objectQualifier}ContentWorkflowStates] FOREIGN KEY([StateID])
REFERENCES {databaseOwner}[{objectQualifier}ContentWorkflowStates] ([StateID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflowStatePermission] CHECK CONSTRAINT [FK_{objectQualifier}ContentWorkflowStatePermission_{objectQualifier}ContentWorkflowStates]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflowStatePermission]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}ContentWorkflowStatePermission_{objectQualifier}Permission] FOREIGN KEY([PermissionID])
REFERENCES {databaseOwner}[{objectQualifier}Permission] ([PermissionID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflowStatePermission] CHECK CONSTRAINT [FK_{objectQualifier}ContentWorkflowStatePermission_{objectQualifier}Permission]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflowStatePermission]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}ContentWorkflowStatePermission_{objectQualifier}Users] FOREIGN KEY([UserID])
REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflowStatePermission] CHECK CONSTRAINT [FK_{objectQualifier}ContentWorkflowStatePermission_{objectQualifier}Users]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflowStates]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}ContentWorkflowStates_{objectQualifier}ContentWorkflows] FOREIGN KEY([WorkflowID])
REFERENCES {databaseOwner}[{objectQualifier}ContentWorkflows] ([WorkflowID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ContentWorkflowStates] CHECK CONSTRAINT [FK_{objectQualifier}ContentWorkflowStates_{objectQualifier}ContentWorkflows]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}CoreMessaging_MessageAttachments]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}CoreMessaging_MessageAttachments_{objectQualifier}CoreMessaging_Messages] FOREIGN KEY([MessageID])
REFERENCES {databaseOwner}[{objectQualifier}CoreMessaging_Messages] ([MessageID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}CoreMessaging_MessageAttachments] CHECK CONSTRAINT [FK_{objectQualifier}CoreMessaging_MessageAttachments_{objectQualifier}CoreMessaging_Messages]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}CoreMessaging_MessageRecipients_{objectQualifier}CoreMessaging_Messages] FOREIGN KEY([MessageID])
REFERENCES {databaseOwner}[{objectQualifier}CoreMessaging_Messages] ([MessageID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] CHECK CONSTRAINT [FK_{objectQualifier}CoreMessaging_MessageRecipients_{objectQualifier}CoreMessaging_Messages]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}CoreMessaging_Messages]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}CoreMessaging_Messages_{objectQualifier}CoreMessaging_NotificationTypes] FOREIGN KEY([NotificationTypeID])
REFERENCES {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypes] ([NotificationTypeID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}CoreMessaging_Messages] CHECK CONSTRAINT [FK_{objectQualifier}CoreMessaging_Messages_{objectQualifier}CoreMessaging_NotificationTypes]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypeActions]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}CoreMessaging_NotificationTypeActions_{objectQualifier}CoreMessaging_NotificationTypes] FOREIGN KEY([NotificationTypeID])
REFERENCES {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypes] ([NotificationTypeID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypeActions] CHECK CONSTRAINT [FK_{objectQualifier}CoreMessaging_NotificationTypeActions_{objectQualifier}CoreMessaging_NotificationTypes]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypes]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}CoreMessaging_NotificationTypes_{objectQualifier}DesktopModules] FOREIGN KEY([DesktopModuleID])
REFERENCES {databaseOwner}[{objectQualifier}DesktopModules] ([DesktopModuleID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypes] CHECK CONSTRAINT [FK_{objectQualifier}CoreMessaging_NotificationTypes_{objectQualifier}DesktopModules]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}CoreMessaging_Subscriptions]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}CoreMessaging_Subscriptions_{objectQualifier}Modules] FOREIGN KEY([ModuleId])
REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}CoreMessaging_Subscriptions] CHECK CONSTRAINT [FK_{objectQualifier}CoreMessaging_Subscriptions_{objectQualifier}Modules]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}CoreMessaging_Subscriptions]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}CoreMessaging_Subscriptions_{objectQualifier}Portals] FOREIGN KEY([PortalId])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}CoreMessaging_Subscriptions] CHECK CONSTRAINT [FK_{objectQualifier}CoreMessaging_Subscriptions_{objectQualifier}Portals]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}CoreMessaging_Subscriptions]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}CoreMessaging_Subscriptions_{objectQualifier}Subscriptions_Type] FOREIGN KEY([SubscriptionTypeId])
REFERENCES {databaseOwner}[{objectQualifier}CoreMessaging_SubscriptionTypes] ([SubscriptionTypeId])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}CoreMessaging_Subscriptions] CHECK CONSTRAINT [FK_{objectQualifier}CoreMessaging_Subscriptions_{objectQualifier}Subscriptions_Type]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}CoreMessaging_Subscriptions]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}CoreMessaging_Subscriptions_{objectQualifier}Users] FOREIGN KEY([UserId])
REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}CoreMessaging_Subscriptions] CHECK CONSTRAINT [FK_{objectQualifier}CoreMessaging_Subscriptions_{objectQualifier}Users]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}DesktopModulePermission]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}DesktopModulePermission_{objectQualifier}Permission] FOREIGN KEY([PermissionID])
REFERENCES {databaseOwner}[{objectQualifier}Permission] ([PermissionID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}DesktopModulePermission] CHECK CONSTRAINT [FK_{objectQualifier}DesktopModulePermission_{objectQualifier}Permission]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}DesktopModulePermission]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}DesktopModulePermission_{objectQualifier}PortalDesktopModules] FOREIGN KEY([PortalDesktopModuleID])
REFERENCES {databaseOwner}[{objectQualifier}PortalDesktopModules] ([PortalDesktopModuleID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}DesktopModulePermission] CHECK CONSTRAINT [FK_{objectQualifier}DesktopModulePermission_{objectQualifier}PortalDesktopModules]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}DesktopModulePermission]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}DesktopModulePermission_{objectQualifier}Roles] FOREIGN KEY([RoleID])
REFERENCES {databaseOwner}[{objectQualifier}Roles] ([RoleID])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}DesktopModulePermission] CHECK CONSTRAINT [FK_{objectQualifier}DesktopModulePermission_{objectQualifier}Roles]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}DesktopModulePermission]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}DesktopModulePermission_{objectQualifier}Users] FOREIGN KEY([UserID])
REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}DesktopModulePermission] CHECK CONSTRAINT [FK_{objectQualifier}DesktopModulePermission_{objectQualifier}Users]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}DesktopModules]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}DesktopModules_{objectQualifier}Packages] FOREIGN KEY([PackageID])
REFERENCES {databaseOwner}[{objectQualifier}Packages] ([PackageID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}DesktopModules] CHECK CONSTRAINT [FK_{objectQualifier}DesktopModules_{objectQualifier}Packages]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}EventLog]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}EventLog_{objectQualifier}EventLogConfig] FOREIGN KEY([LogConfigID])
REFERENCES {databaseOwner}[{objectQualifier}EventLogConfig] ([ID])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}EventLog] CHECK CONSTRAINT [FK_{objectQualifier}EventLog_{objectQualifier}EventLogConfig]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}EventLog]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}EventLog_{objectQualifier}EventLogTypes] FOREIGN KEY([LogTypeKey])
REFERENCES {databaseOwner}[{objectQualifier}EventLogTypes] ([LogTypeKey])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}EventLog] CHECK CONSTRAINT [FK_{objectQualifier}EventLog_{objectQualifier}EventLogTypes]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}EventLogConfig]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}EventLogConfig_{objectQualifier}EventLogTypes] FOREIGN KEY([LogTypeKey])
REFERENCES {databaseOwner}[{objectQualifier}EventLogTypes] ([LogTypeKey])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}EventLogConfig] CHECK CONSTRAINT [FK_{objectQualifier}EventLogConfig_{objectQualifier}EventLogTypes]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ExceptionEvents]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}ExceptionEvents_LogEventId] FOREIGN KEY([LogEventID])
REFERENCES {databaseOwner}[{objectQualifier}EventLog] ([LogEventID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ExceptionEvents] CHECK CONSTRAINT [FK_{objectQualifier}ExceptionEvents_LogEventId]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Files]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}Files_{objectQualifier}ContentItems] FOREIGN KEY([ContentItemID])
REFERENCES {databaseOwner}[{objectQualifier}ContentItems] ([ContentItemID])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Files] CHECK CONSTRAINT [FK_{objectQualifier}Files_{objectQualifier}ContentItems]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Files]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}Files_{objectQualifier}Folders] FOREIGN KEY([FolderID])
REFERENCES {databaseOwner}[{objectQualifier}Folders] ([FolderID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Files] CHECK CONSTRAINT [FK_{objectQualifier}Files_{objectQualifier}Folders]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Files]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}Files_{objectQualifier}Portals] FOREIGN KEY([PortalId])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Files] CHECK CONSTRAINT [FK_{objectQualifier}Files_{objectQualifier}Portals]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}FileVersions]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}FileVersions_Files] FOREIGN KEY([FileId])
REFERENCES {databaseOwner}[{objectQualifier}Files] ([FileId])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}FileVersions] CHECK CONSTRAINT [FK_{objectQualifier}FileVersions_Files]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}FolderMappings]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}FolderMappings_{objectQualifier}Portals] FOREIGN KEY([PortalID])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}FolderMappings] CHECK CONSTRAINT [FK_{objectQualifier}FolderMappings_{objectQualifier}Portals]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}FolderMappingsSettings]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}FolderMappingsSettings_{objectQualifier}FolderMappings] FOREIGN KEY([FolderMappingID])
REFERENCES {databaseOwner}[{objectQualifier}FolderMappings] ([FolderMappingID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}FolderMappingsSettings] CHECK CONSTRAINT [FK_{objectQualifier}FolderMappingsSettings_{objectQualifier}FolderMappings]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}FolderPermission]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}FolderPermission_{objectQualifier}Folders] FOREIGN KEY([FolderID])
REFERENCES {databaseOwner}[{objectQualifier}Folders] ([FolderID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}FolderPermission] CHECK CONSTRAINT [FK_{objectQualifier}FolderPermission_{objectQualifier}Folders]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}FolderPermission]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}FolderPermission_{objectQualifier}Permission] FOREIGN KEY([PermissionID])
REFERENCES {databaseOwner}[{objectQualifier}Permission] ([PermissionID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}FolderPermission] CHECK CONSTRAINT [FK_{objectQualifier}FolderPermission_{objectQualifier}Permission]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}FolderPermission]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}FolderPermission_{objectQualifier}Roles] FOREIGN KEY([RoleID])
REFERENCES {databaseOwner}[{objectQualifier}Roles] ([RoleID])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}FolderPermission] CHECK CONSTRAINT [FK_{objectQualifier}FolderPermission_{objectQualifier}Roles]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}FolderPermission]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}FolderPermission_{objectQualifier}Users] FOREIGN KEY([UserID])
REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}FolderPermission] CHECK CONSTRAINT [FK_{objectQualifier}FolderPermission_{objectQualifier}Users]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Folders]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}Folders_{objectQualifier}ContentWorkflows] FOREIGN KEY([WorkflowID])
REFERENCES {databaseOwner}[{objectQualifier}ContentWorkflows] ([WorkflowID])
ON DELETE SET NULL
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Folders] CHECK CONSTRAINT [FK_{objectQualifier}Folders_{objectQualifier}ContentWorkflows]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Folders]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}Folders_{objectQualifier}FolderMappings] FOREIGN KEY([FolderMappingID])
REFERENCES {databaseOwner}[{objectQualifier}FolderMappings] ([FolderMappingID])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Folders] CHECK CONSTRAINT [FK_{objectQualifier}Folders_{objectQualifier}FolderMappings]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Folders]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}Folders_{objectQualifier}Portals] FOREIGN KEY([PortalID])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Folders] CHECK CONSTRAINT [FK_{objectQualifier}Folders_{objectQualifier}Portals]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}JavaScriptLibraries]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}JavaScriptLibraries{objectQualifier}Packages] FOREIGN KEY([PackageID])
REFERENCES {databaseOwner}[{objectQualifier}Packages] ([PackageID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}JavaScriptLibraries] CHECK CONSTRAINT [FK_{objectQualifier}JavaScriptLibraries{objectQualifier}Packages]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}Journal_JournalTypes] FOREIGN KEY([JournalTypeId])
REFERENCES {databaseOwner}[{objectQualifier}Journal_Types] ([JournalTypeId])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal] NOCHECK CONSTRAINT [FK_{objectQualifier}Journal_JournalTypes]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Comments]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}JournalComments_Journal] FOREIGN KEY([JournalId])
REFERENCES {databaseOwner}[{objectQualifier}Journal] ([JournalId])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Comments] NOCHECK CONSTRAINT [FK_{objectQualifier}JournalComments_Journal]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Data]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}Journal_Data_Journal] FOREIGN KEY([JournalId])
REFERENCES {databaseOwner}[{objectQualifier}Journal] ([JournalId])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Journal_Data] NOCHECK CONSTRAINT [FK_{objectQualifier}Journal_Data_Journal]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}LanguagePacks]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}LanguagePacks_{objectQualifier}Packages] FOREIGN KEY([PackageID])
REFERENCES {databaseOwner}[{objectQualifier}Packages] ([PackageID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}LanguagePacks] CHECK CONSTRAINT [FK_{objectQualifier}LanguagePacks_{objectQualifier}Packages]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Mobile_PreviewProfiles]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}Mobile_PreviewProfiles_{objectQualifier}Portals] FOREIGN KEY([PortalId])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Mobile_PreviewProfiles] CHECK CONSTRAINT [FK_{objectQualifier}Mobile_PreviewProfiles_{objectQualifier}Portals]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Mobile_RedirectionRules]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}Mobile_RedirectionRules_{objectQualifier}Mobile_Redirections] FOREIGN KEY([RedirectionId])
REFERENCES {databaseOwner}[{objectQualifier}Mobile_Redirections] ([Id])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Mobile_RedirectionRules] CHECK CONSTRAINT [FK_{objectQualifier}Mobile_RedirectionRules_{objectQualifier}Mobile_Redirections]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Mobile_Redirections]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}Mobile_Redirections_{objectQualifier}Portals] FOREIGN KEY([PortalId])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Mobile_Redirections] CHECK CONSTRAINT [FK_{objectQualifier}Mobile_Redirections_{objectQualifier}Portals]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ModuleControls]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}ModuleControls_{objectQualifier}ModuleDefinitions] FOREIGN KEY([ModuleDefID])
REFERENCES {databaseOwner}[{objectQualifier}ModuleDefinitions] ([ModuleDefID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ModuleControls] CHECK CONSTRAINT [FK_{objectQualifier}ModuleControls_{objectQualifier}ModuleDefinitions]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ModuleDefinitions]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}ModuleDefinitions_{objectQualifier}DesktopModules] FOREIGN KEY([DesktopModuleID])
REFERENCES {databaseOwner}[{objectQualifier}DesktopModules] ([DesktopModuleID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ModuleDefinitions] CHECK CONSTRAINT [FK_{objectQualifier}ModuleDefinitions_{objectQualifier}DesktopModules]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ModulePermission]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}ModulePermission_{objectQualifier}Modules] FOREIGN KEY([ModuleID])
REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ModulePermission] CHECK CONSTRAINT [FK_{objectQualifier}ModulePermission_{objectQualifier}Modules]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ModulePermission]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}ModulePermission_{objectQualifier}Permission] FOREIGN KEY([PermissionID])
REFERENCES {databaseOwner}[{objectQualifier}Permission] ([PermissionID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ModulePermission] CHECK CONSTRAINT [FK_{objectQualifier}ModulePermission_{objectQualifier}Permission]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ModulePermission]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}ModulePermission_{objectQualifier}Roles] FOREIGN KEY([RoleID])
REFERENCES {databaseOwner}[{objectQualifier}Roles] ([RoleID])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ModulePermission] CHECK CONSTRAINT [FK_{objectQualifier}ModulePermission_{objectQualifier}Roles]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ModulePermission]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}ModulePermission_{objectQualifier}Users] FOREIGN KEY([UserID])
REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ModulePermission] CHECK CONSTRAINT [FK_{objectQualifier}ModulePermission_{objectQualifier}Users]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Modules]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}Modules_{objectQualifier}ContentItems] FOREIGN KEY([ContentItemID])
REFERENCES {databaseOwner}[{objectQualifier}ContentItems] ([ContentItemID])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Modules] CHECK CONSTRAINT [FK_{objectQualifier}Modules_{objectQualifier}ContentItems]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Modules]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}Modules_{objectQualifier}ModuleDefinitions] FOREIGN KEY([ModuleDefID])
REFERENCES {databaseOwner}[{objectQualifier}ModuleDefinitions] ([ModuleDefID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Modules] CHECK CONSTRAINT [FK_{objectQualifier}Modules_{objectQualifier}ModuleDefinitions]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ModuleSettings]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}ModuleSettings_{objectQualifier}Modules] FOREIGN KEY([ModuleID])
REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ModuleSettings] CHECK CONSTRAINT [FK_{objectQualifier}ModuleSettings_{objectQualifier}Modules]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}PackageDependencies]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}PackageDependencies_{objectQualifier}Packages] FOREIGN KEY([PackageID])
REFERENCES {databaseOwner}[{objectQualifier}Packages] ([PackageID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}PackageDependencies] CHECK CONSTRAINT [FK_{objectQualifier}PackageDependencies_{objectQualifier}Packages]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Packages]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}Packages_{objectQualifier}PackageTypes] FOREIGN KEY([PackageType])
REFERENCES {databaseOwner}[{objectQualifier}PackageTypes] ([PackageType])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Packages] CHECK CONSTRAINT [FK_{objectQualifier}Packages_{objectQualifier}PackageTypes]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}PasswordHistory]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}PasswordHistory_{objectQualifier}Users] FOREIGN KEY([UserID])
REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}PasswordHistory] CHECK CONSTRAINT [FK_{objectQualifier}PasswordHistory_{objectQualifier}Users]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}PortalAlias]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}PortalAlias_{objectQualifier}Portals] FOREIGN KEY([PortalID])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}PortalAlias] CHECK CONSTRAINT [FK_{objectQualifier}PortalAlias_{objectQualifier}Portals]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}PortalDesktopModules]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}PortalDesktopModules_{objectQualifier}DesktopModules] FOREIGN KEY([DesktopModuleID])
REFERENCES {databaseOwner}[{objectQualifier}DesktopModules] ([DesktopModuleID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}PortalDesktopModules] CHECK CONSTRAINT [FK_{objectQualifier}PortalDesktopModules_{objectQualifier}DesktopModules]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}PortalDesktopModules]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}PortalDesktopModules_{objectQualifier}Portals] FOREIGN KEY([PortalID])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}PortalDesktopModules] CHECK CONSTRAINT [FK_{objectQualifier}PortalDesktopModules_{objectQualifier}Portals]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}PortalLanguages]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}PortalLanguages_{objectQualifier}PortalLanguages] FOREIGN KEY([LanguageID])
REFERENCES {databaseOwner}[{objectQualifier}Languages] ([LanguageID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}PortalLanguages] CHECK CONSTRAINT [FK_{objectQualifier}PortalLanguages_{objectQualifier}PortalLanguages]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}PortalLanguages]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}PortalLanguages_{objectQualifier}Portals] FOREIGN KEY([PortalID])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}PortalLanguages] CHECK CONSTRAINT [FK_{objectQualifier}PortalLanguages_{objectQualifier}Portals]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}PortalLocalization]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}PortalLocalization_{objectQualifier}Portals] FOREIGN KEY([PortalID])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}PortalLocalization] CHECK CONSTRAINT [FK_{objectQualifier}PortalLocalization_{objectQualifier}Portals]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}PortalPermission]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}PortalPermission_PermissionId] FOREIGN KEY([PermissionId])
REFERENCES {databaseOwner}[{objectQualifier}Permission] ([PermissionID])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}PortalPermission] CHECK CONSTRAINT [FK_{objectQualifier}PortalPermission_PermissionId]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}PortalPermission]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}PortalPermission_PortalId] FOREIGN KEY([PortalId])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}PortalPermission] CHECK CONSTRAINT [FK_{objectQualifier}PortalPermission_PortalId]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}PortalPermission]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}PortalPermission_RoleId] FOREIGN KEY([RoleID])
REFERENCES {databaseOwner}[{objectQualifier}Roles] ([RoleID])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}PortalPermission] CHECK CONSTRAINT [FK_{objectQualifier}PortalPermission_RoleId]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}PortalPermission]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}PortalPermission_UserId] FOREIGN KEY([UserID])
REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}PortalPermission] CHECK CONSTRAINT [FK_{objectQualifier}PortalPermission_UserId]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}PortalSettings]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}PortalSettings_{objectQualifier}Portals] FOREIGN KEY([PortalID])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}PortalSettings] CHECK CONSTRAINT [FK_{objectQualifier}PortalSettings_{objectQualifier}Portals]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Profile]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}Profile_{objectQualifier}Portals] FOREIGN KEY([PortalId])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Profile] CHECK CONSTRAINT [FK_{objectQualifier}Profile_{objectQualifier}Portals]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Profile]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}Profile_{objectQualifier}Users] FOREIGN KEY([UserId])
REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Profile] CHECK CONSTRAINT [FK_{objectQualifier}Profile_{objectQualifier}Users]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ProfilePropertyDefinition]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}ProfilePropertyDefinition_{objectQualifier}Portals] FOREIGN KEY([PortalID])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ProfilePropertyDefinition] CHECK CONSTRAINT [FK_{objectQualifier}ProfilePropertyDefinition_{objectQualifier}Portals]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Relationships]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}Relationships_{objectQualifier}Portals] FOREIGN KEY([PortalID])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Relationships] CHECK CONSTRAINT [FK_{objectQualifier}Relationships_{objectQualifier}Portals]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Relationships]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}Relationships_{objectQualifier}RelationshipTypes] FOREIGN KEY([RelationshipTypeID])
REFERENCES {databaseOwner}[{objectQualifier}RelationshipTypes] ([RelationshipTypeID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Relationships] CHECK CONSTRAINT [FK_{objectQualifier}Relationships_{objectQualifier}RelationshipTypes]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Relationships]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}Relationships_{objectQualifier}Users] FOREIGN KEY([UserID])
REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Relationships] CHECK CONSTRAINT [FK_{objectQualifier}Relationships_{objectQualifier}Users]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}RoleGroups]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}RoleGroups_{objectQualifier}Portals] FOREIGN KEY([PortalID])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}RoleGroups] CHECK CONSTRAINT [FK_{objectQualifier}RoleGroups_{objectQualifier}Portals]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Roles]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}Roles_{objectQualifier}Portals] FOREIGN KEY([PortalID])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Roles] CHECK CONSTRAINT [FK_{objectQualifier}Roles_{objectQualifier}Portals]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Roles]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}Roles_{objectQualifier}RoleGroups] FOREIGN KEY([RoleGroupID])
REFERENCES {databaseOwner}[{objectQualifier}RoleGroups] ([RoleGroupID])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Roles] CHECK CONSTRAINT [FK_{objectQualifier}Roles_{objectQualifier}RoleGroups]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ScheduleHistory]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}ScheduleHistory_{objectQualifier}Schedule] FOREIGN KEY([ScheduleID])
REFERENCES {databaseOwner}[{objectQualifier}Schedule] ([ScheduleID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ScheduleHistory] CHECK CONSTRAINT [FK_{objectQualifier}ScheduleHistory_{objectQualifier}Schedule]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ScheduleItemSettings]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}ScheduleItemSettings_{objectQualifier}Schedule] FOREIGN KEY([ScheduleID])
REFERENCES {databaseOwner}[{objectQualifier}Schedule] ([ScheduleID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}ScheduleItemSettings] CHECK CONSTRAINT [FK_{objectQualifier}ScheduleItemSettings_{objectQualifier}Schedule]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}SiteLog]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}SiteLog_{objectQualifier}Portals] FOREIGN KEY([PortalId])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}SiteLog] CHECK CONSTRAINT [FK_{objectQualifier}SiteLog_{objectQualifier}Portals]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}SkinControls]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}SkinControls_{objectQualifier}Packages] FOREIGN KEY([PackageID])
REFERENCES {databaseOwner}[{objectQualifier}Packages] ([PackageID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}SkinControls] CHECK CONSTRAINT [FK_{objectQualifier}SkinControls_{objectQualifier}Packages]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}SkinPackages]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}SkinPackages_{objectQualifier}Packages] FOREIGN KEY([PackageID])
REFERENCES {databaseOwner}[{objectQualifier}Packages] ([PackageID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}SkinPackages] CHECK CONSTRAINT [FK_{objectQualifier}SkinPackages_{objectQualifier}Packages]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Skins]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}Skins_{objectQualifier}SkinPackages] FOREIGN KEY([SkinPackageID])
REFERENCES {databaseOwner}[{objectQualifier}SkinPackages] ([SkinPackageID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Skins] CHECK CONSTRAINT [FK_{objectQualifier}Skins_{objectQualifier}SkinPackages]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}SystemMessages]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}SystemMessages_{objectQualifier}Portals] FOREIGN KEY([PortalID])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}SystemMessages] CHECK CONSTRAINT [FK_{objectQualifier}SystemMessages_{objectQualifier}Portals]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabModules]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}TabModules_{objectQualifier}Modules] FOREIGN KEY([ModuleID])
REFERENCES {databaseOwner}[{objectQualifier}Modules] ([ModuleID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabModules] CHECK CONSTRAINT [FK_{objectQualifier}TabModules_{objectQualifier}Modules]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabModules]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}TabModules_{objectQualifier}Tabs] FOREIGN KEY([TabID])
REFERENCES {databaseOwner}[{objectQualifier}Tabs] ([TabID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabModules] CHECK CONSTRAINT [FK_{objectQualifier}TabModules_{objectQualifier}Tabs]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabModuleSettings]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}TabModuleSettings_{objectQualifier}TabModules] FOREIGN KEY([TabModuleID])
REFERENCES {databaseOwner}[{objectQualifier}TabModules] ([TabModuleID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabModuleSettings] CHECK CONSTRAINT [FK_{objectQualifier}TabModuleSettings_{objectQualifier}TabModules]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabPermission]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}TabPermission_{objectQualifier}Permission] FOREIGN KEY([PermissionID])
REFERENCES {databaseOwner}[{objectQualifier}Permission] ([PermissionID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabPermission] CHECK CONSTRAINT [FK_{objectQualifier}TabPermission_{objectQualifier}Permission]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabPermission]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}TabPermission_{objectQualifier}Roles] FOREIGN KEY([RoleID])
REFERENCES {databaseOwner}[{objectQualifier}Roles] ([RoleID])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabPermission] CHECK CONSTRAINT [FK_{objectQualifier}TabPermission_{objectQualifier}Roles]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabPermission]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}TabPermission_{objectQualifier}Tabs] FOREIGN KEY([TabID])
REFERENCES {databaseOwner}[{objectQualifier}Tabs] ([TabID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabPermission] CHECK CONSTRAINT [FK_{objectQualifier}TabPermission_{objectQualifier}Tabs]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabPermission]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}TabPermission_{objectQualifier}Users] FOREIGN KEY([UserID])
REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabPermission] CHECK CONSTRAINT [FK_{objectQualifier}TabPermission_{objectQualifier}Users]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Tabs]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}Tabs_{objectQualifier}ContentItems] FOREIGN KEY([ContentItemID])
REFERENCES {databaseOwner}[{objectQualifier}ContentItems] ([ContentItemID])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Tabs] CHECK CONSTRAINT [FK_{objectQualifier}Tabs_{objectQualifier}ContentItems]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Tabs]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}Tabs_{objectQualifier}Portals] FOREIGN KEY([PortalID])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Tabs] CHECK CONSTRAINT [FK_{objectQualifier}Tabs_{objectQualifier}Portals]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Tabs]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}Tabs_{objectQualifier}Tabs] FOREIGN KEY([ParentId])
REFERENCES {databaseOwner}[{objectQualifier}Tabs] ([TabID])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Tabs] CHECK CONSTRAINT [FK_{objectQualifier}Tabs_{objectQualifier}Tabs]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabSettings]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}TabSettings_{objectQualifier}Tabs] FOREIGN KEY([TabID])
REFERENCES {databaseOwner}[{objectQualifier}Tabs] ([TabID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabSettings] CHECK CONSTRAINT [FK_{objectQualifier}TabSettings_{objectQualifier}Tabs]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabUrls]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}TabUrls_Tabs] FOREIGN KEY([TabId])
REFERENCES {databaseOwner}[{objectQualifier}Tabs] ([TabID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabUrls] CHECK CONSTRAINT [FK_{objectQualifier}TabUrls_Tabs]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabVersionDetails]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}TabVersionDetails_{objectQualifier}TabVersionId] FOREIGN KEY([TabVersionId])
REFERENCES {databaseOwner}[{objectQualifier}TabVersions] ([TabVersionId])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabVersionDetails] CHECK CONSTRAINT [FK_{objectQualifier}TabVersionDetails_{objectQualifier}TabVersionId]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabVersions]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}TabVersions_{objectQualifier}TabId] FOREIGN KEY([TabId])
REFERENCES {databaseOwner}[{objectQualifier}Tabs] ([TabID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}TabVersions] CHECK CONSTRAINT [FK_{objectQualifier}TabVersions_{objectQualifier}TabId]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Taxonomy_Terms]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}Taxonomy_Terms_{objectQualifier}Taxonomy_Terms] FOREIGN KEY([ParentTermID])
REFERENCES {databaseOwner}[{objectQualifier}Taxonomy_Terms] ([TermID])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Taxonomy_Terms] CHECK CONSTRAINT [FK_{objectQualifier}Taxonomy_Terms_{objectQualifier}Taxonomy_Terms]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Taxonomy_Terms]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}Taxonomy_Terms_{objectQualifier}Taxonomy_Vocabularies] FOREIGN KEY([VocabularyID])
REFERENCES {databaseOwner}[{objectQualifier}Taxonomy_Vocabularies] ([VocabularyID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Taxonomy_Terms] CHECK CONSTRAINT [FK_{objectQualifier}Taxonomy_Terms_{objectQualifier}Taxonomy_Vocabularies]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Taxonomy_Vocabularies]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}Taxonomy_Vocabularies_{objectQualifier}Taxonomy_ScopeTypes] FOREIGN KEY([ScopeTypeID])
REFERENCES {databaseOwner}[{objectQualifier}Taxonomy_ScopeTypes] ([ScopeTypeID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Taxonomy_Vocabularies] CHECK CONSTRAINT [FK_{objectQualifier}Taxonomy_Vocabularies_{objectQualifier}Taxonomy_ScopeTypes]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Taxonomy_Vocabularies]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}Taxonomy_Vocabularies_{objectQualifier}Taxonomy_VocabularyTypes] FOREIGN KEY([VocabularyTypeID])
REFERENCES {databaseOwner}[{objectQualifier}Taxonomy_VocabularyTypes] ([VocabularyTypeID])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Taxonomy_Vocabularies] CHECK CONSTRAINT [FK_{objectQualifier}Taxonomy_Vocabularies_{objectQualifier}Taxonomy_VocabularyTypes]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UrlLog]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}UrlLog_{objectQualifier}UrlTracking] FOREIGN KEY([UrlTrackingID])
REFERENCES {databaseOwner}[{objectQualifier}UrlTracking] ([UrlTrackingID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UrlLog] CHECK CONSTRAINT [FK_{objectQualifier}UrlLog_{objectQualifier}UrlTracking]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Urls]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}Urls_{objectQualifier}Portals] FOREIGN KEY([PortalID])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}Urls] CHECK CONSTRAINT [FK_{objectQualifier}Urls_{objectQualifier}Portals]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UrlTracking]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}UrlTracking_{objectQualifier}Portals] FOREIGN KEY([PortalID])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UrlTracking] CHECK CONSTRAINT [FK_{objectQualifier}UrlTracking_{objectQualifier}Portals]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserAuthentication]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}UserAuthentication_{objectQualifier}Users] FOREIGN KEY([UserID])
REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserAuthentication] CHECK CONSTRAINT [FK_{objectQualifier}UserAuthentication_{objectQualifier}Users]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserPortals]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}UserPortals_{objectQualifier}Portals] FOREIGN KEY([PortalId])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserPortals] CHECK CONSTRAINT [FK_{objectQualifier}UserPortals_{objectQualifier}Portals]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserPortals]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}UserPortals_{objectQualifier}Users] FOREIGN KEY([UserId])
REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserPortals] CHECK CONSTRAINT [FK_{objectQualifier}UserPortals_{objectQualifier}Users]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserProfile]  WITH NOCHECK ADD  CONSTRAINT [FK_{objectQualifier}UserProfile_{objectQualifier}ProfilePropertyDefinition] FOREIGN KEY([PropertyDefinitionID])
REFERENCES {databaseOwner}[{objectQualifier}ProfilePropertyDefinition] ([PropertyDefinitionID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserProfile] CHECK CONSTRAINT [FK_{objectQualifier}UserProfile_{objectQualifier}ProfilePropertyDefinition]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserProfile]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}UserProfile_{objectQualifier}Users] FOREIGN KEY([UserID])
REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserProfile] CHECK CONSTRAINT [FK_{objectQualifier}UserProfile_{objectQualifier}Users]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserRelationshipPreferences]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}UserRelationshipPreferences_{objectQualifier}Relationships] FOREIGN KEY([RelationshipID])
REFERENCES {databaseOwner}[{objectQualifier}Relationships] ([RelationshipID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserRelationshipPreferences] CHECK CONSTRAINT [FK_{objectQualifier}UserRelationshipPreferences_{objectQualifier}Relationships]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserRelationshipPreferences]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}UserRelationshipPreferences_{objectQualifier}Users] FOREIGN KEY([UserID])
REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserRelationshipPreferences] CHECK CONSTRAINT [FK_{objectQualifier}UserRelationshipPreferences_{objectQualifier}Users]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserRelationships]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}UserRelationships_{objectQualifier}Relationships] FOREIGN KEY([RelationshipID])
REFERENCES {databaseOwner}[{objectQualifier}Relationships] ([RelationshipID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserRelationships] CHECK CONSTRAINT [FK_{objectQualifier}UserRelationships_{objectQualifier}Relationships]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserRelationships]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}UserRelationships_{objectQualifier}Users] FOREIGN KEY([UserID])
REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserRelationships] CHECK CONSTRAINT [FK_{objectQualifier}UserRelationships_{objectQualifier}Users]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserRelationships]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}UserRelationships_{objectQualifier}Users_OnRelatedUser] FOREIGN KEY([RelatedUserID])
REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID])
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserRelationships] CHECK CONSTRAINT [FK_{objectQualifier}UserRelationships_{objectQualifier}Users_OnRelatedUser]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserRoles]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}UserRoles_{objectQualifier}Roles] FOREIGN KEY([RoleID])
REFERENCES {databaseOwner}[{objectQualifier}Roles] ([RoleID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserRoles] CHECK CONSTRAINT [FK_{objectQualifier}UserRoles_{objectQualifier}Roles]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserRoles]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}UserRoles_{objectQualifier}Users] FOREIGN KEY([UserID])
REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserRoles] CHECK CONSTRAINT [FK_{objectQualifier}UserRoles_{objectQualifier}Users]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UsersOnline]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}UsersOnline_{objectQualifier}Portals] FOREIGN KEY([PortalID])
REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UsersOnline] CHECK CONSTRAINT [FK_{objectQualifier}UsersOnline_{objectQualifier}Portals]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UsersOnline]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}UsersOnline_{objectQualifier}Users] FOREIGN KEY([UserID])
REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID])
ON DELETE CASCADE
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UsersOnline] CHECK CONSTRAINT [FK_{objectQualifier}UsersOnline_{objectQualifier}Users]
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserRoles]  WITH NOCHECK ADD  CONSTRAINT [CK_{objectQualifier}UserRoles_RoleId] CHECK  (([RoleId]>=(0)))
GO
ALTER TABLE {databaseOwner}[{objectQualifier}UserRoles] CHECK CONSTRAINT [CK_{objectQualifier}UserRoles_RoleId]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddAuthentication]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddAuthentication]
	@PackageID				int,
	@AuthenticationType     nvarchar(100),
	@IsEnabled				bit,
	@SettingsControlSrc     nvarchar(250),
	@LoginControlSrc		nvarchar(250),
	@LogoffControlSrc		nvarchar(250),
	@CreatedByUserID	int
AS
	INSERT INTO {objectQualifier}Authentication (
		PackageID,
		AuthenticationType,
		IsEnabled,
		SettingsControlSrc,
		LoginControlSrc,
		LogoffControlSrc,
		[CreatedByUserID],
		[CreatedOnDate],
		[LastModifiedByUserID],
		[LastModifiedOnDate]
	)
	VALUES (
		@PackageID,
		@AuthenticationType,
		@IsEnabled,
		@SettingsControlSrc,
		@LoginControlSrc,
		@LogoffControlSrc,
		@CreatedByUserID,
		getdate(),
		@CreatedByUserID,
		getdate()
	)

	SELECT SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddContentItem]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddContentItem] 
	@Content			nvarchar(max),
	@ContentTypeID		int,
	@TabID				int,
	@ModuleID			int, 
	@ContentKey			nvarchar(250),
	@Indexed			bit,
	@CreatedByUserID	int,
	@StateID			int = NULL
AS
	INSERT INTO {databaseOwner}[{objectQualifier}ContentItems] (
		Content,
		ContentTypeID,
		TabID,
		ModuleID,
		ContentKey,
		Indexed,
		CreatedByUserID,
		CreatedOnDate,
		LastModifiedByUserID,
		LastModifiedOnDate,
		StateID
	)

	VALUES (
		@Content,
		@ContentTypeID,
		@TabID,
		@ModuleID,
		@ContentKey,
		@Indexed,
		@CreatedByUserID,
		getdate(),
		@CreatedByUserID,
		getdate(),
		@StateID
	)

	SELECT SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddContentType]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddContentType] 
	@ContentType	nvarchar(250)
AS
	INSERT INTO {databaseOwner}{objectQualifier}ContentTypes (
		ContentType
	)

	VALUES (
		@ContentType
	)

	SELECT SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddContentWorkflow]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddContentWorkflow]
@PortalID int,
@WorkflowName nvarchar(40),
@Description nvarchar(256),
@IsDeleted bit,
@StartAfterCreating bit,
@StartAfterEditing bit,
@DispositionEnabled bit
AS

INSERT INTO {databaseOwner}{objectQualifier}ContentWorkflows (
  [PortalID],
  [WorkflowName],
  [Description],
  [IsDeleted],
  [StartAfterCreating],
  [StartAfterEditing],
  [DispositionEnabled]
)
VALUES (
  @PortalID,
  @WorkflowName,
  @Description,
  @IsDeleted,
  @StartAfterCreating,
  @StartAfterEditing,
  @DispositionEnabled
)

SELECT SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddContentWorkflowLog]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddContentWorkflowLog]
	@Action nvarchar(40),
	@Comment nvarchar(256),
	@User int,
	@WorkflowID int,
	@ContentItemID int
AS
    INSERT INTO {databaseOwner}[{objectQualifier}ContentWorkflowLogs] (
		[Action],
		[Comment],
		[Date],
		[User],
		[WorkflowID],
		[ContentItemID]
	) VALUES (
		@Action,
		@Comment,
		getdate(),
		@User,
		@WorkflowID,
		@ContentItemID
	)

	SELECT SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddContentWorkflowSource]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddContentWorkflowSource]
	@WorkflowID INT,
    @SourceName NVARCHAR(20),
    @SourceType NVARCHAR(250)
AS
    INSERT INTO  {databaseOwner}{objectQualifier}ContentWorkflowSources(
		[WorkflowID],
		[SourceName],
		[SourceType])
    VALUES(
        @WorkflowID,
        @SourceName,
        @SourceType
    )

    SELECT SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddContentWorkflowState]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddContentWorkflowState]
	@WorkflowID	int,
	@StateName nvarchar(40),
	@Order int,
	@IsActive bit,
	@SendEmail bit,
	@SendMessage bit,
	@IsDisposalState bit,
	@OnCompleteMessageSubject nvarchar(256),
	@OnCompleteMessageBody nvarchar(1024),
	@OnDiscardMessageSubject nvarchar(256),
	@OnDiscardMessageBody nvarchar(1024)
AS

INSERT INTO {databaseOwner}{objectQualifier}ContentWorkflowStates (
	[WorkflowID],
	[StateName],
	[Order],
	[IsActive],
	[SendEmail],
	[SendMessage],
	[IsDisposalState],
	[OnCompleteMessageSubject],
	[OnCompleteMessageBody],
	[OnDiscardMessageSubject],
	[OnDiscardMessageBody]
)
VALUES (
	@WorkflowID,
	@StateName,
	@Order,
	@IsActive,
	@SendEmail,
	@SendMessage,
	@IsDisposalState,
	@OnCompleteMessageSubject,
	@OnCompleteMessageBody,
	@OnDiscardMessageSubject,
	@OnDiscardMessageBody
)

SELECT SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddContentWorkflowStatePermission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddContentWorkflowStatePermission]
	@StateID int,
	@PermissionID int,
	@RoleID int,
	@AllowAccess bit,
	@UserID int,
	@CreatedByUserID int
AS

	INSERT INTO {databaseOwner}{objectQualifier}ContentWorkflowStatePermission (
		[StateID],
		[PermissionID],
		[RoleID],
		[AllowAccess],
		[UserID],
		[CreatedByUserID],
		[CreatedOnDate],
		[LastModifiedByUserID],
		[LastModifiedOnDate]
	) VALUES (
		@StateID,
		@PermissionID,
		@RoleID,
		@AllowAccess,
		@UserID,
		@CreatedByUserID,
		getdate(),
		@CreatedByUserID,
		getdate()
	)

	SELECT SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddDefaultFolderTypes]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddDefaultFolderTypes]
	@PortalID int
AS
BEGIN
	INSERT INTO {databaseOwner}[{objectQualifier}FolderMappings] (PortalID, MappingName, FolderProviderType, Priority)
	SELECT @PortalID, 'Standard', 'StandardFolderProvider', 1
	UNION ALL
	SELECT @PortalID, 'Secure', 'SecureFolderProvider', 2
	UNION ALL
	SELECT @PortalID, 'Database', 'DatabaseFolderProvider', 3
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddDesktopModule]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddDesktopModule]
	@PackageID		int,
	@ModuleName		nvarchar(128),
	@FolderName		nvarchar(128),
	@FriendlyName		nvarchar(128),
	@Description		nvarchar(2000),
	@Version		nvarchar(50),
	@IsPremium		bit,
	@IsAdmin		bit,
	@BusinessController	nvarchar(200),
	@SupportedFeatures	int,
	@Shareable		int,
	@CompatibleVersions	nvarchar(500),
	@Dependencies		nvarchar(400),
	@Permissions		nvarchar(400),
	@ContentItemId		int,
	@CreatedByUserID	int,
	@AdminPage		nvarchar(128),
	@HostPage		nvarchar(128)

AS
	INSERT INTO {databaseOwner}{objectQualifier}DesktopModules (
		PackageID,
		ModuleName,
		FolderName,
		FriendlyName,
		Description,
		Version,
		IsPremium,
		IsAdmin,
		BusinessControllerClass,
		SupportedFeatures,
		Shareable,
		CompatibleVersions,
		Dependencies,
		Permissions,
		CreatedByUserID,
		CreatedOnDate,
		LastModifiedByUserID,
		LastModifiedOnDate,
		ContentItemId,
		AdminPage,
		HostPage
	)
	VALUES (
		@PackageID,
		@ModuleName,
		@FolderName,
		@FriendlyName,
		@Description,
		@Version,
		@IsPremium,
		@IsAdmin,
		@BusinessController,
		@SupportedFeatures,
		@Shareable,
		@CompatibleVersions,
		@Dependencies,
		@Permissions,
		@CreatedByUserID,
		getdate(),
		@CreatedByUserID,
		getdate(),
		@ContentItemId,
		@AdminPage,
		@HostPage
	)

	SELECT SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddDesktopModulePermission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddDesktopModulePermission]
    @PortalDesktopModuleID Int, -- not null!
    @PermissionId          Int, -- not null!
    @RoleId                Int, -- might be negative for virtual roles
    @AllowAccess           Bit, -- false: deny, true: grant
    @UserId                Int, -- -1 is replaced by Null
    @CreatedByUserId       Int  -- -1 is replaced by Null
AS
BEGIN
    INSERT INTO {databaseOwner}[{objectQualifier}DesktopModulePermission] (
        [PortalDesktopModuleID],
        [PermissionID],
        [RoleID],
        [AllowAccess],
        [UserID],
        [CreatedByUserID],
        [CreatedOnDate],
        [LastModifiedByUserID],
        [LastModifiedOnDate]
    ) VALUES (
        @PortalDesktopModuleID,
        @PermissionID,
        @RoleId,
        @AllowAccess,
        CASE WHEN @UserId = -1 THEN Null ELSE @UserId END,
        CASE WHEN @CreatedByUserID = -1 THEN Null ELSE @CreatedByUserID END,
        GetDate(),
        CASE WHEN @CreatedByUserID = -1 THEN Null ELSE @CreatedByUserID END,
        GetDate()
    )
    SELECT SCOPE_IDENTITY()
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddEventLog]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE  {databaseOwner}[{objectQualifier}AddEventLog] 
	@LogGUID varchar(36),
	@LogTypeKey nvarchar(35),
	@LogUserID int,
	@LogUserName nvarchar(50),
	@LogPortalID int,
	@LogPortalName nvarchar(100),
	@LogCreateDate datetime,
	@LogServerName nvarchar(50),
	@LogProperties ntext,
	@LogConfigID int,
	@ExceptionHash varchar(100) = NULL,
	@NotificationActive bit = 0
AS
BEGIN
	DECLARE @LogEventID bigint

	INSERT INTO  {databaseOwner}[{objectQualifier}EventLog]
		(LogGUID,
		LogTypeKey,
		LogUserID,
		LogUserName,
		LogPortalID,
		LogPortalName,
		LogCreateDate,
		LogServerName,
		LogProperties,
		LogConfigID,
		ExceptionHash)
	VALUES
		(@LogGUID,
		@LogTypeKey,
		@LogUserID,
		@LogUserName,
		@LogPortalID,
		@LogPortalName,
		@LogCreateDate,
		@LogServerName,
		@LogProperties,
		@LogConfigID,
		@ExceptionHash)

	SELECT @LogEventID = SCOPE_IDENTITY()

	IF @NotificationActive=1
	BEGIN

		DECLARE @NotificationThreshold int
		DECLARE @ThresholdQueue int
		DECLARE @NotificationThresholdTime int
		DECLARE @NotificationThresholdTimeType int
		DECLARE @MinDateTime smalldatetime
		DECLARE @CurrentDateTime smalldatetime

		SET @CurrentDateTime = getDate()
		
		SELECT TOP 1 @NotificationThreshold = NotificationThreshold,
			@NotificationThresholdTime = NotificationThresholdTime,
			@NotificationThresholdTimeType = NotificationThresholdTimeType,
			@MinDateTime = 
				CASE
					 --seconds
					WHEN NotificationThresholdTimeType=1 THEN DateAdd(second, NotificationThresholdTime * -1, @CurrentDateTime)
					--minutes
					WHEN NotificationThresholdTimeType=2  THEN DateAdd(minute, NotificationThresholdTime * -1, @CurrentDateTime)
					--hours
					WHEN NotificationThresholdTimeType=3  THEN DateAdd(Hour, NotificationThresholdTime * -1, @CurrentDateTime)
					--days
					WHEN NotificationThresholdTimeType=4  THEN DateAdd(Day, NotificationThresholdTime * -1, @CurrentDateTime)
				END
		FROM  {databaseOwner}[{objectQualifier}EventLogConfig]
		WHERE ID = @LogConfigID

		SELECT @ThresholdQueue = COUNT(*)
		FROM  {databaseOwner}[{objectQualifier}EventLog] el
			INNER JOIN  {databaseOwner}[{objectQualifier}EventLogConfig] elc
				ON  el.LogConfigID =  elc.ID
		WHERE LogCreateDate > @MinDateTime 
			  AND el.LogNotificationPending IS NULL 
			  AND elc.ID = @LogConfigID

		IF @ThresholdQueue >= @NotificationThreshold
		BEGIN
			UPDATE  {databaseOwner}[{objectQualifier}EventLog]
			SET LogNotificationPending = 1 
			WHERE LogConfigID = @LogConfigID
				AND LogNotificationPending IS NULL		
				AND LogCreateDate > @MinDateTime
		END

	END
 
	SELECT @LogEventID
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddEventLogConfig]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure {databaseOwner}[{objectQualifier}AddEventLogConfig]
	@LogTypeKey nvarchar(35),
	@LogTypePortalID int,
	@LoggingIsActive bit,
	@KeepMostRecent int,
	@EmailNotificationIsActive bit,
	@NotificationThreshold int,
	@NotificationThresholdTime int,
	@NotificationThresholdTimeType int,
	@MailFromAddress nvarchar(50),
	@MailToAddress nvarchar(50)
AS

DECLARE @ID int
SET @ID = (SELECT EC.ID FROM {databaseOwner}{objectQualifier}EventLogConfig EC 
				WHERE (EC.LogTypeKey = @LogTypeKey OR (EC.LogTypeKey IS NULL AND @LogTypeKey IS NULL))  
					AND (EC.LogTypePortalID = @LogTypePortalID  OR (EC.LogTypePortalID IS NULL AND @LogTypePortalID IS NULL))
			)

IF @ID IS NULL
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}EventLogConfig
			(LogTypeKey,
			LogTypePortalID,
			LoggingIsActive,
			KeepMostRecent,
			EmailNotificationIsActive,
			NotificationThreshold,
			NotificationThresholdTime,
			NotificationThresholdTimeType,
			MailFromAddress,
			MailToAddress)
		VALUES
			(@LogTypeKey,
			@LogTypePortalID,
			@LoggingIsActive,
			@KeepMostRecent,
			@EmailNotificationIsActive,
			@NotificationThreshold,
			@NotificationThresholdTime,
			@NotificationThresholdTimeType,
			@MailFromAddress,
			@MailToAddress)
	END
ELSE
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}EventLogConfig
		SET 	LogTypeKey = @LogTypeKey,
			LogTypePortalID = @LogTypePortalID,
			LoggingIsActive = @LoggingIsActive,
			KeepMostRecent = @KeepMostRecent,
			EmailNotificationIsActive = @EmailNotificationIsActive,
			NotificationThreshold = @NotificationThreshold,
			NotificationThresholdTime = @NotificationThresholdTime,
			NotificationThresholdTimeType = @NotificationThresholdTimeType,
			MailFromAddress = @MailFromAddress,
			MailToAddress = @MailToAddress
		WHERE	ID = @ID
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddEventLogType]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddEventLogType]
	@LogTypeKey nvarchar(35),
	@LogTypeFriendlyName nvarchar(50),
	@LogTypeDescription nvarchar(128),
	@LogTypeOwner nvarchar(100),
	@LogTypeCSSClass nvarchar(40)
AS
	INSERT INTO {databaseOwner}{objectQualifier}EventLogTypes
	(LogTypeKey,
	LogTypeFriendlyName,
	LogTypeDescription,
	LogTypeOwner,
	LogTypeCSSClass)
VALUES
	(@LogTypeKey,
	@LogTypeFriendlyName,
	@LogTypeDescription,
	@LogTypeOwner,
	@LogTypeCSSClass)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddEventMessage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddEventMessage]

	@EventName nvarchar(100),
	@Priority int,
	@ProcessorType nvarchar(250),
	@ProcessorCommand nvarchar(250),
	@Body nvarchar(250),
	@Sender nvarchar(250),
	@Subscriber nvarchar(100),
	@AuthorizedRoles nvarchar(250),
	@ExceptionMessage nvarchar(250),
	@SentDate datetime,
	@ExpirationDate datetime,
	@Attributes ntext

AS
	INSERT {databaseOwner}{objectQualifier}EventQueue	(
			EventName,
			Priority,
			ProcessorType,
			ProcessorCommand,
			Body,
			Sender,
			Subscriber,
			AuthorizedRoles,
			ExceptionMessage,
			SentDate,
			ExpirationDate,
			Attributes
		)
		VALUES	(
			@EventName,
			@Priority,
			@ProcessorType,
			@ProcessorCommand,
			@Body,
			@Sender,
			@Subscriber,
			@AuthorizedRoles,
			@ExceptionMessage,
			@SentDate,
			@ExpirationDate,
			@Attributes
		)

	SELECT SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddException]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddException]
	@ExceptionHash varchar(100),
	@Message nvarchar(500),
	@StackTrace nvarchar(max),
	@InnerMessage nvarchar(500),
	@InnerStackTrace nvarchar(max),
	@Source nvarchar(500)
AS

BEGIN TRY
	IF NOT EXISTS (SELECT * FROM {databaseOwner}[{objectQualifier}Exceptions] WHERE ExceptionHash=@ExceptionHash)
	INSERT INTO {databaseOwner}[{objectQualifier}Exceptions]
		(ExceptionHash,
		[Message],
		StackTrace,
		InnerMessage,
		InnerStackTrace,
		Source)
	VALUES
		(@ExceptionHash,
		@Message,
		@StackTrace,
		@InnerMessage,
		@InnerStackTrace,
		@Source)
END TRY
BEGIN CATCH

END CATCH
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddExceptionEvent]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddExceptionEvent]
  @LogEventID bigint,
  @AssemblyVersion varchar(20),
  @PortalId int,
  @UserId int,
  @TabId int,
  @RawUrl nvarchar(260),
  @Referrer nvarchar(260),
  @UserAgent nvarchar(260)
AS

INSERT INTO {databaseOwner}[{objectQualifier}ExceptionEvents]
	(LogEventID,
	AssemblyVersion,
	PortalId,
	UserId,
	TabId,
	RawUrl,
 Referrer,
 UserAgent)
VALUES
	(@LogEventID,
	@AssemblyVersion,
	@PortalId,
	@UserId,
	@TabId,
	@RawUrl,
 @Referrer,
 @UserAgent)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddExtensionUrlProvider]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddExtensionUrlProvider] 
	@ExtensionUrlProviderID	int, 
    @DesktopModuleId		int, 
    @ProviderName			nvarchar(150), 
    @ProviderType			nvarchar(1000), 
    @SettingsControlSrc		nvarchar(1000), 
    @IsActive				bit, 
    @RewriteAllUrls			bit, 
    @RedirectAllUrls		bit, 
    @ReplaceAllUrls			bit
AS

IF EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}ExtensionUrlProviders WHERE ExtensionUrlProviderID = @ExtensionUrlProviderID)
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}ExtensionUrlProviders
			SET
				DesktopModuleId = @DesktopModuleId,
				ProviderName = @ProviderName,
				ProviderType = @ProviderType,
				SettingsControlSrc = @SettingsControlSrc,
				IsActive = @IsActive,
				RewriteAllUrls = @RewriteAllUrls,
				RedirectAllUrls = @RedirectAllUrls,
				ReplaceAllUrls = @ReplaceAllUrls
			WHERE ExtensionUrlProviderID = @ExtensionUrlProviderID
	END
ELSE
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}ExtensionUrlProviders (
				DesktopModuleId,
				ProviderName,
				ProviderType,
				SettingsControlSrc,
				IsActive,
				RewriteAllUrls,
				RedirectAllUrls,
				ReplaceAllUrls
		)
		VALUES (
				@DesktopModuleId,
				@ProviderName,
				@ProviderType,
				@SettingsControlSrc,
				@IsActive,
				@RewriteAllUrls,
				@RedirectAllUrls,
				@ReplaceAllUrls
		)
		
		SET @ExtensionUrlProviderID = @@IDENTITY
		
	END
	
SELECT @ExtensionUrlProviderID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddFile]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddFile]
	@PortalId   int,
	@UniqueId   uniqueidentifier,
	@VersionGuid  uniqueidentifier,
	@FileName   nvarchar(246),
	@Extension   nvarchar(100),
	@Size    int,
	@Width    int,
	@Height    int,
	@ContentType  nvarchar(200),
	@Folder    nvarchar(246),
	@FolderID   int,
	@CreatedByUserID   int,
	@Hash     varchar(40),
	@LastModificationTime	datetime, 
	@Title					nvarchar(256),
    @Description            nvarchar(500),
	@EnablePublishPeriod	bit,
	@StartDate				datetime,
	@EndDate				datetime,
	@ContentItemID			int
AS
BEGIN
	
	SET NOCOUNT OFF;
	DECLARE @FileID int

	UPDATE {databaseOwner}[{objectQualifier}Files]
	SET
		/* retrieves FileId from table */
		@FileID = FileId,
		FileName = @FileName,
		VersionGuid = @VersionGuid,
		Extension = @Extension,
		Size = @Size,
		Width = @Width,
		Height = @Height,
		ContentType = @ContentType,
		FolderID = @FolderID,
		LastModifiedByUserID = @CreatedByUserID,
		LastModifiedOnDate = getdate(),
		SHA1Hash = @Hash,
		LastModificationTime = @LastModificationTime, 
		Title = @Title,
        Description = @Description,
		EnablePublishPeriod = @EnablePublishPeriod,
		StartDate = @StartDate,
		EndDate = @EndDate,
		ContentItemID = @ContentItemID
	WHERE
		FolderID = @FolderID AND FileName = @FileName
	
	DECLARE @RowCount int = @@ROWCOUNT;
	IF @RowCount = 0
	BEGIN
	INSERT INTO {databaseOwner}[{objectQualifier}Files] (
		PortalId,
		UniqueId,
		VersionGuid,
		FileName,
		Extension,
		Size,
		Width,
		Height,
		ContentType,
		FolderID,
		CreatedByUserID,
		CreatedOnDate,
		LastModifiedByUserID,
		LastModifiedOnDate,
		SHA1Hash,
		LastModificationTime, 
		Title,
        Description,
		EnablePublishPeriod,
		StartDate,
		EndDate,
		ContentItemID
	)
	VALUES (
		@PortalId,
		@UniqueId,
		@VersionGuid,
		@FileName,
		@Extension,
		@Size,
		@Width,
		@Height,
		@ContentType,
		@FolderID,
		@CreatedByUserID,
		getdate(),
		@CreatedByUserID,
		getdate(),
		@Hash,
		@LastModificationTime, 
		@Title,
        @Description,
		@EnablePublishPeriod,
		@StartDate,
		@EndDate,
		@ContentItemID
	)
	SELECT @FileID = SCOPE_IDENTITY()
	END

	--UPDATE THE PARENT FOLDERS UPDATED DATE TO LATEST DATE
	IF((@RowCount>0 OR @@ROWCOUNT>0) AND @FolderID IS NOT NULL)
	BEGIN
		EXEC {databaseOwner}[{objectQualifier}UpdateFolderModifiedOnToCurrentDate] @FolderID
	END
	
	SELECT @FileID

END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddFileVersion]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddFileVersion] 
	@FileId					int,
	@UniqueId				uniqueidentifier,
	@VersionGuid			uniqueidentifier,
	@FileName				nvarchar(246),
	@Extension				nvarchar(100),
	@Size					int,
	@Width					int,
	@Height					int,
	@ContentType			nvarchar(200),
	@Folder					nvarchar(246),
	@FolderID				int,
	@UserID					int,
	@Hash					varchar(40),
	@LastModificationTime	datetime, 
	@Title					nvarchar(256),
	@EnablePublishPeriod	bit,
	@StartDate				datetime,
	@EndDate				datetime,
	@ContentItemID			int,
	@IsPublished			bit,
	@Content				image = NULL
AS
BEGIN

	DECLARE @Version INT

	--	Calculate the new version = Max(Files.PublishedVersion, FileVersions.Versions) + 1
	SELECT @Version = MAX([Version]) + 1
	FROM (SELECT [Version]
			FROM {databaseOwner}[{objectQualifier}FileVersions]
			WHERE FileId = @FileId
			UNION
			SELECT PublishedVersion [Version]
			FROM {databaseOwner}{objectQualifier}Files
			WHERE FileId = @FileId) v

	IF  @IsPublished = 1
		BEGIN
			INSERT {databaseOwner}[{objectQualifier}FileVersions]
						([FileId]
						,[Version]
						,[FileName]
						,[Extension]
						,[Size]
						,[Width]
						,[Height]
						,[ContentType]
						,[Content]
						,[CreatedByUserID]
						,[CreatedOnDate]
						,[LastModifiedByUserID]
						,[LastModifiedOnDate]
						,[SHA1Hash])
			SELECT		[FileId]
						,[PublishedVersion]  [Version]				
						,CONVERT(nvarchar, [FileId]) + '_' + CONVERT(nvarchar, [PublishedVersion]) +'.v.resources' 
						,[Extension]
						,[Size]
						,[Width]
						,[Height]
						,[ContentType]
						,[Content]
						,[CreatedByUserID]
						,[CreatedOnDate]
						,[LastModifiedByUserID]
						,[LastModifiedOnDate]
						,[SHA1Hash]					
			FROM {objectQualifier}Files
			WHERE FileId = @FileId

			-- Change PublishedVersion
			UPDATE {databaseOwner}[{objectQualifier}Files]
			SET	 [PublishedVersion] = @Version
			WHERE FileId = @FileId
		END
	ELSE
		BEGIN
			INSERT {databaseOwner}[{objectQualifier}FileVersions]
							([FileId]
							,[Version]
							,[FileName]
							,[Extension]
							,[Size]
							,[Width]
							,[Height]
							,[ContentType]
							,[Content]
							,[CreatedByUserID]
							,[CreatedOnDate]
							,[LastModifiedByUserID]
							,[LastModifiedOnDate]
							,[SHA1Hash])
			VALUES (@FileId
					,@Version
					,CONVERT(nvarchar, @FileId) + '_' + CONVERT(nvarchar, @Version) +'.v.resources'
					,@Extension
					,@Size
					,@Width
					,@Height
					,@ContentType
					,@Content
					,@UserID
					,GETDATE()
					,@UserID
					,GETDATE()
					,@Hash)
		END

	SELECT @Version
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddFolder]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddFolder]
	@PortalID 			int,
	@UniqueId	 		uniqueidentifier,
	@VersionGuid 		uniqueidentifier,
	@FolderPath 		nvarchar(300),
	@MappedPath 		nvarchar(300),
	@StorageLocation 	int,
	@IsProtected 		bit,
	@IsCached 			bit,
	@LastUpdated 		datetime,
	@CreatedByUserID  	int,
	@FolderMappingID	int = 0,
	@IsVersioned		bit = 0,
	@WorkflowID			int = NULL,
	@ParentID			int = NULL
AS
BEGIN
	IF @FolderMappingID = 0 BEGIN
		SELECT @FolderMappingID = FM.FolderMappingID
		FROM {databaseOwner}[{objectQualifier}FolderMappings] as FM
		WHERE ISNULL(FM.PortalID, -1) = ISNULL(@PortalID, -1)
		AND FolderProviderType = (
			CASE @StorageLocation
				WHEN 0 THEN 'StandardFolderProvider'
				WHEN 1 THEN 'SecureFolderProvider'
				WHEN 2 THEN 'DatabaseFolderProvider'
				ELSE 'StandardFolderProvider'
			END
		)
	END
	
	SET NOCOUNT OFF;
	INSERT INTO {databaseOwner}[{objectQualifier}Folders] (
		PortalID, 
		UniqueId,
		VersionGuid,
		FolderPath,
		MappedPath, 
		StorageLocation, 
		IsProtected, 
		IsCached, 
		LastUpdated,
		CreatedByUserID,
		CreatedOnDate,
		LastModifiedByUserID,
		LastModifiedOnDate,
		FolderMappingID,
		IsVersioned,
		WorkflowID,
		ParentID
	)
	VALUES (
		@PortalID, 
		@UniqueId,
		@VersionGuid,
		@FolderPath,
		@MappedPath, 
		@StorageLocation, 
		@IsProtected, 
		@IsCached, 
		@LastUpdated,
		@CreatedByUserID,
		getdate(),
		@CreatedByUserID,
		getdate(),
		@FolderMappingID,
		@IsVersioned,
		@WorkflowID,
		@ParentID
	)
	--UPDATE THE PARENT FOLDERS UPDATED DATE TO LASTET DATE
	IF(@@ROWCOUNT>0 AND @ParentID IS NOT NULL)
	BEGIN
		EXEC {databaseOwner}[{objectQualifier}UpdateFolderModifiedOnToCurrentDate] @ParentID
	END

	DECLARE @FolderId INT
    SELECT @FolderId = SCOPE_IDENTITY()
    SELECT @FolderId
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddFolderMapping]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddFolderMapping]
	@PortalID int,
	@MappingName nvarchar(50),
	@FolderProviderType nvarchar(50),
	@CreatedByUserID int
AS
BEGIN
	DECLARE @Priority int

	SELECT TOP 1 @Priority = Priority + 1
	FROM {databaseOwner}[{objectQualifier}FolderMappings]
	WHERE [PortalID] = @PortalID
	ORDER BY Priority DESC

	INSERT INTO {databaseOwner}[{objectQualifier}FolderMappings] (
		PortalID,
		MappingName,
		FolderProviderType,
		Priority,
		CreatedByUserID,
		CreatedOnDate,
		LastModifiedByUserID,
		LastModifiedOnDate
	)
	VALUES (
		@PortalID,
		@MappingName,
		@FolderProviderType,
		@Priority,
		@CreatedByUserID,
		GETDATE(),
		@CreatedByUserID,
		GETDATE()
	)

	SELECT SCOPE_IDENTITY()
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddFolderMappingsSetting]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddFolderMappingsSetting]
	@FolderMappingID int,
	@SettingName nvarchar(50),
	@SettingValue nvarchar(2000),
	@CreatedByUserID int
AS
BEGIN
	INSERT INTO {databaseOwner}[{objectQualifier}FolderMappingsSettings] (
		FolderMappingID,
		SettingName,
		SettingValue,
		CreatedByUserID,
		CreatedOnDate,
		LastModifiedByUserID,
		LastModifiedOnDate
	)
	VALUES (
		@FolderMappingID,
		@SettingName,
		@SettingValue,
		@CreatedByUserID,
		GETDATE(),
		@CreatedByUserID,
		GETDATE()
	)
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddFolderPermission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddFolderPermission]
    @FolderID           Int, -- not Null!
    @PermissionId       Int, -- not Null!
    @RoleId             Int, -- might be negative for virtual roles
    @AllowAccess        Bit, -- false: deny, true: grant
    @UserId             Int, -- -1 is replaced by Null
    @CreatedByUserId    Int  -- -1 is replaced by Null
AS
BEGIN
    INSERT INTO {databaseOwner}[{objectQualifier}FolderPermission] (
        [FolderID],
        [PermissionID],
        [RoleId],
        [AllowAccess],
        [UserId],
        [CreatedByUserId],
        [CreatedOnDate],
        [LastModifiedByUserId],
        [LastModifiedOnDate]
    ) VALUES (
        @FolderID,
        @PermissionID,
        @RoleId,
        @AllowAccess,
        CASE WHEN @UserId = -1 THEN Null ELSE @UserId END,
        CASE WHEN @CreatedByUserID = -1 THEN Null ELSE @CreatedByUserID END,
        GetDate(),
        CASE WHEN @CreatedByUserID = -1 THEN Null ELSE @CreatedByUserID END,
        GetDate()
    )
    SELECT SCOPE_IDENTITY()
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddHeirarchicalTerm]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddHeirarchicalTerm] 
	@VocabularyID		int,
	@ParentTermID		int,
	@Name				nvarchar(250),
	@Description		nvarchar(2500),
	@Weight				int,
	@CreatedByUserID	int
AS

	DECLARE @Left int
	
	-- Get Left value of Sibling that we are inserting before
	SET @Left = (SELECT TOP 1 TermLeft FROM {databaseOwner}{objectQualifier}Taxonomy_Terms 
						WHERE VocabularyID = @VocabularyID 
							AND ParentTermID = @ParentTermID
							AND Name > @Name
						ORDER BY Name)
						
	-- Term is to be inserted at end of sibling list so get the Right value of the parent, which will become our new left value						
	IF @Left IS NULL
		SET @Left = (SELECT TermRight FROM {databaseOwner}{objectQualifier}Taxonomy_Terms 
							WHERE VocabularyID = @VocabularyID 
								AND TermID = @ParentTermID)
								
	-- Left is still null means this is the first term in this vocabulary - set the Left to 1
	IF @Left IS NULL
		SET @Left = 1
								
	BEGIN TRANSACTION
		-- Update Left values for all items that are after new term
		UPDATE {databaseOwner}{objectQualifier}Taxonomy_Terms 
			SET TermLeft = TermLeft + 2 
			WHERE TermLeft >= @Left
				AND VocabularyID = @VocabularyID

		IF @@ERROR = 0
			BEGIN
			-- Update Right values for all items that are after new term
				UPDATE {databaseOwner}{objectQualifier}Taxonomy_Terms 
					SET TermRight = TermRight + 2 
					WHERE TermRight >= @Left
						AND VocabularyID = @VocabularyID

				IF @@ERROR = 0
					BEGIN
							-- Insert new term
							INSERT INTO {databaseOwner}{objectQualifier}Taxonomy_Terms (
								VocabularyID,
								ParentTermID,
								[Name],
								Description,
								Weight,
								TermLeft,
								TermRight,
								CreatedByUserID,
								CreatedOnDate,
								LastModifiedByUserID,
								LastModifiedOnDate
							)

							VALUES (
								@VocabularyID,
								@ParentTermID,
								@Name,
								@Description,
								@Weight,
								@Left,
								@Left + 1,
								@CreatedByUserID,
								getdate(),
								@CreatedByUserID,
								getdate()
							)

							SELECT SCOPE_IDENTITY()

							IF @@ERROR = 0
								BEGIN
									COMMIT TRANSACTION
								END
							ELSE
								BEGIN
									-- Rollback the transaction
									ROLLBACK TRANSACTION		
								END
						END
				ELSE
					BEGIN
						-- Rollback the transaction
						ROLLBACK TRANSACTION
					END
			END
		ELSE
			BEGIN
				-- Rollback the transaction
				ROLLBACK TRANSACTION		
			END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddIPFilter]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddIPFilter]
	@IPAddress nvarchar(50),
	@SubnetMask nvarchar(50),
	@RuleType tinyint,
	@CreatedByUserID			int
AS 
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}IPFilter  
		(
		[IPAddress]
           ,[SubnetMask]
           ,[RuleType]
           ,[CreatedByUserID]
           ,[CreatedOnDate]
           ,[LastModifiedByUserID]
           ,[LastModifiedOnDate]
		)  
		VALUES  
		( 
			@IPAddress , 
			@SubnetMask , 
			@RuleType,
			@CreatedByUserID , 
			getdate() , 
			@CreatedByUserID , 
			getdate() 
		) 
		 
		SELECT SCOPE_IDENTITY()
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddLanguage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddLanguage]

	@CultureCode		    nvarchar(50),
	@CultureName            nvarchar(200),
	@FallbackCulture        nvarchar(50),
	@CreatedByUserID	int

AS
	INSERT INTO {databaseOwner}{objectQualifier}Languages (
		CultureCode,
		CultureName,
		FallbackCulture,
		[CreatedByUserID],
		[CreatedOnDate],
		[LastModifiedByUserID],
		[LastModifiedOnDate]
	)
	VALUES (
		@CultureCode,
		@CultureName,
		@FallbackCulture,
		@CreatedByUserID,
	  	getdate(),
	  	@CreatedByUserID,
	  	getdate()
	)
	SELECT SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddLanguagePack]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddLanguagePack]

	@PackageID			    int,
	@LanguageID			    int,
	@DependentPackageID		int,
	@CreatedByUserID	int

AS
	INSERT INTO {databaseOwner}{objectQualifier}LanguagePacks (
		PackageID,
		LanguageID,
		DependentPackageID,
		[CreatedByUserID],
		[CreatedOnDate],
		[LastModifiedByUserID],
		[LastModifiedOnDate]

	)
	VALUES (
		@PackageID,
		@LanguageID,
		@DependentPackageID,
		@CreatedByUserID,
	  	getdate(),
	  	@CreatedByUserID,
	  	getdate()
	)
	SELECT SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddListEntry]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddListEntry]

	@ListName nvarchar(50), 
	@Value nvarchar(100), 
	@Text nvarchar(150),
	@ParentID int,
	@Level int, 
	@EnableSortOrder bit,
	@DefinitionID int, 
	@Description nvarchar(500),
	@PortalID int,
	@SystemList bit,
	@CreatedByUserID	int

AS
	DECLARE @SortOrder int

	IF @EnableSortOrder = 1
		SET @SortOrder = IsNull((SELECT MAX ([SortOrder]) From {databaseOwner}[{objectQualifier}Lists] Where [ListName] = @ListName), 0) + 1
	ELSE
		SET @SortOrder = 0

	-- Check if this entry exists
	If EXISTS (SELECT [EntryID] From {databaseOwner}[{objectQualifier}Lists] WHERE [PortalID] = @PortalID AND [ListName] = @ListName And [Value] = @Value And [Text] = @Text And [ParentID] = @ParentID)
	BEGIN
		SELECT -1
		RETURN 
	END

	INSERT INTO {databaseOwner}[{objectQualifier}Lists] 
		(
  		[ListName],
		[Value],
		[Text],
		[Level],
		[SortOrder],
		[DefinitionID],
		[ParentID],
		[Description],
		[PortalID],
		[SystemList],
		[CreatedByUserID],
		[CreatedOnDate],
		[LastModifiedByUserID],
		[LastModifiedOnDate]
		)
	VALUES (
		@ListName,
		@Value,
		@Text,
		@Level,
		@SortOrder,
		@DefinitionID,
		@ParentID,
		@Description,
		@PortalID,
		@SystemList,
  		@CreatedByUserID,
	  	getdate(),
	  	@CreatedByUserID,
	  	getdate()	
		)

	SELECT SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddMetaData]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddMetaData] 
	@ContentItemID		int,
	@Name				nvarchar(100),
	@Value				nvarchar(MAX)
AS
	DECLARE @MetaDataID	int
	SET @MetaDataID = (SELECT MetaDataID FROM {objectQualifier}MetaData WHERE MetaDataName = @Name)
	
	IF @MetaDataID IS NULL
		BEGIN
			--Insert new item into MetaData table
			INSERT INTO {databaseOwner}{objectQualifier}MetaData ( MetaDataName ) VALUES ( @Name )

			SET @MetaDataID = (SELECT SCOPE_IDENTITY() )
		END
		
	INSERT INTO {databaseOwner}{objectQualifier}ContentItems_MetaData (
		ContentItemID,
		MetaDataID,
		MetaDataValue
	)
	VALUES (
		@ContentItemID,
		@MetaDataID,
		@Value
	)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddModule]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddModule]
	@ContentItemID				int,
	@PortalID					int,
	@ModuleDefId				int,
	@AllTabs					bit,
	@StartDate					datetime,
	@EndDate					datetime,
	@InheritViewPermissions     bit,
	@IsShareable				bit,
	@IsShareableViewOnly		bit,
	@IsDeleted					bit,
	@CreatedByUserID  			int
	
AS
	INSERT INTO {databaseOwner}{objectQualifier}Modules (
		ContentItemID, 
		PortalId,
		ModuleDefId,
		AllTabs,
		StartDate,
		EndDate,
		InheritViewPermissions,
		IsShareable,
		IsShareableViewOnly,
		IsDeleted,
		CreatedByUserID,
		CreatedOnDate,
		LastModifiedByUserID,
		LastModifiedOnDate
	)
	VALUES (
		@ContentItemID,
		@PortalID,
		@ModuleDefId,
		@AllTabs,
		@StartDate,
		@EndDate,
		@InheritViewPermissions,
		@IsShareable,
		@IsShareableViewOnly,
		@IsDeleted,
		@CreatedByUserID,
		getdate(),
		@CreatedByUserID,
		getdate()
	)

	SELECT SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddModuleControl]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddModuleControl]
	
	@ModuleDefID                int,
	@ControlKey                 nvarchar(50),
	@ControlTitle               nvarchar(50),
	@ControlSrc                 nvarchar(256),
	@IconFile                   nvarchar(100),
	@ControlType                int,
	@ViewOrder                  int,
	@HelpUrl                    nvarchar(200),
	@SupportsPartialRendering   bit,
	@SupportsPopUps				bit,
	@CreatedByUserID			int

AS
	INSERT INTO {databaseOwner}{objectQualifier}ModuleControls (
		ModuleDefID,
		ControlKey,
		ControlTitle,
		ControlSrc,
		IconFile,
		ControlType,
		ViewOrder,
		HelpUrl,
		SupportsPartialRendering,
		SupportsPopUps,
		CreatedByUserID,
		CreatedOnDate,
		LastModifiedByUserID,
		LastModifiedOnDate
	)
	VALUES (
		@ModuleDefID,
		@ControlKey,
		@ControlTitle,
		@ControlSrc,
		@IconFile,
		@ControlType,
		@ViewOrder,
		@HelpUrl,
		@SupportsPartialRendering,
		@SupportsPopUps,
		@CreatedByUserID,
		getdate(),
		@CreatedByUserID,
		getdate()
	)

	SELECT SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddModuleDefinition]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddModuleDefinition]

	@DesktopModuleId int,    
	@FriendlyName    nvarchar(128),
	@DefinitionName nvarchar(128),
	@DefaultCacheTime int,
	@CreatedByUserID  int

as

insert into {databaseOwner}{objectQualifier}ModuleDefinitions (
	DesktopModuleId,
	FriendlyName,
	DefinitionName,
	DefaultCacheTime,
	CreatedByUserID,
	CreatedOnDate,
	LastModifiedByUserID,
	LastModifiedOnDate
)
values (
	@DesktopModuleId,
	@FriendlyName,
	@DefinitionName,
	@DefaultCacheTime,
	@CreatedByUserID,
	getdate(),
	@CreatedByUserID,
	getdate()
)

select SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddModulePermission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddModulePermission]
    @ModuleID           Int, -- not null!
    @PortalID           Int, -- not null!
    @PermissionId       Int, -- not null!
    @RoleId             Int, -- might be negative for virtual roles
    @AllowAccess        Bit, -- false: deny, true: grant
    @UserId             Int, -- -1 is replaced by Null
    @CreatedByUserId    Int  -- -1 is replaced by Null
AS
BEGIN
    INSERT INTO {databaseOwner}[{objectQualifier}ModulePermission] (
        [ModuleID],
        [PortalID],
        [PermissionID],
        [RoleId],
        [AllowAccess],
        [UserId],
        [CreatedByUserId],
        [CreatedOnDate],
        [LastModifiedByUserId],
        [LastModifiedOnDate]
    ) VALUES (
        @ModuleID,
        @PortalID,
        @PermissionID,
        @RoleId,
        @AllowAccess,
        CASE WHEN @UserId = -1 THEN Null ELSE @UserId END,
        CASE WHEN @CreatedByUserID = -1 THEN Null ELSE @CreatedByUserID END,
        GetDate(),
        CASE WHEN @CreatedByUserID = -1 THEN Null ELSE @CreatedByUserID END,
        GetDate()
    )
    SELECT SCOPE_IDENTITY()
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddPackage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddPackage]
	@PortalID			int,
	@Name			    nvarchar(128),
	@FriendlyName	    nvarchar(250),
	@Description	    nvarchar(2000),
	@PackageType	    nvarchar(50),
	@Version		    nvarchar(50),
	@License		    ntext,
	@Manifest		    ntext,
	@Owner				nvarchar(100),
	@Organization		nvarchar(100),
	@Url				nvarchar(250),
	@Email				nvarchar(100),
	@ReleaseNotes	    ntext,
	@IsSystemPackage    bit,
	@CreatedByUserID	int,
	@FolderName			nvarchar(127),
	@IconFile			nvarchar(100)
AS
	INSERT INTO {databaseOwner}{objectQualifier}Packages
	(
		PortalID,
		[Name],
		FriendlyName,
		[Description],
		PackageType,
		Version,
		License,
		Manifest,
		ReleaseNotes,
		[Owner],
		Organization,
		Url,
		Email,
		IsSystemPackage,
		[CreatedByUserID],
		[CreatedOnDate],
		[LastModifiedByUserID],
		[LastModifiedOnDate],
		FolderName,
		IconFile
	)
	VALUES (
		@PortalID,
		@Name,
		@FriendlyName,
		@Description,
		@PackageType,
		@Version,
		@License,
		@Manifest,
		@ReleaseNotes,
		@Owner,
		@Organization,
		@Url,
		@Email,
		@IsSystemPackage,
		@CreatedByUserID,
		getdate(),
		@CreatedByUserID,
		getdate(),
		@FolderName,
		@IconFile
	)
	SELECT SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddPasswordHistory]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddPasswordHistory]
	@UserId             int,
	@Password           nvarchar(128),
	@PasswordSalt       nvarchar(128),
	@PasswordsRetained  int,
	@DaysRetained       int,
	@CreatedByUserID    int
AS

	BEGIN

	INSERT INTO {databaseOwner}{objectQualifier}PasswordHistory (
		UserId,
		[Password],
		PasswordSalt,
		CreatedByUserID,
		CreatedOnDate,
		LastModifiedByUserID,
		LastModifiedOnDate
	)
	VALUES (
		@UserId,
		@Password,
		@PasswordSalt,
		@CreatedByUserID,
		GETDATE(),
		@CreatedByUserID,
		GETDATE()
	)

	DELETE FROM {databaseOwner}{objectQualifier}PasswordHistory
	WHERE UserID=@UserId
	  AND PasswordHistoryID NOT IN (
		SELECT TOP (@PasswordsRetained) PasswordHistoryID
		FROM {databaseOwner}{objectQualifier}PasswordHistory
		WHERE UserID=@UserId
		ORDER BY CreatedOnDate DESC
		)
	  AND DATEDIFF(day, CreatedOnDate, GETDATE()) > @DaysRetained

	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddPermission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddPermission]
	@ModuleDefID		int,
	@PermissionCode		varchar(50),
	@PermissionKey		varchar(50),
	@PermissionName		varchar(50),
	@CreatedByUserID	int
AS

INSERT INTO {databaseOwner}{objectQualifier}Permission (
	[ModuleDefID],
	[PermissionCode],
	[PermissionKey],
	[PermissionName],
	[CreatedByUserID],
	[CreatedOnDate],
	[LastModifiedByUserID],
	[LastModifiedOnDate]
) VALUES (
	@ModuleDefID,
	@PermissionCode,
	@PermissionKey,
	@PermissionName,
	@CreatedByUserID,
	getdate(),
	@CreatedByUserID,
	getdate()
)

select SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddPortalAlias]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddPortalAlias]
	@PortalID 			int,
	@HTTPAlias 			nvarchar(200),
	@CultureCode		nvarchar(10),
	@Skin				nvarchar(100),
	@BrowserType		nvarchar(10),
	@IsPrimary			bit,
	@CreatedByUserID	int

AS

	IF @IsPrimary = 1
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}PortalAlias
				SET IsPrimary = 0
				WHERE (CultureCode = @CultureCode OR (CultureCode IS NULL AND @CultureCode IS NULL))
					AND (BrowserType = @BrowserType OR (BrowserType IS NULL AND @BrowserType IS NULL))
					AND (PortalID = @PortalID)
		END

	INSERT INTO {databaseOwner}{objectQualifier}PortalAlias (
		PortalID, 
		HTTPAlias,
		CultureCode,
		BrowserTYpe,
		Skin,
		IsPrimary,
		CreatedByUserID,
		CreatedOnDate,
		LastModifiedByUserID,
		LastModifiedOnDate
	)
	VALUES (
		@PortalID, 
		@HTTPAlias,
		@CultureCode,
		@BrowserTYpe,
		@Skin,
		@IsPrimary,
		@CreatedByUserID,
		getdate(),
		@CreatedByUserID,
		getdate()
	 )

	SELECT SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddPortalDesktopModule]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddPortalDesktopModule]
	@PortalID			int,
	@DesktopModuleId	int,
	@CreatedByUserID	int

as

insert into {databaseOwner}{objectQualifier}PortalDesktopModules ( 
	PortalId,
	DesktopModuleId,
	CreatedByUserID,
	CreatedOnDate,
	LastModifiedByUserID,
	LastModifiedOnDate
)
values (
	@PortalID,
	@DesktopModuleId,
	@CreatedByUserID,
	getdate(),
	@CreatedByUserID,
	getdate()
)

select SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddPortalGroup]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddPortalGroup]
	@PortalGroupName			nvarchar(100),
	@PortalGroupDescription		nvarchar(2000),
	@MasterPortalID				int,
	@AuthenticationDomain		nvarchar(200),
	@CreatedByUserID			int
AS 
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}PortalGroups  
		( 
			PortalGroupName  , 
			PortalGroupDescription  ,
			MasterPortalID,
			AuthenticationDomain, 
			CreatedByUserID , 
			CreatedOnDate , 
			LastModifiedByUserID , 
			LastModifiedOnDate  
		)  
		VALUES  
		( 
			@PortalGroupName , 
			@PortalGroupDescription , 
			@MasterPortalID,
			@AuthenticationDomain, 
			@CreatedByUserID , 
			getdate() , 
			@CreatedByUserID , 
			getdate() 
		) 
		 
		SELECT SCOPE_IDENTITY()
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddPortalInfo]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddPortalInfo]
	@PortalName         nvarchar(128),
	@Currency           char(3),
	@ExpiryDate         datetime,
	@HostFee            money,
	@HostSpace          int,
	@PageQuota          int,
	@UserQuota          int,
	@SiteLogHistory     int,
	@HomeDirectory		varchar(100),
	@CultureCode		nvarchar(50),
	@CreatedByUserID	int
AS

DECLARE @PortalID int

insert into {databaseOwner}{objectQualifier}Portals (
  ExpiryDate,
  UserRegistration,
  BannerAdvertising,
  Currency,
  HostFee,
  HostSpace,
  PageQuota,
  UserQuota,
  SiteLogHistory,
  DefaultLanguage,
  HomeDirectory,
  CreatedByUserID,
  CreatedOnDate,
  LastModifiedByUserID,
  LastModifiedOnDate
)
values (
  @ExpiryDate,
  0,
  0,
  @Currency,
  @HostFee,
  @HostSpace,
  @PageQuota,
  @UserQuota,
  @SiteLogHistory,
  @CultureCode,
  @HomeDirectory,
  @CreatedByUserID,
  getdate(),
  @CreatedByUserID,
  getdate()
)

SET @PortalID = SCOPE_IDENTITY()

IF @HomeDirectory = ''
BEGIN
	UPDATE {databaseOwner}{objectQualifier}Portals SET HomeDirectory = 'Portals/' + convert(varchar(10), @PortalID) WHERE PortalID = @PortalID
END

insert into {databaseOwner}{objectQualifier}PortalLocalization (PortalID,CultureCode,PortalName,Description,KeyWords)
			values (@PortalID,@CultureCode,@PortalName,@PortalName,@PortalName)
           
  
SELECT @PortalID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddPortalLanguage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddPortalLanguage]
    @PortalId			int,
    @LanguageId			int,
    @IsPublished		bit,
    @CreatedByUserID	int

AS
    DECLARE @PortalLanguageId INT
    DECLARE @CultureCode NVARCHAR(50)

    INSERT INTO {databaseOwner}{objectQualifier}PortalLanguages (
        PortalId,
        LanguageId,
        IsPublished,
        [CreatedByUserID],
        [CreatedOnDate],
        [LastModifiedByUserID],
        [LastModifiedOnDate]
    )
    VALUES (
        @PortalId,
        @LanguageId,
        @IsPublished,
        @CreatedByUserID,
        getdate(),
        @CreatedByUserID,
        getdate()
    )

    SELECT @PortalLanguageId = SCOPE_IDENTITY()

	SELECT @CultureCode = CultureCode FROM {databaseOwner}{objectQualifier}Languages WHERE LanguageID = @LanguageId

    SELECT @PortalLanguageId

	EXEC {databaseOwner}{objectQualifier}EnsureLocalizationExists @PortalID = @PortalId, @CultureCode = @CultureCode
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddProfile]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure {databaseOwner}[{objectQualifier}AddProfile]

@UserID        int, 
@PortalID      int

as

insert into {databaseOwner}{objectQualifier}Profile (
  UserId,
  PortalId,
  ProfileData,
  CreatedDate
)
values (
  @UserID,
  @PortalID,
  '',
  getdate()
)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddPropertyDefinition]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddPropertyDefinition]
	@PortalId int,
	@ModuleDefId int,
	@DataType int,
	@DefaultValue nvarchar(max),
	@PropertyCategory nvarchar(50),
	@PropertyName nvarchar(50),
	@ReadOnly bit,
	@Required bit,
	@ValidationExpression nvarchar(2000),
	@ViewOrder int,
	@Visible bit,
    @Length int,
    @DefaultVisibility int,
	@CreatedByUserID int

AS
	DECLARE @PropertyDefinitionId int

	SELECT @PropertyDefinitionId = PropertyDefinitionId
		FROM   {databaseOwner}{objectQualifier}ProfilePropertyDefinition
		WHERE  (PortalId = @PortalId OR (PortalId IS NULL AND @PortalId IS NULL))
			AND PropertyName = @PropertyName
			
	IF @vieworder=-1
		BEGIN
			SELECT	@vieworder = MAX(ViewOrder) + 1 
			FROM	{databaseOwner}{objectQualifier}ProfilePropertyDefinition
		END

	IF @PropertyDefinitionId IS NULL
		BEGIN
			INSERT {databaseOwner}{objectQualifier}ProfilePropertyDefinition	(
					PortalId,
					ModuleDefId,
					Deleted,
					DataType,
					DefaultValue,
					PropertyCategory,
					PropertyName,
					ReadOnly,
					Required,
					ValidationExpression,
					ViewOrder,
					Visible,
					Length,
                    DefaultVisibility,
					[CreatedByUserID],
					[CreatedOnDate],
					[LastModifiedByUserID],
					[LastModifiedOnDate]

				)
				VALUES	(
					@PortalId,
					@ModuleDefId,
					0,
					@DataType,
					@DefaultValue,
					@PropertyCategory,
					@PropertyName,
					@ReadOnly,
					@Required,
					@ValidationExpression,
					@ViewOrder,
					@Visible,
					@Length,
                    @DefaultVisibility,
					@CreatedByUserID,
  					getdate(),
  					@CreatedByUserID,
  					getdate()
				)

			SELECT @PropertyDefinitionId = SCOPE_IDENTITY()
		END
	ELSE
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}ProfilePropertyDefinition 
				SET DataType = @DataType,
					ModuleDefId = @ModuleDefId,
					DefaultValue = @DefaultValue,
					PropertyCategory = @PropertyCategory,
					ReadOnly = @ReadOnly,
					Required = @Required,
					ValidationExpression = @ValidationExpression,
					ViewOrder = @ViewOrder,
					Deleted = 0,
					Visible = @Visible,
					Length = @Length,
                    DefaultVisibility = @DefaultVisibility,
					[LastModifiedByUserID] = @CreatedByUserID,	
					[LastModifiedOnDate] = getdate()
				WHERE PropertyDefinitionId = @PropertyDefinitionId
		END
		
	SELECT @PropertyDefinitionId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddRedirectMessage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddRedirectMessage]
	@UserId int,
	@TabId int,
	@Text [nvarchar](max)
AS
	INSERT INTO {databaseOwner}{objectQualifier}RedirectMessages
		(UserId, TabId, MessageText)
	OUTPUT inserted.MessageId
	VALUES(@UserId, @TabId, @Text)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddRole]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddRole] 
	@PortalID         int,
	@RoleGroupId      int,
	@RoleName         nvarchar(50),
	@Description      nvarchar(1000),
	@ServiceFee       money,
	@BillingPeriod    int,
	@BillingFrequency char(1),
	@TrialFee         money,
	@TrialPeriod      int,
	@TrialFrequency   char(1),
	@IsPublic         bit,
	@AutoAssignment   bit,
	@RSVPCode         nvarchar(50),
	@IconFile         nvarchar(100),
	@CreatedByUserID  int,
	@Status			  int,
	@SecurityMode   int,
	@IsSystemRole bit
AS
	INSERT INTO {databaseOwner}{objectQualifier}Roles (
	  PortalId,
	  RoleGroupId,
	  RoleName,
	  Description,
	  ServiceFee,
	  BillingPeriod,
	  BillingFrequency,
	  TrialFee,
	  TrialPeriod,
	  TrialFrequency,
	  IsPublic,
	  AutoAssignment,
	  RSVPCode,
	  IconFile,
	  CreatedByUserID,
	  CreatedOnDate,
	  LastModifiedByUserID,
	  LastModifiedOnDate,
	  Status,
	  SecurityMode,
	  IsSystemRole
	)
	VALUES (
	  @PortalID,
	  @RoleGroupId,
	  @RoleName,
	  @Description,
	  @ServiceFee,
	  @BillingPeriod,
	  @BillingFrequency,
	  @TrialFee,
	  @TrialPeriod,
	  @TrialFrequency,
	  @IsPublic,
	  @AutoAssignment,
	  @RSVPCode,
	  @IconFile,
	  @CreatedByUserID,
	  getdate(),
	  @CreatedByUserID,
	  getdate(),
	  @Status,
	  @SecurityMode,
	  @IsSystemRole
	)
	SELECT SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddRoleGroup]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddRoleGroup] 
	@PortalID         int,
	@RoleGroupName    nvarchar(50),
	@Description      nvarchar(1000),
	@CreatedByUserID  int
AS

	INSERT INTO {databaseOwner}{objectQualifier}RoleGroups (
	  PortalId,
	  RoleGroupName,
	  Description,
	  CreatedByUserID,
	  CreatedOnDate,
	  LastModifiedByUserID,
	  LastModifiedOnDate
	)
	VALUES (
	  @PortalID,
	  @RoleGroupName,
	  @Description,
	  @CreatedByUserID,
	  getdate(),
	  @CreatedByUserID,
	  getdate()
	)

SELECT SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddSchedule]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddSchedule]
	@TypeFullName varchar(200)
	,@TimeLapse int
	,@TimeLapseMeasurement varchar(2)
	,@RetryTimeLapse int
	,@RetryTimeLapseMeasurement varchar(2)
	,@RetainHistoryNum int
	,@AttachToEvent varchar(50)
	,@CatchUpEnabled bit
	,@Enabled bit
	,@ObjectDependencies varchar(300)
	,@Servers varchar(150)
	,@CreatedByUserID	int
	,@FriendlyName varchar(200)
	,@ScheduleStartDate datetime
AS
	INSERT INTO  {databaseOwner}{objectQualifier}Schedule(
		 TypeFullName
		,TimeLapse
		,TimeLapseMeasurement
		,RetryTimeLapse
		,RetryTimeLapseMeasurement
		,RetainHistoryNum
		,AttachToEvent
		,CatchUpEnabled
		,Enabled
		,ObjectDependencies
		,Servers
		,FriendlyName
		,[CreatedByUserID]
		,[CreatedOnDate]
		,[LastModifiedByUserID]
		,[LastModifiedOnDate]
		,ScheduleStartDate
		)
	VALUES
		(@TypeFullName
		,@TimeLapse
		,@TimeLapseMeasurement
		,@RetryTimeLapse
		,@RetryTimeLapseMeasurement
		,@RetainHistoryNum
		,@AttachToEvent
		,@CatchUpEnabled
		,@Enabled
		,@ObjectDependencies
		,@Servers
		,@FriendlyName
		,@CreatedByUserID
		,getdate()
		,@CreatedByUserID
		,getdate()
		,@ScheduleStartDate
		)
		select SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddScheduleHistory]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddScheduleHistory]
@ScheduleID int,
@StartDate datetime,
@Server varchar(150)
AS
INSERT INTO {databaseOwner}{objectQualifier}ScheduleHistory
(ScheduleID,
StartDate,
Server)
VALUES
(@ScheduleID,
@StartDate,
@Server)

select SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddScheduleItemSetting]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddScheduleItemSetting]
	@ScheduleID int,
	@Name nvarchar(50),
	@Value nvarchar(256)
AS
BEGIN
	UPDATE {databaseOwner}[{objectQualifier}ScheduleItemSettings]
	SET SettingValue = @Value
	WHERE ScheduleID = @ScheduleID
	AND SettingName = @Name

	IF @@ROWCOUNT = 0 BEGIN
		INSERT INTO {databaseOwner}[{objectQualifier}ScheduleItemSettings] (ScheduleID, SettingName, Settingvalue)
		VALUES (@ScheduleID, @Name, @Value)
	END
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddScopeType]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddScopeType] 
	@ScopeType			nvarchar(250)
AS
	INSERT INTO {databaseOwner}{objectQualifier}Taxonomy_ScopeTypes (
		ScopeType
	)

	VALUES (
		@ScopeType
	)

	SELECT SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddSearchCommonWord]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddSearchCommonWord]
	@CommonWord nvarchar(255),
	@Locale nvarchar(10)
AS

INSERT INTO {databaseOwner}{objectQualifier}SearchCommonWords (
	[CommonWord],
	[Locale]
) VALUES (
	@CommonWord,
	@Locale
)

select SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddSimpleTerm]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddSimpleTerm] 
	@VocabularyID		int,
	@Name				nvarchar(250),
	@Description		nvarchar(2500),
	@Weight				int,
	@CreatedByUserID	int
AS
	INSERT INTO {databaseOwner}{objectQualifier}Taxonomy_Terms (
		VocabularyID,
		[Name],
		Description,
		Weight,
		CreatedByUserID,
		CreatedOnDate,
		LastModifiedByUserID,
		LastModifiedOnDate
	)

	VALUES (
		@VocabularyID,
		@Name,
		@Description,
		@Weight,
		@CreatedByUserID,
		getdate(),
		@CreatedByUserID,
		getdate()
	)

	SELECT SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddSkin]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddSkin]
	@SkinPackageID		int,
    @SkinSrc			nvarchar(200)		
AS
	BEGIN
		IF NOT EXISTS (
			SELECT 1 FROM {databaseOwner}{objectQualifier}Skins S
				WHERE S.SkinPackageID = @SkinPackageID AND S.SkinSrc = @SkinSrc
			)
			BEGIN
				INSERT INTO {databaseOwner}{objectQualifier}Skins (SkinPackageID, SkinSrc)
				VALUES (@SkinPackageID, @SkinSrc)
			END
	END
	
	SELECT SkinID FROM {databaseOwner}{objectQualifier}Skins S
		WHERE S.SkinPackageID = @SkinPackageID AND S.SkinSrc = @SkinSrc
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddSkinControl]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddSkinControl]
	
	@PackageID					int,
	@ControlKey                 nvarchar(50),
	@ControlSrc                 nvarchar(256),
	@SupportsPartialRendering   bit,
	@CreatedByUserID	int

AS
	INSERT INTO {databaseOwner}{objectQualifier}SkinControls (
	  PackageID,
	  ControlKey,
	  ControlSrc,
      SupportsPartialRendering,
		[CreatedByUserID],
		[CreatedOnDate],
		[LastModifiedByUserID],
		[LastModifiedOnDate]
	)
	VALUES (
	  @PackageID,
	  @ControlKey,
	  @ControlSrc,
      @SupportsPartialRendering,
		@CreatedByUserID,
		getdate(),
		@CreatedByUserID,
		getdate()
	)

	SELECT SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddSkinPackage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddSkinPackage]
	@PackageID  int,
	@PortalID   int,
	@SkinName   nvarchar(50),
	@SkinType   nvarchar(20),
	@CreatedByUserID	int
AS
	INSERT INTO {databaseOwner}{objectQualifier}SkinPackages (
	  PackageID,
	  PortalID,
	  SkinName,
	  SkinType,
	[CreatedByUserID],
	[CreatedOnDate],
	[LastModifiedByUserID],
	[LastModifiedOnDate]
	)
	VALUES (
	  @PackageID,
	  @PortalID,
	  @SkinName,
	  @SkinType,
	  @CreatedByUserID,
	  getdate(),
	  @CreatedByUserID,
	  getdate()
	)
	SELECT SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddSynonymsGroup]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddSynonymsGroup]
	@SynonymsTags 			nvarchar(MAX),
	@CreatedByUserID 		int,
	@PortalID				int,
	@CultureCode            nvarchar(50)
AS
BEGIN	
	INSERT INTO {databaseOwner}[{objectQualifier}SynonymsGroups](
		[SynonymsTags],  
		[CreatedByUserID],  
		[CreatedOnDate],  
		[LastModifiedByUserID],  
		[LastModifiedOnDate],
		[PortalID],
		[CultureCode]
	) VALUES (
		@SynonymsTags,
		@CreatedByUserID,
	    GETUTCDATE(),
		@CreatedByUserID,
		GETUTCDATE(),
		@PortalID,
		@CultureCode
	)	

	SELECT SCOPE_IDENTITY()
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddSystemMessage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure {databaseOwner}[{objectQualifier}AddSystemMessage]

@PortalID     int,
@MessageName  nvarchar(50),
@MessageValue ntext

as

insert into {databaseOwner}{objectQualifier}SystemMessages (
  PortalID,
  MessageName,
  MessageValue
)
values (
  @PortalID,
  @MessageName,
  @MessageValue
)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddTab]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddTab]
    @ContentItemID          Int,
    @PortalID               Int,
    @TabOrder               Int,
    @UniqueId               UniqueIdentifier,
    @VersionGuid            UniqueIdentifier,
    @DefaultLanguageGuid    UniqueIdentifier,
    @LocalizedVersionGuid   UniqueIdentifier,
    @TabName                nVarChar(200),
    @IsVisible              Bit,
    @DisableLink            Bit,
    @ParentId               Int,
    @IconFile               nVarChar(255),
    @IconFileLarge          nVarChar(255),
    @Title                  nVarChar(200),
    @Description            nVarChar(500),
    @KeyWords               nVarChar(500),
    @Url                    nVarChar(255),
    @SkinSrc                nVarChar(200),
    @ContainerSrc           nVarChar(200),
    @StartDate              DateTime,
    @EndDate                DateTime,
    @RefreshInterval        Int,
    @PageHeadText           nVarChar(Max),
    @IsSecure               Bit,
    @PermanentRedirect      Bit,
    @SiteMapPriority        Float,
    @CreatedByUserID        Int,
    @CultureCode            nVarChar( 10),
    @IsSystem               bit
AS
BEGIN
    INSERT INTO {databaseOwner}{objectQualifier}Tabs (
        ContentItemID,
        PortalID,
        TabOrder,
        UniqueId,
        VersionGuid,
        DefaultLanguageGuid,
        LocalizedVersionGuid,
        TabName,
        IsVisible,
        DisableLink,
        ParentId,
        IconFile,
        IconFileLarge,
        Title,
        Description,
        KeyWords,
        IsDeleted,
        Url,
        SkinSrc,
        ContainerSrc,
        StartDate,
        EndDate,
        RefreshInterval,
        PageHeadText,
        IsSecure,
        PermanentRedirect,
        SiteMapPriority,
        CreatedByUserID,
        CreatedOnDate,
        LastModifiedByUserID,
        LastModifiedOnDate,
        CultureCode,
        IsSystem
    )
    VALUES (
        @ContentItemID,
        @PortalID,
        @TabOrder,
        @UniqueId,
        @VersionGuid,
        @DefaultLanguageGuid,
        @LocalizedVersionGuid,
        @TabName,
        @IsVisible,
        @DisableLink,
        @ParentId,
        @IconFile,
        @IconFileLarge,
        @Title,
        @Description,
        @KeyWords,
        0,
        @Url,
        @SkinSrc,
        @ContainerSrc,
        @StartDate,
        @EndDate,
        @RefreshInterval,
        @PageHeadText,
        @IsSecure,
        @PermanentRedirect,
        @SiteMapPriority,
        @CreatedByUserID,
        getdate(),
        @CreatedByUserID,
        getdate(),
        @CultureCode,
        @IsSystem
    )
    DECLARE @TabId Int = SCOPE_IDENTITY();
    EXEC {databaseOwner}{objectQualifier}BuildTabLevelAndPath @TabId;
    SELECT @TabId;
    RETURN @TabId;
END /* Procedure */
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddTabAfter]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddTabAfter]
    @AfterTabID             Int,
    @ContentItemID          Int,
    @PortalID               Int,
    @UniqueID               UniqueIdentifier,
    @VersionGuid            UniqueIdentifier,
    @DefaultLanguageGuid    UniqueIdentifier,
    @LocalizedVersionGuid   UniqueIdentifier,
    @TabName                nVarChar(200),
    @IsVisible              Bit,
    @DisableLink            Bit,
    @ParentID               Int,
    @IconFile               nVarChar(255),
    @IconFileLarge          nVarChar(255),
    @Title                  nVarChar(200),
    @Description            nVarChar(500),
    @KeyWords               nVarChar(500),
    @Url                    nVarChar(255),
    @SkinSrc                nVarChar(200),
    @ContainerSrc           nVarChar(200),
    @StartDate              DateTime,
    @EndDate                DateTime,
    @RefreshInterval        Int,
    @PageHeadText           nVarChar(max),
    @IsSecure               Bit,
    @PermanentRedirect      Bit,
    @SiteMapPriority        Float,
    @CreatedByUserID        Int,
    @CultureCode            nVarChar( 10),
    @IsSystem               Bit
AS
BEGIN
    DECLARE @TabId    Int
    DECLARE @TabOrder Int = (SELECT TabOrder FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @AfterTabID)

    -- Update TabOrders for all Tabs higher than @TabOrder
    UPDATE {databaseOwner}{objectQualifier}Tabs
       SET TabOrder = TabOrder + 2
     WHERE (ParentId = @ParentID OR (ParentId IS NULL AND @ParentID IS NULL))
       AND TabOrder > @TabOrder
       AND (PortalId = @PortalID OR (PortalId IS NULL AND @PortalID IS NULL))

    -- Create Tab
    SET @TabOrder = @TabOrder + 2
    EXECUTE @TabId = {databaseOwner}{objectQualifier}AddTab
                        @ContentItemID,
                        @PortalID,
                        @TabOrder,
                        @UniqueId,
                        @VersionGuid,
                        @DefaultLanguageGuid,
                        @LocalizedVersionGuid,
                        @TabName,
                        @IsVisible,
                        @DisableLink,
                        @ParentID,
                        @IconFile,
                        @IconFileLarge,
                        @Title,
                        @Description,
                        @KeyWords,
                        @Url,
                        @SkinSrc,
                        @ContainerSrc,
                        @StartDate,
                        @EndDate,
                        @RefreshInterval,
                        @PageHeadText,
                        @IsSecure,
                        @PermanentRedirect,
                        @SiteMapPriority,
                        @CreatedByUserID,
                        @CultureCode,
                        @IsSystem;

    -- Update Content Item
    UPDATE {databaseOwner}{objectQualifier}ContentItems
       SET TabID = @TabId
     WHERE ContentItemID = @ContentItemID;

    SELECT @TabId;
END /* Procedure */
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddTabBefore]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddTabBefore]
    @BeforeTabID            Int,
    @ContentItemID          Int,
    @PortalID               Int,
    @UniqueID               UniqueIdentifier,
    @VersionGuid            UniqueIdentifier,
    @DefaultLanguageGuid    UniqueIdentifier,
    @LocalizedVersionGuid   UniqueIdentifier,
    @TabName                nVarChar(200),
    @IsVisible              Bit,
    @DisableLink            Bit,
    @ParentID               Int,
    @IconFile               nVarChar(255),
    @IconFileLarge          nVarChar(255),
    @Title                  nVarChar(200),
    @Description            nVarChar(500),
    @KeyWords               nVarChar(500),
    @Url                    nVarChar(255),
    @SkinSrc                nVarChar(200),
    @ContainerSrc           nVarChar(200),
    @StartDate              DateTime,
    @EndDate                DateTime,
    @RefreshInterval        Int,
    @PageHeadText           nVarChar(max),
    @IsSecure               Bit,
    @PermanentRedirect      Bit,
    @SiteMapPriority        Float,
    @CreatedByUserID        Int,
    @CultureCode            nVarChar( 10),
    @IsSystem               Bit
AS
BEGIN
    DECLARE @TabID    Int
    DECLARE @TabOrder Int = (SELECT TabOrder FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @BeforeTabID);

    -- Update TabOrders for all Tabs higher than @TabOrder
    UPDATE {databaseOwner}{objectQualifier}Tabs
       SET TabOrder = TabOrder + 2
     WHERE (ParentId = @ParentId OR (ParentID IS NULL AND @ParentID IS NULL))
       AND TabOrder >= @TabOrder
       AND (PortalId = @PortalId OR (PortalID IS NULL AND @PortalID IS NULL))

    -- Create Tab
    EXECUTE @TabId = {databaseOwner}{objectQualifier}AddTab
                        @ContentItemID,
                        @PortalID,
                        @TabOrder,
                        @UniqueID,
                        @VersionGuid,
                        @DefaultLanguageGuid,
                        @LocalizedVersionGuid,
                        @TabName,
                        @IsVisible,
                        @DisableLink,
                        @ParentID,
                        @IconFile,
                        @IconFileLarge,
                        @Title,
                        @Description,
                        @KeyWords,
                        @Url,
                        @SkinSrc,
                        @ContainerSrc,
                        @StartDate,
                        @EndDate,
                        @RefreshInterval,
                        @PageHeadText,
                        @IsSecure,
                        @PermanentRedirect,
                        @SiteMapPriority,
                        @CreatedByUserID,
                        @CultureCode,
                        @IsSystem;

    -- Update Content Item
    UPDATE {databaseOwner}{objectQualifier}ContentItems
       SET TabID = @TabId
     WHERE ContentItemID = @ContentItemID;

    SELECT @TabId;
END /* Procedure */
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddTabModule]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddTabModule]
    @TabId                  int,
    @ModuleId               int,
	@ModuleTitle			nvarchar(256),
	@Header					ntext,
	@Footer					ntext,
    @ModuleOrder            int,
    @PaneName               nvarchar(50),
    @CacheTime              int,
    @CacheMethod			varchar(50),
    @Alignment              nvarchar(10),
    @Color                  nvarchar(20),
    @Border                 nvarchar(1),
    @IconFile               nvarchar(100),
    @Visibility             int,
    @ContainerSrc           nvarchar(200),
    @DisplayTitle           bit,
    @DisplayPrint           bit,
    @DisplaySyndicate       bit,
    @UniqueId				uniqueidentifier,
    @VersionGuid			uniqueidentifier,
    @DefaultLanguageGuid	uniqueidentifier,
    @LocalizedVersionGuid	uniqueidentifier,
    @CultureCode			nvarchar(10),
    @CreatedByUserID  		int

AS
    INSERT INTO {databaseOwner}{objectQualifier}TabModules ( 
        TabId,
        ModuleId,
        ModuleTitle,
        Header,
        Footer,
		ModuleOrder,
        PaneName,
        CacheTime,
        CacheMethod,
        Alignment,
        Color,
        Border,
        IconFile,
        Visibility,
        ContainerSrc,
        DisplayTitle,
        DisplayPrint,
        DisplaySyndicate,
        UniqueId,
        VersionGuid,
        DefaultLanguageGuid,
        LocalizedVersionGuid,
        CultureCode,
        CreatedByUserID,
        CreatedOnDate,
        LastModifiedByUserID,
        LastModifiedOnDate
    )
    VALUES (
        @TabId,
        @ModuleId,
        @ModuleTitle,
        @Header,
        @Footer,
        @ModuleOrder,
        @PaneName,
        @CacheTime,
        @CacheMethod,
        @Alignment,
        @Color,
        @Border,
        @IconFile,
        @Visibility,
        @ContainerSrc,
        @DisplayTitle,
        @DisplayPrint,
        @DisplaySyndicate,
        @UniqueId,
        @VersionGuid,
        @DefaultLanguageGuid,
        @LocalizedVersionGuid,
        @CultureCode,
        @CreatedByUserID,
        getdate(),
        @CreatedByUserID,
        getdate()
    )

GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddTabPermission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddTabPermission]
    @TabID              Int, -- not null!
    @PermissionId       Int, -- not null!
    @RoleId             Int, -- might be negative for virtual roles
    @AllowAccess        Bit, -- false: deny, true: grant
    @UserId             Int, -- -1 is replaced by Null
    @CreatedByUserId    Int  -- -1 is replaced by Null
AS
BEGIN
    INSERT INTO {databaseOwner}[{objectQualifier}TabPermission] (
        [TabID],
        [PermissionID],
        [RoleId],
        [AllowAccess],
        [UserId],
        [CreatedByUserId],
        [CreatedOnDate],
        [LastModifiedByUserId],
        [LastModifiedOnDate]
    ) VALUES (
        @TabID,
        @PermissionID,
        @RoleId,
        @AllowAccess,
        CASE WHEN @UserId = -1 THEN Null ELSE @UserId END,
        CASE WHEN @CreatedByUserID = -1 THEN Null ELSE @CreatedByUserID END,
        GetDate(),
        CASE WHEN @CreatedByUserID = -1 THEN Null ELSE @CreatedByUserID END,
        GetDate()
    )
    SELECT SCOPE_IDENTITY()
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddTabToEnd]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddTabToEnd]
    @ContentItemID          Int,
    @PortalID               Int,
    @UniqueID               UniqueIdentifier,
    @VersionGuid            UniqueIdentifier,
    @DefaultLanguageGuid    UniqueIdentifier,
    @LocalizedVersionGuid   UniqueIdentifier,
    @TabName                nVarChar(200),
    @IsVisible              Bit,
    @DisableLink            Bit,
    @ParentID               Int,
    @IconFile               nVarChar(255),
    @IconFileLarge          nVarChar(255),
    @Title                  nVarChar(200),
    @Description            nVarChar(500),
    @KeyWords               nVarChar(500),
    @Url                    nVarChar(255),
    @SkinSrc                nVarChar(200),
    @ContainerSrc           nVarChar(200),
    @StartDate              DateTime,
    @EndDate                DateTime,
    @RefreshInterval        Int,
    @PageHeadText           nVarChar(max),
    @IsSecure               Bit,
    @PermanentRedirect      Bit,
    @SiteMapPriority        Float,
    @CreatedByUserID        Int,
    @CultureCode            nVarChar( 10),
    @IsSystem               Bit
AS
BEGIN
    DECLARE @TabId Int
    DECLARE @TabOrder Int
    SET @TabOrder = (SELECT MAX(TabOrder) FROM {databaseOwner}{objectQualifier}Tabs
                     WHERE (PortalId = @PortalID OR (PortalID IS NULL AND @PortalID IS NULL))
                       AND (ParentId = @ParentID OR (ParentID IS NULL AND @ParentID IS NULL))
                    )
    IF @TabOrder IS NULL
        SET @TabOrder = 1
    ELSE
        SET @TabOrder = @TabOrder + 2

    -- Create Tab
    EXECUTE @TabId = {databaseOwner}{objectQualifier}AddTab
                        @ContentItemID,
                        @PortalID,
                        @TabOrder,
                        @UniqueId,
                        @VersionGuid,
                        @DefaultLanguageGuid,
                        @LocalizedVersionGuid,
                        @TabName,
                        @IsVisible,
                        @DisableLink,
                        @ParentId,
                        @IconFile,
                        @IconFileLarge,
                        @Title,
                        @Description,
                        @KeyWords,
                        @Url,
                        @SkinSrc,
                        @ContainerSrc,
                        @StartDate,
                        @EndDate,
                        @RefreshInterval,
                        @PageHeadText,
                        @IsSecure,
                        @PermanentRedirect,
                        @SiteMapPriority,
                        @CreatedByUserID,
                        @CultureCode,
                        @IsSystem;

    -- Update Content Item
    UPDATE {databaseOwner}{objectQualifier}ContentItems
       SET TabID = @TabId
     WHERE ContentItemID = @ContentItemID;

    SELECT @TabId;
END /* Procedure */
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddTermToContent]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddTermToContent] 
	@TermID			int,
	@ContentItemID	int
AS
	INSERT INTO {databaseOwner}{objectQualifier}ContentItems_Tags (
		TermID,
		ContentItemID
	)

	VALUES (
		@TermID,
		@ContentItemID
	)

	SELECT SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddUrl]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure {databaseOwner}[{objectQualifier}AddUrl]

@PortalID     int,
@Url          nvarchar(255)

as

insert into {databaseOwner}{objectQualifier}Urls (
  PortalID,
  Url
)
values (
  @PortalID,
  @Url
)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddUrlLog]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure {databaseOwner}[{objectQualifier}AddUrlLog]

@UrlTrackingID int,
@UserID        int

as

insert into {databaseOwner}{objectQualifier}UrlLog (
  UrlTrackingID,
  ClickDate,
  UserID
)
values (
  @UrlTrackingID,
  getdate(),
  @UserID
)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddUrlTracking]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure {databaseOwner}[{objectQualifier}AddUrlTracking]

@PortalID     int,
@Url          nvarchar(255),
@UrlType      char(1),
@LogActivity  bit,
@TrackClicks  bit,
@ModuleId     int,
@NewWindow    bit

as

insert into {databaseOwner}{objectQualifier}UrlTracking (
  PortalID,
  Url,
  UrlType,
  Clicks,
  LastClick,
  CreatedDate,
  LogActivity,
  TrackClicks,
  ModuleId,
  NewWindow
)
values (
  @PortalID,
  @Url,
  @UrlType,
  0,
  null,
  getdate(),
  @LogActivity,
  @TrackClicks,
  @ModuleId,
  @NewWindow
)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddUser]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddUser]

	@PortalID		int,
	@Username		nvarchar(100),
	@FirstName		nvarchar(50),
	@LastName		nvarchar(50),
	@AffiliateId    int,
	@IsSuperUser    bit,
	@Email          nvarchar(256),
	@DisplayName    nvarchar(100),
	@UpdatePassword	bit,
	@Authorised		bit,
	@CreatedByUserID int
AS

DECLARE @UserID int

SELECT @UserID = UserID
	FROM {databaseOwner}{objectQualifier}Users
	WHERE  Username = @Username

IF @UserID is null
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}Users (
			Username,
			FirstName, 
			LastName, 
			AffiliateId,
			IsSuperUser,
			Email,
			DisplayName,
			UpdatePassword,
			CreatedByUserID,
			CreatedOnDate,
			LastModifiedByUserID,
			LastModifiedOnDate
		  )
		VALUES (
			@Username,
			@FirstName, 
			@LastName, 
			@AffiliateId,
			@IsSuperUser,
			@Email,
			@DisplayName,
			@UpdatePassword,
			@CreatedByUserID,
			getdate(),
			@CreatedByUserID,
			getdate()
		)

		SELECT @UserID = SCOPE_IDENTITY()
	END

	IF not exists ( SELECT 1 FROM {databaseOwner}{objectQualifier}UserPortals WHERE UserID = @UserID AND PortalID = @PortalID ) AND @PortalID > -1
		BEGIN
			INSERT INTO {databaseOwner}{objectQualifier}UserPortals (
				UserID,
				PortalID,
				Authorised,
				CreatedDate
			)
			VALUES (
				@UserID,
				@PortalID,
				@Authorised,
				getdate()
			)
		END

SELECT @UserID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddUserAuthentication]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddUserAuthentication]
	@UserID					int,
	@AuthenticationType     nvarchar(100),
	@AuthenticationToken    nvarchar(1000),
	@CreatedByUserID	int

AS
	INSERT INTO {databaseOwner}{objectQualifier}UserAuthentication (
		UserID,
		AuthenticationType,
		AuthenticationToken,
		[CreatedByUserID],
		[CreatedOnDate],
		[LastModifiedByUserID],
		[LastModifiedOnDate]

	)
	values (
		@UserID,
		@AuthenticationType,
		@AuthenticationToken,
		@CreatedByUserID,
		getdate(),
		@CreatedByUserID,
		getdate()

	)

	SELECT SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddUserPortal]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddUserPortal]

	@PortalID		int,
	@UserID			int
AS

	IF not exists ( SELECT 1 FROM {databaseOwner}{objectQualifier}UserPortals WHERE UserID = @UserID AND PortalID = @PortalID ) AND @PortalID > -1
		BEGIN
			INSERT INTO {databaseOwner}{objectQualifier}UserPortals (
				UserID,
				PortalID,
				Authorised,
				CreatedDate
			)
			VALUES (
				@UserID,
				@PortalID,
				1,
				getdate()
			)
		END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddUserRole]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddUserRole]
	@PortalID		int,
	@UserID			int,
	@RoleId			int,
	@Status			int,
	@IsOwner		bit,
	@EffectiveDate	datetime = null,
	@ExpiryDate		datetime = null,
	@CreatedByUserID  int
AS

DECLARE @UserRoleId int

SELECT @UserRoleId = null

SELECT @UserRoleId = UserRoleId
	FROM {databaseOwner}{objectQualifier}UserRoles
	WHERE  UserId = @UserID AND RoleId = @RoleId
 
IF @UserRoleId IS NOT NULL
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}UserRoles
			SET 
				Status = @Status,
				IsOwner = @IsOwner,
				ExpiryDate = @ExpiryDate,
				EffectiveDate = @EffectiveDate,
				IsTrialUsed = 1,
				LastModifiedByUserID = @CreatedByUserID,
				LastModifiedOnDate = getdate()
			WHERE  UserRoleId = @UserRoleId
		SELECT @UserRoleId
	END
ELSE
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}UserRoles (
			UserId,
			RoleId,
			Status,
			IsOwner,
			EffectiveDate,
			ExpiryDate,
			IsTrialUsed,
			CreatedByUserID,
			CreatedOnDate,
			LastModifiedByUserID,
			LastModifiedOnDate
		  )
		VALUES (
			@UserID,
			@RoleId,
			@Status,
			@IsOwner,
			@EffectiveDate,
			@ExpiryDate,
			1,
			@CreatedByUserID,
			getdate(),
			@CreatedByUserID,
			getdate()
		  )

	SELECT SCOPE_IDENTITY()
    END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AddVocabulary]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddVocabulary] 
	@VocabularyTypeID	int,
	@Name				nvarchar(250),
	@Description		nvarchar(2500),
	@Weight				int,
	@ScopeID			int,
	@ScopeTypeID		int,
	@CreatedByUserID	int
AS
	INSERT INTO {databaseOwner}{objectQualifier}Taxonomy_Vocabularies (
		VocabularyTypeID,
		[Name],
		Description,
		Weight,
		ScopeID,
		ScopeTypeID,
		CreatedByUserID,
		CreatedOnDate,
		LastModifiedByUserID,
		LastModifiedOnDate
	)

	VALUES (
		@VocabularyTypeID,
		@Name,
		@Description,
		@Weight,
		@ScopeID,
		@ScopeTypeID,
		@CreatedByUserID,
		getdate(),
		@CreatedByUserID,
		getdate()
	)

	SELECT SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}aspnet_Membership_UnlockUser]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}aspnet_Membership_UnlockUser]
	@ApplicationName                         nvarchar(256),
    @UserName                                nvarchar(256)
AS
BEGIN
    DECLARE @UserId uniqueidentifier
    SELECT  @UserId = NULL
    SELECT  @UserId = u.UserId
    FROM    {databaseOwner}{objectQualifier}aspnet_Users u, {databaseOwner}{objectQualifier}aspnet_Applications a, {databaseOwner}{objectQualifier}aspnet_Membership m
    WHERE   LoweredUserName = LOWER(@UserName) AND
            u.ApplicationId = a.ApplicationId  AND
            LOWER(@ApplicationName) = a.LoweredApplicationName AND
            u.UserId = m.UserId

    IF ( @UserId IS NULL )
        RETURN 1

    UPDATE {databaseOwner}{objectQualifier}aspnet_Membership
    SET IsLockedOut = 0,
        FailedPasswordAttemptCount = 0,
        FailedPasswordAttemptWindowStart = CONVERT( datetime, '17540101', 112 ),
        FailedPasswordAnswerAttemptCount = 0,
        FailedPasswordAnswerAttemptWindowStart = CONVERT( datetime, '17540101', 112 )		
		-- Removed to ensure lockout date is preserved
		-- , LastLockoutDate = CONVERT( datetime, '17540101', 112 )
    WHERE @UserId = UserId

    RETURN 0

	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AuthCookies_DeleteByValue]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AuthCookies_DeleteByValue]
    @CookieValue  nvarchar(200)
AS
BEGIN
	DELETE FROM {databaseOwner}[{objectQualifier}AuthCookies]
	WHERE CookieValue = @CookieValue
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AuthCookies_DeleteOld]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

/*    Ensure that the AuthCookies doesn't time out          */
/************************************************************/

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AuthCookies_DeleteOld]
	@CutoffDate   datetime -- in UTC
AS
BEGIN
	DELETE TOP(10000) FROM {databaseOwner}[{objectQualifier}AuthCookies]
	WHERE ExpiresOn < @CutoffDate
END

GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AuthCookies_Find]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AuthCookies_Find]
    @CookieValue  nvarchar(200)
AS
BEGIN
	SELECT TOP(1) * FROM {databaseOwner}[{objectQualifier}AuthCookies]
	WHERE CookieValue = @CookieValue
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}AuthCookies_Update]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

-- Adds new or Updates existing entry
CREATE PROCEDURE {databaseOwner}[{objectQualifier}AuthCookies_Update]
    @CookieValue  nvarchar(200),
	@ExpiresOn   datetime, -- in UTC
	@UserId		  int
AS
BEGIN
	MERGE INTO {databaseOwner}[{objectQualifier}AuthCookies] AC
		USING (SELECT @CookieValue CVal, @UserId [UID], @ExpiresOn EXPDT) Q
		ON (AC.CookieValue = Q.CVal)
		WHEN MATCHED AND AC.ExpiresOn <> Q.EXPDT THEN -- update only, if there is a change, user ID shouldn't change
		UPDATE SET ExpiresOn = @ExpiresOn, UpdatedOn = GetUtcDate()
		WHEN NOT MATCHED THEN
		INSERT ( CookieValue,  UserId, ExpiresOn,  CreatedOn,    UpdatedOn )
		VALUES (@CookieValue, @UserId, @ExpiresOn, GetUtcDate(), GetUtcDate());
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}BuildTabLevelAndPath]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}BuildTabLevelAndPath](@TabId INT, @IncludeChild BIT = 0)
	AS
	BEGIN
		DECLARE @ParentId INT, @Level INT, @TabPath NVARCHAR(255), @TabName NVARCHAR(200)
		SELECT @ParentId = ParentId, @TabName = TabName FROM {databaseOwner}[{objectQualifier}Tabs] WHERE TabID = @TabId
		IF @ParentId > 0
		BEGIN
			SELECT 
				@Level = [Level] + 1,
				@TabPath = TabPath + '//' + {databaseOwner}[{objectQualifier}RemoveStringCharacters](@TabName, '&? ./''#:*')
			 FROM {databaseOwner}[{objectQualifier}Tabs] WHERE TabID = @ParentId
		END
		ELSE
		BEGIN
			SELECT @Level = 0, @TabPath = '//' + {databaseOwner}[{objectQualifier}RemoveStringCharacters](@TabName, '&? ./''#:*')
		END
		
		UPDATE {databaseOwner}[{objectQualifier}Tabs] SET [Level] = @Level, TabPath = @TabPath WHERE TabID = @TabId
		
		IF @IncludeChild = 1
		BEGIN
			DECLARE @ChildTabs TABLE(TabID INT)
			DECLARE @ChildID INT
			INSERT INTO @ChildTabs SELECT TabID FROM {databaseOwner}[{objectQualifier}Tabs] WHERE ParentId =  @TabId
			WHILE EXISTS (SELECT TOP 1 TabID FROM @ChildTabs)
				BEGIN
					SET @ChildID = (SELECT TOP 1 TabID FROM @ChildTabs)
					EXEC {databaseOwner}[{objectQualifier}BuildTabLevelAndPath] @ChildID, @IncludeChild
					DELETE FROM @ChildTabs WHERE TabID = @ChildID
				END
		END
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CalculatePagingInformation]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CalculatePagingInformation]
-- this procedure is deprecated, please use more efficient functions pageLowerBound AND pageUpperBound instead!
-- 2147483647 = Cast(0x7fffffff AS Int)
	@pageIndex 		Int, 	    -- negative to return all rows!
	@pageSize 		Int, 		-- negative OR 0 returns all rows
	@rowsToReturn  	Int output, -- row number of record AFTER last row (0 based) 
	@pageLowerBound Int output, -- row number of first record (0 based)
	@pageUpperBound Int output  -- row number of record AFTER last row (1 based)
AS
BEGIN 
	IF IsNull(@pageSize, 2147483647) < 2147483647 AND IsNull(@PageIndex, -1) >= 0 BEGIN
		SET @pageLowerBound = {databaseOwner}{objectQualifier}pageLowerBound(@pageIndex, @pageSize) - 1
		SET @rowsToReturn   = {databaseOwner}{objectQualifier}pageUpperBound(@pageIndex, @pageSize) 
		SET @pageUpperBound = @rowsToReturn + 1 
	END ELSE BEGIN
		SET @pageLowerBound = 0
		SET @rowsToReturn   = 2147483647 
		SET @pageUpperBound = 2147483647 
	END
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CanDeleteSkin]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CanDeleteSkin]
	@SkinType char(1),
	@SkinFolderName nvarchar(200) 
AS
	BEGIN
		IF exists(SELECT * FROM {databaseOwner}{objectQualifier}Tabs WHERE (SkinSrc like '%![' + @SkinType + '!]' + @SkinFolderName + '%' ESCAPE '!') 
					OR (ContainerSrc like '%![' + @SkinType + '!]' + @SkinFolderName + '%' ESCAPE '!'))
			SELECT 0
		ELSE
			BEGIN
				IF exists(SELECT * FROM {databaseOwner}{objectQualifier}TabModules WHERE ContainerSrc like '%![' + @SkinType + '!]' + @SkinFolderName + '%' ESCAPE '!')
					SELECT 0
				ELSE
					SELECT 1
			END
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}ChangeUsername]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}ChangeUsername]
	@UserId         int,
	@NewUsername	nvarchar(256)
AS
BEGIN
	DECLARE @OldUsername NVARCHAR(256)
	SET @OldUsername = (SELECT UserName FROM {databaseOwner}{objectQualifier}Users WHERE UserId = @UserId)

	UPDATE {databaseOwner}{objectQualifier}Users
		SET		Username=@NewUsername
		WHERE	UserId=@UserId

	UPDATE {databaseOwner}aspnet_Users
		SET		UserName=@NewUsername,
				LoweredUserName=LOWER(@NewUsername) 
		WHERE	UserName=@OldUsername

END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}ClearFileContent]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}ClearFileContent]

	@FileId      int

AS

UPDATE {databaseOwner}{objectQualifier}Files
	SET    Content = NULL
	WHERE  FileId = @FileId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}ConvertTabToNeutralLanguage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create PROCEDURE {databaseOwner}[{objectQualifier}ConvertTabToNeutralLanguage]
    @PortalId INT ,
    @TabId INT ,
    @CultureCode NVARCHAR(10)
AS 
    BEGIN
        SET NOCOUNT ON;

        UPDATE  {databaseOwner}{objectQualifier}Tabs
        SET     CultureCode = NULL
        WHERE   PortalID = @PortalId
                AND TabID = @TabID
                AND CultureCode = @CultureCode
    END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_AddNotificationTypeAction]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_AddNotificationTypeAction]
	@NotificationTypeID int,
	@NameResourceKey nvarchar(100),
	@DescriptionResourceKey nvarchar(100),
	@ConfirmResourceKey nvarchar(100),
	@APICall nvarchar(500),
	@CreatedByUserID int
AS
BEGIN
	DECLARE @Order int 
	
	SELECT @Order = MAX([Order])
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypeActions]
	WHERE [NotificationTypeID] = @NotificationTypeID
	
	IF @Order IS NULL
		SET @Order = 1
	ELSE
		SET @Order = @Order + 2
		
	INSERT INTO {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypeActions] (
		[NotificationTypeID],
		[NameResourceKey],
		[DescriptionResourceKey],
		[ConfirmResourceKey],
		[Order],
		[APICall],
		[CreatedByUserID],
		[CreatedOnDate],
		[LastModifiedByUserID],
		[LastModifiedOnDate]
	) VALUES (
		@NotificationTypeID,
		@NameResourceKey,
		@DescriptionResourceKey,
		@ConfirmResourceKey,
		@Order,
		@APICall,
		@CreatedByUserID,
		GETDATE(),
		@CreatedByUserID,
		GETDATE()
	)
	
	SELECT SCOPE_IDENTITY()
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_AddSubscription]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_AddSubscription]
	@UserId INT ,
	@PortalId INT ,
	@SubscriptionTypeId INT ,
	@ObjectKey NVARCHAR(255) ,
	@Description NVARCHAR(255),
	@ModuleId INT ,
	@TabId INT,
	@ObjectData NVARCHAR(MAX)
AS 
	BEGIN
        DECLARE @SubscriptionId INT = NULL   
        
        SELECT  TOP 1 @SubscriptionId = SubscriptionId
		FROM    {databaseOwner}{objectQualifier}CoreMessaging_Subscriptions
		WHERE   UserId = @UserId
				AND (( @PortalId is null and PortalId is null) or (PortalId = @PortalId))
				AND SubscriptionTypeId = @SubscriptionTypeID
				AND ObjectKey = @ObjectKey
				AND ((@ModuleId is null and ModuleId is null ) or (ModuleId = @ModuleId))	
				AND ((@TabId is null and TabId is null ) or (TabId = @TabId))
		      
        IF (@SubscriptionId IS NULL) 
			BEGIN
				INSERT  INTO {databaseOwner}{objectQualifier}CoreMessaging_Subscriptions
						( UserId ,
							PortalId ,
							SubscriptionTypeId ,
							ObjectKey ,
							Description,
							CreatedOnDate ,
							ModuleId ,
							TabId,
							ObjectData
						)
				VALUES  ( @UserId ,
							@PortalId ,
							@SubscriptionTypeId ,
							@ObjectKey ,
							@Description,
							GETUTCDATE() ,
							@ModuleId ,
							@TabId,
							@ObjectData
						)

				SELECT  SCOPE_IDENTITY() AS [SubscriptionId]
			END
		ELSE 
			BEGIN
				UPDATE  {databaseOwner}{objectQualifier}CoreMessaging_Subscriptions
				SET     UserId = @UserId ,
						PortalId = @PortalId ,
						SubscriptionTypeId = @SubscriptionTypeId ,
						ObjectKey = @ObjectKey ,
						Description = @Description ,
						ModuleId = @ModuleId ,
						TabId = @TabId,
						ObjectData = @ObjectData
				WHERE   SubscriptionId = @SubscriptionId

				SELECT  @SubscriptionId AS [SubscriptionId]
			END
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_AddSubscriptionType]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_AddSubscriptionType]
	@SubscriptionName NVARCHAR(50) ,
	@FriendlyName NVARCHAR(50) ,
	@DesktopModuleId INT
AS 
	INSERT  {databaseOwner}{objectQualifier}CoreMessaging_SubscriptionTypes
			( SubscriptionName ,
			  FriendlyName ,
			  DesktopModuleId
			)
	VALUES  ( @SubscriptionName ,
			  @FriendlyName ,
			  @DesktopModuleId 
			)
	SELECT  SCOPE_IDENTITY()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_CheckReplyHasRecipients]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CheckReplyHasRecipients]
	@ConversationId Int, -- Not Null
	@UserId 		Int  -- Not Null
AS 
BEGIN
	SELECT COUNT(M.UserID)
	FROM       {databaseOwner}{objectQualifier}vw_CoreMessaging_Messages AS M
	INNER JOIN {databaseOwner}{objectQualifier}vw_Users AS U ON M.UserID = U.UserID AND M.PortalID = IsNull(U.PortalID, M.PortalID)
	WHERE (M.MessageID = @ConversationId) 
	  AND (M.UserID   <> @UserId) 
	  AND (U.IsDeleted = 0)
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_ConvertLegacyMessages]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_ConvertLegacyMessages]    
	@PageIndex       int,
	@PageSize        int
AS

-- Set the page bounds
DECLARE @PageLowerBound INT, @PageUpperBound INT;

SET @PageLowerBound =  (@PageIndex * @PageSize) + 1
SET @PageUpperBound =  (@PageIndex * @PageSize) + @PageSize

	DECLARE @MessageID bigint	
	DECLARE @PortalID INT
	DECLARE @FromUserName nvarchar(50)
	DECLARE @FromUserID INT
	DECLARE @ToUserName nvarchar(50)
	DECLARE @ToUserID int
	DECLARE @Status tinyint
	DECLARE @Subject nvarchar(max)
	DECLARE @Body nvarchar(max)
	DECLARE @Date datetime
	DECLARE @EmailSent bit
	DECLARE @EmailSentDate datetime
	DECLARE @EmailSchedulerInstance UNIQUEIDENTIFIER
	DECLARE @RowNumber INT
	
	DECLARE @NewMessageID int	
	DECLARE @Counter int		

	DECLARE MessageList cursor FAST_FORWARD for

	WITH messageItems  AS
	(
		SELECT  [MessageID], [PortalID],[FromUserName],[FromUserID], [ToUserName], [ToUserID], [Status], [Subject], [Body], [Date], [EmailSent], [EmailSentDate], [EmailSchedulerInstance] 
				,ROW_NUMBER() OVER(ORDER BY MessageID ASC) AS RowNumber
		FROM	{databaseOwner}[{objectQualifier}Messaging_Messages]
	)
	
	SELECT * from messageItems where RowNumber BETWEEN @PageLowerBound AND @PageUpperBound
	ORDER BY RowNumber ASC
	OPEN MessageList
	FETCH NEXT FROM MessageList 
		INTO @MessageID, @PortalID, @FromUserName, @FromUserID, @ToUserName, @ToUserID, @Status, @Subject, @Body, @Date, @EmailSent, @EmailSentDate, @EmailSchedulerInstance, @RowNumber 

	WHILE @@FETCH_STATUS = 0
	BEGIN
			--Create SocialMessage Record
            INSERT {databaseOwner}[{objectQualifier}CoreMessaging_Messages](                    
  					[PortalID],
					[To],
					[From],					
					[Subject],
					[Body],
					[ConversationID],
					[ReplyAllAllowed],
					[SenderUserID],
                    [CreatedByUserID],
                    [CreatedOnDate],
                    [LastModifiedByUserID],
                    [LastModifiedOnDate]			        
                    )
            VALUES  (       
					@PortalID,
					@ToUserName,
					@FromUserName,
					@Subject,
					@Body,
					NULL,
					1, --ReplyAllAllowed,
					@FromUserID,
                    @FromUserID , -- CreatedBy - int
					dateadd(second, (-1 * datediff(second, getutcdate(), getdate())), @Date), -- CreatedOn - utc datetime
                    @FromUserID , -- LastModifiedBy - int
                    GETDATE() -- LastModifiedOn - datetime			        
                    )
            -- update conversation id                       
            SELECT  @NewMessageID = SCOPE_IDENTITY()
			UPDATE  {databaseOwner}[{objectQualifier}CoreMessaging_Messages] SET [ConversationID] = @NewMessageID WHERE [MessageID] = @NewMessageID 															
			
			--Create SocialRecipient Record for recipient and sender. 2 records total
			Set @Counter = 0 
			
			--No need to create two records if message sent to self	
			IF @ToUserID = @FromUserID BEGIN Set @Counter = 1 END
					
			WHILE @Counter < 2
			BEGIN
				SET @Counter = @Counter + 1
			
				INSERT {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients](
						[MessageID],
						[UserID],
						[Read],
						[Archived],
						[CreatedByUserID],
						[CreatedOnDate],
						[LastModifiedByUserID],
						[LastModifiedOnDate],
						[EmailSent],
						[EmailSentDate],
						[EmailSchedulerInstance]                    
						)
				VALUES  (
						@NewMessageID,
						CASE @Counter
							WHEN 1 THEN @ToUserID 
							ELSE @FromUserID 
						END,												
						CASE @Status
							WHEN 1 THEN 0 --Status 1 means Unread, 2 means Read, 3 means Deleted
							ELSE 1
						END,
						CASE @Status
							WHEN 3 THEN 1 --Status 1 means Unread, 2 means Read, 3 means Deleted
							ELSE 0
						END,
						@FromUserID , -- CreatedBy - int
						@Date , -- CreatedOn - datetime
						@FromUserID , -- LastModifiedBy - int
						@Date, -- LastModifiedOn - datetime
						@EmailSent,
						@EmailSentDate,
						@EmailSchedulerInstance
						)			
			END
		
		--Delete the Legacy record
		DELETE FROM {databaseOwner}[{objectQualifier}Messaging_Messages] WHERE MessageID = @MessageID
		
		FETCH NEXT FROM MessageList 
			INTO @MessageID,@PortalID, @FromUserName, @FromUserID, @ToUserName, @ToUserID, @Status, @Subject, @Body, @Date, @EmailSent, @EmailSentDate, @EmailSchedulerInstance, @RowNumber 
	END
	CLOSE MessageList
	DEALLOCATE MessageList
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_CountArchivedConversations]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CountArchivedConversations]
	@UserID INT,
	@PortalID INT
AS
BEGIN
	SELECT COUNT(DISTINCT M.ConversationID) AS TotalRecords
	    FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages] M
	    JOIN {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] MR ON M.MessageID = MR.MessageID
	    WHERE Archived = 1
	        AND NotificationTypeID IS NULL AND PortalID = @PortalID AND UserID = @UserID
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_CountArchivedMessages]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CountArchivedMessages]
	@UserID int,
	@PortalID int
AS
BEGIN
	SELECT COUNT(DISTINCT M.MessageID) AS TotalRecords
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages] M
	JOIN {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] MR ON M.MessageID = MR.MessageID
	WHERE Archived = 1
	AND NotificationTypeID IS NULL AND PortalID = @PortalID AND UserID = @UserID
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_CountArchivedMessagesByConversation]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CountArchivedMessagesByConversation]
	@ConversationID int
AS
BEGIN
	SELECT COUNT(*) AS TotalArchivedThreads
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients]
	WHERE MessageID IN (SELECT MessageID FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages] WHERE ConversationID = @ConversationID)
	AND [Archived] = 1
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_CountLegacyMessages]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CountLegacyMessages]    
AS
	--Return total records
	SELECT COUNT(*) AS TotalRecords
	FROM {databaseOwner}[{objectQualifier}Messaging_Messages]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_CountMessagesByConversation]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CountMessagesByConversation]
	@ConversationID int
AS
BEGIN
	SELECT COUNT(*) AS TotalRecords
	FROM {databaseOwner}{objectQualifier}CoreMessaging_Messages
	WHERE (ConversationID = @ConversationID)
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_CountNewThreads]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CountNewThreads]
	@UserID int,
	@PortalID INT
AS
BEGIN
	SELECT COUNT(*) AS TotalNewThreads
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] MR
	JOIN {databaseOwner}[{objectQualifier}CoreMessaging_Messages] M ON MR.MessageID = M.MessageID
	WHERE MR.UserID = @UserID
	AND MR.[Read] = 0
	AND M.PortalID=@PortalID
	AND M.NotificationTypeID IS NULL
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_CountNotifications]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CountNotifications]
	@UserID int,
	@PortalID INT
AS
BEGIN
	-- Return total notifications for user
	SELECT COUNT(*) AS TotalNotifications
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] MR
	JOIN {databaseOwner}[{objectQualifier}CoreMessaging_Messages] M ON MR.MessageID = M.MessageID
	WHERE M.NotificationTypeId IS NOT NULL
	AND M.PortalID=@PortalID
	AND MR.UserID = @UserID
	AND (M.ExpirationDate IS NULL OR (M.ExpirationDate IS NOT NULL AND M.ExpirationDate > GETDATE())) -- Do not return expired notifications
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_CountSentConversations]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CountSentConversations]
	@UserID INT,
	@PortalID INT
AS
BEGIN
	SELECT COUNT(DISTINCT ConversationID) AS TotalRecords
	    FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages] m
        INNER JOIN {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] mr ON mr.MessageID = m.MessageID AND mr.UserID = m.SenderUserID --make sure sender haven't delete the message.
	    WHERE SenderUserID = @UserID
	        AND NotificationTypeID IS NULL AND PortalID = @PortalID
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_CountSentMessages]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CountSentMessages]
	@UserID int,
	@PortalID int
AS
BEGIN
	SELECT COUNT(MessageID) AS TotalRecords
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages]
	WHERE SenderUserID = @UserID
	AND NotificationTypeID IS NULL AND PortalID = @PortalID
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_CountTotalConversations]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CountTotalConversations]
	@UserID int,
	@PortalID int
AS
BEGIN
	SELECT COUNT(DISTINCT M.ConversationID) AS TotalConversations
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages] M
	JOIN {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] MR ON M.MessageID = MR.MessageID
	WHERE NotificationTypeID IS NULL AND PortalID = @PortalID AND Archived = 0 AND UserID = @UserID
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_CreateMessageRecipientsForRole]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CreateMessageRecipientsForRole]
    @MessageID int,         -- message id
    @RoleIDs nvarchar(max), -- comma separated list of RoleIds
	@CreateUpdateUserID INT -- create / update user id
AS
BEGIN    

    INSERT {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients](
			[MessageID],
			[UserID],
			[Read],
			[Archived],
            [CreatedByUserID],
            [CreatedOnDate],
            [LastModifiedByUserID],
            [LastModifiedOnDate]
            )
			SELECT distinct 
			  @MessageID,
			  UserID,
			  0,
			  0,
              @CreateUpdateUserID , -- CreatedBy - int
              GETDATE(), -- CreatedOn - datetime
              @CreateUpdateUserID , -- LastModifiedBy - int
              GETDATE() -- LastModifiedOn - datetime
           FROM {databaseOwner}[{objectQualifier}vw_UserRoles] ur
			INNER JOIN {databaseOwner}[{objectQualifier}SplitStrings_CTE](@RoleIDs,',') m on ur.RoleID = m.Item
			WHERE ur.ExpiryDate >= getdate() OR ur.ExpiryDate IS NULL
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_CreateMessageReply]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CreateMessageReply]
    @ConversationID    INT,           -- parent message id
	@PortalID			INT,			--portalID of message
    @Body               nvarchar(max), -- message body
    @SenderUserID       INT,           -- create / update user id
    @From               nvarchar(200), -- message from
	@CreateUpdateUserID INT            -- create / update user id
AS
    DECLARE @ReplyAllAllowed BIT
    DECLARE @NewMessageID INT
    DECLARE @OriginalSenderUserID INT
    DECLARE @OriginalTo nvarchar(2000)
    DECLARE @OriginalSubject nvarchar(400)

	--Was Sender a Recipient in the Original Message.
	SELECT @ReplyAllAllowed = [ReplyAllAllowed],
	       @OriginalSenderUserID = [SenderUserID],
		   @OriginalTo = REPLACE(REPLACE([TO] + ',' + [FROM], ',' + @From, ''), @From + ',', ''),
		   @OriginalSubject = [Subject]
	FROM {databaseOwner}{objectQualifier}CoreMessaging_Messages m
	INNER JOIN {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients mr ON m.MessageID = mr.MessageID
	AND m.MessageID = @ConversationID
	AND mr.UserID = @SenderUserID

	--Reply can only be create if Sender was Recipient of Orginial message
	IF @ReplyAllAllowed IS NULL
	BEGIN
		SELECT -1
		RETURN
	END

	--Create new message
	INSERT {databaseOwner}{objectQualifier}CoreMessaging_Messages(
					[PortalID],
  					[To],
					[From],
					[Subject],
					[Body],
					[ConversationID],
					[ReplyAllAllowed],
					[SenderUserID],
                    [CreatedByUserID],
                    [CreatedOnDate],
                    [LastModifiedByUserID],
                    [LastModifiedOnDate]
                    )
            VALUES  (
					@PortalID,
     			    @OriginalTo,
					@From,
				    @OriginalSubject,
					@Body,
					@ConversationID,
					@ReplyAllAllowed,
					@SenderUserID,
                    @CreateUpdateUserID , -- CreatedBy - int
                    GETUTCDATE() , -- CreatedOn - datetime
                    @CreateUpdateUserID , -- LastModifiedBy - int
                    GETDATE() -- LastModifiedOn - datetime
                    )

	SELECT @NewMessageID = SCOPE_IDENTITY()

	IF (@ReplyAllAllowed = 0) --original message was sent to a Role, reply will be sent to the original sender only
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients
		        ( [MessageID],
		          [UserID],
		          [Read],
		          [Archived],
		          CreatedByUserID,
		          CreatedOnDate,
		          LastModifiedByUserID,
		          LastModifiedOnDate
		        )
		VALUES  ( @NewMessageID, -- MessageID - int
		          @OriginalSenderUserID, -- UserID - int
		          0, -- Read - bit
		          0, -- Archived - bit
		          @CreateUpdateUserID , -- CreatedByUserID - int
		          GETDATE() , -- CreatedOnDate - datetime
		          @CreateUpdateUserID , -- LastModifiedByUserID - int
		          GETDATE()  -- LastModifiedOnDate - datetime
		        )
        
        IF @OriginalSenderUserID <> @SenderUserID
        BEGIN
            INSERT INTO {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients
		            ( [MessageID],
		              [UserID],
		              [Read],
		              [Archived],
		              CreatedByUserID,
		              CreatedOnDate,
		              LastModifiedByUserID,
		              LastModifiedOnDate
		            )
		    VALUES  ( @NewMessageID, -- MessageID - int
		              @SenderUserID, -- UserID - int
		              1, -- Read - bit
		              0, -- Archived - bit
		              @CreateUpdateUserID , -- CreatedByUserID - int
		              GETDATE() , -- CreatedOnDate - datetime
		              @CreateUpdateUserID , -- LastModifiedByUserID - int
		              GETDATE()  -- LastModifiedOnDate - datetime
		            )
        END
	END
	ELSE --Reply should be sent to all the original Recipients
	BEGIN
		INSERT {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients(
			[MessageID],
			[UserID],
			[Read],
			[Archived],
            [CreatedByUserID],
            [CreatedOnDate],
            [LastModifiedByUserID],
            [LastModifiedOnDate]
            )
			SELECT
			  @NewMessageID,
			  UserID,
			  0,
			  0,
              @CreateUpdateUserID , -- CreatedBy - int
              GETDATE() , -- CreatedOn - datetime
              @CreateUpdateUserID , -- LastModifiedBy - int
              GETDATE() -- LastModifiedOn - datetime
           FROM {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients
           WHERE MessageID = @ConversationID
	END

	SELECT  @NewMessageID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_CreateNotificationType]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CreateNotificationType]
	@Name nvarchar(100),
	@Description nvarchar(2000),
	@TTL int,
	@DesktopModuleId int,
	@CreatedUpdatedUserID int,
	@IsTask bit
AS
BEGIN
	INSERT INTO {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypes] (
		[Name],
		[Description],
		[TTL],
		[DesktopModuleId],
		[CreatedByUserID],
		[CreatedOnDate],
		[LastModifiedByUserID],
		[LastModifiedOnDate],
		[IsTask]
	) VALUES (
		@Name,
		@Description,
		@TTL,
		@DesktopModuleId,
		@CreatedUpdatedUserID,
		GETDATE(),
		@CreatedUpdatedUserID,
		GETDATE(),
		@IsTask
	)
		
	SELECT SCOPE_IDENTITY()	
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_DeleteLegacyMessage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_DeleteLegacyMessage]
    @MessageID int
AS
	DELETE FROM {databaseOwner}{objectQualifier}Messaging_Messages
	WHERE  [MessageID] = @MessageID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_DeleteMessage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_DeleteMessage]
	@MessageID int
AS
	DELETE FROM {databaseOwner}{objectQualifier}CoreMessaging_Messages
	WHERE  [MessageID] = @MessageID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_DeleteMessageAttachment]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_DeleteMessageAttachment]
    @MessageAttachmentID int
AS
	DELETE FROM {databaseOwner}{objectQualifier}CoreMessaging_MessageAttachments
	WHERE  [MessageAttachmentID] = @MessageAttachmentID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_DeleteMessageRecipient]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_DeleteMessageRecipient]
    @RecipientID int
AS
	DELETE FROM {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients
	WHERE  [RecipientID] = @RecipientID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_DeleteMessageRecipientByMessageAndUser]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_DeleteMessageRecipientByMessageAndUser]
    @MessageID int,
    @UserID int
AS
BEGIN
	DELETE
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients]
	WHERE [MessageID] = @MessageID AND [UserID] = @UserID
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_DeleteNotification]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_DeleteNotification]
	@NotificationID int
AS
BEGIN
	DELETE
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages]
	WHERE [MessageID] = @NotificationID AND [NotificationTypeID] IS NOT NULL
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_DeleteNotificationType]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_DeleteNotificationType]
	@NotificationTypeID int
AS
BEGIN
	-- First delete related data
	DELETE
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages]
	WHERE [NotificationTypeID] = @NotificationTypeID
	
	DELETE
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypeActions]
	WHERE [NotificationTypeID] = @NotificationTypeID

	-- Finally delete the Notification type
	DELETE
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypes]
	WHERE [NotificationTypeID] = @NotificationTypeID
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_DeleteNotificationTypeAction]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_DeleteNotificationTypeAction]
	@NotificationTypeActionID int
AS
BEGIN
	DELETE 
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypeActions]
	WHERE [NotificationTypeActionID] = @NotificationTypeActionID
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_DeleteSubscription]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_DeleteSubscription]
	@SubscriptionId int
AS 
BEGIN
	DELETE FROM {databaseOwner}[{objectQualifier}CoreMessaging_Subscriptions] WHERE [SubscriptionId] = @SubscriptionId

	IF @@ROWCOUNT <> 0
		SELECT 0 AS [ResultStatus]
	ELSE
		SELECT -1 AS [ResultStatus]
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_DeleteSubscriptionsByObjectKey]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_DeleteSubscriptionsByObjectKey]
	@PortalId int,
	@ObjectKey NVARCHAR(255)
AS
BEGIN
	DELETE
	FROM {databaseOwner}{objectQualifier}CoreMessaging_Subscriptions
	WHERE PortalId = @PortalId
		AND ObjectKey = @ObjectKey
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_DeleteSubscriptionType]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_DeleteSubscriptionType]
	@SubscriptionTypeId int
AS
BEGIN
	DELETE FROM {databaseOwner}[{objectQualifier}CoreMessaging_SubscriptionTypes] WHERE [SubscriptionTypeId] = @SubscriptionTypeId

	IF @@ROWCOUNT <> 0
		SELECT 0 AS [ResultStatus]
	ELSE
		SELECT -1 AS [ResultStatus]
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_DeleteUserFromConversation]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_DeleteUserFromConversation]
	@ConversationID INT,
    @UserID INT
AS
    --Remove the User from recipients list
	DELETE FROM {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients]
		WHERE [UserID] = @UserID
		AND MessageID IN (SELECT MessageID FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages] WHERE ConversationID = @ConversationID)
    
    --Remove Messages which has no recipient
    DELETE FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages]
        FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages] m
        LEFT JOIN {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] mr on MR.MessageID = m.MessageID
        WHERE ConversationID = @ConversationID AND mr.MessageID IS NULL
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_DeleteUserNotifications]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_DeleteUserNotifications]
	@UserId INT,
	@PortalId INT
AS
BEGIN
	DELETE FROM {databaseOwner}{objectQualifier}CoreMessaging_Messages
	WHERE PortalId = @PortalId
	  AND NotificationTypeID IS NOT NULL
	  AND MessageID IN (SELECT MessageID FROM {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients WHERE UserID = @UserId)

	SELECT @@ROWCOUNT
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_GetArchiveBox]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetArchiveBox]
	@UserID INT,
	@PortalID INT,
	@AfterMessageID INT,
	@NumberOfRecords INT,
	@SortField NVARCHAR(25) = 'CreatedOnDate',
	@SortAscending BIT = 0
AS
BEGIN
	;WITH RollUpMessageIDs AS
	(
		SELECT MAX(m.MessageID) AS TopMessageID
		FROM {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] mr
		INNER JOIN {databaseOwner}[{objectQualifier}CoreMessaging_Messages] m ON mr.MessageID = m.MessageID
		WHERE NotificationTypeID IS NULL AND PortalID = @PortalID AND MR.UserID = @UserID AND MR.Archived = 1
		GROUP BY ConversationID
	), ArchiveBox AS
	(
		SELECT DISTINCT m.[MessageID], [ConversationID], [Subject], convert(nvarchar(50), [Body]) AS Body,
				[To], [From], [ReplyAllAllowed], [SenderUserID],
				m.[CreatedByUserID], m.[CreatedOnDate],
				m.[LastModifiedByUserID], m.[LastModifiedOnDate],
				(SELECT COUNT(*) FROM {databaseOwner}[{objectQualifier}CoreMessaging_MessageAttachments] WHERE MessageID = m.MessageID) AS AttachmentCount,
				(SELECT COUNT(*) FROM {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] WHERE MessageID IN (SELECT MessageID FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages] WHERE ConversationID = m.ConversationID) AND UserID = @UserID AND [READ] = 0) AS NewThreadCount,
				(SELECT COUNT(*) FROM {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] WHERE MessageID IN (SELECT MessageID FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages] WHERE ConversationID = m.ConversationID) AND UserID = @UserID) AS ThreadCount,
				ROW_NUMBER() OVER(ORDER BY
					 CASE WHEN @SortField = 'CreatedOnDate' AND @SortAscending = 1 THEN m.[CreatedOnDate] END ASC,
					 CASE WHEN @SortField = 'CreatedOnDate' AND @SortAscending = 0 THEN m.[CreatedOnDate] END DESC,
					 CASE WHEN @SortField = 'From' AND @SortAscending = 1 THEN [From] END ASC,
					 CASE WHEN @SortField = 'From' AND @SortAscending = 0 THEN [From] END DESC,
					 CASE WHEN @SortField = 'Subject' AND @SortAscending = 1 THEN [Subject] END ASC,
					 CASE WHEN @SortField = 'Subject' AND @SortAscending = 0 THEN [Subject] END DESC
					) AS RowNumber
		FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages] AS m
		WHERE m.MessageID IN (SELECT TopMessageID FROM RollUpMessageIDs)
	)
	SELECT * FROM ArchiveBox
	WHERE (@AfterMessageID > 0 AND RowNumber BETWEEN (SELECT RowNumber + 1 FROM ArchiveBox WHERE [MessageID] = @AfterMessageID) AND (SELECT RowNumber + @NumberOfRecords FROM ArchiveBox WHERE [MessageID] = @AfterMessageID)) OR
	(@AfterMessageID = -1 AND RowNumber BETWEEN 1 AND @NumberOfRecords)
	ORDER BY RowNumber ASC
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_GetLastSentMessage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetLastSentMessage]
	@UserID int,
	@PortalID INT
AS
BEGIN
	SELECT TOP 1 *	
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages]
	WHERE SenderUserID = @UserID	
	AND PortalID=@PortalID
	AND NotificationTypeID IS NULL
	ORDER BY MessageID DESC
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_GetMessage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetMessage]
    @MessageID INT
AS 
	SELECT [MessageID], [PortalId], [NotificationTypeID], [To], [From], [Subject], [Body], [ConversationID], [ReplyAllAllowed], [SenderUserID], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate] 
	FROM   {databaseOwner}[{objectQualifier}CoreMessaging_Messages] 
	WHERE  [MessageID] = @MessageID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_GetMessageAttachment]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetMessageAttachment]
    @MessageAttachmentID INT
AS
	SELECT [MessageID], [FileID], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate]
	FROM   {databaseOwner}{objectQualifier}CoreMessaging_MessageAttachments
	WHERE  [MessageAttachmentID] = @MessageAttachmentID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_GetMessageAttachmentsByMessage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetMessageAttachmentsByMessage]
    @MessageID INT
AS
	SELECT [MessageID], [FileID], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate]
	FROM   {databaseOwner}{objectQualifier}CoreMessaging_MessageAttachments
	WHERE  [MessageID] = @MessageID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_GetMessageConversations]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetMessageConversations]
	@UserID int,
	@PortalID int,
	@AfterMessageID int,
	@NumberOfRecords int,
	@SortField nvarchar(25) = 'CreatedOnDate',
	@SortAscending bit = 0,
	@Read bit = 0,
	@Archived bit = 0,
	@SentOnly bit = 0
AS
BEGIN
	--Get the top message for each conversation
	;WITH RollUpMessageIDs AS
	(
		SELECT MAX(m.MessageID) AS TopMessageID
		FROM {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] mr
		INNER JOIN {databaseOwner}[{objectQualifier}CoreMessaging_Messages] m ON mr.MessageID = m.MessageID
		WHERE ((Archived = @Archived) or (@Archived is null AND [Archived] IS NOT null))
		AND (([Read] = @Read) or (@Read is null AND [READ] IS NOT null))
		AND ((@SentOnly = 1 AND SenderUserID = @UserID) or (@SentOnly is NULL AND UserID = @UserID) or (@SentOnly = 0 AND UserID = @UserID))
		AND m.NotificationTypeID IS NULL AND m.PortalID=@PortalID
		GROUP BY ConversationID
	)
	,Conversations  AS
	(
		SELECT  DISTINCT [MessageID], [ConversationID], [Subject], convert(nvarchar(50), [Body]) AS Body,
				[To], [From], [ReplyAllAllowed], [SenderUserID],
				[CreatedByUserID], [CreatedOnDate],
				[LastModifiedByUserID], [LastModifiedOnDate],
				(SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}CoreMessaging_MessageAttachments WHERE MessageID IN (SELECT MessageID FROM {databaseOwner}{objectQualifier}CoreMessaging_Messages WHERE ConversationID = m.ConversationID)) AS AttachmentCount,
				(SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients WHERE MessageID IN (SELECT MessageID FROM {databaseOwner}{objectQualifier}CoreMessaging_Messages WHERE ConversationID = m.ConversationID) AND UserID = @UserID AND [READ] = 0) AS NewThreadCount,
				(SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients WHERE MessageID IN (SELECT MessageID FROM {databaseOwner}{objectQualifier}CoreMessaging_Messages WHERE ConversationID = m.ConversationID) AND UserID = @UserID) AS ThreadCount,
				ROW_NUMBER() OVER(ORDER BY
					 CASE WHEN @SortField = 'CreatedOnDate' AND @SortAscending = 1 THEN [CreatedOnDate] END ASC,
					 CASE WHEN @SortField = 'CreatedOnDate' AND @SortAscending = 0 THEN [CreatedOnDate] END DESC,
					 CASE WHEN @SortField = 'From' AND @SortAscending = 1 THEN [From] END ASC,
					 CASE WHEN @SortField = 'From' AND @SortAscending = 0 THEN [From] END DESC,
					 CASE WHEN @SortField = 'Subject' AND @SortAscending = 1 THEN [Subject] END ASC,
					 CASE WHEN @SortField = 'Subject' AND @SortAscending = 0 THEN [Subject] END DESC
					) AS RowNumber
		FROM {databaseOwner}{objectQualifier}CoreMessaging_Messages AS m
		WHERE MessageID IN (SELECT TopMessageID FROM RollUpMessageIDs)
	)
	, ConversationsCount	AS
	(SELECT *,
          (SELECT RowNumber + 1 FROM Conversations WHERE [MessageID] = @AfterMessageID) afterMessageMin,
          (SELECT RowNumber + @NumberOfRecords FROM Conversations WHERE [MessageID] = @AfterMessageID ) afterMessageMax
	 FROM Conversations)
	SELECT * FROM ConversationsCount
	WHERE 	
		(@AfterMessageID > 0 AND RowNumber BETWEEN afterMessageMin AND afterMessageMax	) 
		 OR	(@AfterMessageID = -1 AND RowNumber BETWEEN 1 AND @NumberOfRecords)
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_GetMessageRecipient]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetMessageRecipient]
    @RecipientID INT
AS
	SELECT [RecipientID], [MessageID], [UserID], [Read], [Archived], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate]
	FROM   {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients
	WHERE  [RecipientID] = @RecipientID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_GetMessageRecipientsByMessage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetMessageRecipientsByMessage]
    @MessageID INT
AS
	SELECT [RecipientID], [MessageID], [UserID], [Read], [Archived], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate]
	FROM   {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients
	WHERE  [MessageID] = @MessageID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_GetMessageRecipientsByMessageAndUser]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetMessageRecipientsByMessageAndUser]
    @MessageID INT,
    @UserID INT
AS
	SELECT [RecipientID], [MessageID], [UserID], [Read], [Archived], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate]
	FROM   {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients
	WHERE  [MessageID] = @MessageID
	AND   [UserID] = @UserID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_GetMessageRecipientsByUser]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetMessageRecipientsByUser]
    @UserID INT
AS
	SELECT [RecipientID], [MessageID], [UserID], [Read], [Archived], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate]
	FROM   {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients
	WHERE  [UserID] = @UserID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_GetMessagesBySender]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetMessagesBySender]
    @SenderUserID INT,
	@PortalID INT
AS
BEGIN
	SELECT [MessageID], [To], [From], [Subject], [Body], [ConversationID], [ReplyAllAllowed], [SenderUserID], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate] 
	FROM   {databaseOwner}[{objectQualifier}CoreMessaging_Messages] 
	WHERE  [SenderUserID] = @SenderUserID AND [PortalID] = @PortalID
	AND [NotificationTypeID] IS NULL
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_GetMessageThread]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetMessageThread]
    @ConversationID int,
	@UserID int,
	@AfterMessageID int,
	@NumberOfRecords int,
	@SortField nvarchar(25) = 'CreatedOnDate',
	@SortAscending bit = 0
AS
BEGIN
	--Cannot return thread if user was not a recipient
	IF NOT EXISTS (SELECT MR.RecipientID FROM {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] MR JOIN {databaseOwner}[{objectQualifier}CoreMessaging_Messages] M ON MR.MessageID = M.MessageID WHERE MR.UserID = @UserID AND M.NotificationTypeID IS NULL) BEGIN
		SELECT 0
		RETURN
	END

	;WITH inboxItems  AS
	(
		SELECT  DISTINCT [RecipientID], [Subject], [Body], [SenderUserID],
				[Read], [Archived], [UserID], [To], [From], [ReplyAllAllowed], [ConversationID],
				m.[MessageID],
				m.[CreatedByUserID], m.[CreatedOnDate],
				m.[LastModifiedByUserID], m.[LastModifiedOnDate],
				(SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}CoreMessaging_MessageAttachments WHERE MessageID = mr.MessageID) AS AttachmentCount,
				(SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients WHERE MessageID IN (SELECT MessageID FROM {databaseOwner}{objectQualifier}CoreMessaging_Messages WHERE ConversationID = m.ConversationID) AND UserID = @UserID AND [READ] = 0) AS NewThreadCount,
				(SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients WHERE MessageID IN (SELECT MessageID FROM {databaseOwner}{objectQualifier}CoreMessaging_Messages WHERE ConversationID = m.ConversationID) AND UserID = @UserID) AS ThreadCount,
				ROW_NUMBER() OVER(ORDER BY
					 CASE WHEN @SortField = 'CreatedOnDate' AND @SortAscending = 1 THEN m.[CreatedOnDate] END ASC,
					 CASE WHEN @SortField = 'CreatedOnDate' AND @SortAscending = 0 THEN m.[CreatedOnDate] END DESC,
					 CASE WHEN @SortField = 'From' AND @SortAscending = 1 THEN [From] END ASC,
					 CASE WHEN @SortField = 'From' AND @SortAscending = 0 THEN [From] END DESC,
					 CASE WHEN @SortField = 'Subject' AND @SortAscending = 1 THEN [Subject] END ASC,
					 CASE WHEN @SortField = 'Subject' AND @SortAscending = 0 THEN [Subject] END DESC
					) AS RowNumber
		FROM	{databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients AS mr
		INNER JOIN {databaseOwner}{objectQualifier}CoreMessaging_Messages AS m ON mr.MessageID = m.MessageID
		WHERE mr.UserID = @UserID
		AND ConversationID = @ConversationID
	)
	SELECT * FROM inboxItems
	WHERE (@AfterMessageID > 0 AND RowNumber BETWEEN (SELECT RowNumber + 1 FROM inboxItems WHERE [MessageID] = @AfterMessageID) AND (SELECT RowNumber + @NumberOfRecords FROM inboxItems WHERE [MessageID] = @AfterMessageID)) OR
	(@AfterMessageID = -1 AND RowNumber BETWEEN 1 AND @NumberOfRecords)
	ORDER BY RowNumber ASC
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_GetNextMessagesForDigestDispatch]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNextMessagesForDigestDispatch]
    @Frequency         INT,
    @SchedulerInstance UNIQUEIDENTIFIER,
    @BatchSize         INT
AS 
BEGIN
    UPDATE R
     SET   [EmailSchedulerInstance] = @SchedulerInstance,
           [LastModifiedOnDate]     = GetDate()
     FROM  {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] R
     JOIN  (SELECT TOP (@BatchSize)
                   UserID
             FROM  {databaseOwner}[{objectQualifier}vw_MessagesForDispatch] 
             WHERE [EmailSchedulerInstance] IS NULL
             AND   [EmailFrequency] = @Frequency
             GROUP BY UserID
             ORDER BY UserID) D ON R.UserID = D.UserID 

    SELECT M.[PortalID],
           M.[NotificationTypeID],
           M.[To],
           M.[From],
           M.[Subject],
           M.[Body],
           M.[SenderUserID],
           M.[ExpirationDate],
           M.[Context],
           R.[RecipientID],
           R.[MessageID],
           R.[UserID],
           R.[EmailSent],
           R.[Read],
           R.[Archived],
           R.[EmailSchedulerInstance],
		   R.[CreatedByUserID],
		   R.[CreatedOnDate],
		   R.[LastModifiedByUserID],
		   R.[LastModifiedOnDate],
		   R.[SendToast]
     FROM  {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] R
     JOIN  {databaseOwner}[{objectQualifier}CoreMessaging_Messages]          M ON R.MessageID = M.MessageID
     WHERE [EmailSent] = 0 -- Filter these 4 columms to use proper index
       AND [Read]      = 0
       AND [Archived]  = 0
       AND [EmailSchedulerInstance] = @SchedulerInstance
     ORDER BY --[PortalID],
              [UserID],
              [RecipientID] DESC
END; -- Procedure

GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_GetNextMessagesForInstantDispatch]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNextMessagesForInstantDispatch]
    @SchedulerInstance UNIQUEIDENTIFIER,
    @BatchSize         INT
AS 
BEGIN
    -- reset possibly remaining records from any previous run of this SchedulerInstance:
    UPDATE {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients]
       SET [EmailSchedulerInstance] = Null,
           [LastModifiedOnDate]     = GetDate()
     WHERE [EmailSchedulerInstance] = @SchedulerInstance
       AND [EmailSent] = 0 AND [Read] = 0 AND [Archived] = 0;
       
    -- reset possibly remaining outdated records from other instances:
    UPDATE {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients]
     SET   [EmailSchedulerInstance] = Null
     WHERE [EmailSent] = 0 AND [Read] = 0 AND [Archived] = 0
       AND [EmailSchedulerInstance] Is Not Null AND [LastModifiedOnDate] < DateAdd(hh, -2, GetDate());
       

    -- mark messages for dispatch, so they won't be handled by another SchedulerInstance:
    UPDATE TOP (@BatchSize) R
     SET   [EmailSchedulerInstance] = @SchedulerInstance,
           [LastModifiedOnDate]     = GetDate()
     FROM       {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] AS R 
     INNER JOIN {databaseOwner}[{objectQualifier}CoreMessaging_Messages]          AS M ON R.MessageID = M.MessageID
     LEFT  JOIN {databaseOwner}[{objectQualifier}CoreMessaging_UserPreferences]   AS P ON R.UserID    = P.UserID    AND M.PortalID = P.PortalID
     WHERE R.[EmailSent] = 0 AND R.[Read] = 0 AND R.[Archived] = 0 AND EmailSchedulerInstance IS NULL
       AND CASE 
            WHEN M.NotificationTypeID IS Null 
            THEN IsNull(P.[MessagesEmailFrequency],      0) -- direct mails are sent immediately by default
            ELSE IsNull(p.[NotificationsEmailFrequency], 2) -- notifications are sent as daily digest by default
           END = 0;

    SELECT M.[PortalID],
           M.[NotificationTypeID],
           M.[To],
           M.[From],
           M.[Subject],
           M.[Body],
           M.[SenderUserID],
           M.[ExpirationDate],
           M.[Context],
           R.[RecipientID],
           R.[MessageID],
           R.[EmailSent],
           R.[Read],
           R.[Archived],
           R.[EmailSchedulerInstance],
           R.[UserID],
		   R.[CreatedByUserID],
		   R.[CreatedOnDate],
		   R.[LastModifiedByUserID],
		   R.[LastModifiedOnDate],
		   R.[SendToast]
     FROM  {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] R
     JOIN  {databaseOwner}[{objectQualifier}CoreMessaging_Messages]          M ON R.MessageID = M.MessageID
     WHERE [EmailSent] = 0 -- Filter these columms 4 to use proper index
       AND [Read]      = 0
       AND [Archived]  = 0
       AND [EmailSchedulerInstance] = @SchedulerInstance
     ORDER BY --[PortalID],
              [UserID],
              [RecipientID]
END; -- Procedure

GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_GetNotification]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNotification]
	@NotificationId int
AS
BEGIN
	SELECT
		M.[MessageID],
		M.[NotificationTypeId],
		M.[To],
		M.[From],
		M.[Subject],
		M.[Body],
		M.[SenderUserID],
		M.[ExpirationDate],
        M.[IncludeDismissAction],
		M.[CreatedByUserID],
		M.[CreatedOnDate],
		M.[LastModifiedByUserID],
		M.[LastModifiedOnDate],
        M.[Context]
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages] AS M
	WHERE [NotificationTypeId] IS NOT NULL
	AND M.MessageID = @NotificationId
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationByContext]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationByContext]
	@notificationTypeId int,
	@Context nvarchar(200)
AS
BEGIN
	SELECT
		M.[MessageID],
		M.[NotificationTypeId],
		M.[To],
		M.[From],
		M.[Subject],
		M.[Body],
		M.[SenderUserID],
		M.[ExpirationDate],
        M.[IncludeDismissAction],
		M.[CreatedByUserID],
		M.[CreatedOnDate],
		M.[LastModifiedByUserID],
		M.[LastModifiedOnDate],
        M.[Context]
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages] AS M
	WHERE [NotificationTypeId] IS NOT NULL
	AND M.NotificationTypeId = @notificationTypeId
	AND M.Context = @context
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_GetNotifications]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNotifications]
	@UserID              Int,
	@PortalID            Int,
	@AfterNotificationID Int,
	@NumberOfRecords     Int
AS
BEGIN
	--Get the top message for each conversation
	SELECT TOP(@NumberOfRecords)
			M.[MessageID],
			M.[NotificationTypeId],
			M.[To],
			M.[From],
			M.[Subject],
			M.[Body],
			M.[SenderUserID],
			M.[ExpirationDate],
            M.[IncludeDismissAction],
			M.[CreatedByUserID],
			M.[CreatedOnDate],
			M.[LastModifiedByUserID],
			M.[LastModifiedOnDate],
            M.[Context],
			ROW_NUMBER() OVER(ORDER BY M.MessageId DESC) AS RowNumber
		FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages]       AS M
		JOIN {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] MR 
				ON (M.[MessageID] = MR.[MessageID])
		WHERE ([NotificationTypeId] IS NOT NULL)
		  AND (MR.[UserID]  = @UserID)
		  AND (M.[PortalID] = @PortalID)
		  AND (ISNull(M.[ExpirationDate], GETUTCDATE()) >= GETUTCDATE())
		  AND (((@AfterNotificationID IS NULL OR @AfterNotificationID = -1) AND M.[MessageID] > -1) OR (@AfterNotificationID > -1 AND M.[MessageID] < @AfterNotificationID))
		ORDER BY RowNumber ASC
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationType]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationType]
	@NotificationTypeID int
AS
BEGIN
	SELECT [NotificationTypeID], [Name], [Description], [TTL], [DesktopModuleId], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate], [IsTask]
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypes]
	WHERE [NotificationTypeID] = @NotificationTypeID
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationTypeAction]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationTypeAction]
	@NotificationTypeActionID int
AS
BEGIN
	SELECT [NotificationTypeActionID], [NotificationTypeID], [NameResourceKey], [DescriptionResourceKey], [ConfirmResourceKey], [Order], [APICall], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate]
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypeActions]
	WHERE [NotificationTypeActionID] = @NotificationTypeActionID
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationTypeActionByName]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationTypeActionByName]
	@NotificationTypeID int,
	@NameResourceKey nvarchar(100)
AS
BEGIN
	SELECT [NotificationTypeActionID], [NotificationTypeID], [NameResourceKey], [DescriptionResourceKey], [ConfirmResourceKey], [Order], [APICall], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate]
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypeActions]
	WHERE [NotificationTypeID] = @NotificationTypeID AND [NameResourceKey] LIKE @NameResourceKey
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationTypeActions]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationTypeActions]
	@NotificationTypeID int
AS
BEGIN
	SELECT [NotificationTypeActionID], [NotificationTypeID], [NameResourceKey], [DescriptionResourceKey], [ConfirmResourceKey], [Order], [APICall], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate]
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypeActions]
	WHERE [NotificationTypeID] = @NotificationTypeID
	ORDER BY [Order]
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationTypeByName]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNotificationTypeByName]
	@Name nvarchar(100)
AS
BEGIN
	SELECT [NotificationTypeID], [Name], [Description], [TTL], [DesktopModuleId], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate], [IsTask]
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_NotificationTypes]
	WHERE [Name] LIKE @Name
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_GetSentBox]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetSentBox]
	@UserID INT,
	@PortalID INT,
	@AfterMessageId INT,
	@NumberOfRecords INT,
	@SortField NVARCHAR(25) = 'CreatedOnDate',
	@SortAscending BIT = 0
AS
BEGIN
	;WITH RollUpMessageIDs AS
	(
		SELECT MAX(m.MessageID) AS TopMessageID
		FROM {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] mr
		INNER JOIN {databaseOwner}[{objectQualifier}CoreMessaging_Messages] m ON mr.MessageID = m.MessageID AND mr.UserID = m.SenderUserID --make sure sender haven't delete the message.
		WHERE SenderUserID = @UserID AND NotificationTypeID IS NULL AND PortalID = @PortalID
		GROUP BY ConversationID
	), SentBox AS
	(
		SELECT DISTINCT m.[MessageID], [ConversationID], [Subject], CONVERT(NVARCHAR(50), [Body]) AS Body,
				[To], [From], [ReplyAllAllowed], [SenderUserID],
				m.[CreatedByUserID], m.[CreatedOnDate],
				m.[LastModifiedByUserID], m.[LastModifiedOnDate],
				(SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}CoreMessaging_MessageAttachments WHERE MessageID = m.MessageID) AS AttachmentCount,
				(SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients WHERE MessageID IN (SELECT MessageID FROM {databaseOwner}{objectQualifier}CoreMessaging_Messages WHERE ConversationID = m.ConversationID) AND UserID = @UserID AND [READ] = 0) AS NewThreadCount,
				(SELECT COUNT(*) FROM {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients WHERE MessageID IN (SELECT MessageID FROM {databaseOwner}{objectQualifier}CoreMessaging_Messages WHERE ConversationID = m.ConversationID) AND UserID = @UserID) AS ThreadCount,
				ROW_NUMBER() OVER(ORDER BY
					 CASE WHEN @SortField = 'CreatedOnDate' AND @SortAscending = 1 THEN m.[CreatedOnDate] END ASC,
					 CASE WHEN @SortField = 'CreatedOnDate' AND @SortAscending = 0 THEN m.[CreatedOnDate] END DESC,
					 CASE WHEN @SortField = 'From' AND @SortAscending = 1 THEN [From] END ASC,
					 CASE WHEN @SortField = 'From' AND @SortAscending = 0 THEN [From] END DESC,
					 CASE WHEN @SortField = 'Subject' AND @SortAscending = 1 THEN [Subject] END ASC,
					 CASE WHEN @SortField = 'Subject' AND @SortAscending = 0 THEN [Subject] END DESC
					) AS RowNumber
		FROM {databaseOwner}{objectQualifier}CoreMessaging_Messages AS m
		WHERE m.MessageID IN (SELECT TopMessageID FROM RollUpMessageIDs)
	)
	SELECT * FROM SentBox
	WHERE (@AfterMessageID > 0 AND RowNumber BETWEEN (SELECT RowNumber + 1 FROM SentBox WHERE [MessageID] = @AfterMessageID) AND (SELECT RowNumber + @NumberOfRecords FROM SentBox WHERE [MessageID] = @AfterMessageID)) OR
	(@AfterMessageID = -1 AND RowNumber BETWEEN 1 AND @NumberOfRecords)
	ORDER BY RowNumber ASC
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_GetSubscriptionsByContent]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetSubscriptionsByContent]
	@PortalId int,
	@SubscriptionTypeID int,
	@ObjectKey NVARCHAR(255)
AS
BEGIN
	SELECT *
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_Subscriptions]
	WHERE 
		(( @PortalId is null and PortalId is null) or (PortalId = @PortalId))
		AND SubscriptionTypeID = @SubscriptionTypeID
		AND ObjectKey = @ObjectKey
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_GetSubscriptionsByUser]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetSubscriptionsByUser]
	@PortalId int,
	@UserId int,
	@SubscriptionTypeID int
AS
BEGIN
	SELECT *
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_Subscriptions]
	WHERE 
			(( @PortalId is null and PortalId is null) or (PortalId = @PortalId))
			AND UserId = @UserId
			AND (@SubscriptionTypeID IS NULL OR SubscriptionTypeID = @SubscriptionTypeID)
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_GetSubscriptionTypes]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetSubscriptionTypes]
AS 
	SELECT  *
	FROM    {databaseOwner}{objectQualifier}CoreMessaging_SubscriptionTypes
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_GetToasts]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetToasts] 
 	@UserId INT
	,@PortalId INT
AS
BEGIN
	SELECT DISTINCT m.*
	FROM {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] mr
		INNER JOIN {databaseOwner}[{objectQualifier}CoreMessaging_Messages] m 
			ON (mr.MessageID = m.MessageID)
	WHERE mr.UserID = @UserID
		AND m.PortalID = @PortalID
		--Added to allow a single index to cover both this and the other two messaging procs:
		--{databaseOwner}[CoreMessaging_CountNotifications]
		--CoreMessaging_CountNewThreads
		AND mr.[Read] in (0,1)
		AND mr.SendToast = 1
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_GetUserPreference]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetUserPreference]
	@PortalId INT ,	
	@UserId INT
AS 
BEGIN
	SELECT PortalId, UserId, MessagesEmailFrequency, NotificationsEmailFrequency
	FROM {databaseOwner}{objectQualifier}CoreMessaging_UserPreferences UP
	WHERE	UP.PortalId = @PortalId
		AND
			UP.UserId = @UserId	
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_IsSubscribed]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_IsSubscribed]
	@PortalId INT ,
	@UserId INT ,
	@SubscriptionTypeId INT ,
	@ObjectKey NVARCHAR(255) ,
	@ModuleId INT ,
	@TabId INT
AS 
	BEGIN
		SELECT  TOP 1 *
		FROM    {databaseOwner}{objectQualifier}CoreMessaging_Subscriptions
		WHERE   UserId = @UserId
				AND (( @PortalId is null and PortalId is null) or (PortalId = @PortalId))
				AND SubscriptionTypeId = @SubscriptionTypeID
				AND ObjectKey = @ObjectKey
				AND ((@ModuleId is null and ModuleId is null ) or (ModuleId = @ModuleId))	
				AND ((@TabId is null and TabId is null ) or (TabId = @TabId))
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_IsToastPending]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_IsToastPending]	
    @NotificationId int
AS
BEGIN
    SELECT Sendtoast 
    FROM {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients]
    WHERE MessageId = @NotificationId
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_MarkMessageAsDispatched]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_MarkMessageAsDispatched]
	@MessageId int,
	@RecipientId int
AS
BEGIN
	Update {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients set EmailSent = 1, EmailSentDate =GETDATE()   where MessageID =@MessageId AND RecipientId=@RecipientId
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_MarkMessageAsSent]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_MarkMessageAsSent]
	@MessageId int,
	@RecipientId int
AS
BEGIN
	Update {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients set EmailSent = 1  where MessageID =@MessageId AND RecipientId=@RecipientId
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_MarkReadyForToast]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_MarkReadyForToast]	
    @MessageId int,
    @UserId int
AS
BEGIN	
    UPDATE {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients]
    SET Sendtoast = 1,
    [LastModifiedOnDate] = GETDATE()
    WHERE MessageId = @MessageId
    AND UserId = @UserId
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_MarkToastSent]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_MarkToastSent]	
    @MessageId int,
	@UserId INT
AS
BEGIN	
    UPDATE {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients
    SET Sendtoast = 0,
    [LastModifiedOnDate] = GETDATE()
    WHERE MessageId = @MessageId
	AND UserId = @UserId
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_SaveMessage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_SaveMessage]
    @MessageID INT,
	@PortalID INT,
	@To nvarchar(2000),
	@From nvarchar(200),
    @Subject nvarchar(400),
    @Body nvarchar(max),
    @ConversationID int,
    @ReplyAllAllowed bit,
    @SenderUserID int,
	@CreateUpdateUserID INT
    
AS 
    IF ( @MessageID = -1 ) 
        BEGIN
            INSERT {databaseOwner}{objectQualifier}CoreMessaging_Messages(                    
  					[PortalID],
					[To],
					[From],					
					[Subject],
					[Body],
					[ConversationID],
					[ReplyAllAllowed],
					[SenderUserID],
                    [CreatedByUserID],
                    [CreatedOnDate],
                    [LastModifiedByUserID],
                    [LastModifiedOnDate]			        
                    )
            VALUES  (       
     			    @PortalID,
					@To,
					@From,
				    @Subject,			
					@Body,
					NULL,
					@ReplyAllAllowed,
					@SenderUserID,
                    @CreateUpdateUserID , -- CreatedBy - int
                    GETUTCDATE(), -- CreatedOn - datetime
                    @CreateUpdateUserID , -- LastModifiedBy - int
                    GETDATE() -- LastModifiedOn - datetime			        
                    )
                    
            SELECT  @MessageID = SCOPE_IDENTITY()
			UPDATE  {databaseOwner}{objectQualifier}CoreMessaging_Messages SET [ConversationID] = @MessageID WHERE [MessageID] = @MessageID 
        END
    ELSE 
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}CoreMessaging_Messages
            SET     [To] = @To,
					[From] = @From,
					[Subject] = @Subject,			
					[Body] = @Body,
					[ConversationID] = @ConversationID,
					[ReplyAllAllowed] = @ReplyAllAllowed,
					[SenderUserID] = SenderUserID,
                    LastModifiedByUserID = @CreateUpdateUserID,
                    LastModifiedOnDate = GETDATE()
            WHERE   MessageID = @MessageID
        END
        
    SELECT  @MessageID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_SaveMessageAttachment]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_SaveMessageAttachment]
    @MessageAttachmentID int,
    @MessageID int,
    @FileID int,
	@CreateUpdateUserID INT
AS
    IF ( @MessageAttachmentID = -1 )
        BEGIN
            INSERT {databaseOwner}{objectQualifier}CoreMessaging_MessageAttachments(
					[FileID],
					[MessageID],
                    [CreatedByUserID],
                    [CreatedOnDate],
                    [LastModifiedByUserID],
                    [LastModifiedOnDate]
                    )
            VALUES  (
					@FileID,
					@MessageID,
                    @CreateUpdateUserID , -- CreatedBy - int
                    GETDATE() , -- CreatedOn - datetime
                    @CreateUpdateUserID , -- LastModifiedBy - int
                    GETDATE() -- LastModifiedOn - datetime
                    )

            SELECT  @MessageAttachmentID = SCOPE_IDENTITY()
        END
    ELSE
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}CoreMessaging_MessageAttachments
            SET     [FileID] = @FileID,
					[MessageID] = @MessageID,
                    LastModifiedByUserID = @CreateUpdateUserID,
                    LastModifiedOnDate = GETDATE()
            WHERE   MessageAttachmentID = @MessageAttachmentID
        END

    SELECT  @MessageAttachmentID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_SaveMessageRecipient]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_SaveMessageRecipient]
    @RecipientID int,
    @MessageID int,
    @UserID int,
    @Read bit,
	@Archived bit,
	@CreateUpdateUserID INT
AS
BEGIN
    IF ( @RecipientID = -1 )
        BEGIN
            INSERT {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients(
					[MessageID],
					[UserID],
					[Read],
					[Archived],
                    [CreatedByUserID],
                    [CreatedOnDate],
                    [LastModifiedByUserID],
                    [LastModifiedOnDate]
                    )
            VALUES  (
					@MessageID,
					@UserID,
					@Read,
					@Archived,
                    @CreateUpdateUserID , -- CreatedBy - int
                    GETDATE(), -- CreatedOn - datetime
                    @CreateUpdateUserID , -- LastModifiedBy - int
                    GETDATE() -- LastModifiedOn - datetime
                    )

            SELECT  @RecipientID = SCOPE_IDENTITY()
        END
    ELSE
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients
            SET     [MessageID] = @MessageID,
					[UserID] = @UserID,
					[Read] = @Read,
					[Archived] = @Archived,
                    LastModifiedByUserID = @CreateUpdateUserID,
                    LastModifiedOnDate = GETDATE()
            WHERE   RecipientID = @RecipientID
        END

    SELECT  @RecipientID
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_SendNotification]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_SendNotification]
	@NotificationTypeID int,
	@PortalID INT,
	@To nvarchar(2000),
	@From nvarchar(200),
    @Subject nvarchar(400),
    @Body nvarchar(max),
    @SenderUserID int,
	@CreateUpdateUserID int,
	@ExpirationDate datetime,
    @IncludeDismissAction bit,
    @Context nvarchar(200)
AS
BEGIN
	INSERT {databaseOwner}[{objectQualifier}CoreMessaging_Messages] (
		[NotificationTypeID],
		[PortalID],
		[To],
		[From],
		[Subject],
		[Body],
		[SenderUserID],
		[ExpirationDate],
        [IncludeDismissAction],
        [Context],
		[CreatedByUserID],
		[CreatedOnDate],
		[LastModifiedByUserID],
		[LastModifiedOnDate]
	) VALUES (
		@NotificationTypeID,
		@PortalID,
		@To,
		@From,
		@Subject,
		@Body,
		@SenderUserID,
		@ExpirationDate,
        @IncludeDismissAction,
        @Context,
		@CreateUpdateUserID, -- CreatedBy
		GETUTCDATE(), -- CreatedOn
		@CreateUpdateUserID, -- LastModifiedBy
		GETDATE() -- LastModifiedOn
	)

	SELECT  SCOPE_IDENTITY()
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_SetUserPreference]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_SetUserPreference]
	@PortalId INT ,	
	@UserId INT,
	@MessagesEmailFrequency INT,
	@NotificationsEmailFrequency INT
AS 
BEGIN	
	UPDATE {databaseOwner}{objectQualifier}CoreMessaging_UserPreferences
	SET MessagesEmailFrequency = @MessagesEmailFrequency
		,NotificationsEmailFrequency = @NotificationsEmailFrequency
	WHERE PortalId = @PortalId
	AND UserId = @UserId

	IF @@ROWCOUNT = 0 BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}CoreMessaging_UserPreferences (PortalId, UserId, MessagesEmailFrequency, NotificationsEmailFrequency)
		VALUES (@PortalId, @UserId, @MessagesEmailFrequency, @NotificationsEmailFrequency)
	END	
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_UpdateMessageArchivedStatus]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_UpdateMessageArchivedStatus]
	@ConversationID int,
	@UserID int,
	@Archived bit
AS
BEGIN
	UPDATE {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients]
	SET [Archived] = @Archived
	WHERE UserID = @UserID
	AND MessageID IN (SELECT MessageID FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages] WHERE ConversationID = @ConversationID)

	IF @Archived = 1 BEGIN
		-- If archiving, set also as read
		UPDATE {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients]
		SET [Read] = 1
		WHERE [UserID] = @UserID
		AND MessageID IN (SELECT MessageID FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages] WHERE ConversationID = @ConversationID)
	END
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_UpdateMessageReadStatus]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_UpdateMessageReadStatus]
	@ConversationID int,
	@UserID          int,
	@Read			 bit
AS
BEGIN
UPDATE {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] SET [Read]=@Read 
WHERE UserID = @UserID
AND MessageID IN (SELECT MessageID FROM {databaseOwner}[{objectQualifier}CoreMessaging_Messages] WHERE ConversationID=@ConversationID)
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CoreMessaging_UpdateSubscriptionDescription]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_UpdateSubscriptionDescription]
	@ObjectKey NVARCHAR(255), 
    @PortalId INT,
    @Description NVARCHAR(255)	
AS 
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}CoreMessaging_Subscriptions
		SET [Description] = @Description
		WHERE PortalId = @PortalId 
		AND ObjectKey LIKE @ObjectKey		
		SELECT @@ROWCOUNT AS [ResultStatus]      
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}CountLegacyFiles]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CountLegacyFiles]
AS
BEGIN

SELECT COUNT(*) FROM {databaseOwner}[{objectQualifier}Files] WHERE ContentItemID IS NULL
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteAuthentication]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteAuthentication]
	@AuthenticationID int
AS
	DECLARE @AuthType nvarchar(100)
	SET @AuthType = (SELECT AuthenticationType FROM {databaseOwner}{objectQualifier}Authentication WHERE AuthenticationID = @AuthenticationID)
	
	-- Delete UserAuthentication rows
	IF (@AuthType Is Not Null)
		BEGIN
			DELETE FROM {databaseOwner}{objectQualifier}UserAuthentication
				WHERE AuthenticationType = @AuthType
		END

	-- Delete Record
	DELETE 
		FROM   {databaseOwner}{objectQualifier}Authentication
		WHERE AuthenticationID = @AuthenticationID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteContentItem]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteContentItem] 
	@ContentItemId			int
AS
	DELETE FROM {databaseOwner}{objectQualifier}ContentItems
	WHERE ContentItemId = @ContentItemId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteContentType]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteContentType] 
	@ContentTypeId	int
AS
	DELETE FROM {databaseOwner}{objectQualifier}ContentTypes
	WHERE ContentTypeId = @ContentTypeId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteContentWorkflowLogs]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteContentWorkflowLogs]
	@ContentItemID int,
	@WorkflowID int
AS
    DELETE FROM {databaseOwner}[{objectQualifier}ContentWorkflowLogs]
	WHERE ContentItemID = @ContentItemID AND WorkflowID = @WorkflowID

	SELECT @@ROWCOUNT
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteContentWorkflowState]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteContentWorkflowState]
	@StateID int
AS
    DELETE FROM {databaseOwner}{objectQualifier}ContentWorkflowStates
    WHERE StateID = @StateID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteContentWorkflowStatePermission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteContentWorkflowStatePermission]
	@WorkflowStatePermissionID int
AS
    DELETE FROM {databaseOwner}{objectQualifier}ContentWorkflowStatePermission
    WHERE WorkflowStatePermissionID = @WorkflowStatePermissionID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteDesktopModule]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteDesktopModule]
	@DesktopModuleId int
AS
-- delete custom permissions
DELETE FROM {databaseOwner}{objectQualifier}Permission
WHERE moduledefid in 
	(SELECT moduledefid 
	FROM {databaseOwner}{objectQualifier}ModuleDefinitions
	WHERE desktopmoduleid = @DesktopModuleId)
	
DELETE FROM {databaseOwner}{objectQualifier}DesktopModules 
WHERE DesktopModuleId = @DesktopModuleId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteDesktopModulePermission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteDesktopModulePermission]
	@DesktopModulePermissionID int
AS
    DELETE FROM {databaseOwner}{objectQualifier}DesktopModulePermission
    WHERE DesktopModulePermissionID = @DesktopModulePermissionID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteDesktopModulePermissionsByPortalDesktopModuleID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteDesktopModulePermissionsByPortalDesktopModuleID]
	@PortalDesktopModuleID int
AS
    DELETE FROM {databaseOwner}{objectQualifier}DesktopModulePermission
    WHERE PortalDesktopModuleID = @PortalDesktopModuleID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteDesktopModulePermissionsByUserID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteDesktopModulePermissionsByUserID]
    @UserId   INT,  -- required, not null!
	@PortalId INT -- Null affects all sites
AS
    DELETE FROM {databaseOwner}[{objectQualifier}DesktopModulePermission]
    WHERE UserID = @UserId
     AND (PortalDesktopModuleID IN (SELECT PortalDesktopModuleID 
									FROM {databaseOwner}[{objectQualifier}PortalDesktopModules] 
									WHERE PortalID = @PortalId) OR IsNull(@PortalId, -1) = -1)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteEventLog]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteEventLog]	
    @LogGUID varchar(36)
AS
BEGIN
    IF @LogGUID is null
    BEGIN
        DELETE FROM {databaseOwner}{objectQualifier}EventLog
    END ELSE BEGIN
        DELETE FROM {databaseOwner}{objectQualifier}EventLog WHERE LogGUID = @LogGUID
    END
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteEventLogConfig]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteEventLogConfig]
	@ID int
AS
DELETE FROM {databaseOwner}{objectQualifier}EventLogConfig
WHERE ID = @ID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteEventLogType]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteEventLogType]
	@LogTypeKey nvarchar(35)
AS
DELETE FROM {databaseOwner}{objectQualifier}EventLogTypes
WHERE	LogTypeKey = @LogTypeKey
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteExtensionUrlProvider]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteExtensionUrlProvider] 
	@ExtensionUrlProviderID	int
AS

DELETE FROM {databaseOwner}{objectQualifier}ExtensionUrlProviders
	WHERE ExtensionUrlProviderID = @ExtensionUrlProviderID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteFile]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteFile]	
    @PortalID int,
	@FileName nvarchar(246),
	@FolderID int
AS
BEGIN
	SET NOCOUNT OFF;
    IF @PortalID is null
    BEGIN
        DELETE FROM {databaseOwner}[{objectQualifier}Files] WHERE FileName = @FileName AND FolderID = @FolderID AND PortalId IS Null
    END 
	ELSE 
	BEGIN
        DELETE FROM {databaseOwner}[{objectQualifier}Files] WHERE FileName = @FileName AND FolderID = @FolderID AND PortalId = @PortalID
    END
	
	--UPDATE THE PARENT FOLDERS UPDATED DATE TO LASTET DATE
	IF(@@ROWCOUNT>0 AND @FolderID IS NOT NULL)
	BEGIN
		EXEC {databaseOwner}[{objectQualifier}UpdateFolderModifiedOnToCurrentDate] @FolderID
	END
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteFiles]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteFiles]	
    @PortalID int
AS
BEGIN
    SET NOCOUNT OFF;
	DECLARE @FolderID int;

    IF @PortalID is null
    BEGIN
		SELECT TOP 1 @FolderID=FolderID FROM {databaseOwner}[{objectQualifier}Files] WHERE PortalId is null
        DELETE FROM {databaseOwner}[{objectQualifier}Files] WHERE PortalId is null
    END 
	ELSE 
	BEGIN
		SELECT TOP 1 @FolderID=FolderID FROM {databaseOwner}[{objectQualifier}Files] WHERE PortalId = @PortalID
        DELETE FROM {databaseOwner}[{objectQualifier}Files] WHERE PortalId = @PortalID
    END

	--UPDATE THE PARENT FOLDERS UPDATED DATE TO LASTET DATE
	IF(@@ROWCOUNT>0 AND @FolderID IS NOT NULL)
	BEGIN
		EXEC {databaseOwner}[{objectQualifier}UpdateFolderModifiedOnToCurrentDate] @FolderID
	END

END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteFileVersion]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteFileVersion] 
    @FileId int,
    @Version int
AS
BEGIN
    DECLARE @PublishedVersion int

    -- Check there is at least one version
    IF NOT EXISTS(SELECT FileID FROM {objectQualifier}FileVersions WHERE FileId = @FileId)
    BEGIN
        SELECT 1 -- We need to return 1 in order to allow initial version
        RETURN
    END
        
    SELECT @PublishedVersion = PublishedVersion
    FROM {databaseOwner}{objectQualifier}Files
    WHERE FileId = @FileId

    IF @PublishedVersion = @Version 
    BEGIN
        -- Get the previous version
        SELECT @PublishedVersion = MAX(Version)
        FROM {databaseOwner}{objectQualifier}FileVersions 
        WHERE FileId = @FileId
            AND Version < @Version

        -- If there is no previous version, get the min exsisting version
        IF @PublishedVersion IS NULL 
            SELECT @PublishedVersion = MIN(Version)
            FROM {databaseOwner}{objectQualifier}FileVersions 
            WHERE FileId = @FileId

        -- Update the published version
        IF @PublishedVersion IS NOT NULL 
        BEGIN
            UPDATE {databaseOwner}{objectQualifier}Files
            SET [PublishedVersion] = @PublishedVersion,
                [Extension] = v.[Extension],
                [Size] = v.[Size],
                [Width] = v.Width,        
                [Height] = v.Height,
                [ContentType] = v.ContentType,
                [Content] = v.Content,
                [LastModifiedByUserID] = v.LastModifiedByUserID,
                [LastModifiedOnDate] = v.LastModifiedOnDate,
                [SHA1Hash] = v.SHA1Hash
            FROM {databaseOwner}{objectQualifier}files AS f
                INNER JOIN {databaseOwner}{objectQualifier}FileVersions AS v
                ON ( f.FileId = v.FileId AND v.Version = @PublishedVersion)        
            WHERE f.FileId = @FileId

            DELETE FROM {databaseOwner}{objectQualifier}FileVersions
            WHERE FileId = @FileId 
            AND Version = @PublishedVersion
        END
    END

    DELETE FROM {databaseOwner}{objectQualifier}FileVersions
    WHERE FileId = @FileId 
      AND Version = @Version

    SELECT @PublishedVersion
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteFolder]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteFolder]	
    @PortalID int,
    @FolderPath nvarchar(300)
AS
BEGIN
    SET NOCOUNT OFF;
	DECLARE @ParentID int;

	IF @PortalID is null
    BEGIN
		SELECT @ParentID=ParentID FROM {databaseOwner}[{objectQualifier}Folders] WHERE PortalID = @PortalID AND FolderPath = @FolderPath;
	    DELETE FROM {databaseOwner}[{objectQualifier}Folders] WHERE PortalID is null AND FolderPath = @FolderPath
    END 
	ELSE 
	BEGIN
		SELECT @ParentID=ParentID FROM {databaseOwner}[{objectQualifier}Folders] WHERE PortalID is null AND FolderPath = @FolderPath;
        DELETE FROM {databaseOwner}[{objectQualifier}Folders] WHERE PortalID = @PortalID AND FolderPath = @FolderPath
    END

	--UPDATE THE PARENT FOLDERS UPDATED DATE TO LASTET DATE
	IF(@@ROWCOUNT>0 AND @ParentID IS NOT NULL)
	BEGIN
		EXEC {databaseOwner}[{objectQualifier}UpdateFolderModifiedOnToCurrentDate] @ParentID
	END

END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteFolderMapping]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteFolderMapping]
	@FolderMappingID int
AS
BEGIN
	DELETE
	FROM {databaseOwner}[{objectQualifier}FolderMappings]
	WHERE FolderMappingID = @FolderMappingID
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteFolderPermission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteFolderPermission]
	@FolderPermissionID int
AS

DELETE FROM {databaseOwner}{objectQualifier}FolderPermission
WHERE
	[FolderPermissionID] = @FolderPermissionID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteFolderPermissionsByFolderPath]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteFolderPermissionsByFolderPath]
    @PortalId   Int,            -- Null for Host menu tabs
    @FolderPath nVarChar(300)   -- must be a valid path
AS
BEGIN
    DELETE FROM {databaseOwner}[{objectQualifier}FolderPermission]
    WHERE FolderID IN (SELECT FolderID FROM {databaseOwner}[{objectQualifier}Folders]
                                       WHERE FolderPath = @FolderPath AND (IsNull(PortalID, -1) = IsNull(@PortalId, -1)))
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteFolderPermissionsByUserID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteFolderPermissionsByUserID]
    @PortalId Int,  -- Null|-1 for Host menu tabs
    @UserId   Int   -- Not Null
AS
    DELETE FROM {databaseOwner}[{objectQualifier}FolderPermission]
    WHERE UserID = @UserId
     AND FolderID IN (SELECT FolderID FROM {databaseOwner}[{objectQualifier}Folders] 
	                  WHERE (PortalID = @PortalId Or IsNull(@PortalId, -1) = IsNull(PortalID, -1)))
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteHeirarchicalTerm]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteHeirarchicalTerm]	
    @TermId			int    
AS
BEGIN
    DECLARE @Left int, @Right int, @VocabularyID int, @Width int

	SELECT
		@Left = tt.TermLeft
		, @Right = tt.TermRight
		, @VocabularyID = tt.VocabularyID
		, @Width = @Right - @Left + 1
	FROM
		{databaseOwner}{objectQualifier}Taxonomy_Terms tt
	WHERE
		tt.TermID = @TermID

	BEGIN TRANSACTION

	-- Delete term(s)
	DELETE FROM {databaseOwner}{objectQualifier}Taxonomy_Terms
	WHERE TermLeft > = @Left AND TermLeft > 0
	  AND TermRight <= @Right AND TermRight > 0
	  AND VocabularyID = @VocabularyID

	IF @@ERROR = 0
	BEGIN
		-- Update Left values for all items that are after deleted term
		UPDATE {databaseOwner}{objectQualifier}Taxonomy_Terms
	    SET TermLeft = TermLeft - @Width
		WHERE TermLeft >= @Left + @Width
			AND VocabularyID = @VocabularyID

        IF @@ERROR = 0
        BEGIN
            -- Update Right values for all items that are after deleted term
            UPDATE {databaseOwner}{objectQualifier}Taxonomy_Terms
            SET TermRight = TermRight - @Width
            WHERE TermRight >= @Right
                AND VocabularyID = @VocabularyID

            IF @@ERROR = 0
            BEGIN
                COMMIT TRANSACTION
                RETURN
            END
        END
    END
    
	ROLLBACK TRANSACTION
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteIPFilter]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteIPFilter]
	@IPFilterID	int
AS 
	BEGIN
		DELETE FROM {databaseOwner}{objectQualifier}IPFilter  
			WHERE IPFilterID = @IPFilterID
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteJavaScriptLibrary]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteJavaScriptLibrary]
	@JavaScriptLibraryID INT
AS
	DELETE FROM {databaseOwner}[{objectQualifier}JavaScriptLibraries]
	WHERE JavaScriptLibraryID = @JavaScriptLibraryID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteLanguage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteLanguage]
	@LanguageID		Int -- Not Null
AS
BEGIN
    DECLARE @CultureCode AS nVarChar(10);
    SELECT @CultureCode = CultureCode FROM {databaseOwner}[{objectQualifier}Languages] WHERE LanguageId = @LanguageId;
    DELETE FROM {databaseOwner}[{objectQualifier}PortalLocalization] WHERE @CultureCode = CultureCode;
    DELETE FROM {databaseOwner}[{objectQualifier}PortalSettings]     WHERE @CultureCode = CultureCode;
    DELETE FROM {databaseOwner}[{objectQualifier}Languages]          WHERE @LanguageID  = LanguageID;
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteLanguagePack]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteLanguagePack]

	@LanguagePackID		int

AS
    DELETE
	    FROM	{databaseOwner}{objectQualifier}LanguagePacks
	    WHERE   LanguagePackID = @LanguagePackID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteList]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteList]
	@ListName  nVarChar( 50), -- Not Null
	@ParentKey nVarChar(150)  -- Not Null
AS
BEGIN
	DELETE L
	 FROM  {databaseOwner}[{objectQualifier}Lists] L
	 WHERE ListName = @ListName 
	   AND {databaseOwner}[{objectQualifier}GetListParentKey](L.ParentID, L.ListName, N'ParentKey',  0) = @ParentKey;
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteListEntryByID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure {databaseOwner}[{objectQualifier}DeleteListEntryByID]

@EntryId   int,
@DeleteChild bit

as

Delete
From {databaseOwner}{objectQualifier}Lists
Where  [EntryID] = @EntryID

If @DeleteChild = 1
Begin
	Delete 
	From {databaseOwner}{objectQualifier}Lists
	Where [ParentID] = @EntryID
End
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteMetaData]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteMetaData] 
	@ContentItemId		int,
	@Name				nvarchar(100),
	@Value				nvarchar(MAX)
	
AS
	DELETE FROM {databaseOwner}{objectQualifier}ContentItems_MetaData
	FROM {databaseOwner}{objectQualifier}ContentItems_MetaData AS cm
		INNER JOIN {databaseOwner}{objectQualifier}MetaData AS m ON cm.MetaDataID = m.MetaDataID
	WHERE cm.ContentItemId = @ContentItemId AND m.MetaDataName = @Name AND cm.MetaDataValue = @Value
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteModule]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure {databaseOwner}[{objectQualifier}DeleteModule]

@ModuleId   int

as

delete
from   {databaseOwner}{objectQualifier}Modules 
where  ModuleId = @ModuleId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteModuleControl]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure {databaseOwner}[{objectQualifier}DeleteModuleControl]

@ModuleControlId int

as

delete
from   {databaseOwner}{objectQualifier}ModuleControls
where  ModuleControlId = @ModuleControlId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteModuleDefinition]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteModuleDefinition]
	@ModuleDefId int
AS

-- delete custom permissions
DELETE FROM {databaseOwner}{objectQualifier}Permission
WHERE moduledefid = @ModuleDefId
	
DELETE FROM {databaseOwner}{objectQualifier}ModuleDefinitions
WHERE  ModuleDefId = @ModuleDefId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteModulePermission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteModulePermission]
	@ModulePermissionID int
AS

DELETE FROM {databaseOwner}{objectQualifier}ModulePermission
WHERE
	[ModulePermissionID] = @ModulePermissionID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteModulePermissionsByModuleID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteModulePermissionsByModuleID]
	@ModuleID int,
	@PortalID int
AS
	DELETE FROM {databaseOwner}{objectQualifier}ModulePermission
		WHERE ModuleID = @ModuleID
			AND PortalID = @PortalID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteModulePermissionsByUserID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure {databaseOwner}[{objectQualifier}DeleteModulePermissionsByUserID]
	@PortalID int,
	@UserID int
AS
	DELETE FROM {databaseOwner}{objectQualifier}ModulePermission
		FROM {databaseOwner}{objectQualifier}ModulePermission MP
			INNER JOIN {databaseOwner}{objectQualifier}Modules AS M ON MP.ModuleID = M.ModuleID
		WHERE M.PortalID = @PortalID
		AND MP.UserID = @UserID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteModuleSetting]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteModuleSetting]
	@ModuleId      int,          -- Not Null
	@SettingName   nVarChar(50)  -- Not Null or empty
AS
BEGIN
	DELETE
	 FROM  {databaseOwner}[{objectQualifier}ModuleSettings]
	 WHERE ModuleId    = @ModuleId
	   AND SettingName = @SettingName;
END; -- Procedure
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteModuleSettings]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteModuleSettings]
	@ModuleId int -- Not Null
AS
BEGIN
	DELETE 
	 FROM  {databaseOwner}[{objectQualifier}ModuleSettings]
	 WHERE ModuleId = @ModuleId
END; -- Procedure
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteOldRedirectMessage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteOldRedirectMessage]
	@CutoffDate [DateTime]
AS
	DELETE FROM {databaseOwner}{objectQualifier}RedirectMessages
	WHERE CreatedOnDate <= @CutoffDate
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteOrphanedAspNetUsers]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteOrphanedAspNetUsers]
    @ApplicationName NVARCHAR(256)
AS

IF (SELECT COUNT(*) FROM dbo.sysobjects
	WHERE id = object_id(N'dbo.[aspnet_Users]') OR
		  id = object_id(N'dbo.[aspnet_Membership]') OR
		  id = object_id(N'{databaseOwner}[{objectQualifier}Users]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) = 3
BEGIN
	BEGIN TRANSACTION
		BEGIN TRY
			-- remove orphaned aspnet memberships
			;WITH
			orphaned_aspnet_memberships(UserId)
			AS
			(SELECT asp_memberships.UserId FROM dbo.aspnet_Membership asp_memberships
					INNER JOIN dbo.aspnet_Applications asp_apps ON asp_apps.ApplicationId = asp_memberships.ApplicationId
					INNER JOIN dbo.aspnet_Users asp_users ON asp_memberships.UserId = asp_users.UserId
					LEFT JOIN {databaseOwner}{objectQualifier}Users users ON asp_users.UserName = users.Username
					WHERE asp_apps.LoweredApplicationName = LOWER(@ApplicationName) AND users.Username IS NULL)
			DELETE m FROM dbo.aspnet_Membership m
			INNER JOIN orphaned_aspnet_memberships o ON m.UserId = o.UserId

			-- remove orphaned aspnet users
			;WITH
			orphaned_aspnet_users (UserId)
			AS 
			(SELECT asp_users.UserId FROM dbo.aspnet_Users asp_users
					INNER JOIN dbo.aspnet_Applications asp_apps ON asp_apps.ApplicationId = asp_users.ApplicationId
					LEFT JOIN {databaseOwner}{objectQualifier}Users users ON asp_users.UserName = users.Username		
					WHERE asp_apps.LoweredApplicationName = LOWER(@ApplicationName) AND users.Username IS NULL)
			DELETE u FROM dbo.aspnet_Users u
			INNER JOIN orphaned_aspnet_users o ON u.UserId = o.UserId
		END TRY
		BEGIN CATCH
			SELECT ERROR_MESSAGE() AS ErrorMessage
			IF @@TRANCOUNT > 0  
				ROLLBACK TRANSACTION
		END CATCH
	IF @@TRANCOUNT > 0 
	    COMMIT TRANSACTION
END

GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeletePackage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeletePackage]
	@PackageID		int
AS
	DELETE 
		FROM   {databaseOwner}{objectQualifier}Packages
		WHERE  [PackageID] = @PackageID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeletePermission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeletePermission]
	@PermissionID int
AS

DELETE FROM {databaseOwner}{objectQualifier}Permission
WHERE
	[PermissionID] = @PermissionID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeletePortalAlias]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure {databaseOwner}[{objectQualifier}DeletePortalAlias]
    @PortalAliasID INT
AS
    DELETE FROM {databaseOwner}[{objectQualifier}PortalAlias]
        WHERE PortalAliasID = @PortalAliasID
        
    UPDATE 	{databaseOwner}[{objectQualifier}TabUrls]
        SET PortalAliasID = NULL WHERE PortalAliasID = @PortalAliasID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeletePortalDesktopModules]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeletePortalDesktopModules]
    @PortalID        int,
    @DesktopModuleId int
AS
BEGIN
    IF @PortalID is not null AND @DesktopModuleId is not null
        DELETE FROM {databaseOwner}{objectQualifier}PortalDesktopModules WHERE PortalId = @PortalID AND DesktopModuleId = @DesktopModuleId
    ELSE 
        BEGIN
            IF @PortalID is not null
                DELETE FROM {databaseOwner}{objectQualifier}PortalDesktopModules WHERE PortalId = @PortalID
            ELSE
                BEGIN 
                    IF @DesktopModuleId is not null
                        DELETE FROM {databaseOwner}{objectQualifier}PortalDesktopModules WHERE DesktopModuleId = @DesktopModuleId
                END
        END
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeletePortalGroup]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeletePortalGroup]
	@PortalGroupID	int
AS 
	BEGIN
		DELETE FROM {databaseOwner}{objectQualifier}PortalGroups  
			WHERE PortalGroupID = @PortalGroupID
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeletePortalInfo]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeletePortalInfo]
	@PortalID int

AS
	/* Delete all the Portal Modules */
	DELETE
	FROM {databaseOwner}{objectQualifier}Modules
	WHERE PortalId = @PortalID

	/* Delete all the Portal Skins */
	DELETE
	FROM {databaseOwner}{objectQualifier}Packages
	WHERE  PortalId = @PortalID

	/* Delete Portal */
	DELETE
	FROM {databaseOwner}{objectQualifier}Portals
	WHERE  PortalId = @PortalID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeletePortalLanguages]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeletePortalLanguages]
    @PortalId   Int, -- Null ignored (use referential integrity to delete from all Portals)
    @LanguageId Int  -- Null ignored (use referential integrity to delete for all languages)
AS
BEGIN
    IF @PortalId Is Not Null AND IsNull(@LanguageId, -1) != -1 BEGIN
       DECLARE @CultureCode nVarchar(10);
       SELECT @CultureCode = CultureCode FROM {databaseOwner}[{objectQualifier}Languages] WHERE LanguageId = @LanguageId;
       DELETE FROM {databaseOwner}[{objectQualifier}PortalLanguages]    WHERE PortalId = @PortalId AND @LanguageId  = LanguageId;
       DELETE FROM {databaseOwner}[{objectQualifier}PortalLocalization] WHERE PortalId = @PortalId AND @CultureCode = CultureCode;
       DELETE FROM {databaseOwner}[{objectQualifier}PortalSettings]     WHERE PortalId = @PortalId AND @CultureCode = CultureCode;
    END
    -- ELSE rely on referential integrity (portal or language will be deleted as well)
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeletePortalPermission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeletePortalPermission]
    @PortalPermissionId           INT
AS
    DELETE FROM {databaseOwner}[{objectQualifier}PortalPermission] 
        WHERE PortalPermissionId = @PortalPermissionId 

GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeletePortalPermissionsByPortalID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeletePortalPermissionsByPortalID]
    @PortalId           INT
AS
    DELETE FROM {databaseOwner}[{objectQualifier}PortalPermission] 
        WHERE PortalId = @PortalId

GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeletePortalPermissionsByUserID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeletePortalPermissionsByUserID]
    @PortalId           INT,
    @UserId             INT
AS
    DELETE FROM {databaseOwner}[{objectQualifier}PortalPermission] 
        WHERE PortalId = @PortalId AND UserId = @UserId

GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeletePortalSetting]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeletePortalSetting]
	@PortalID      Int,          -- Not Null
	@SettingName   nVarChar(50), -- Not Null
	@CultureCode   nVarChar(10)  -- Null|'' for all languages and neutral settings
AS
BEGIN
	DELETE FROM {databaseOwner}[{objectQualifier}PortalSettings]
	 WHERE (PortalID    = @PortalID)
	   AND (SettingName = @SettingName)
	   AND (CultureCode = @CultureCode OR IsNull(@CultureCode, N'') = N'')
END; -- Procedure
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeletePortalSettings]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeletePortalSettings]
	@PortalID      Int,          -- Not Null
	@CultureCode   nVarChar(10)  -- Null|'' for all languages and neutral settings

AS
BEGIN
	DELETE FROM {databaseOwner}[{objectQualifier}PortalSettings]
	 WHERE (PortalID    = @PortalID)
	   AND (CultureCode = @CultureCode OR IsNull(@CultureCode, N'') = N'')
END; -- Procedure
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeletePropertyDefinition]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeletePropertyDefinition]

	@PropertyDefinitionId int

AS

UPDATE {databaseOwner}{objectQualifier}ProfilePropertyDefinition 
	SET Deleted = 1
	WHERE  PropertyDefinitionId = @PropertyDefinitionId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteRelationship]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteRelationship] @RelationshipID INT	
AS 
	BEGIN
		DELETE FROM {databaseOwner}{objectQualifier}Relationships  
			WHERE RelationshipID = @RelationshipID
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteRelationshipType]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteRelationshipType] @RelationshipTypeID INT	
AS 
	BEGIN
		DELETE FROM {databaseOwner}{objectQualifier}RelationshipTypes  
			WHERE RelationshipTypeID = @RelationshipTypeID
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteRole]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteRole]
    @RoleId Int -- ID of role to delete. System Roles ignored (deletion of system roles not supported)
AS
BEGIN
    IF @RoleId >= 0 BEGIN
        DELETE FROM {databaseOwner}[{objectQualifier}DesktopModulePermission] WHERE RoleID = @RoleId
        DELETE FROM {databaseOwner}[{objectQualifier}FolderPermission]        WHERE RoleID = @RoleId
        DELETE FROM {databaseOwner}[{objectQualifier}ModulePermission]        WHERE RoleID = @RoleId
        DELETE FROM {databaseOwner}[{objectQualifier}TabPermission]           WHERE RoleID = @RoleId
        DELETE FROM {databaseOwner}[{objectQualifier}Roles]                   WHERE RoleID = @RoleId
    END
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteRoleGroup]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteRoleGroup]

	@RoleGroupId      int
	
AS

DELETE  
FROM {databaseOwner}{objectQualifier}RoleGroups
WHERE  RoleGroupId = @RoleGroupId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteSchedule]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteSchedule]
@ScheduleID int
AS
DELETE FROM {databaseOwner}{objectQualifier}Schedule
WHERE ScheduleID = @ScheduleID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteScopeType]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteScopeType] 
	@ScopeTypeId			int
AS
	DELETE FROM {databaseOwner}{objectQualifier}Taxonomy_ScopeTypes
	WHERE ScopeTypeId = @ScopeTypeId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteSearchCommonWord]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteSearchCommonWord]
	@CommonWordID int
AS

DELETE FROM {databaseOwner}{objectQualifier}SearchCommonWords
WHERE
	[CommonWordID] = @CommonWordID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteSearchStopWords]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteSearchStopWords]
	@StopWordsID int
AS
BEGIN	
	DELETE FROM {databaseOwner}{objectQualifier}SearchStopWords WHERE StopWordsID = @StopWordsID
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteServer]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteServer]
	@ServerID			int
AS
	DELETE FROM {databaseOwner}{objectQualifier}WebServers WHERE ServerID=@ServerID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteSimpleTerm]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteSimpleTerm] 
	@TermId			int
AS
	DELETE FROM {databaseOwner}{objectQualifier}Taxonomy_Terms
	WHERE TermID = @TermID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteSkin]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteSkin]

	@SkinID		int

AS

DELETE
	FROM	{databaseOwner}{objectQualifier}Skins
	WHERE   SkinID = @SkinID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteSkinControl]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteSkinControl]
	@SkinControlId int
AS
    DELETE
    FROM   {databaseOwner}{objectQualifier}SkinControls
    WHERE  SkinControlId = @SkinControlId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteSkinPackage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteSkinPackage]

	@SkinPackageID		int

AS
    DELETE
	    FROM	{databaseOwner}{objectQualifier}SkinPackages
	WHERE   SkinPackageID = @SkinPackageID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteSynonymsGroup]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteSynonymsGroup]
	@SynonymsGroupID int
AS
BEGIN	
	DELETE FROM {databaseOwner}{objectQualifier}SynonymsGroups WHERE SynonymsGroupID = @SynonymsGroupID
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteSystemMessage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure {databaseOwner}[{objectQualifier}DeleteSystemMessage]

@PortalID     int,
@MessageName  nvarchar(50)

as

delete
from   {databaseOwner}{objectQualifier}SystemMessages
where  PortalID = @PortalID
and    MessageName = @MessageName
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteTab]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteTab]
  @TabId INT  -- ID of tab to delete; Not Null and > 0
AS
BEGIN
    DECLARE @TabOrder INT
    DECLARE @ParentId INT
    DECLARE @ContentItemId INT
	DECLARE @PortalId INT
    SELECT @TabOrder = TabOrder, @ParentId = ParentID, @ContentItemID = ContentItemID, @PortalId = PortalID FROM {databaseOwner}[{objectQualifier}Tabs] WHERE TabID = @TabId

    -- Delete Tab --
    DELETE FROM {databaseOwner}[{objectQualifier}Tabs] WHERE TabID = @TabId

    -- Update TabOrder of remaining Tabs --
    UPDATE {databaseOwner}[{objectQualifier}Tabs]
        SET TabOrder = TabOrder - 2
        WHERE ISNULL(ParentID, -1) = ISNULL(@ParentId , -1) AND TabOrder > @TabOrder 
		AND (PortalID = @PortalId OR (PortalID IS NULL AND @PortalId IS NULL))

    -- Delete Content Item --
    DELETE FROM {databaseOwner}[{objectQualifier}ContentItems] WHERE ContentItemID = @ContentItemId
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteTabModule]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteTabModule]
	@TabId      INT,
	@ModuleId   INT,
	@SoftDelete	BIT,
    @LastModifiedByUserID INT = -1
AS
IF @SoftDelete = 1
	UPDATE {databaseOwner}{objectQualifier}TabModules
		SET	IsDeleted = 1,
			VersionGuid = newId(),
            LastModifiedByUserID = @LastModifiedByUserID,
			LastModifiedOnDate = GETDATE()
	WHERE  TabId = @TabId
		AND    ModuleId = @ModuleId
ELSE
	DELETE
	FROM   {databaseOwner}{objectQualifier}TabModules 
	WHERE  TabId = @TabId
		AND    ModuleId = @ModuleId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteTabModuleSetting]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteTabModuleSetting]
	@TabModuleId   int,
	@SettingName   nVarChar(50)
AS
BEGIN
	DELETE
	 FROM  {databaseOwner}[{objectQualifier}TabModuleSettings]
	 WHERE TabModuleId = @TabModuleId
	   AND SettingName = @SettingName;
END; -- Procedure
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteTabModuleSettings]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteTabModuleSettings]
	@TabModuleId Int
AS
BEGIN
	DELETE
	 FROM  {databaseOwner}[{objectQualifier}TabModuleSettings] 
	 WHERE TabModuleId = @TabModuleId;
END; -- Procedure
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteTabPermission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteTabPermission]
	@TabPermissionID int
AS

DELETE FROM {databaseOwner}{objectQualifier}TabPermission
WHERE
	[TabPermissionID] = @TabPermissionID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteTabPermissionsByTabID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteTabPermissionsByTabID]
	@TabID int
AS

DELETE FROM {databaseOwner}{objectQualifier}TabPermission
WHERE
	[TabID] = @TabID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteTabPermissionsByUserID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure {databaseOwner}[{objectQualifier}DeleteTabPermissionsByUserID]
	@PortalID int,
	@UserID int
AS
	DELETE FROM {databaseOwner}{objectQualifier}TabPermission
		FROM {databaseOwner}{objectQualifier}TabPermission TP
			INNER JOIN {databaseOwner}{objectQualifier}Tabs AS T ON TP.TabID = T.TabID
		WHERE T.PortalID = @PortalID
		AND TP.UserID = @UserID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteTabSetting]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteTabSetting]
	@TabID      	Int,         -- Not Null
	@SettingName	nVarChar(50) -- Not Null or empty
AS
BEGIN
	DELETE	
	 FROM  {databaseOwner}[{objectQualifier}TabSettings]
	 WHERE TabID       = @TabID
	   AND SettingName = @SettingName;
END; -- Procedure
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteTabSettings]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteTabSettings]
	@TabID  Int -- Not Null!
AS
BEGIN
	DELETE	
	 FROM  {databaseOwner}[{objectQualifier}TabSettings]
	 WHERE TabID = @TabID;
END; -- Procedure
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteTabUrl]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteTabUrl] 
	@TabID				int,
	@SeqNum				int
AS
	DELETE FROM {databaseOwner}{objectQualifier}TabUrls
	WHERE TabId = @TabID AND SeqNum = @SeqNum
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteTabVersion]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteTabVersion]
    @Id INT
AS
BEGIN
    DELETE FROM {databaseOwner}[{objectQualifier}TabVersions] WHERE TabVersionId = @Id
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteTabVersionDetail]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteTabVersionDetail]
    @Id INT
AS
BEGIN
    DELETE FROM {databaseOwner}[{objectQualifier}TabVersionDetails] WHERE TabVersionDetailId = @Id
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteTabVersionDetailByModule]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteTabVersionDetailByModule]
	@ModuleId   INT
AS
DELETE FROM   {databaseOwner}{objectQualifier}TabVersionDetails
WHERE  ModuleId = @ModuleId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteTranslatedTabs]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteTranslatedTabs]
    @PortalID INT ,
    @CultureCode NVARCHAR(10)
AS 
    BEGIN

        SET NOCOUNT ON;
		
        BEGIN TRY

            BEGIN TRANSACTION DeleteTranslatedTabs
		
			-- first store ContentItem records to be deleted
            DECLARE @TempDeleteCI TABLE ( ContentItemId INT )
        
            INSERT  INTO @TempDeleteCI
                    SELECT  ContentItemId
                    FROM    {databaseOwner}{objectQualifier}Tabs
                    WHERE   ( PortalID = @PortalID )
                            AND ( CultureCode = @CultureCode )

		-- delete all tabs in the portal that have been localized to the requested cultureCode
		-- This will also delete related tabmodule records
            DELETE  FROM {databaseOwner}{objectQualifier}Tabs
            WHERE   ( PortalID = @PortalID )
                    AND ( CultureCode = @CultureCode )

		
		-- append ContentItems to be deleted from stale modules
            INSERT  INTO @TempDeleteCI
                    SELECT  ContentItemID
                    FROM    {databaseOwner}{objectQualifier}ContentItems CI
                    WHERE   EXISTS ( SELECT *
                                     FROM   {databaseOwner}{objectQualifier}Modules M
                                     WHERE  ( CI.ModuleID = M.ModuleID )
                                            AND NOT EXISTS ( SELECT
                                                              *
                                                             FROM
                                                              {databaseOwner}{objectQualifier}TabModules TM
                                                             WHERE
                                                              M.ModuleID = TM.ModuleID ) )

		-- delete stale modules (these are modules that do not have a corresponding TabModules record,
		-- in other words: modules that are not placed on any page anymore)
            DELETE  FROM {databaseOwner}{objectQualifier}Modules
            WHERE   NOT EXISTS ( SELECT *
                                 FROM   {databaseOwner}{objectQualifier}TabModules
                                 WHERE  {databaseOwner}{objectQualifier}Modules.ModuleID = {databaseOwner}{objectQualifier}TabModules.ModuleID )

		-- finally delete all corresponding content items
            DELETE  FROM {databaseOwner}{objectQualifier}ContentItems
            WHERE   ContentItemID IN ( SELECT   ContentItemID
                                       FROM     @TempDeleteCI )
			AND ContentItemID NOT IN (SELECT ContentItemID FROM {databaseOwner}{objectQualifier}Modules)

            COMMIT TRANSACTION DeleteTranslatedTabs

        END TRY
  
        BEGIN CATCH
            IF @@TRANCOUNT > 0 
                ROLLBACK TRANSACTION DeleteTranslatedTabs


            DECLARE @ErrorMessage NVARCHAR(4000);
            DECLARE @ErrorSeverity INT;

            SELECT  @ErrorMessage = ERROR_MESSAGE() ,
                    @ErrorSeverity = ERROR_SEVERITY();

            RAISERROR (@ErrorMessage, @ErrorSeverity, 1 );			
			
        END CATCH	      

    END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteUrl]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure {databaseOwner}[{objectQualifier}DeleteUrl]

@PortalID     int,
@Url          nvarchar(255)

as

delete
from   {databaseOwner}{objectQualifier}Urls
where  PortalID = @PortalID
and    Url = @Url
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteUrlTracking]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure {databaseOwner}[{objectQualifier}DeleteUrlTracking]

@PortalID     int,
@Url          nvarchar(255),
@ModuleID     int

as

delete
from   {databaseOwner}{objectQualifier}UrlTracking
where  PortalID = @PortalID
and    Url = @Url
and    ((ModuleId = @ModuleId) or (ModuleId is null and @ModuleId is null))
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteUserPortal]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteUserPortal]
	@UserID		int,
	@PortalID   int
AS
	IF @PortalID IS NULL
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}Users
				SET
					IsDeleted = 1
				WHERE  UserId = @UserID
		END
	ELSE
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}UserPortals
				SET
					IsDeleted = 1
				WHERE  UserId = @UserID
					AND PortalId = @PortalID
		END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteUserRelationship]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteUserRelationship] @UserRelationshipID INT	
AS 
	BEGIN
		DELETE FROM {databaseOwner}{objectQualifier}UserRelationships  
			WHERE UserRelationshipID = @UserRelationshipID
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteUserRelationshipPreference]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteUserRelationshipPreference]
	@PreferenceID INT	
AS 
	BEGIN
		DELETE FROM {databaseOwner}{objectQualifier}UserRelationshipPreferences  
		WHERE PreferenceID = @PreferenceID

	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteUserRole]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure {databaseOwner}[{objectQualifier}DeleteUserRole]

@UserID int,
@RoleId int

as

delete
from {databaseOwner}{objectQualifier}UserRoles
where  UserId = @UserID
and    RoleId = @RoleId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteUsersOnline]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteUsersOnline]
	@TimeWindow int	
AS
BEGIN
    DECLARE @dt datetime
	SET @dt = DATEADD(MINUTE, -@TimeWindow, GETDATE())

	DELETE FROM {databaseOwner}{objectQualifier}AnonymousUsers WHERE LastActiveDate < @dt

	DELETE FROM {databaseOwner}{objectQualifier}UsersOnline WHERE LastActiveDate < @dt
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DeleteVocabulary]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteVocabulary] 
	@VocabularyID			int
AS
	DELETE FROM {databaseOwner}{objectQualifier}Taxonomy_Vocabularies
	WHERE VocabularyID = @VocabularyID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EnsureLocalizationExists]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}EnsureLocalizationExists]
	@PortalID       Int,
	@CultureCode	nvarchar(10)
AS
BEGIN
	DECLARE @MasterLanguage nvarchar(10) = Null;
	DECLARE @LocalizationExists bit = 0;

	IF NOT EXISTS (SELECT * FROM {databaseOwner}[{objectQualifier}Languages] L 
					JOIN {databaseOwner}[{objectQualifier}PortalLanguages] P ON L.LanguageID = P.LanguageID 
					WHERE P.PortalID = @PortalID AND L.CultureCode = @CultureCode)
		RETURN; -- language does not exist for this portal

	IF EXISTS (SELECT * FROM {databaseOwner}[{objectQualifier}PortalLocalization] 
				WHERE CultureCode = @CultureCode AND PortalID = @PortalID)
		RETURN; -- already localized
	
	IF EXISTS (SELECT * FROM {databaseOwner}[{objectQualifier}PortalLocalization] L
					JOIN {databaseOwner}[{objectQualifier}Portals] P ON L.PortalID = P.PortalID AND L.CultureCode = P.DefaultLanguage
					WHERE P.PortalID = @PortalID)
		SELECT @MasterLanguage = DefaultLanguage 
		FROM {databaseOwner}[{objectQualifier}Portals] 
		WHERE PortalID = @PortalID
	ELSE IF EXISTS (SELECT * FROM {databaseOwner}[{objectQualifier}PortalLocalization] 
					WHERE CultureCode = 'en-US' and PortalID = @PortalID)
		SET @MasterLanguage = 'en-US'
	ELSE -- neither default nor system language available: take the language that was assigned first
		SELECT TOP (1) CultureCode 
		FROM {databaseOwner}[{objectQualifier}PortalLocalization] 
		WHERE PortalID = @PortalID 
		ORDER BY PortalID ASC;

	IF NOT (@MasterLanguage Is Null OR @MasterLanguage LIKE @CultureCode) 
	BEGIN  -- copy localized values from (existing and different) master language:					
		INSERT INTO {databaseOwner}[{objectQualifier}PortalLocalization]
		(	PortalId,
			CultureCode,
			PortalName,
			LogoFile,
			FooterText,
			Description,
			KeyWords,
			BackgroundFile, 
			HomeTabId,
			LoginTabId,
			UserTabId,
			AdminTabId,
			RegisterTabId,
			SearchTabId,
			CreatedByUserID,
			CreatedOnDate,
			LastModifiedByUserID,
			LastModifiedOnDate
		) SELECT
			PortalId,
			@CultureCode,
			PortalName,
			LogoFile,
			FooterText,
			Description,
			KeyWords,
			BackgroundFile, 
			HomeTabId,
			LoginTabId,
			UserTabId,
			AdminTabId,
			RegisterTabId,
			SearchTabId,
			-1,
			GETDATE(),
			-1,
			GETDATE()
		 FROM {databaseOwner}[{objectQualifier}PortalLocalization] 
		 WHERE PortalID = @PortalID AND CultureCode = @MasterLanguage;
	
		-- copy missing localized settings:
		DECLARE	
			@LocalPortalSettings TABLE(
		    [PortalID]             INT             NOT NULL,
		    [CultureCode]          NVARCHAR (10)   NOT NULL,
		    [SettingName]          NVARCHAR (50)   NOT NULL,
		    [SettingValue]         NVARCHAR (2000) NULL
		);

		INSERT INTO @LocalPortalSettings
		(
			PortalID,
			CultureCode,
			SettingName,
			SettingValue
		)
		SELECT
			PortalID,
			CultureCode,
			SettingName,
			SettingValue
		FROM {databaseOwner}[{objectQualifier}PortalSettings]
		WHERE PortalID = @PortalID AND CultureCode = @CultureCode;

		MERGE INTO @LocalPortalSettings target
		USING (SELECT * FROM {databaseOwner}[{objectQualifier}PortalSettings]
				WHERE PortalId = @PortalID and CultureCode = @MasterLanguage) source 
		ON (target.SettingName = source.SettingName)
		WHEN NOT MATCHED THEN 
			INSERT (  
				PortalID,   
				CultureCode,   
				SettingName,   
				SettingValue) 
			VALUES (
				source.PortalID, 
				@CultureCode, 
				source.SettingName, 
				source.SettingValue
			);

		MERGE INTO {databaseOwner}[{objectQualifier}PortalSettings]  target
		USING (SELECT * FROM @LocalPortalSettings) source 
		ON (target.PortalID = source.PortalID AND 
			target.CultureCode = source.CultureCode AND 
			target.SettingName = source.SettingName)
		WHEN NOT MATCHED THEN 
			INSERT (  
				PortalID,   
				CultureCode,   
				SettingName,   
				SettingValue,
				CreatedByUserID, 
				CreatedOnDate, 
				LastModifiedByUserID, 
				LastModifiedOnDate) 
			VALUES (
				source.PortalID, 
				@CultureCode, 
				source.SettingName, 
				source.SettingValue,
				-1,
				GETDATE(),
				-1,
				GETDATE()
			);
	END;
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}EnsureNeutralLanguage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}EnsureNeutralLanguage]
    @PortalId INT ,
    @CultureCode NVARCHAR(10)
AS 
    BEGIN
        SET NOCOUNT ON;

        UPDATE  {databaseOwner}{objectQualifier}Tabs
        SET     CultureCode = NULL
        WHERE   PortalID = @PortalId
                AND CultureCode = @CultureCode
    END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}FindDatabaseVersion]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure {databaseOwner}[{objectQualifier}FindDatabaseVersion]

@Major  int,
@Minor  int,
@Build  int

as

select 1
from   {databaseOwner}{objectQualifier}Version
where  Major = @Major
and    Minor = @Minor
and    Build = @Build
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetAllFiles]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetAllFiles]
AS
BEGIN
	SELECT   
	  FileId,  
	  PortalId,  
	  [FileName],  
	  Extension,  
	  Size,  
	  Width,  
	  Height,  
	  ContentType,  
	  FolderID,  
	  Folder,  
	  StorageLocation,  
	  IsCached,
	  UniqueId,
	  VersionGuid,
	  SHA1Hash,
	  FolderMappingID,  
	  LastModificationTime,  
	  Title,  
      Description,
	  EnablePublishPeriod,  
	  StartDate,  
	  EndDate,  
	  CreatedByUserID,  
	  CreatedOnDate,  
	  LastModifiedByUserID,  
	  LastModifiedOnDate,  
	  PublishedVersion,  
	  ContentItemID,
      HasBeenPublished
	FROM {databaseOwner}[{objectQualifier}vw_Files] 	
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetAllModules]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetAllModules]

AS
SELECT	* 
FROM {databaseOwner}{objectQualifier}vw_Modules
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetAllProfiles]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure {databaseOwner}[{objectQualifier}GetAllProfiles]
AS
SELECT * FROM {databaseOwner}{objectQualifier}Profile
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetAllRelationshipTypes]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetAllRelationshipTypes]
AS 
    SELECT  RelationshipTypeID,
            Direction,
            Name ,            
            Description,
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}RelationshipTypes    
	ORDER BY RelationshipTypeID ASC
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetAllSynonymsGroups]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetAllSynonymsGroups]
	@PortalID int,
	@CultureCode nvarchar(50)
AS
BEGIN
	SELECT   
	  [SynonymsGroupID],  
	  [SynonymsTags],  
	  [PortalID],
	  [CreatedByUserID],  
	  [CreatedOnDate],  
	  [LastModifiedByUserID],  
	  [LastModifiedOnDate]
	FROM {databaseOwner}{objectQualifier}SynonymsGroups 
	WHERE [PortalID] = @PortalID
	AND [CultureCode] = @CultureCode
	ORDER BY LastModifiedOnDate DESC
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetAllTabs]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetAllTabs] 
AS
	SELECT *
		FROM {databaseOwner}{objectQualifier}vw_Tabs
		ORDER BY Level, ParentID, TabOrder
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetAllTabsModules]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure {databaseOwner}[{objectQualifier}GetAllTabsModules]
	@PortalID int,
	@AllTabs bit
AS
	SELECT	* 
	FROM {databaseOwner}{objectQualifier}vw_Modules M
	WHERE  M.PortalID = @PortalID 
		AND M.IsDeleted = 0
		AND M.AllTabs = @AllTabs
		AND M.TabModuleID =(SELECT min(TabModuleID) 
			FROM {databaseOwner}{objectQualifier}TabModules
			WHERE ModuleID = M.ModuleID)
	ORDER BY M.ModuleId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetAllTabsModulesByModuleID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetAllTabsModulesByModuleID]
    @ModuleID	int
AS
	SELECT	* 
	FROM {databaseOwner}{objectQualifier}vw_Modules
	WHERE  ModuleID = @ModuleID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetAllUsers]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetAllUsers]
	@PortalID        int,
	@PageIndex       int,
	@PageSize        INT,
	@IncludeDeleted  bit,
	@SuperUsersOnly  bit	
AS
	BEGIN
		-- Set the page bounds
		DECLARE 
			@PageLowerBound INT, 
			@PageUpperBound INT, 
			@RowsToReturn int

		EXEC {databaseOwner}{objectQualifier}CalculatePagingInformation @PageIndex, @PageSize, @RowsToReturn output, @PageLowerBound output, @PageUpperBound output

		IF @PortalID IS NULL
			BEGIN
				WITH [tmpUsers] AS (
					SELECT U.*, row_number() over (ORDER BY U.UserName) AS rowid
						FROM {databaseOwner}{objectQualifier}vw_Users u
						WHERE U.IsDeleted <= CASE @IncludeDeleted WHEN 0 THEN 0 ELSE 1 END
							--less than equal done to cover IsDeleted in (1,0) for IncludeDeleted...else just IsDeleted = 0
							  AND U.IsSuperUser >= CASE @SuperUsersOnly WHEN 1 THEN 1 ELSE 0 END
				)
				SELECT * FROM [tmpUsers]
					WHERE rowid > @PageLowerBound AND rowid < @PageUpperBound
					ORDER BY rowid
			END 
		ELSE 
			BEGIN
				WITH [tmpUsers] AS (
					SELECT U.*, row_number() over (order by U.UserName) AS rowid
						FROM {databaseOwner}{objectQualifier}vw_Users u
						WHERE U.PortalID = @PortalID AND U.IsDeleted <= CASE @IncludeDeleted WHEN 0 THEN 0 ELSE 1 END
						  AND U.IsSuperUser >= CASE @SuperUsersOnly WHEN 1 THEN 1 ELSE 0 END
				)
				SELECT * FROM [tmpUsers]
					WHERE rowid > @PageLowerBound AND rowid < @PageUpperBound
					ORDER by rowid
			END

		SET ROWCOUNT 0
 
		IF @PortalId IS NULL
			BEGIN
				SELECT COUNT(*) as TotalRecords
					FROM   {databaseOwner}{objectQualifier}vw_Users as U
					WHERE U.IsDeleted <= CASE @IncludeDeleted WHEN 0 THEN 0 ELSE 1 END
				          AND U.IsSuperUser >= CASE @SuperUsersOnly WHEN 1 THEN 1 ELSE 0 END
			END 
		ELSE 
			BEGIN
				SELECT COUNT(*) as TotalRecords
					FROM   {databaseOwner}{objectQualifier}vw_Users U
						WHERE U.PortalId = @PortalId
							AND U.IsDeleted <= CASE @IncludeDeleted WHEN 0 THEN 0 ELSE 1 END
							AND U.IsSuperUser >= CASE @SuperUsersOnly WHEN 1 THEN 1 ELSE 0 END
			END
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetAuthenticationService]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetAuthenticationService]

	@AuthenticationID int

AS
	SELECT *
		FROM   {databaseOwner}{objectQualifier}Authentication
		WHERE AuthenticationID = @AuthenticationID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetAuthenticationServiceByPackageID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetAuthenticationServiceByPackageID]

	@PackageID int

AS
	SELECT *
		FROM  {databaseOwner}{objectQualifier}Authentication
		WHERE PackageID = @PackageID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetAuthenticationServiceByType]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetAuthenticationServiceByType]

	@AuthenticationType nvarchar(100)

AS
	SELECT *
		FROM  {databaseOwner}{objectQualifier}Authentication
		WHERE AuthenticationType = @AuthenticationType
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetAuthenticationServices]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetAuthenticationServices]
AS
	SELECT *
		FROM   {databaseOwner}{objectQualifier}Authentication
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetAvailableUsersForIndex]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetAvailableUsersForIndex]
    @PortalId INT ,
    @StartDate DATETIME ,
    @startUserId INT = 0,
    @numberOfUsers INT = 500
AS
BEGIN
	DECLARE @PivotSql NVARCHAR(MAX)

	SELECT @PivotSql = COALESCE(@PivotSql + ',','') + '[' + PropertyName + ']'
		FROM {databaseOwner}[{objectQualifier}ProfilePropertyDefinition] pd
		INNER JOIN {databaseOwner}[{objectQualifier}Lists] l ON ListName = 'DataType' AND SystemList = 1 AND Value IN ( 'Text', 'RichText' ) AND l.EntryID = pd.DataType
		WHERE ISNULL(pd.PortalID, -1) = ISNULL(@PortalId, -1)
		AND Deleted = 0
	ORDER BY ViewOrder

	DECLARE @Sql NVARCHAR(MAX)

	SELECT @Sql = '
    WITH    ValidDataType
                AS ( SELECT   EntryID
                    FROM     {databaseOwner}[{objectQualifier}Lists]
                    WHERE    ListName = ''DataType''
                            AND SystemList = 1
                            AND Value IN ( ''Text'', ''RichText'' )
                    ),
                ValidUsers AS
                (
                                    SELECT UserId FROM ( SELECT   UserId, ROW_NUMBER() OVER(ORDER BY UserId ASC) AS rownumber
                        FROM ( SELECT DISTINCT
                                        ( u.UserID )
                                FROM      {databaseOwner}[{objectQualifier}Users] u
                                        INNER JOIN {databaseOwner}[{objectQualifier}UserPortals] up ON up.UserId = u.UserID
                                        INNER JOIN {databaseOwner}[{objectQualifier}vw_Profile] p ON p.UserID = u.UserID
                                        INNER JOIN {databaseOwner}[{objectQualifier}ProfilePropertyDefinition] pd ON pd.PropertyDefinitionID = p.PropertyDefinitionID AND pd.Visible = 1 AND pd.PortalID = @PortalId
                                        INNER JOIN ValidDataType dt ON dt.EntryID = pd.DataType
                                WHERE     (up.PortalId = @PortalId OR up.PortalId IS NULL)
                                        AND (u.LastModifiedOnDate > @StartDate OR (p.LastUpdatedDate IS NOT NULL AND (p.LastUpdatedDate > @StartDate OR pd.LastModifiedOnDate > @StartDate)))
                                        AND ((p.PropertyValue IS NOT NULL AND p.PropertyValue <> '''') OR u.LastModifiedOnDate > @StartDate OR p.LastUpdatedDate IS NULL OR p.LastUpdatedDate > @StartDate)
                            ) AS T WHERE UserID > @startUserId) AS T
                            WHERE rownumber <= @numberOfUsers
                )

	SELECT *
	FROM (
		SELECT  u.UserID ,
				u.DisplayName,
				u.LastModifiedOnDate,
				u.Username,
				u.IsSuperUser,
				u.Email,
				u.CreatedOnDate,
				p.PropertyName,
				REPLACE(p.PropertyValue, ''$'', ''[$]'') + ''$$$'' +
						CAST(CASE WHEN (p.Visibility IS NULL) THEN 0 ELSE p.Visibility END AS VARCHAR(10)) + ''$$$'' + p.ExtendedVisibility + ''$$$'' +
						CONVERT(VARCHAR(20), CASE WHEN u.LastModifiedOnDate > p.LastUpdatedDate OR p.LastUpdatedDate IS NULL THEN u.LastModifiedOnDate ELSE p.LastUpdatedDate END, 20)
					AS [PropertyValue]
		FROM
			{databaseOwner}[{objectQualifier}Users] u
			INNER JOIN ValidUsers vu on vu.UserId = u.UserID
			INNER JOIN {databaseOwner}[{objectQualifier}vw_Profile] p ON p.UserID = u.UserID
			INNER JOIN {databaseOwner}[{objectQualifier}ProfilePropertyDefinition] pd ON pd.PropertyDefinitionID = p.PropertyDefinitionID AND pd.Visible = 1 AND pd.PortalID = @PortalID
			INNER JOIN ValidDataType dt ON dt.EntryID = pd.DataType
		) AS T
	PIVOT (MAX(PropertyValue) for PropertyName in (' + @PivotSql + ')) AS T
	ORDER BY UserId
	'
	EXECUTE sp_executesql @Sql, 
                            N'@PortalId INT, @StartDate DATETIME, @startUserId INT, @numberOfUsers INT',
                            @PortalId, @StartDate, @startUserId, @numberOfUsers
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetContentItem]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetContentItem] 
	@ContentItemId			int
AS
	SELECT *
	FROM {databaseOwner}{objectQualifier}ContentItems
	WHERE ContentItemId = @ContentItemId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetContentItems]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetContentItems] 
	@ContentTypeId	int,
	@TabId			int,
	@ModuleId		int
AS
	SELECT *
	FROM {databaseOwner}{objectQualifier}ContentItems
	WHERE (ContentTypeId = @ContentTypeId OR @ContentTypeId IS NULL)
		AND (TabId = @TabId OR @TabId IS NULL)
		AND (ModuleId = @ModuleId OR @ModuleId IS NULL)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetContentItemsByContentType]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetContentItemsByContentType] 
	@ContentTypeId int
AS
	SELECT * FROM {databaseOwner}{objectQualifier}ContentItems WHERE ContentTypeID = @ContentTypeId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetContentItemsByModuleId]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetContentItemsByModuleId] 
	@ModuleId int
AS
	SELECT * FROM {databaseOwner}{objectQualifier}ContentItems WHERE ModuleID = @ModuleId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetContentItemsByTabId]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetContentItemsByTabId] 
	@TabId int
AS
	SELECT * FROM {databaseOwner}{objectQualifier}ContentItems WHERE TabID = @TabId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetContentItemsByTerm]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetContentItemsByTerm]
 @Term nvarchar(250)
AS
BEGIN
DECLARE @TermID int
  , @TermLeft int
  , @TermRight int
  , @VocabularyID int

 SELECT
  @TermID = TermID
  , @TermLeft = TermLeft
  , @TermRight = TermRight
  , @VocabularyID = VocabularyID
 FROM
  {databaseOwner}{objectQualifier}Taxonomy_Terms
 WHERE
  Name = @Term

 IF @TermLeft = 0 AND @TermRight = 0
 BEGIN
  -- Simple Term
  SELECT c.*
  FROM {databaseOwner}{objectQualifier}ContentItems As c
   INNER JOIN {databaseOwner}{objectQualifier}ContentItems_Tags ct ON ct.ContentItemID = c.ContentItemID
   INNER JOIN {databaseOwner}{objectQualifier}Taxonomy_Terms t ON t.TermID = ct.TermID
  WHERE t.TermID = @TermID
 END ELSE BEGIN
  -- Hierarchical Term
  SELECT c.*
  FROM {databaseOwner}{objectQualifier}ContentItems As c
   INNER JOIN {databaseOwner}{objectQualifier}ContentItems_Tags ct ON ct.ContentItemID = c.ContentItemID
   INNER JOIN {databaseOwner}{objectQualifier}Taxonomy_Terms t ON t.TermID = ct.TermID
  WHERE t.TermLeft >= @TermLeft
   AND t.TermRight <= @TermRight
   AND t.VocabularyID = @VocabularyID
 END
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetContentItemsByVocabularyId]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetContentItemsByVocabularyId] 
	@VocabularyID int
AS
BEGIN
	SELECT c.*
	FROM {databaseOwner}{objectQualifier}ContentItems As c
		INNER JOIN {databaseOwner}{objectQualifier}ContentItems_Tags ct ON ct.ContentItemID = c.ContentItemID
		INNER JOIN {databaseOwner}{objectQualifier}Taxonomy_Terms t ON t.TermID = ct.TermID
	WHERE t.VocabularyID = @VocabularyID
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetContentTypes]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetContentTypes] 
AS
	SELECT *
	FROM {databaseOwner}{objectQualifier}ContentTypes
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetContentWorkflow]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetContentWorkflow]
@WorkflowID int
AS

SELECT 
  [WorkflowID],
  [PortalID],
  [WorkflowName],
  [Description],
  [IsDeleted],
  [StartAfterCreating],
  [StartAfterEditing],
  [DispositionEnabled]
FROM {databaseOwner}{objectQualifier}ContentWorkflows
WHERE WorkflowID = @WorkflowID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetContentWorkflowLogs]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetContentWorkflowLogs]
	@ContentItemID int,
	@WorkflowID int
AS
    SELECT *
	FROM {databaseOwner}[{objectQualifier}ContentWorkflowLogs]
	WHERE ContentItemID = @ContentItemID AND WorkflowID = @WorkflowID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetContentWorkflows]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetContentWorkflows]
	@PortalID int
AS

SELECT
	[WorkflowID],
	[PortalID],
	[WorkflowName],
	[Description],
	[IsDeleted],
	[StartAfterCreating],
	[StartAfterEditing],
	[DispositionEnabled]
FROM {databaseOwner}{objectQualifier}ContentWorkflows
WHERE (PortalID = @PortalID OR PortalID IS null)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetContentWorkflowSource]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetContentWorkflowSource]
	@WorkflowID INT,
    @SourceName NVARCHAR(20)
AS
    SELECT 
		[SourceID],
		[WorkflowID],
		[SourceName],
		[SourceType]
	FROM {databaseOwner}{objectQualifier}ContentWorkflowSources
    WHERE WorkflowID = @WorkflowID AND SourceName = @SourceName
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetContentWorkflowState]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetContentWorkflowState]
	@StateID int
AS
    SELECT
		[StateID],
		[WorkflowID],
		[StateName],
		[Order],
		[IsActive],
		[SendEmail],
		[SendMessage],
		[IsDisposalState],
		[OnCompleteMessageSubject],
		[OnCompleteMessageBody],
		[OnDiscardMessageSubject],
		[OnDiscardMessageBody]
	FROM {databaseOwner}{objectQualifier}ContentWorkflowStates
    WHERE StateID = @StateID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetContentWorkflowStatePermission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetContentWorkflowStatePermission]
	@WorkflowStatePermissionID	int
AS
    SELECT *
    FROM {databaseOwner}{objectQualifier}vw_ContentWorkflowStatePermissions
    WHERE WorkflowStatePermissionID = @WorkflowStatePermissionID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetContentWorkflowStatePermissions]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetContentWorkflowStatePermissions]
AS
    SELECT *
    FROM {databaseOwner}{objectQualifier}vw_ContentWorkflowStatePermissions
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetContentWorkflowStatePermissionsByStateID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetContentWorkflowStatePermissionsByStateID]
	@StateID int
AS
    SELECT *
    FROM {databaseOwner}{objectQualifier}vw_ContentWorkflowStatePermissions
	WHERE StateID = @StateID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetContentWorkflowStates]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetContentWorkflowStates]
	@WorkflowID int
AS
    SELECT 
		[StateID],
		[WorkflowID],
		[StateName],
		[Order],
		[IsActive],
		[SendEmail],
		[SendMessage],
		[IsDisposalState],
		[OnCompleteMessageSubject],
		[OnCompleteMessageBody],
		[OnDiscardMessageSubject],
		[OnDiscardMessageBody]
	FROM {databaseOwner}{objectQualifier}ContentWorkflowStates
    WHERE WorkflowID = @WorkflowID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetContentWorkflowStateUsageCount]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetContentWorkflowStateUsageCount]
	@StateId INT
AS
	SELECT COUNT(ci.ContentItemID)
	FROM {databaseOwner}[{objectQualifier}ContentItems] ci 
	WHERE ci.StateId = @StateId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetContentWorkflowUsage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetContentWorkflowUsage]
	@WorkflowId INT,
	@PageIndex INT,
	@PageSize INT
AS
	DECLARE @StartIndex INT = ((@PageIndex - 1) * @PageSize) + 1
	DECLARE @EndIndex INT = (@PageIndex * @PageSize)
	
	;WITH ContenResourcesSet AS
    (
		SELECT wu.*, ROW_NUMBER() OVER (Order BY wu.ContentType, wu.ContentName) AS [Index]
		FROM {databaseOwner}[{objectQualifier}vw_ContentWorkflowUsage] wu 		
		WHERE wu.WorkflowID = @WorkflowId
    )
   SELECT * FROM ContenResourcesSet WHERE [Index] BETWEEN @StartIndex AND @EndIndex
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetContentWorkflowUsageCount]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetContentWorkflowUsageCount]
	@WorkflowId INT
AS
	SELECT COUNT(*)
	FROM {databaseOwner}[{objectQualifier}vw_ContentWorkflowUsage] wu 	
	WHERE wu.WorkflowID = @WorkflowId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetCustomAliasesForTabs]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetCustomAliasesForTabs] 
AS
	SELECT HttpAlias
	FROM  {databaseOwner}[{objectQualifier}PortalAlias] pa 
	WHERE PortalAliasId IN (SELECT PortalAliasId FROM {databaseOwner}[{objectQualifier}TabUrls])
	ORDER BY HttpAlias
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetDatabaseInstallVersion]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure {databaseOwner}[{objectQualifier}GetDatabaseInstallVersion]
AS
SELECT  TOP 1 Major ,
        Minor ,
        Build
FROM    {databaseOwner}{objectQualifier}Version V
WHERE   VersionId IN ( SELECT   MAX(VersionId) AS VersionID
                       FROM     {databaseOwner}[{objectQualifier}Version]
                       GROUP BY CONVERT(NVARCHAR(8), CreatedDate, 112) )
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetDatabaseServer]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetDatabaseServer]
AS
	SELECT ServerProperty('Edition') AS ProductName,
           ServerProperty('ProductVersion') AS Version
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetDatabaseTime]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetDatabaseTime]
AS
BEGIN
	SELECT GETDATE()
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetDatabaseTimeUtc]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetDatabaseTimeUtc]
AS
BEGIN
	SELECT GETUTCDATE()
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetDatabaseVersion]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure {databaseOwner}[{objectQualifier}GetDatabaseVersion]

as

select Major,
       Minor,
       Build
from   {databaseOwner}{objectQualifier}Version 
where  VersionId = ( select max(VersionId) from {databaseOwner}{objectQualifier}Version )
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetDefaultLanguageByModule]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetDefaultLanguageByModule]
(
	@ModuleList NVARCHAR(4000)
)
AS
BEGIN
	SET NOCOUNT ON

SELECT DISTINCT m.ModuleID, p.DefaultLanguage
FROM            {databaseOwner}[{objectQualifier}Modules]  m
INNER JOIN      {databaseOwner}[{objectQualifier}Portals] p ON p.PortalID = m.PortalID
Inner Join		{databaseOwner}[{objectQualifier}SplitStrings_CTE](@ModuleList,',') ML ON M.ModuleID = ML.item
ORDER BY        m.ModuleID	
		
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetDeletedUsers]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetDeletedUsers]
	@PortalID			int
AS
 IF @PortalID is null
  BEGIN
	SELECT  *
	FROM	{databaseOwner}{objectQualifier}vw_Users
	WHERE  PortalId IS Null
		AND IsDeleted = 1
	ORDER BY UserName
  END ELSE BEGIN
	SELECT  *
	FROM	{databaseOwner}{objectQualifier}vw_Users
	WHERE  PortalId = @PortalID		
		AND IsDeleted = 1
	ORDER BY UserName
  END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetDesktopModulePermission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetDesktopModulePermission]
	@DesktopModulePermissionID	int
AS
    SELECT *
    FROM {databaseOwner}{objectQualifier}vw_DesktopModulePermissions
    WHERE DesktopModulePermissionID = @DesktopModulePermissionID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetDesktopModulePermissions]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetDesktopModulePermissions]
AS
    SELECT *
    FROM {databaseOwner}{objectQualifier}vw_DesktopModulePermissions
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetDesktopModulePermissionsByPortalDesktopModuleID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetDesktopModulePermissionsByPortalDesktopModuleID]
	@PortalDesktopModuleID int
AS
    SELECT *
    FROM {databaseOwner}{objectQualifier}vw_DesktopModulePermissions
	WHERE   PortalDesktopModuleID = @PortalDesktopModuleID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetDesktopModules]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetDesktopModules]
AS
	SELECT *
	FROM  {databaseOwner}{objectQualifier}vw_DesktopModules
	ORDER BY FriendlyName
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetDesktopModulesByPortal]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetDesktopModulesByPortal]
	@PortalId int 
AS 
	SELECT DISTINCT DM.* 
	FROM {databaseOwner}{objectQualifier}vw_DesktopModules DM 
	WHERE ( IsPremium = 0 ) 
	OR  ( DesktopModuleID IN ( 
		SELECT DesktopModuleID 
		FROM {databaseOwner}{objectQualifier}PortalDesktopModules PDM 
		WHERE PDM.PortalId = @PortalId ) ) 
	ORDER BY FriendlyName
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetDuplicateEmailCount]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetDuplicateEmailCount]
    @PortalId INT
AS 
	SELECT ISNULL((SELECT COUNT(*) TotalCount FROM {databaseOwner}[{objectQualifier}Users] U Inner Join {databaseOwner}[{objectQualifier}UserPortals] UP on UP.[UserId] = U.[UserId] WHERE UP.PortalId = @PortalId  GROUP BY U.[Email] HAVING COUNT(*) > 1), 0)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetEnabledAuthenticationServices]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetEnabledAuthenticationServices]
AS
	SELECT *
		FROM   {databaseOwner}{objectQualifier}Authentication
		WHERE  IsEnabled = 1
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetEventLog]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetEventLog]
    @PortalID   Int,            -- Might be Null for all sites
    @LogTypeKey nVarChar(35),   -- Key of log type or Null for all
    @PageSize   Int,            -- Number of items per page
    @PageIndex  Int             -- Page number starting with 0
AS
BEGIN
     WITH [eLog] AS (
         SELECT ROW_NUMBER() OVER (ORDER BY E.LogCreateDate Desc) AS RowNumber, e.*
          FROM {databaseOwner}{objectQualifier}vw_EventLog e
          WHERE (e.LogPortalID = @PortalID     OR IsNull(@PortalID,   -1) = -1)
            AND (e.LogTypeKey LIKE @LogTypeKey OR IsNull(@LogTypeKey, '') = '')
     )
     SELECT * FROM [eLog]
      WHERE RowNumber >= {databaseOwner}{objectQualifier}PageLowerBound(@PageIndex, @PageSize)
        AND RowNumber <= {databaseOwner}{objectQualifier}PageUpperBound(@PageIndex, @PageSize)
      ORDER BY RowNumber

    SELECT COUNT(1) AS TotalRecords
     FROM {databaseOwner}{objectQualifier}vw_EventLog e
     WHERE (e.LogPortalID = @PortalID     OR IsNull(@PortalID,   -1) = -1)
       AND (e.LogTypeKey Like @LogTypeKey OR IsNull(@LogTypeKey, '') = '')

END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetEventLogByLogGUID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetEventLogByLogGUID]
	@LogGUID varchar(36)
AS
SELECT *
FROM {databaseOwner}{objectQualifier}vw_EventLog
WHERE (LogGUID = @LogGUID)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetEventLogConfig]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetEventLogConfig]
	@ID int
AS
SELECT c.*, t.LogTypeFriendlyName
FROM {databaseOwner}{objectQualifier}EventLogConfig AS c
	INNER JOIN {databaseOwner}{objectQualifier}EventLogTypes AS t ON t.LogTypeKey = c.LogTypeKey
WHERE (ID = @ID or @ID IS NULL)
ORDER BY t.LogTypeFriendlyName ASC
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetEventLogPendingNotif]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetEventLogPendingNotif]
	@LogConfigID int
AS
SELECT *
FROM {databaseOwner}{objectQualifier}vw_EventLog
WHERE LogNotificationPending = 1
AND LogConfigID = @LogConfigID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetEventLogPendingNotifConfig]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetEventLogPendingNotifConfig]
AS

SELECT 	COUNT(*) as PendingNotifs,
	elc.ID,
	elc.LogTypeKey, 
	elc.LogTypePortalID, 
	elc.LoggingIsActive,
	elc.KeepMostRecent,
	elc.EmailNotificationIsActive,
	elc.NotificationThreshold,
	elc.NotificationThresholdTime,
	elc.NotificationThresholdTimeType,
	elc.MailToAddress, 
	elc.MailFromAddress
FROM {databaseOwner}{objectQualifier}EventLogConfig elc
INNER JOIN {databaseOwner}{objectQualifier}EventLog
ON {databaseOwner}{objectQualifier}EventLog.LogConfigID = elc.ID
WHERE {databaseOwner}{objectQualifier}EventLog.LogNotificationPending = 1
GROUP BY elc.ID,
	elc.LogTypeKey, 
	elc.LogTypePortalID, 
	elc.LoggingIsActive,
	elc.KeepMostRecent,
	elc.EmailNotificationIsActive,
	elc.NotificationThreshold,
	elc.NotificationThresholdTime,
	elc.NotificationThresholdTimeType,
	elc.MailToAddress, 
	elc.MailFromAddress
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetEventLogType]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetEventLogType]
AS
SELECT *
FROM {databaseOwner}{objectQualifier}EventLogTypes
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetEventMessages]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetEventMessages]
	
	@EventName nvarchar(100)

AS
	SELECT * 
	FROM {databaseOwner}{objectQualifier}EventQueue
	WHERE EventName = @EventName
		AND IsComplete = 0
	ORDER BY SentDate
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetEventMessagesBySubscriber]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetEventMessagesBySubscriber]
	
	@EventName nvarchar(100),
	@Subscriber nvarchar(100)

AS
	SELECT * 
	FROM {databaseOwner}{objectQualifier}EventQueue
	WHERE EventName = @EventName
		AND Subscriber = @Subscriber
		AND IsComplete = 0
	ORDER BY SentDate
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetExpiredPortals]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetExpiredPortals]

AS
SELECT * FROM {databaseOwner}{objectQualifier}vw_Portals
WHERE ExpiryDate < getDate()
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetExtensionUrlProviders]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetExtensionUrlProviders] 
	@PortalID	int 
AS
	SELECT 
		p.*, 
		pc.PortalID
	FROM  {databaseOwner}{objectQualifier}ExtensionUrlProviderConfiguration pc 
		RIGHT OUTER JOIN {databaseOwner}{objectQualifier}ExtensionUrlProviders p 
			ON pc.ExtensionUrlProviderID = p.ExtensionUrlProviderID
	WHERE pc.PortalID = @PortalID OR pc.PortalID IS Null

	SELECT ExtensionUrlProviderID, 
			PortalID, 
			SettingName, 
			SettingValue
	FROM {databaseOwner}{objectQualifier}ExtensionUrlProviderSetting
	WHERE PortalID = @PortalID

	SELECT DISTINCT 
			P.ExtensionUrlProviderID,
			TM.TabID
		FROM {databaseOwner}{objectQualifier}DesktopModules DM
			INNER JOIN {databaseOwner}{objectQualifier}ModuleDefinitions MD ON DM.DesktopModuleID = MD.DesktopModuleID 
			INNER JOIN {databaseOwner}{objectQualifier}Modules M ON MD.ModuleDefID = M.ModuleDefID 
			INNER JOIN {databaseOwner}{objectQualifier}TabModules TM ON M.ModuleID = TM.ModuleID 
			INNER JOIN {databaseOwner}{objectQualifier}vw_ExtensionUrlProviders P ON DM.DesktopModuleID = P.DesktopModuleId
		WHERE     (P.PortalID = @PortalID) OR (P.PortalID IS NULL)
		  
		UNION
			SELECT  
				P.ExtensionUrlProviderID,
				PT.TabId
			FROM    {databaseOwner}{objectQualifier}ExtensionUrlProviderTab PT
				INNER JOIN {databaseOwner}{objectQualifier}ExtensionUrlProviders P ON P.ExtensionUrlProviderID = PT.ExtensionUrlProviderID
			WHERE   (PT.IsActive = 1)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetFile]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFile]
    @FileName nvarchar(246),
    @FolderID int,
    @RetrieveUnpublishedFiles bit = 0
AS
BEGIN
    IF @RetrieveUnpublishedFiles = 0 BEGIN
        SELECT FileId,
               PortalId,
               [FileName],
               Extension,
               Size,
               Width,
               Height,
               ContentType,
               FolderID,
               Folder,
               StorageLocation,
               IsCached,
               UniqueId,
               VersionGuid,       
               SHA1Hash,
               FolderMappingID,
               LastModificationTime,
               Title,
               Description,
               EnablePublishPeriod,
               StartDate,
               EndDate,
               CreatedByUserID,
               CreatedOnDate,
               LastModifiedByUserID,
               LastModifiedOnDate,
               ContentItemID,
               PublishedVersion,
               HasBeenPublished
        FROM {databaseOwner}[{objectQualifier}vw_PublishedFiles]             
        WHERE [FileName] = @FileName AND FolderID = @FolderID
    END
    ELSE BEGIN
        SELECT FileId,
               PortalId,
               [FileName],
               Extension,
               Size,
               Width,
               Height,
               ContentType,
               FolderID,
               Folder,
               StorageLocation,
               IsCached,
               UniqueId,
               VersionGuid,       
               SHA1Hash,
               FolderMappingID,
               LastModificationTime,
               Title,
               Description,
               EnablePublishPeriod,
               StartDate,
               EndDate,
               CreatedByUserID,
               CreatedOnDate,
               LastModifiedByUserID,
               LastModifiedOnDate,
               ContentItemID,
               PublishedVersion,
               HasBeenPublished
        FROM {databaseOwner}[{objectQualifier}vw_Files]
        WHERE [FileName] = @FileName AND FolderID = @FolderID
    END
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetFileById]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFileById]
    @FileId int    ,
    @RetrieveUnpublishedFiles bit = 0
AS
BEGIN
    IF @RetrieveUnpublishedFiles = 0 BEGIN
        SELECT FileId,
               PortalId,
               [FileName],
               Extension,
               Size,
               Width,
               Height,
               ContentType,
               FolderID,
               Folder,
               StorageLocation,
               IsCached,
               UniqueId,
               VersionGuid,
               SHA1Hash,
               FolderMappingID,
               LastModificationTime,
               Title,
               Description,
               EnablePublishPeriod,
               StartDate,
               EndDate,
               CreatedByUserID,
               CreatedOnDate,
               LastModifiedByUserID,
               LastModifiedOnDate,
               PublishedVersion,
               ContentItemID,
               HasBeenPublished
        FROM {databaseOwner}[{objectQualifier}vw_PublishedFiles]
        WHERE FileId = @FileId
    END
    ELSE BEGIN
        SELECT FileId,
               PortalId,
               [FileName],
               Extension,
               Size,
               Width,
               Height,
               ContentType,
               FolderID,
               Folder,
               StorageLocation,
               IsCached,
               [UniqueId],
               [VersionGuid],
               SHA1Hash,
               FolderMappingID,
               LastModificationTime,
               Title,
               Description,
               EnablePublishPeriod,
               StartDate,
               EndDate,
               CreatedByUserID,
               CreatedOnDate,
               LastModifiedByUserID,
               LastModifiedOnDate,
               PublishedVersion,
               ContentItemID,
               HasBeenPublished
        FROM {databaseOwner}[{objectQualifier}vw_Files] 
        WHERE FileId = @FileId
    END    
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetFileByUniqueID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFileByUniqueID]
    @UniqueID   uniqueidentifier
AS
	SELECT	* 
	FROM	{databaseOwner}{objectQualifier}Files
	WHERE	UniqueID = @UniqueID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetFileContent]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFileContent]
	@FileId int
AS
BEGIN
	SELECT Content
	FROM {databaseOwner}[{objectQualifier}Files]
	WHERE FileId = @FileId
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetFiles]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFiles]
    @FolderId INT,
    @RetrieveUnpublishedFiles BIT = 0,
    @Recursive BIT = 0
AS
    DECLARE @FolderPath NVARCHAR(300)
    DECLARE @PortalId INT
    SELECT @FolderPath = FolderPath, @PortalId = ISNULL(PortalId, -1) FROM {databaseOwner}[{objectQualifier}Folders] WHERE FolderId = @FolderId
    IF @RetrieveUnpublishedFiles = 0 
    BEGIN
        SELECT
            F.FileId,
            F.PortalId,
            F.[FileName],
            F.Extension,
            F.[Size],
            F.Width,
            F.Height,
            F.ContentType,
            F.FolderID,
            F.Folder,
            F.StorageLocation,
            F.IsCached,
            F.FolderMappingID,
            F.UniqueId,
            F.VersionGuid,
            F.SHA1Hash,
            F.LastModificationTime,
            F.Title,
            F.Description,
            F.EnablePublishPeriod,
            F.StartDate,
            F.EndDate,
            F.CreatedByUserID,
            F.CreatedOnDate,
            F.LastModifiedByUserID,
            F.LastModifiedOnDate,
            F.PublishedVersion,
            F.ContentItemID,
            F.HasBeenPublished
        FROM {databaseOwner}[{objectQualifier}vw_PublishedFiles] F            
        WHERE ((@Recursive = 1 AND ISNULL(F.PortalId, -1) = @PortalId AND F.Folder LIKE @FolderPath + '%') OR F.FolderID = @FolderID)
        ORDER BY [Folder], [FileName]
    END
    ELSE BEGIN
        SELECT
            F.FileId,
            F.PortalId,
            F.[FileName],
            F.Extension,
            F.[Size],
            F.Width,
            F.Height,
            F.ContentType,
            F.FolderID,
            F.Folder,
            F.StorageLocation,
            F.IsCached,
            F.FolderMappingID,
            F.UniqueId,
            F.VersionGuid,
            F.SHA1Hash,
            F.LastModificationTime,
            F.Title,
            F.Description,
            F.EnablePublishPeriod,
            F.StartDate,
            F.EndDate,
            F.CreatedByUserID,
            F.CreatedOnDate,
            F.LastModifiedByUserID,
            F.LastModifiedOnDate,
            F.PublishedVersion,
            F.ContentItemID,
            F.HasBeenPublished
        FROM {databaseOwner}[{objectQualifier}vw_Files] F            
        WHERE ((@Recursive = 1 AND ISNULL(F.PortalId, -1) = @PortalId AND F.Folder LIKE @FolderPath + '%') OR F.FolderID = @FolderID)
        ORDER BY [Folder], [FileName]
    END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetFileVersion]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFileVersion] 
	@FileId int,
	@Version int
AS
BEGIN
	SELECT 
	   [FileId]
      ,[Version]
      ,[FileName]
      ,[Extension]
      ,[Size]
      ,[Width]
      ,[Height]
      ,[ContentType]
      ,[CreatedByUserID]
      ,[CreatedOnDate]
      ,[LastModifiedByUserID]
      ,[LastModifiedOnDate]
      ,[SHA1Hash]
	FROM {databaseOwner}{objectQualifier}FileVersions fv
	WHERE FileId = @FileId
	  AND Version = @Version
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetFileVersionContent]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFileVersionContent]

	@FileId		int,
	@Version	int

AS
	SELECT Content
	FROM {databaseOwner}[{objectQualifier}FileVersions]
	WHERE FileId = @FileId
		AND Version = @Version
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetFileVersions]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFileVersions] 
@FileId int
AS
BEGIN
	SELECT 
	   [FileId]
      ,[Version]
      ,[FileName]
      ,[Extension]
      ,[Size]
      ,[Width]
      ,[Height]
      ,[ContentType]
      ,[CreatedByUserID]
      ,[CreatedOnDate]
      ,[LastModifiedByUserID]
      ,[LastModifiedOnDate]
      ,[SHA1Hash]
	FROM {databaseOwner}{objectQualifier}FileVersions fv
	WHERE fv.FileId = @FileId
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetFileVersionsInFolder]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFileVersionsInFolder]
@FolderId int
AS
BEGIN
	SELECT 
	   fv.[FileId]
      ,fv.[Version]
      ,fv.[FileName]
      ,fv.[Extension]
      ,fv.[Size]
      ,fv.[Width]
      ,fv.[Height]
      ,fv.[ContentType]
      ,fv.[CreatedByUserID]
      ,fv.[CreatedOnDate]
      ,fv.[LastModifiedByUserID]
      ,fv.[LastModifiedOnDate]
      ,fv.[SHA1Hash]
	FROM {databaseOwner}{objectQualifier}FileVersions fv, {databaseOwner}{objectQualifier}Files f
    WHERE fv.FileId = f.FileId and f.FolderId = @FolderId
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetFolderByFolderID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFolderByFolderID]
	@FolderID int
AS
BEGIN
	SELECT *
	FROM {databaseOwner}[{objectQualifier}Folders]
	WHERE FolderID = @FolderID
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetFolderByFolderPath]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFolderByFolderPath]
 @PortalID int,
 @FolderPath nvarchar(300)
AS
BEGIN
 if @PortalID is not null
 begin
  SELECT *
  FROM {databaseOwner}{objectQualifier}Folders
  WHERE PortalID = @PortalID AND FolderPath = @FolderPath
 end else begin
  SELECT *
  FROM {databaseOwner}{objectQualifier}Folders
  WHERE PortalID is null AND  FolderPath = @FolderPath
 end
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetFolderByUniqueID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFolderByUniqueID]
    @UniqueID   uniqueidentifier
AS
	SELECT	* 
	FROM	{databaseOwner}{objectQualifier}Folders
	WHERE	UniqueID = @UniqueID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetFolderMapping]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFolderMapping]
	@FolderMappingID int
AS
BEGIN
	SELECT *
	FROM {databaseOwner}[{objectQualifier}FolderMappings]
	WHERE FolderMappingID = @FolderMappingID
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetFolderMappingByMappingName]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFolderMappingByMappingName]
	@PortalID int,
	@MappingName nvarchar(50)
AS
BEGIN
	SELECT *
	FROM {databaseOwner}[{objectQualifier}FolderMappings]
	WHERE ISNULL(PortalID, -1) = ISNULL(@PortalID, -1) AND MappingName = @MappingName
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetFolderMappings]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFolderMappings]
	@PortalID int
AS
BEGIN
	SELECT *
	FROM {databaseOwner}[{objectQualifier}FolderMappings]
	WHERE ISNULL(PortalID, -1) = ISNULL(@PortalID, -1)
	ORDER BY Priority
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetFolderMappingsSetting]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFolderMappingsSetting]
	@FolderMappingID int,
	@SettingName nvarchar(50)
AS
BEGIN
	SELECT *
	FROM {databaseOwner}[{objectQualifier}FolderMappingsSettings]
	WHERE FolderMappingID = @FolderMappingID AND SettingName = @SettingName
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetFolderMappingsSettings]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFolderMappingsSettings]
	@FolderMappingID int
AS
BEGIN
	SELECT SettingName, SettingValue
	FROM {databaseOwner}[{objectQualifier}FolderMappingsSettings]
	WHERE FolderMappingID = @FolderMappingID
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetFolderPermission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFolderPermission]
	
	@FolderPermissionID int

AS
SELECT *
FROM {databaseOwner}{objectQualifier}vw_FolderPermissions
WHERE FolderPermissionID = @FolderPermissionID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetFolderPermissionsByFolderPath]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFolderPermissionsByFolderPath]
	
	@PortalID int,
	@FolderPath nvarchar(300), 
	@PermissionID int

AS
SELECT *
FROM {databaseOwner}{objectQualifier}vw_FolderPermissions

WHERE	((FolderPath = @FolderPath 
				AND ((PortalID = @PortalID) OR (PortalID IS NULL AND @PortalID IS NULL)))
			OR (FolderPath IS NULL AND PermissionCode = 'SYSTEM_FOLDER'))
	AND	(PermissionID = @PermissionID OR @PermissionID = -1)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetFolderPermissionsByPortal]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFolderPermissionsByPortal]
    @PortalId Int   -- Null|-1 for Host menu tabs
AS
    SELECT *
    FROM {databaseOwner}[{objectQualifier}vw_FolderPermissions]
    WHERE IsNull(PortalID, -1) = IsNull(@PortalId, -1)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetFolderPermissionsByPortalAndPath]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFolderPermissionsByPortalAndPath]
    @PortalId int,
    @FolderPath nvarchar(300)
AS
BEGIN
    SET @PortalId = IsNull(@PortalId, -1)

    SELECT *
    FROM   {databaseOwner}[{objectQualifier}vw_FolderPermissions]
    WHERE  PortalID = @PortalId AND (FolderPath = @FolderPath OR @FolderPath IS NULL)
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetFolders]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFolders]
	@PortalID int -- Null|-1: Host Portal
AS
BEGIN
	SELECT *
	FROM {databaseOwner}{objectQualifier}Folders
	WHERE IsNull(PortalID, -1) = IsNull(@PortalID, -1) 
	ORDER BY PortalID, FolderPath -- include portalId to use proper index
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetFoldersByPermissions]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFoldersByPermissions]
	@PortalID int,
	@Permissions nvarchar(300),
	@UserID int,
	@FolderID int,
	@FolderPath nvarchar(300)

AS
	DECLARE @IsSuperUser bit = 0
	DECLARE @IsAdmin bit = 0
	DECLARE @ReadID int = 0
	DECLARE @WriteID int = 0
	DECLARE @BrowseID int = 0
	DECLARE @AddID int = 0
	
	--Define NULL 
	SELECT	 @PortalID = IsNull(@PortalID, -1)
			,@Permissions = IsNull(@Permissions, N'')
			,@UserID = IsNull(@UserID, -1)
			,@FolderID = IsNull(@FolderID, -1)
			,@FolderPath = IsNull(@FolderPath, N'')

	--Determine Admin or SuperUser
	IF @UserID > 0
	BEGIN
		SELECT @IsSuperUser = IsSuperUser FROM {databaseOwner}[{objectQualifier}Users] WHERE UserId = @UserId
		SELECT @IsAdmin = CASE WHEN @IsSuperUser = 1 THEN 1 -- superusers are the portal admin
							WHEN @PortalID = -1 THEN 0 -- only superusers may access host files
							WHEN {databaseOwner}[{objectQualifier}UserIsInRole](@UserId, {databaseOwner}[{objectQualifier}AdministratorRoleId](@PortalId)) = 1 THEN 1
						  END
	END;

	IF (@PortalID = -1 AND @IsSuperUser = 1) OR (@IsAdmin = 1)
		BEGIN
			--Retrieve All Folders
			SELECT [FolderID]
			  ,[PortalID]
			  ,[FolderPath]
			  ,[StorageLocation]
			  ,[IsProtected]
			  ,[IsCached]
			  ,[LastUpdated]
			  ,[CreatedByUserID]
			  ,[CreatedOnDate]
			  ,[LastModifiedByUserID]
			  ,[LastModifiedOnDate]
			  ,[UniqueId]
			  ,[VersionGuid]
			  ,[FolderMappingID]
			  ,[ParentID]
			  ,[IsVersioned]
			  ,[WorkflowID]
			  ,[MappedPath]
			FROM {databaseOwner}[{objectQualifier}Folders]
			WHERE IsNull(PortalID, -1) = @PortalId
			   AND (FolderID = @FolderID OR (@FolderID = -1))
			   AND (FolderPath = @FolderPath OR (@FolderPath = N''))
			ORDER BY PortalID, FolderPath
			OPTION (OPTIMIZE FOR (@PortalID UNKNOWN));
		END
	ELSE
		BEGIN			
			--Retrieve Permission Ids
			IF @Permissions LIKE '%WRITE%' SELECT TOP 1 @WriteID = PermissionID FROM {databaseOwner}[{objectQualifier}Permission] WHERE PermissionCode = 'SYSTEM_FOLDER' AND ModuleDefId = -1 AND PermissionKey = 'WRITE';
			IF @Permissions LIKE '%READ%' SELECT TOP 1 @ReadID = PermissionID FROM {databaseOwner}[{objectQualifier}Permission] WHERE PermissionCode = 'SYSTEM_FOLDER' AND ModuleDefId = -1 AND PermissionKey = 'READ';
			IF @Permissions LIKE '%BROWSE%' SELECT TOP 1 @BrowseID = PermissionID FROM {databaseOwner}[{objectQualifier}Permission] WHERE PermissionCode = 'SYSTEM_FOLDER' AND ModuleDefId = -1 AND PermissionKey = 'BROWSE';
			IF @Permissions LIKE '%ADD%' SELECT TOP 1 @AddID = PermissionID FROM {databaseOwner}[{objectQualifier}Permission] WHERE PermissionCode = 'SYSTEM_FOLDER' AND ModuleDefId = -1 AND PermissionKey = 'ADD';

			--Retreive Folders by User Roles
			WITH UserPortalRoles AS (
				SELECT RoleID
				FROM {databaseOwner}[{objectQualifier}vw_UserRoles]
				WHERE PortalID = @PortalID
					AND UserID = @UserID
					AND IsNull(EffectiveDate, GetDate()) <= GetDate()
					AND IsNull(ExpiryDate, GetDate()) >= GetDate()
				UNION (SELECT -1)
				UNION (SELECT -3 WHERE @UserID <= 0))
			SELECT [FolderID]
				  ,[PortalID]
				  ,[FolderPath]
				  ,[StorageLocation]
				  ,[IsProtected]
				  ,[IsCached]
				  ,[LastUpdated]
				  ,[CreatedByUserID]
				  ,[CreatedOnDate]
				  ,[LastModifiedByUserID]
				  ,[LastModifiedOnDate]
				  ,[UniqueId]
				  ,[VersionGuid]
				  ,[FolderMappingID]
				  ,[ParentID]
				  ,[IsVersioned]
				  ,[WorkflowID]
				  ,[MappedPath]
			FROM {databaseOwner}[{objectQualifier}Folders]
			WHERE (IsNull(PortalID, -1) = @PortalId)
				AND (FolderPath = @FolderPath OR @FolderPath = N'')
				AND (FolderID   = @FolderID   OR @FolderID = -1)
				AND FolderID IN -- granted folders
					(SELECT P.FolderID FROM {databaseOwner}[{objectQualifier}FolderPermission] P
					 LEFT JOIN UserPortalRoles R ON P.RoleID = R.RoleID
					 WHERE (P.UserID = @UserID OR (R.RoleID IS NOT NULL))
						AND PermissionID IN (@AddID, @ReadID, @BrowseID, @WriteID)
						AND AllowAccess = 1
					 GROUP BY P.FolderID)
				AND NOT FolderId IN -- denied folders
					(SELECT P.FolderID FROM {databaseOwner}[{objectQualifier}FolderPermission] P
                     LEFT JOIN UserPortalRoles R ON P.RoleID = R.RoleID
					 WHERE (P.UserID = @UserID OR (R.RoleID IS NOT NULL))
						AND PermissionID IN (@AddID, @ReadID, @BrowseID, @WriteID)
						AND AllowAccess = 0
					 GROUP BY P.FolderID)
         ORDER BY PortalID, FolderPath
         OPTION (OPTIMIZE FOR (@FolderPath Unknown, @FolderID Unknown, @UserID Unknown));
		END

GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetHostSetting]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetHostSetting]
    @SettingName nvarchar(50)
AS
BEGIN
    SELECT CASE WHEN Lower(SettingValue) Like N'fileid=%'
		        THEN {databaseOwner}[{objectQualifier}FilePath](SettingValue)
		        ELSE SettingValue 
		   END   AS SettingValue
     FROM  {databaseOwner}[{objectQualifier}HostSettings]
     WHERE SettingName = @SettingName;
END; -- Procedure
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetHostSettings]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetHostSettings]
AS
BEGIN
	SELECT SettingName,
		   CASE WHEN Lower(SettingValue) Like N'fileid=%'
		        THEN {databaseOwner}[{objectQualifier}FilePath](SettingValue)
		        ELSE SettingValue 
		   END   AS SettingValue,
		   SettingIsSecure,
		   CreatedByUserID,
		   CreatedOnDate,
	       LastModifiedByUserID,
		   LastModifiedOnDate
	 FROM  {databaseOwner}[{objectQualifier}HostSettings];
END; -- Procedure
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetInstalledModules]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetInstalledModules]
AS
BEGIN
	SELECT		
		DM.DesktopModuleID, 
		DM.ModuleName,
		DM.FriendlyName,
		DM.Version,
		--Left Joined nulls will not add to the count
		COUNT(MDEF.DesktopModuleID) as Instances
	FROM {databaseOwner}[{objectQualifier}DesktopModules] AS DM
		--Paren's Will enforce inner join first before left outer joining
		LEFT JOIN ({databaseOwner}[{objectQualifier}ModuleDefinitions] MDEF 
				INNER JOIN {databaseOwner}[{objectQualifier}Modules] MODS ON MDEF.ModuleDefID = MODS.ModuleDefID)
	ON dm.DesktopModuleID = MDEF.DesktopModuleID 
	WHERE (IsAdmin = 0)
	GROUP BY DM.DesktopModuleID, DM.ModuleName, DM.FriendlyName, DM.Version
	ORDER BY DM.[FriendlyName] ASC
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetIPFilter]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetIPFilter]
@InputFilter int
AS 
	SELECT * FROM {databaseOwner}{objectQualifier}IPFilter where IPFilterID=@InputFilter
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetIPFilters]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetIPFilters]

AS 
	SELECT * FROM {databaseOwner}{objectQualifier}IPFilter
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetJavaScriptLibraries]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetJavaScriptLibraries]
AS
	SELECT * FROM {databaseOwner}{objectQualifier}JavaScriptLibraries
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetLanguagePackByPackage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetLanguagePackByPackage]

	@PackageID int

AS
	SELECT * FROM {databaseOwner}{objectQualifier}LanguagePacks 
        WHERE  PackageID = @PackageID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetLanguages]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetLanguages]
AS
	SELECT *
		FROM   {databaseOwner}{objectQualifier}Languages
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetLanguagesByPortal]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetLanguagesByPortal]
    @PortalId			int
AS
    SELECT 
        L.*,
        PL.PortalId,
        PL.IsPublished
    FROM   {databaseOwner}{objectQualifier}Languages L
        INNER JOIN {databaseOwner}{objectQualifier}PortalLanguages PL On L.LanguageID = PL.LanguageID
    WHERE PL.PortalID = @PortalID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetLastAppliedIteration]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetLastAppliedIteration] 

	@Major  int,
	@Minor  int,
	@Build  int	

AS

	SELECT ISNULL(MAX(Increment),0) from {databaseOwner}{objectQualifier}Version WHERE Major=@Major AND Minor=@Minor AND Build=@Build
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetLegacyFolderCount]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetLegacyFolderCount]
AS
	SELECT COUNT(*)
	FROM {databaseOwner}{objectQualifier}Folders
		WHERE ParentID IS NULL AND FolderPath <> ''
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetList]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure {databaseOwner}[{objectQualifier}GetList]
	@ListName nvarchar(50),
	@ParentKey nvarchar(150),
	@PortalID int
AS
SELECT DISTINCT
		ListName,
		[Level],
		DefinitionID,
		PortalID,
		SystemList,
		EntryCount,
		ParentID,
		ParentKey,
		Parent,
		ParentList,
		MaxSortOrder
	FROM {databaseOwner}{objectQualifier}vw_Lists
	WHERE ListName = @ListName
		AND ParentKey = @ParentKey
		AND PortalID = @PortalID
	ORDER BY [Level], ListName
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetListEntries]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetListEntries]
	@ListName nvarchar(50),
	@ParentKey nvarchar(150),
	@PortalID int
AS
SELECT *
	FROM {databaseOwner}{objectQualifier}vw_Lists
	WHERE (ListName = @ListName OR @ListName='')
		AND (ParentKey = @ParentKey OR @ParentKey = '')
		AND (PortalID = @PortalID OR PortalID = -1 OR @PortalID IS NULL or SystemList=1)
	ORDER BY [Level], ListName, SortOrder, Text
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetListEntry]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetListEntry]

	@ListName nvarchar(50),
	@Value nvarchar(200),
	@EntryID int

AS
	SELECT *
	FROM {databaseOwner}{objectQualifier}vw_Lists
	WHERE ([ListName] = @ListName OR @ListName='')
		AND ([EntryID]=@EntryID OR @EntryID = -1)
		AND ([Value]=@Value OR @Value = '')
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetLists]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure {databaseOwner}[{objectQualifier}GetLists]
	
	@PortalID int

AS
	SELECT DISTINCT 
		ListName,
		[Level],
		DefinitionID,
		PortalID,
		SystemList,
		EntryCount,
		ParentID,
		ParentKey,
		Parent,
		ParentList,
		MaxSortOrder
	FROM {databaseOwner}{objectQualifier}vw_Lists
	WHERE PortalID = @PortalID
	ORDER BY [Level], ListName
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetMetaData]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetMetaData] 
	@ContentItemId   int
AS
	SELECT md.MetaDataName, cmd.MetaDataValue
	FROM {databaseOwner}[{objectQualifier}ContentItems_MetaData] cmd
	JOIN {databaseOwner}[{objectQualifier}MetaData] md on (cmd.MetaDataID = md.MetaDataID)
	WHERE ContentItemId = @ContentItemId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetModule]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetModule]

	@ModuleId int,
	@TabId    int
	
AS
SELECT	* 
FROM {databaseOwner}{objectQualifier}vw_Modules
WHERE   ModuleId = @ModuleId
AND     (TabId = @TabId or @TabId is null)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetModuleByDefinition]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetModuleByDefinition]
      @PortalId int,
      @DefinitionName nvarchar(128)
AS
IF(@PortalId IS NULL)
	SELECT M.*
	FROM {databaseOwner}{objectQualifier}vw_Modules M
	WHERE M.PortalId IS NULL
	  AND M.DefinitionName = @DefinitionName
	  AND M.IsDeleted = 0
	  AND M.IsTabDeleted = 0
ELSE
	SELECT M.*
	FROM {databaseOwner}{objectQualifier}vw_Modules M
	WHERE M.PortalId = @PortalId
	  AND M.DefinitionName = @DefinitionName
	  AND M.IsDeleted = 0
	  AND M.IsTabDeleted = 0
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetModuleByUniqueID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetModuleByUniqueID]
    @UniqueID   uniqueidentifier
AS
	SELECT	* 
	FROM	{databaseOwner}{objectQualifier}vw_Modules
	WHERE	UniqueID = @UniqueID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetModuleControls]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetModuleControls]
AS
    SELECT *
    FROM   {databaseOwner}{objectQualifier}ModuleControls
	ORDER BY  ControlKey, ViewOrder
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetModuleDefinitions]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetModuleDefinitions]
AS
    SELECT *
    FROM   {databaseOwner}{objectQualifier}ModuleDefinitions
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetModulePackagesInUse]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetModulePackagesInUse]
	@PortalID INT,
	@ForHost BIT
AS
BEGIN
	-- Create a temp table to store the select results
	CREATE TABLE #TabsLatestPublished
	(
		IndexId int IDENTITY (0, 1) NOT NULL,
		TabId int,
		ModuleId int
	);

	WITH Temp AS ( 
        SELECT ROW_NUMBER() OVER (PARTITION BY TabId ORDER BY Version DESC) AS RowNumber, TabVersionId, TabId
        FROM {databaseOwner}{objectQualifier}TabVersions
		WHERE IsPublished = 1		
    )
	-- Insert into our temp table
	INSERT INTO #TabsLatestPublished (TabId, ModuleId)
	SELECT TLP.TabId, TVD.ModuleId 	
	FROM Temp TLP
	INNER JOIN {databaseOwner}{objectQualifier}TabVersionDetails TVD ON TLP.TabVersionId = TVD.TabVersionId 
	WHERE RowNumber = 1 AND TVD.Action <> 2

	IF (@ForHost = 1)
		-- Get in use for all host pages and portal pages
		SELECT AllPackages.*
		FROM {databaseOwner}{objectQualifier}Packages AS AllPackages
			INNER JOIN (
				SELECT DISTINCT P.PackageID
				FROM         {databaseOwner}{objectQualifier}Packages       P
				  INNER JOIN {databaseOwner}{objectQualifier}vw_Modules     M   ON P.PackageID=M.PackageID
				  INNER JOIN {databaseOwner}{objectQualifier}tabs           T   ON T.TabID=M.TabID
				  LEFT  JOIN #TabsLatestPublished                           TLP ON TLP.TabId = M.TabId AND TLP.ModuleId = M.ModuleID
				WHERE T.IsDeleted=0 AND (M.IsDeleted=0 OR (TLP.TabId IS NOT NULL AND TLP.ModuleId IS NOT NULL))
			) AS InUsePackages
				ON AllPackages.PackageID = InUsePackages.PackageID
		ORDER BY AllPackages.FriendlyName
	ELSE
		-- Get in use for portal or host only
		SELECT AllPackages.* FROM {databaseOwner}{objectQualifier}Packages AS AllPackages
			INNER JOIN (
				SELECT DISTINCT P.PackageID
				FROM         {databaseOwner}{objectQualifier}Packages       P
				  INNER JOIN {databaseOwner}{objectQualifier}vw_Modules     M   ON P.PackageID=M.PackageID
				  INNER JOIN {databaseOwner}{objectQualifier}tabs           T   ON T.TabID=M.TabID
				  LEFT  JOIN #TabsLatestPublished                           TLP ON TLP.TabId = M.TabId AND TLP.ModuleId = M.ModuleID
				WHERE ((@PortalID IS NULL AND T.PortalID IS NULL) OR T.PortalID = @PortalID)
				  AND T.IsDeleted=0
				  AND (M.IsDeleted=0 OR (TLP.TabId IS NOT NULL AND TLP.ModuleId IS NOT NULL))) AS InUsePackages	
			ON AllPackages.PackageID = InUsePackages.PackageID
		ORDER BY AllPackages.FriendlyName
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetModulePermission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetModulePermission]
	
	@ModulePermissionID int

AS
SELECT *
FROM {databaseOwner}{objectQualifier}vw_ModulePermissions
WHERE ModulePermissionID = @ModulePermissionID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetModulePermissionsByModuleID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetModulePermissionsByModuleID]
    @ModuleId       Int,   -- Null|-1 for all modules
    @PermissionId   Int    -- Null|-1 for all permissions
AS
BEGIN
	IF (IsNull(@ModuleId, -1) = -1) -- separate branches with individual query optimization
		SELECT *
		  FROM {databaseOwner}[{objectQualifier}vw_ModulePermissions]
		 WHERE (PermissionID = @PermissionId OR IsNull(@PermissionId, -1) = -1)
	 ELSE
		SELECT *
		FROM {databaseOwner}[{objectQualifier}vw_ModulePermissions]
		WHERE ((ModuleID = @ModuleId) OR (ModuleID IS NULL AND PermissionCode = 'SYSTEM_MODULE_DEFINITION'))
		AND (PermissionID = @PermissionId OR IsNull(@PermissionId, -1) = -1)
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetModulePermissionsByPortal]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetModulePermissionsByPortal]
    @PortalId Int -- Not Null!
AS
    SELECT *
    FROM {databaseOwner}[{objectQualifier}vw_ModulePermissions]
    WHERE PortalID = @PortalID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetModulePermissionsByTabID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetModulePermissionsByTabID]
    @TabId Int -- Not Null!
AS
    SELECT MP.*
    FROM        {databaseOwner}[{objectQualifier}Tabs]                 AS T
    INNER JOIN  {databaseOwner}[{objectQualifier}TabModules]           AS TM ON TM.TabID    = T.TabID
    INNER JOIN  {databaseOwner}[{objectQualifier}vw_ModulePermissions] AS MP ON TM.ModuleID = MP.ModuleID AND T.PortalID = MP.PortalID
    WHERE T.TabID = @TabId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetModules]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetModules]

	@PortalID int
	
AS
SELECT	* 
FROM {databaseOwner}{objectQualifier}vw_Modules
WHERE  PortalId = @PortalID
ORDER BY ModuleId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetModuleSetting]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetModuleSetting]
    @ModuleId      Int,          -- not null!
    @SettingName   nVarChar(50)  -- not null or empty!
AS
BEGIN
	SELECT SettingName,
		   CASE WHEN Lower(SettingValue) LIKE N'fileid=%'
				THEN {databaseOwner}[{objectQualifier}FilePath](SettingValue)
				ELSE SettingValue  
		   END AS SettingValue
	 FROM  {databaseOwner}[{objectQualifier}ModuleSettings] 
	 WHERE ModuleID    = @ModuleId 
	   AND SettingName = @SettingName;
END; -- Procedure
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetModuleSettings]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetModuleSettings]
    @ModuleId Int -- Null: settings from all modules
AS
BEGIN
	SELECT SettingName,
		   CASE WHEN Lower(SettingValue) LIKE N'fileid=%'
			    THEN {databaseOwner}[{objectQualifier}FilePath](SettingValue)
				ELSE SettingValue 
		   END       AS SettingValue
	 FROM  {databaseOwner}[{objectQualifier}ModuleSettings] 
	 WHERE ModuleID = @ModuleId OR IsNull(@ModuleId, -1) = -1
	 OPTION (OPTIMIZE FOR (@ModuleId UNKNOWN))
END; -- Procedure
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetModuleSettingsByTab]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetModuleSettingsByTab]
    @TabId Int -- Not Null
AS
BEGIN
	SELECT S.ModuleID,
		   S.SettingName,
		   CASE WHEN Lower(S.SettingValue) LIKE N'fileid=%'
			    THEN {databaseOwner}[{objectQualifier}FilePath](S.SettingValue)
			    ELSE S.SettingValue 
		   END		 AS SettingValue
	 FROM  {databaseOwner}[{objectQualifier}ModuleSettings] S
	 JOIN  {databaseOwner}[{objectQualifier}TabModules]     M ON S.ModuleID = M.ModuleID
	 WHERE M.TabID = @TabId
	 ORDER BY S.ModuleID
END; -- Procedure
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetNonExpiredUsersByRoleName]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetNonExpiredUsersByRoleName]
	@PortalID	INT,
	@Rolename	NVARCHAR(50)
AS
	DECLARE @UserPortalId INT
	DECLARE @PortalGroupId INT
	SELECT @PortalGroupId = PortalGroupId FROM {databaseOwner}[{objectQualifier}Portals] WHERE PortalID = @PortalID
	IF EXISTS(SELECT PortalGroupID FROM {databaseOwner}[{objectQualifier}PortalGroups] WHERE PortalGroupID = @PortalGroupId)
	BEGIN
		SELECT @UserPortalId = MasterPortalID FROM {databaseOwner}[{objectQualifier}PortalGroups] WHERE PortalGroupID = @PortalGroupId
	END
	ELSE
	BEGIN
		SELECT @UserPortalId = @PortalID
	END
	SELECT     
		U.*, 
		UP.PortalId, 
		UP.Authorised, 
		UP.IsDeleted,
		UP.RefreshRoles,
		UP.VanityUrl
	FROM {databaseOwner}{objectQualifier}UserPortals AS UP 
			RIGHT OUTER JOIN {databaseOwner}{objectQualifier}UserRoles  UR 
			INNER JOIN {databaseOwner}{objectQualifier}Roles R ON UR.RoleID = R.RoleID 
			RIGHT OUTER JOIN {databaseOwner}{objectQualifier}Users AS U ON UR.UserID = U.UserID 
		ON UP.UserId = U.UserID	
	WHERE ( UP.PortalId = @UserPortalId OR @UserPortalId IS Null )
		AND (UP.IsDeleted = 0 OR UP.IsDeleted Is NULL)
		AND (R.RoleName = @Rolename)
		AND (R.PortalId = @PortalID OR @PortalID IS Null )
		AND (UR.ExpiryDate >= GETDATE() OR UR.ExpiryDate IS NULL)
	ORDER BY U.FirstName + ' ' + U.LastName
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetOnlineUser]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetOnlineUser]
	@UserID int
AS

	SELECT
		U.UserID,
		U.UserName
	FROM {databaseOwner}{objectQualifier}Users U
	WHERE U.UserID = @UserID
		AND EXISTS (
			select 1 from {databaseOwner}{objectQualifier}UsersOnline UO where UO.UserID = U.UserID
		)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetOnlineUsers]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetOnlineUsers]
	@PortalID int
AS
	SELECT *
		FROM {databaseOwner}{objectQualifier}UsersOnline UO
			INNER JOIN {databaseOwner}{objectQualifier}vw_Users U ON UO.UserID = U.UserID 
			INNER JOIN {databaseOwner}{objectQualifier}UserPortals UP ON U.UserID = UP.UserId
		WHERE  UP.PortalID = @PortalID AND U.PortalID = @PortalID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetPackageDependencies]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPackageDependencies]
AS
	SELECT * FROM {databaseOwner}[{objectQualifier}PackageDependencies]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetPackages]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPackages]
	@PortalID	int
AS
	SELECT *
		FROM   {databaseOwner}{objectQualifier}Packages
		WHERE (PortalID = @PortalID OR @PortalID IS NULL OR PortalID IS NULL)
		ORDER BY PackageType ASC, [FriendlyName] ASC
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetPackageTypes]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPackageTypes]
AS
	SELECT * FROM {databaseOwner}{objectQualifier}PackageTypes
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetPasswordHistory]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPasswordHistory]
	@UserID             int,
	@PasswordsRetained  int,
	@DaysRetained       int
AS
	SELECT TOP (@PasswordsRetained) *
	FROM {databaseOwner}{objectQualifier}PasswordHistory
	WHERE UserID=@UserID
	  AND DATEDIFF(day, CreatedOnDate, GETDATE()) <= @DaysRetained;
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetPermissions]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPermissions]
AS
	SELECT * FROM {databaseOwner}{objectQualifier}Permission
	ORDER BY ViewOrder
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetPortalAliases]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPortalAliases]
AS
	SELECT * FROM {databaseOwner}{objectQualifier}PortalAlias
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetPortalByPortalAliasID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPortalByPortalAliasID]

	@PortalAliasId  int

AS
SELECT P.*
FROM {databaseOwner}{objectQualifier}vw_Portals P
	INNER JOIN {databaseOwner}{objectQualifier}PortalAlias PA ON P.PortalID = PA.PortalID
WHERE PA.PortalAliasId = @PortalAliasId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetPortalDefaultLanguage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPortalDefaultLanguage]

	@PortalId            int

AS
	SELECT defaultlanguage
		FROM {databaseOwner}{objectQualifier}Portals
		where portalid=@PortalId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetPortalDesktopModules]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPortalDesktopModules]
	@PortalId int,
	@DesktopModuleId int

AS
	SELECT {objectQualifier}PortalDesktopModules.*,
		   PortalName,
		   FriendlyName
	FROM   {objectQualifier}PortalDesktopModules
		INNER JOIN {objectQualifier}vw_Portals ON {objectQualifier}PortalDesktopModules.PortalId = {objectQualifier}vw_Portals.PortalId
		INNER JOIN {objectQualifier}DesktopModules ON {objectQualifier}PortalDesktopModules.DesktopModuleId = {objectQualifier}DesktopModules.DesktopModuleId
	WHERE  (({objectQualifier}PortalDesktopModules.PortalId = @PortalId) OR @PortalId is null)
		AND    (({objectQualifier}PortalDesktopModules.DesktopModuleId = @DesktopModuleId) OR @DesktopModuleId is null)
	ORDER BY {objectQualifier}PortalDesktopModules.PortalId, {objectQualifier}PortalDesktopModules.DesktopModuleId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetPortalGroups]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPortalGroups]

AS 
	SELECT * FROM {databaseOwner}{objectQualifier}PortalGroups
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetPortalLocalizations]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPortalLocalizations]
    @PortalId			int
AS
	SELECT * FROM {databaseOwner}[{objectQualifier}PortalLocalization] WHERE PortalId = @PortalId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetPortalPermission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPortalPermission]

	@PortalPermissionId INT

AS
SELECT *
FROM {databaseOwner}{objectQualifier}vw_PortalPermissions
WHERE PortalPermissionId = @PortalPermissionId


GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetPortalPermissionsByPortal]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure {databaseOwner}[{objectQualifier}GetPortalPermissionsByPortal]
	
	@PortalID int

AS

	IF @PortalID is not null
		BEGIN 
			SELECT *
				FROM {databaseOwner}{objectQualifier}vw_PortalPermissions
				WHERE PortalID = @PortalID
		END
	ELSE
		BEGIN
			SELECT *
				FROM {databaseOwner}{objectQualifier}vw_PortalPermissions
				WHERE PortalID IS NULL 
		END

GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetPortalRoles]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPortalRoles]
    @PortalId     Int -- Null: Host Roles
AS
BEGIN
    SELECT R.*,
          (SELECT COUNT(*) FROM {databaseOwner}[{objectQualifier}UserRoles] U 
				WHERE U.RoleID = R.RoleID 
					AND U.Status = 1 
					AND (U.EffectiveDate < GETDATE() OR U.EffectiveDate IS NULL)
                    AND (U.ExpiryDate > GETDATE() OR U.ExpiryDate IS NULL)) AS UserCount
     FROM {databaseOwner}[{objectQualifier}Roles] R
    WHERE (R.PortalId = @PortalId OR R.PortalId is null)
      AND (R.RoleId >= 0) -- DNN-4288: hide system role atm to prevent duplicates. Might be removed, after API has been adopt
    ORDER BY R.RoleName
	OPTION (OPTIMIZE FOR (@PortalId UNKNOWN))
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetPortals]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPortals]
	@CultureCode	nVarChar(50) -- pass Null | '' to return portal default language
AS
BEGIN
	SELECT * 
	FROM  {databaseOwner}[{objectQualifier}vw_Portals]
	WHERE CultureCode = 
		CASE 
			WHEN IsNull(@CultureCode, N'') = N'' THEN DefaultLanguage
			ELSE @CultureCode 
		END 
	ORDER BY PortalName;
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetPortalsByName]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPortalsByName]

    @NameToMatch	nvarchar(256),
    @PageIndex			int,
    @PageSize			int
AS
	BEGIN
		-- Set the page bounds
		DECLARE @PageLowerBound INT
		DECLARE @PageUpperBound INT
		SET @PageLowerBound = @PageSize * @PageIndex
		SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

		-- Create a temp table TO store the select results
		CREATE TABLE #PageIndexForPortals
		(
			IndexId int IDENTITY (0, 1) NOT NULL,
			PortalId int
		)

		-- Insert into our temp table
		INSERT INTO #PageIndexForPortals (PortalId)
			SELECT PortalId FROM	{databaseOwner}{objectQualifier}vw_PortalsDefaultLanguage
			WHERE  PortalName LIKE @NameToMatch
			ORDER BY PortalName

		SELECT  *
		FROM	{databaseOwner}{objectQualifier}vw_PortalsDefaultLanguage p, 
				#PageIndexForPortals i
		WHERE  p.PortalId = i.PortalId
				AND i.IndexId >= @PageLowerBound AND i.IndexId <= @PageUpperBound
		ORDER BY p.PortalName

		SELECT  TotalRecords = COUNT(*)
		FROM    #PageIndexForPortals
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetPortalsByUser]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPortalsByUser]
	@userID		int 
AS

	SELECT     {databaseOwner}{objectQualifier}vw_Portals.*
FROM         {databaseOwner}{objectQualifier}UserPortals INNER JOIN
                      {databaseOwner}{objectQualifier}vw_Portals ON 
					  {databaseOwner}{objectQualifier}UserPortals.PortalId = {databaseOwner}{objectQualifier}vw_Portals.PortalID
WHERE     ({databaseOwner}{objectQualifier}UserPortals.UserId = @userID)
		AND ({databaseOwner}{objectQualifier}vw_Portals.DefaultLanguage = {databaseOwner}{objectQualifier}vw_Portals.CultureCode)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetPortalSetting]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPortalSetting]
    @PortalID    Int,		    -- Not Null
    @SettingName nVarChar(50),	-- Not Null
    @CultureCode nVarChar(50)	-- Null|-1 for neutral language
AS
BEGIN
	SELECT TOP (1)
		   SettingName,
		   CASE WHEN Lower(SettingValue) Like N'fileid=%'
		        THEN {databaseOwner}[{objectQualifier}FilePath](SettingValue)
		        ELSE SettingValue 
		   END   AS SettingValue,
		   CreatedByUserID,
		   CreatedOnDate,
		   LastModifiedByUserID,
		   LastModifiedOnDate,
		   CultureCode
	 FROM  {databaseOwner}[{objectQualifier}PortalSettings]
	 WHERE PortalID    = @PortalID
	   AND SettingName = @SettingName
	   AND COALESCE(CultureCode, @CultureCode, N'') = IsNull(@CultureCode, N'')
	 ORDER BY IsNull(CultureCode, N'') DESC
END; -- Procedure
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetPortalSettings]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPortalSettings]
    @PortalId    Int,            -- not Null!
    @CultureCode nVarChar(20)    -- Null|'' for neutral language
AS
BEGIN
	DECLARE @DefaultLanguage nVarChar(20) = N'';

	IF EXISTS (SELECT * 
                FROM  {databaseOwner}[{objectQualifier}PortalLocalization] L
			    JOIN  {databaseOwner}[{objectQualifier}Portals] P ON L.PortalID = P.PortalID AND L.CultureCode = P.DefaultLanguage
				WHERE P.PortalID = @PortalID)
		SELECT @DefaultLanguage = DefaultLanguage 
		 FROM  {databaseOwner}[{objectQualifier}Portals] 
		 WHERE PortalID = @PortalID;

	SELECT PS.SettingName,
		   CASE WHEN Lower(PS.SettingValue) LIKE N'fileid=%'
			    THEN {databaseOwner}[{objectQualifier}FilePath](PS.SettingValue)
			    ELSE PS.SettingValue 
           END   AS SettingValue,
		   PS.CreatedByUserID,
		   PS.CreatedOnDate,
		   PS.LastModifiedByUserID,
		   PS.LastModifiedOnDate,
		   PS.CultureCode
	 FROM  {databaseOwner}[{objectQualifier}PortalSettings] PS
     WHERE PortalSettingID = (SELECT Top(1) PortalSettingID FROM {databaseOwner}[{objectQualifier}PortalSettings] S 
		                       WHERE PS.PortalID = S.PortalID AND PS.SettingName = S.SettingName 
							   ORDER BY CASE CultureCode WHEN @CultureCode THEN 2 WHEN Null THEN 1 ELSE 0 END DESC)
	   AND PortalID = @PortalID
	 ORDER BY SettingName;
END; -- Procedure
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetPortalSettingsBySetting]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPortalSettingsBySetting]
	@SettingName nvarchar(50),
	@CultureCode nvarchar(10)
AS 
	SELECT ps.PortalID, ps.SettingValue FROM {databaseOwner}{objectQualifier}PortalSettings ps WHERE ps.SettingName=@SettingName AND COALESCE(CultureCode, @CultureCode, N'') = IsNull(@CultureCode, N'')
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetPortalSpaceUsed]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPortalSpaceUsed]
	@PortalId INT     -- Null|-1: Host files
AS
	BEGIN
		SELECT SUM(CAST(Size as bigint)) AS SpaceUsed
		FROM {databaseOwner}{objectQualifier}Files
		WHERE (IsNull(PortalID, -1) = IsNull(@PortalId, -1))
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetProfile]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure {databaseOwner}[{objectQualifier}GetProfile]

@UserID    int, 
@PortalID  int

as

select *
from   {databaseOwner}{objectQualifier}Profile
where  UserId = @UserID 
and    PortalId = @PortalID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetPropertyDefinition]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPropertyDefinition]

	@PropertyDefinitionID	int

AS
SELECT	{databaseOwner}{objectQualifier}ProfilePropertyDefinition.*
FROM	{databaseOwner}{objectQualifier}ProfilePropertyDefinition
WHERE PropertyDefinitionID = @PropertyDefinitionID
	AND Deleted = 0
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetPropertyDefinitionByName]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPropertyDefinitionByName]
	@PortalID	int,
	@Name		nvarchar(50)

AS
SELECT	*
	FROM	{databaseOwner}{objectQualifier}ProfilePropertyDefinition
	WHERE  (PortalId = @PortalID OR (PortalId IS NULL AND @PortalID IS NULL))
		AND PropertyName = @Name
	ORDER BY ViewOrder
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetPropertyDefinitionsByCategory]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPropertyDefinitionsByCategory]
	@PortalID	int,
	@Category	nvarchar(50)

AS
SELECT	*
	FROM	{databaseOwner}{objectQualifier}ProfilePropertyDefinition
	WHERE  (PortalId = @PortalID OR (PortalId IS NULL AND @PortalID IS NULL))
		AND PropertyCategory = @Category
	ORDER BY ViewOrder
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetPropertyDefinitionsByPortal]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPropertyDefinitionsByPortal]

	@PortalID	int

AS
SELECT	{databaseOwner}{objectQualifier}ProfilePropertyDefinition.*
	FROM	{databaseOwner}{objectQualifier}ProfilePropertyDefinition
	WHERE  (PortalId = @PortalID OR (PortalId IS NULL AND @PortalID IS NULL))		
	ORDER BY ViewOrder
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetRedirectMessage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetRedirectMessage]
	@guid [UniqueIdentifier]
AS
	SELECT MessageText
	FROM {databaseOwner}{objectQualifier}RedirectMessages
	WHERE MessageId = @guid
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetRelationship]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetRelationship] @RelationshipID INT
AS 
    SELECT  RelationshipID,
            RelationshipTypeID,            
            Name,            
            Description,
            UserID,
            PortalID,
            DefaultResponse,
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}Relationships    
	WHERE RelationshipID = @RelationshipID
	ORDER BY RelationshipID ASC
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetRelationshipsByPortalID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetRelationshipsByPortalID] @PortalID INT
AS 
    SELECT  RelationshipID,
			RelationshipTypeID,            
            Name,            
            Description,
			UserID,
			PortalID,
			DefaultResponse,
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}Relationships    
	WHERE PortalID = @PortalID AND UserID IS NULL
	ORDER BY RelationshipID ASC
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetRelationshipsByUserID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetRelationshipsByUserID] @UserID INT
AS 
    SELECT  RelationshipID,
			RelationshipTypeID,            
            Name,            
            Description,
			UserID,
			PortalID,
			DefaultResponse,
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}Relationships    
	WHERE UserID = @UserID
	ORDER BY RelationshipID ASC
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetRelationshipType]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetRelationshipType] @RelationshipTypeID INT
AS 
    SELECT  RelationshipTypeID,
            Direction,
            Name ,            
            Description,
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}RelationshipTypes    
	WHERE RelationshipTypeID = @RelationshipTypeID
	ORDER BY RelationshipTypeID ASC
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetRoleGroup]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetRoleGroup]
	@PortalID		int,
	@RoleGroupId    int
AS
	SELECT *
		FROM {databaseOwner}{objectQualifier}RoleGroups
		WHERE  (RoleGroupId = @RoleGroupId OR RoleGroupId IS NULL AND @RoleGroupId IS NULL)
			AND    PortalId = @PortalID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetRoleGroupByName]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetRoleGroupByName]
	@PortalID		int,
	@RoleGroupName	nvarchar(50)
AS
	SELECT *
		FROM {databaseOwner}{objectQualifier}RoleGroups
		WHERE  PortalId = @PortalID 
			AND RoleGroupName = @RoleGroupName
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetRoleGroups]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetRoleGroups]
	@PortalID		int
AS
	SELECT *
		FROM {databaseOwner}{objectQualifier}RoleGroups
		WHERE  PortalId = @PortalID
		ORDER BY RoleGroupName
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetRoles]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetRoles]
AS
BEGIN
     SELECT R.*,
          (SELECT COUNT(*) FROM {databaseOwner}[{objectQualifier}UserRoles] U 
				WHERE U.RoleID = R.RoleID 
					AND U.Status = 1 
					AND (U.EffectiveDate < GETDATE() OR U.EffectiveDate IS NULL)
                    AND (U.ExpiryDate > GETDATE() OR U.ExpiryDate IS NULL)) AS UserCount
     FROM {databaseOwner}[{objectQualifier}Roles] AS R
     WHERE RoleID >= 0 -- ignore virtual roles. Note: might be removed, after controller has been adjusted
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetRolesBasicSearch]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetRolesBasicSearch]
    @PortalID           Int,                    -- might be null for all portals
    @PageIndex          Int,                    -- page number starting at 0
    @PageSize           Int,                    -- number of items per page
    @FilterBy           nVarChar(100)           -- pattern for role name, do not use preceding or trailing wildcards
AS
BEGIN
    IF IsNull(@FilterBy, '') <> '' BEGIN
        IF Substring(@FilterBy, 1, 1) = '%'
            SET @FilterBy = Substring(@FilterBy, 2, Len(@FilterBy) - 1)
        IF Substring(@FilterBy, Len(@FilterBy), 1) = '%'
            SET @FilterBy = Substring(@FilterBy, 1, Len(@FilterBy) - 1)
     END;

	IF IsNull(@PageIndex,-1) >= 0 AND IsNull(@PageSize, 0) > 0 AND IsNull(@PageSize, 0) < Cast(0x7fffffff AS Int)
		WITH OrderedRoles AS (
			SELECT RoleID, PortalID, RoleName, [Description], ServiceFee, BillingFrequency, TrialPeriod, TrialFrequency, BillingPeriod, TrialFee,
				   IsPublic, AutoAssignment, RoleGroupID, RSVPCode, {databaseOwner}{objectQualifier}FilePath(IconFile) AS IconFile, Status, SecurityMode,
				   CreatedByUserID,CreatedOnDate,LastModifiedByUserID,LastModifiedOnDate,
				   ROW_NUMBER() OVER (ORDER BY RoleName ASC, PortalID DESC) AS RowNum
			 FROM {databaseOwner}[{objectQualifier}Roles]
			 WHERE (RoleName LIKE '%' + @FilterBy + '%' OR IsNull(@FilterBy,'') = '')
			   AND (PortalID = @PortalID OR IsNull(@PortalID, -1)  = -1)
			   AND (RoleId  >= 0) -- DNN-4288: ignore virtual roles
			)
		SELECT * FROM OrderedRoles WHERE RowNum >= {databaseOwner}{objectQualifier}PageLowerBound(@PageIndex, @Pagesize)
									 AND RowNum <= {databaseOwner}{objectQualifier}PageUpperBound(@PageIndex, @Pagesize) ORDER BY RowNum
		 OPTION (OPTIMIZE FOR (@PortalId UNKNOWN));
	ELSE -- no paging
        SELECT RoleID, PortalID, RoleName, [Description], ServiceFee, BillingFrequency, TrialPeriod, TrialFrequency, BillingPeriod, TrialFee,
               IsPublic, AutoAssignment, RoleGroupID, RSVPCode, {databaseOwner}{objectQualifier}FilePath(IconFile) AS IconFile, Status, SecurityMode,
               CreatedByUserID,CreatedOnDate,LastModifiedByUserID,LastModifiedOnDate,
               ROW_NUMBER() OVER (ORDER BY RoleName ASC, PortalID DESC) AS RowNum
         FROM {databaseOwner}[{objectQualifier}Roles]
         WHERE (RoleName LIKE '%' + @FilterBy + '%' OR IsNull(@FilterBy,'') = '')
           AND (PortalID = @PortalID OR IsNull(@PortalID, -1)  = -1)
           AND (RoleId  >= 0) -- DNN-4288: ignore virtual roles
		 OPTION (OPTIMIZE FOR (@PortalId UNKNOWN))
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetRoleSettings]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetRoleSettings]
	@RoleId     int -- Not Null|-1
AS
BEGIN
	SELECT RoleSettingID,
		   RoleID,
		   SettingName,
		   CASE WHEN Lower(SettingValue) LIKE N'fileid=%'
			    THEN {databaseOwner}[{objectQualifier}FilePath](SettingValue)
			    ELSE SettingValue 
           END    AS SettingValue,
		   CreatedByUserID,
		   CreatedOnDate,
		   LastModifiedByUserID,
		   LastModifiedOnDate
	 FROM  {databaseOwner}[{objectQualifier}RoleSettings]
	 WHERE RoleID = @RoleId
END; -- Procedure
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetSchedule]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetSchedule]
 @Server varchar(150)
AS
BEGIN
SELECT
  S.*
  , (SELECT max(S1.NextStart)
   FROM {databaseOwner}{objectQualifier}ScheduleHistory S1
   WHERE S1.ScheduleID = S.ScheduleID) as NextStart
 FROM {databaseOwner}{objectQualifier}Schedule S
 WHERE
	(
		@Server IS NULL OR 
		S.Servers LIKE '%,' + @Server + ',%' OR
		S.Servers LIKE @Server + ',%' OR
		S.Servers LIKE '%,' + @Server OR
		S.Servers = @Server OR
		S.Servers IS NULL)
	ORDER BY FriendlyName ASC
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetScheduleByEvent]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetScheduleByEvent]
	@EventName	varchar(50),
	@Server		varchar(150)
AS
    SELECT S.*
	FROM {databaseOwner}[{objectQualifier}Schedule] S
	WHERE S.AttachToEvent = @EventName
		AND (@Server IS NULL OR ISNULL(s.Servers, '') = '' OR ',' + s.Servers + ',' LIKE '%,' + @Server + ',%')
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetScheduleByScheduleID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetScheduleByScheduleID]
@ScheduleID int
AS
SELECT S.*
FROM {databaseOwner}{objectQualifier}Schedule S
WHERE S.ScheduleID = @ScheduleID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetScheduleByTypeFullName]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetScheduleByTypeFullName]
	@TypeFullName	varchar(200),
	@Server			varchar(150)
AS
    SELECT S.*
	FROM {databaseOwner}[{objectQualifier}Schedule] S
	WHERE S.TypeFullName = @TypeFullName 
		AND (@Server IS NULL OR ISNULL(s.Servers, '') = '' OR ',' + s.Servers + ',' LIKE '%,' + @Server + ',%')
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetScheduleHistory]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetScheduleHistory] @ScheduleID INT
AS 
    SELECT  S.* ,
            SH.*
    FROM    {databaseOwner}{objectQualifier}Schedule S
            INNER JOIN {databaseOwner}{objectQualifier}ScheduleHistory SH ON S.ScheduleID = SH.ScheduleID
    WHERE   S.ScheduleID = @ScheduleID
            OR @ScheduleID = -1
    ORDER BY SH.StartDate DESC
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetScheduleItemSettings]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetScheduleItemSettings] 
@ScheduleID int
AS
SELECT *
FROM {databaseOwner}{objectQualifier}ScheduleItemSettings
WHERE ScheduleID = @ScheduleID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetScheduleNextTask]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetScheduleNextTask]
	@Server varchar(150)
AS
SELECT TOP 1
        S.[ScheduleID] ,
        S.[TypeFullName] ,
        S.[TimeLapse] ,
        S.[TimeLapseMeasurement] ,
        S.[RetryTimeLapse] ,
        S.[RetryTimeLapseMeasurement] ,
        S.[RetainHistoryNum] ,
        S.[AttachToEvent] ,
        S.[CatchUpEnabled] ,
        S.[Enabled] ,
        S.[ObjectDependencies] ,
        S.[Servers] ,
        S.[CreatedByUserID] ,
        S.[CreatedOnDate] ,
        S.[LastModifiedByUserID] ,
        S.[LastModifiedOnDate] ,
        S.[FriendlyName] ,
        H.[NextStart]
FROM    {databaseOwner}[{objectQualifier}Schedule] S
        CROSS APPLY ( SELECT TOP 1
                                [NextStart]
                      FROM      {databaseOwner}[{objectQualifier}ScheduleHistory]
                      WHERE     ( [ScheduleID] = S.[ScheduleID] )
                      ORDER BY  [NextStart] DESC
                    ) AS H ( [NextStart] )
WHERE   ( S.[Enabled] = 1 )
        AND ( ( S.[Servers] LIKE ( ',%' + @Server + '%,' ) )
              OR ( S.[Servers] IS NULL )
            )
ORDER BY H.[NextStart] ASC
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetScopeTypes]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetScopeTypes] 
AS
	SELECT *
	FROM {databaseOwner}{objectQualifier}Taxonomy_ScopeTypes
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetSearchCommonWordByID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetSearchCommonWordByID]
	@CommonWordID int
	
AS

SELECT
	[CommonWordID],
	[CommonWord],
	[Locale]
FROM
	{databaseOwner}{objectQualifier}SearchCommonWords
WHERE
	[CommonWordID] = @CommonWordID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetSearchCommonWordsByLocale]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetSearchCommonWordsByLocale]
	@Locale nvarchar(10)
	
AS

SELECT
	[CommonWordID],
	[CommonWord],
	[Locale]
FROM
	{databaseOwner}{objectQualifier}SearchCommonWords
WHERE
	[Locale] = @Locale
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetSearchIndexers]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure {databaseOwner}[{objectQualifier}GetSearchIndexers]

as

select {databaseOwner}{objectQualifier}SearchIndexer.*
from {databaseOwner}{objectQualifier}SearchIndexer
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetSearchModules]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetSearchModules]
	@PortalID int
AS
BEGIN	
	DECLARE @currentDate AS [DATETIME] = GETDATE();

	SELECT *
	FROM {databaseOwner}{objectQualifier}vw_Modules
	WHERE IsDeleted = 0  
	  AND IsTabDeleted = 0  
	  AND IsAdmin = 0
	  AND (SupportedFeatures & 2) = 2
	  AND (StartDate <= @currentDate OR StartDate IS NULL) 
	  AND (EndDate > @currentDate OR EndDate IS NULL) 
	  AND (TabEndDate > @currentDate OR TabEndDate IS NULL) 
	  AND (TabStartDate <= @currentDate OR TabStartDate IS NULL) 
	  AND (NOT (BusinessControllerClass IS NULL))
	  AND (PortalID = @PortalID OR (PortalID IS NULL AND @PortalID Is NULL))
	ORDER BY ModuleOrder
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetSearchResultModules]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure {databaseOwner}[{objectQualifier}GetSearchResultModules]

@PortalID int

AS

SELECT     
		TM.TabID, 
		T.TabName  AS SearchTabName
FROM	{databaseOwner}{objectQualifier}Modules M
INNER JOIN	{databaseOwner}{objectQualifier}ModuleDefinitions MD ON MD.ModuleDefID = M.ModuleDefID 
INNER JOIN	{databaseOwner}{objectQualifier}TabModules TM ON TM.ModuleID = M.ModuleID 
INNER JOIN	{databaseOwner}{objectQualifier}Tabs T ON T.TabID = TM.TabID
WHERE	MD.FriendlyName = N'Search Results'
	AND T.PortalID = @PortalID
	AND T.IsDeleted = 0
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetSearchSettings]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetSearchSettings]

	@ModuleID	int

AS
	SELECT     	settings.SettingName, 
				settings.SettingValue
	FROM	{databaseOwner}{objectQualifier}Modules m 
		INNER JOIN {databaseOwner}{objectQualifier}Portals p ON m.PortalID = p.PortalID 
		INNER JOIN {databaseOwner}{objectQualifier}PortalSettings settings ON p.PortalID = settings.PortalID
	WHERE   m.ModuleID = @ModuleID
		AND settings.SettingName LIKE 'Search%'
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetSearchStopWords]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetSearchStopWords]
	@PortalID int,
	@CultureCode nvarchar(50)
AS
BEGIN
	SELECT   
	  [StopWordsID],  
	  [StopWords],  
	  [CreatedByUserID],  
	  [CreatedOnDate],  
	  [LastModifiedByUserID],  
	  [LastModifiedOnDate],
	  [PortalID],
	  [CultureCode]
	FROM {databaseOwner}{objectQualifier}SearchStopWords 
	WHERE [PortalID] = @PortalID AND [CultureCode] = @CultureCode
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetServers]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetServers] 
AS
	SELECT *
	FROM {databaseOwner}{objectQualifier}WebServers
	ORDER BY ServerName, IISAppName
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetServices]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetServices]
    @PortalId  Int, -- pass Null for roles of all sites
    @UserId    Int  -- not null!
AS
BEGIN
    SELECT
        R.*,
        UR.IsOwner,
        UR.UserRoleID,
        UR.UserID,
        UR.ExpiryDate,
        UR.IsTrialUsed,
        UR.EffectiveDate,
        U.DisplayName,
        U.Email
    FROM         {databaseOwner}[{objectQualifier}Users]      U
     INNER JOIN  {databaseOwner}[{objectQualifier}UserRoles] UR ON UR.UserID = U.UserID
     RIGHT JOIN  {databaseOwner}[{objectQualifier}Roles]      R ON UR.RoleID = R.RoleID  AND UR.UserID = @UserId
    WHERE (R.PortalId = @PortalId OR IsNull(@PortalId, -1) = -1)
      AND  R.IsPublic = 1
      AND  R.RoleId  >= 0
	  AND U.UserID = @UserId
    ORDER BY R.RoleName
	OPTION (OPTIMIZE FOR (@PortalId UNKNOWN))
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetSharedModulesByPortal]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetSharedModulesByPortal]
	@Portald int
AS
	SELECT * FROM {databaseOwner}{objectQualifier}vw_TabModules tb		
	WHERE tb.PortalID != tb.OwnerPortalID	
	AND tb.OwnerPortalID = @Portald
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetSharedModulesWithPortal]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetSharedModulesWithPortal]
	@Portald int
AS
	SELECT * FROM {databaseOwner}{objectQualifier}vw_TabModules tb		
	WHERE tb.PortalID != tb.OwnerPortalID	
	AND tb.PortalID = @Portald
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetSingleUserByEmail]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetSingleUserByEmail]
	@PortalId INT,
	@Email nvarchar(255)
AS 
	SELECT ISNULL((SELECT TOP 1 U.UserId from {databaseOwner}{objectQualifier}Users U LEFT JOIN {databaseOwner}{objectQualifier}UserPortals UP on UP.[UserId] = U.[UserId] AND UP.[PortalId] = @PortalId WHERE U.Email = @Email AND (UP.[PortalId] = @PortalId OR U.IsSuperUser=1)), -1)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetSkinControl]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetSkinControl]
	@SkinControlID	int
AS
    SELECT *
    FROM   {databaseOwner}{objectQualifier}SkinControls
	WHERE SkinControlID = @SkinControlID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetSkinControlByKey]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetSkinControlByKey]
	@ControlKey	nvarchar(50)
AS
    SELECT *
    FROM   {databaseOwner}{objectQualifier}SkinControls
	WHERE ControlKey = @ControlKey
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetSkinControlByPackageID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetSkinControlByPackageID]
	@PackageID	int
AS
    SELECT *
    FROM   {databaseOwner}{objectQualifier}SkinControls
	WHERE PackageID = @PackageID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetSkinControls]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetSkinControls]
AS
    SELECT *
    FROM   {databaseOwner}{objectQualifier}SkinControls
	ORDER BY  ControlKey
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetSkinPackage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetSkinPackage]
	@PortalID   int,
	@SkinName   nvarchar(50),
	@SkinType   nvarchar(50)

AS
	SELECT *
		FROM  {databaseOwner}{objectQualifier}SkinPackages
		WHERE (PortalID = @PortalID OR @PortalID IS NULL Or PortalID IS Null)
			AND SkinName = @SkinName
			AND SkinType = @SkinType
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetSkinPackageByPackageID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetSkinPackageByPackageID]
	@PackageID int	
AS
BEGIN
 SELECT SP.*
  FROM  {databaseOwner}{objectQualifier}SkinPackages SP
  WHERE SP.PackageID = @PackageID

 SELECT I.*
  FROM  {databaseOwner}{objectQualifier}Skins I
 INNER JOIN {databaseOwner}{objectQualifier}SkinPackages S ON S.SkinPackageID = I.SkinPackageID
 WHERE S.PackageID = @PackageID
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetSystemMessage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetSystemMessage]
 @PortalID     int,
 @MessageName  nvarchar(50)
AS
BEGIN
 if @PortalID is null
 begin
  select MessageValue
  from   {databaseOwner}{objectQualifier}SystemMessages
  where  PortalID is null and MessageName = @MessageName
 end else begin
  select MessageValue
  from   {databaseOwner}{objectQualifier}SystemMessages
  where  PortalID = @PortalID and MessageName = @MessageName
 end
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetSystemMessages]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure {databaseOwner}[{objectQualifier}GetSystemMessages]

as

select MessageName
from   {databaseOwner}{objectQualifier}SystemMessages
where  PortalID is null
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetTab]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTab]

@TabId    int

AS
SELECT *
FROM   {databaseOwner}{objectQualifier}vw_Tabs
WHERE  TabId = @TabId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetTabAliasSkins]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabAliasSkins] 
(
	 @PortalID		int 
)
AS
	SELECT 
		t.TabId, 
		pa.PortalAliasId, 
		pa.HttpAlias, 
		t.SkinSrc, 
		t.CreatedByUserId, 
		t.CreatedOnDate, 
		t.LastModifiedByUserId, 
		t.LastModifiedOnDate
	FROM {databaseOwner}{objectQualifier}TabAliasSkins t
		INNER JOIN {databaseOwner}{objectQualifier}PortalAlias pa ON t.PortalAliasId = pa.PortalAliasId
	WHERE pa.PortalID = @PortalID OR @PortalID = -1
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetTabByUniqueID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabByUniqueID]
    @UniqueID   uniqueidentifier
AS
	SELECT	* 
	FROM	{databaseOwner}{objectQualifier}vw_Tabs
	WHERE	UniqueID = @UniqueID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetTabCustomAliases]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabCustomAliases]
(
	 @PortalID		int 
)
AS
	SELECT 
		t.TabId, 
		Coalesce(trp.CultureCode, '') as CultureCode, 
		pa.HttpAlias
	FROM {databaseOwner}{objectQualifier}Tabs t
		INNER JOIN {databaseOwner}{objectQualifier}TabUrls trp ON trp.TabId = t.ParentId	
		INNER JOIN {databaseOwner}{objectQualifier}PortalAlias pa ON trp.PortalAliasId = pa.PortalAliasId
		WHERE trp.PortalAliasUsage = 1 /* child tabs inherit */
		  AND (@portalId = t.PortalId OR @portalId = -1)
		  AND NOT EXISTS (SELECT tr2.TabId 
							FROM {databaseOwner}{objectQualifier}TabUrls tr2 
							WHERE tr2.TabId = t.TabId 
								AND tr2.CultureCode = trp.CultureCode
							)
    UNION
	SELECT 
		t.TabId, 
		Coalesce(trp.CultureCode, '') as CultureCode, 
		pa.HttpAlias
	FROM {databaseOwner}{objectQualifier}Tabs t
		INNER JOIN {databaseOwner}{objectQualifier}TabUrls trp ON trp.TabId = t.Tabid	
		INNER JOIN {databaseOwner}{objectQualifier}PortalAlias pa ON trp.PortalAliasId = pa.PortalAliasId
		WHERE (@portalId = t.PortalId OR @portalId = -1)
          AND t.CultureCode IS NULL OR t.CultureCode = trp.CultureCode
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetTabModule]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabModule]
    @TabModuleID	int
AS
    SELECT *
	FROM {databaseOwner}{objectQualifier}vw_TabModules        
    WHERE  TabModuleID = @TabModuleID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetTabModuleIdsBySettingNameAndValue]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabModuleIdsBySettingNameAndValue]
	@PortalId INT,
	@SettingName NVARCHAR(50),
	@SettingValue NVARCHAR(max)
AS
BEGIN
	SELECT DISTINCT tms.TabModuleID
	FROM {databaseOwner}[{objectQualifier}TabModuleSettings] tms
			INNER JOIN {databaseOwner}[{objectQualifier}TabModules] tm ON tms.TabModuleID = tm.TabModuleID
			INNER JOIN {databaseOwner}[{objectQualifier}Tabs] t ON tm.TabID = t.TabID AND (t.PortalID = @PortalID OR t.PortalID IS NULL)
	WHERE tms.SettingName = @SettingName
	  AND tms.SettingValue = @SettingValue
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetTabModuleOrder]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabModuleOrder]
	@TabId    int, 			-- Not Null
	@PaneName nvarchar(50)  -- Not Null
AS
BEGIN
	SELECT *
	FROM {objectQualifier}TabModules 
	WHERE TabId    = @TabId 
	  AND PaneName = @PaneName
	ORDER BY TabId, PaneName, ModuleOrder -- optimized for index used
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetTabModules]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabModules]
	@TabId int -- not null!
AS
BEGIN
	SELECT	* 
	FROM {databaseOwner}{objectQualifier}vw_TabModules
	WHERE  TabId = @TabId
	ORDER BY TabId, PaneName, ModuleOrder -- optimized for index used
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetTabModuleSetting]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabModuleSetting]
    @TabModuleId   Int,              -- not null!
    @SettingName   nVarChar(50)      -- not null or empty!
AS
BEGIN
	SELECT S.SettingName,
		   CASE WHEN S.SettingValue LIKE N'fileid=%'
				THEN {databaseOwner}[{objectQualifier}FilePath](S.SettingValue)
				ELSE S.SettingValue  
		   END AS SettingValue
	 FROM  {databaseOwner}[{objectQualifier}TabModuleSettings] S
	 WHERE TabModuleID = @TabModuleId 
	   AND SettingName = @SettingName;
END; -- Procedure
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetTabModuleSettings]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabModuleSettings]
    @TabModuleId Int -- Null: all tabmodules
AS
BEGIN
	SELECT SettingName,
		   CASE WHEN Lower(SettingValue) LIKE N'fileid=%'
				THEN {databaseOwner}[{objectQualifier}FilePath](SettingValue)
				ELSE SettingValue 
		   END  AS SettingValue
	 FROM  {databaseOwner}[{objectQualifier}TabModuleSettings] 
	 WHERE TabModuleID = @TabModuleId OR IsNull(@TabModuleId, -1) = -1
	 OPTION (OPTIMIZE FOR (@TabModuleId UNKNOWN))
END; -- Procedure
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetTabModuleSettingsByName]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabModuleSettingsByName]
	@PortalId    Int,         -- Not Null
	@SettingName NVarChar(50) -- Not Null
AS
BEGIN
	SELECT S.TabModuleID, 
		   CASE WHEN Lower(S.SettingValue) LIKE N'fileid=%'
				THEN {databaseOwner}[{objectQualifier}FilePath](S.SettingValue)
				ELSE S.SettingValue 
		   END	AS SettingValue
	 FROM  {databaseOwner}[{objectQualifier}TabModuleSettings] S
	 JOIN  {databaseOwner}[{objectQualifier}TabModules]        M ON S.TabModuleID = M.TabModuleID
	 JOIN {databaseOwner}[{objectQualifier}Tabs]               T ON M.TabID       = T.TabID AND (T.PortalID = @PortalID OR T.PortalID IS NULL)
	 WHERE S.SettingName = @SettingName
END; -- Procedure
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetTabModuleSettingsByTab]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabModuleSettingsByTab]
    @TabId Int -- Not Null
AS
BEGIN
	SELECT S.TabModuleID,
		   S.SettingName,
		   CASE WHEN Lower(S.SettingValue) LIKE N'fileid=%'
				THEN {databaseOwner}[{objectQualifier}FilePath](S.SettingValue)
				ELSE S.SettingValue 
		   END	AS SettingValue
	 FROM  {databaseOwner}[{objectQualifier}TabModuleSettings] S
     JOIN  {databaseOwner}[{objectQualifier}TabModules]        M ON S.TabModuleID = M.TabModuleID
	 WHERE M.TabID = @TabId
	 ORDER BY S.TabModuleID
END; -- Procedure
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetTabPanes]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure {databaseOwner}[{objectQualifier}GetTabPanes]

@TabId    int

as

select distinct(PaneName) as PaneName
from   {databaseOwner}{objectQualifier}TabModules
where  TabId = @TabId
order by PaneName
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetTabPaths]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabPaths] 
	@PortalID		INT,
	@CultureCode	NVARCHAR(10)
AS
	SELECT
		TabID, 
		PortalID, 
		TabPath
	FROM {databaseOwner}{objectQualifier}vw_Tabs
	WHERE (PortalID = @PortalID AND (CultureCode = @CultureCode OR CultureCode Is NULL OR ISNULL(@CultureCode, '') = ''))
		OR @PortalID Is NULL
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetTabPermission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabPermission]

	@TabPermissionID int

AS
SELECT *
FROM {databaseOwner}{objectQualifier}vw_TabPermissions
WHERE TabPermissionID = @TabPermissionID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetTabPermissionsByPortal]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure {databaseOwner}[{objectQualifier}GetTabPermissionsByPortal]
	
	@PortalID int

AS

	IF @portalid is not null
		BEGIN 
			SELECT *
				FROM {databaseOwner}{objectQualifier}vw_TabPermissions
				WHERE PortalID = @PortalID
		END
	ELSE
		BEGIN
			SELECT *
				FROM {databaseOwner}{objectQualifier}vw_TabPermissions
				WHERE PortalID IS NULL 
		END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetTabPermissionsByTabID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabPermissionsByTabID]
	@TabID int, 
	@PermissionID int
AS

	SELECT  *
	FROM    {databaseOwner}{objectQualifier}vw_TabPermissions
	WHERE   (TabID = @TabID OR (TabID IS NULL AND PermissionCode = 'SYSTEM_TAB'))
		AND	(PermissionID = @PermissionID OR @PermissionID = -1)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetTabs]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabs]
	@PortalID Int  -- Null|-1 for host pages
AS
	SELECT *
	FROM   {databaseOwner}[{objectQualifier}vw_Tabs]
	WHERE  IsNull(PortalId, -1) = IsNull(@PortalID, -1)
	ORDER BY PortalId, [Level], ParentID, TabOrder -- PortalId added for query optimization
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetTabsByModuleID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabsByModuleID]
	@ModuleID Int -- NOT Null
AS
BEGIN
	SELECT * FROM {databaseOwner}[{objectQualifier}vw_Tabs] T
	WHERE IsDeleted = 0
	  AND TabID IN (SELECT TabID FROM {databaseOwner}[{objectQualifier}TabModules]
					WHERE ModuleID = @ModuleID AND IsDeleted = 0)
	ORDER BY PortalId, Level, ParentID, TabOrder -- PortalId added for query optimization
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetTabsByPackageID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabsByPackageID]
    @PortalId  Int, -- Null for Host menu items
    @PackageId Int, -- Not Null!
    @ForHost   Bit  -- 0: Get pages for a specific portal (OR host pages only)
                    -- 1: Get all host pages and portal pages
AS
BEGIN
	-- Create a temp table to store the select results
	CREATE TABLE #TabsLatestPublished
	(
		IndexId int IDENTITY (0, 1) NOT NULL,
		TabId int,
		ModuleId int
	);

	WITH Temp AS ( 
        SELECT ROW_NUMBER() OVER (PARTITION BY TabId ORDER BY Version DESC) AS RowNumber, TabVersionId, TabId
        FROM {databaseOwner}{objectQualifier}TabVersions
		WHERE IsPublished = 1		
    )
	-- Insert into our temp table
	INSERT INTO #TabsLatestPublished (TabId, ModuleId)
	SELECT TLP.TabId, TVD.ModuleId 	
	FROM Temp TLP
	INNER JOIN {databaseOwner}{objectQualifier}TabVersionDetails TVD ON TLP.TabVersionId = TVD.TabVersionId 
	WHERE RowNumber = 1 AND TVD.Action <> 2
	
    SELECT * FROM {databaseOwner}[{objectQualifier}vw_Tabs]
    WHERE (IsNull(PortalId, -1) = IsNull(@PortalId, -1) Or @ForHost = 1)
		AND IsDeleted = 0
		AND TabId IN (SELECT M.TabId FROM {databaseOwner}[{objectQualifier}vw_Modules] M
					  LEFT JOIN #TabsLatestPublished TLP ON TLP.TabId = M.TabId AND TLP.ModuleId = M.ModuleID
                      WHERE M.PackageID = @PackageId AND (M.IsDeleted = 0 OR (TLP.TabId IS NOT NULL AND TLP.ModuleId IS NOT NULL)))
    ORDER BY PortalID, TabName
	OPTION (OPTIMIZE FOR (@PortalId UNKNOWN, @PackageId UNKNOWN, @ForHost UNKNOWN));
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetTabsByTabModuleID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabsByTabModuleID]
	@TabModuleID Int -- NOT Null
AS
	BEGIN
		SELECT * FROM {databaseOwner}[{objectQualifier}vw_Tabs] T
		WHERE IsDeleted = 0
		  AND TabID IN (SELECT TabID FROM {databaseOwner}[{objectQualifier}TabModules]
						WHERE TabModuleID = @TabModuleID AND IsDeleted = 0)
		ORDER BY PortalId, Level, ParentID, TabOrder -- PortalId added for query optimization
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetTabSetting]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabSetting]
    @TabId         Int,         -- not null!
    @SettingName   nVarChar(50) -- not null or empty!
AS
BEGIN
	SELECT SettingName,
		   CASE WHEN SettingValue LIKE N'fileid=%'
				THEN {databaseOwner}[{objectQualifier}FilePath](SettingValue)
				ELSE SettingValue  
		   END AS SettingValue
	 FROM  {databaseOwner}[{objectQualifier}TabSettings] 
	 WHERE TabID = @TabId 
	   AND SettingName = @SettingName;
END; -- Procedure
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetTabSettings]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabSettings]
    @PortalId Int -- Null|-1 for Host Pages
AS
BEGIN
	SELECT S.TabID,
		   S.SettingName,
		   CASE WHEN Lower(S.SettingValue) LIKE N'fileid=%'
			 	THEN {databaseOwner}[{objectQualifier}FilePath](S.SettingValue)
				ELSE S.SettingValue 
		   END AS SettingValue
	 FROM  {databaseOwner}[{objectQualifier}TabSettings] S
	 JOIN  {databaseOwner}[{objectQualifier}Tabs]        T ON t.TabID = S.TabID
	 WHERE  ISNull(PortalId, -1) = isNull(@PortalId, -1)
	 ORDER BY S.TabID;
END; -- Procedure
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetTabUrls]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabUrls] 
(
	 @PortalId		int 
)
AS
	SELECT 
		tu.TabId,	
		tu.SeqNum,	
		tu.Url,	
		tu.QueryString,
		tu.HttpStatus,	
		tu.CultureCode,
		tu.IsSystem,
		tu.CreatedByUserId,
		tu.LastModifiedByUserId,
		case when parentTu.PortalAliasUsage = 1 /* parent is set to 'child pages inherit' so get parent portal alias id */
			then 
				case when Coalesce(tu.PortalAliasId, 0) < 1 /* if this page has no specific alias id, then use parent*/
					then parentTu.PortalAliasId 
					else tu.PortalAliasId 
				END /* otherwise, use this page alias id */
			else tu.PortalALiasId 
		END as PortalAliasId,

		case when Coalesce(tu.PortalAliasUsage,0) = 0 and coalesce(tu.PortalALiasId,0) < 1 /* default value and no specific alias */
			then /* check for inheritance from parent */
				case when Coalesce(parentTu.PortalALiasUsage,0) = 1 and Coalesce(parentTu.PortalAliasId, 0) > 0 /* parent specifies an alias */
					then 3 /* inherited from parent */
					else 0 
				END /* default value */
			when Coalesce(tu.PortalAliasId,0) > 0 /*specific alias for this tab */
			then 
				case when coalesce(tu.PortalALiasUsage,0) < 1 
					then 1 /* if not set, default to 'child pages inherit'*/
					else tu.PortalAliasUsage 
				END
			else 
				0 /* default - fall through value */
		END as PortalAliasUsage 
	FROM {databaseOwner}{objectQualifier}TabUrls tu
		INNER JOIN {databaseOwner}{objectQualifier}Tabs t on t.TabId = tu.TabId
		LEFT JOIN {databaseOwner}{objectQualifier}TabUrls parentTu on t.ParentId = parentTu.TabId
			AND parentTu.CultureCode = tu.CultureCode
			and parentTu.PortalAliasUsage > 0	   
	WHERE (@portalId = PortalId OR @portalId = -1)
	ORDER BY PortalId, TabOrder, tu.SeqNum


GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetTabVersionDetails]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabVersionDetails]
	@TabVersionId INT
AS
BEGIN
	SELECT   
		[TabVersionDetailId] ,
        [TabVersionId] ,
		[ModuleId] ,
		[ModuleVersion] ,
		[PaneName] ,
		[ModuleOrder] ,
		[Action],
	    [CreatedByUserID] ,
		[CreatedOnDate],
		[LastModifiedByUserID],
		[LastModifiedOnDate]
	FROM {databaseOwner}[{objectQualifier}TabVersionDetails]
	WHERE [TabVersionId] = @TabVersionId
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetTabVersionDetailsHistory]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabVersionDetailsHistory]
	@TabID iNT,
    @Version INT
AS
BEGIN    
	SELECT tvd.[TabVersionDetailId]
		  ,tvd.[TabVersionId]
		  ,tvd.[ModuleId]
		  ,tvd.[ModuleVersion]
		  ,tvd.[PaneName]
		  ,tvd.[ModuleOrder]
		  ,tvd.[Action]
		  ,tvd.[CreatedByUserID]
		  ,tvd.[CreatedOnDate]
		  ,tvd.[LastModifiedByUserID]
		  ,tvd.[LastModifiedOnDate]
	FROM {databaseOwner}[{objectQualifier}TabVersionDetails] tvd
	INNER JOIN {databaseOwner}[{objectQualifier}TabVersions] tv ON tvd.TabVersionId = tv.TabVersionId
	WHERE tv.Version <= @Version
		AND tv.TabId = @TabID
	ORDER BY tvd.CreatedOnDate 
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetTabVersions]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabVersions]
	@TabId INT
AS
BEGIN
	SELECT   
		[TabVersionId],
		[TabId],
		[Version],
		[TimeStamp],
		[IsPublished],
	    [CreatedByUserID],
		[CreatedOnDate],
		[LastModifiedByUserID],
		[LastModifiedOnDate]
	FROM {databaseOwner}[{objectQualifier}TabVersions]
	WHERE [TabId] = @TabId
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetTerm]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTerm] 
	@TermId			int
AS
	SELECT TT.*,
		(SELECT    COUNT(CI.ContentItemID)
			  FROM      {databaseOwner}[{objectQualifier}ContentItems_Tags] T
			  INNER JOIN {databaseOwner}[{objectQualifier}ContentItems] CI ON CI.ContentItemID = T.ContentItemID
			  WHERE     T.TermID = TT.TermID
			) AS TotalTermUsage ,
		(SELECT    COUNT(CI.ContentItemID)
			  FROM      {databaseOwner}[{objectQualifier}ContentItems_Tags] T
			  INNER JOIN {databaseOwner}[{objectQualifier}ContentItems] CI ON CI.ContentItemID = T.ContentItemID
			  WHERE     T.TermID = TT.TermID
			  AND	    CI.CreatedOnDate > DATEADD(day, -30, GETDATE())
		) AS MonthTermUsage ,
		(SELECT    COUNT(CI.ContentItemID)
			  FROM      {databaseOwner}[{objectQualifier}ContentItems_Tags] T
			  INNER JOIN {databaseOwner}[{objectQualifier}ContentItems] CI ON CI.ContentItemID = T.ContentItemID
			  WHERE     T.TermID = TT.TermID
			  AND	    CI.CreatedOnDate > DATEADD(day, -7, GETDATE())
		) AS WeekTermUsage ,
		(SELECT    COUNT(CI.ContentItemID)
			  FROM      {databaseOwner}[{objectQualifier}ContentItems_Tags] T
			  INNER JOIN {databaseOwner}[{objectQualifier}ContentItems] CI ON CI.ContentItemID = T.ContentItemID
			  WHERE     T.TermID = TT.TermID
			  AND	    CI.CreatedOnDate > DATEADD(day, -1, GETDATE())
		) AS DayTermUsage
	FROM {databaseOwner}{objectQualifier}Taxonomy_Terms TT
	WHERE TT.TermId = @TermId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetTermsByContent]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTermsByContent] 
	@ContentItemID			int
AS
	SELECT TT.*
	FROM {databaseOwner}{objectQualifier}ContentItems_Tags TG
		INNER JOIN {databaseOwner}{objectQualifier}Taxonomy_Terms TT ON TG.TermID = TT.TermID
	WHERE TG.ContentItemID = @ContentItemID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetTermsByVocabulary]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTermsByVocabulary] 
	@VocabularyID			int
AS
	SELECT TT.*
	FROM {databaseOwner}{objectQualifier}Taxonomy_Terms TT
	WHERE VocabularyID = @VocabularyID
	ORDER BY TT.TermLeft Asc, TT.Weight Asc, TT.Name Asc
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetTermUsage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTermUsage] 
	@TermId int
AS
	SELECT
		(SELECT    COUNT(CI.ContentItemID)
			  FROM      {databaseOwner}[{objectQualifier}ContentItems_Tags] T
			  INNER JOIN {databaseOwner}[{objectQualifier}ContentItems] CI ON CI.ContentItemID = T.ContentItemID
			  WHERE     T.TermID = @TermId
			) AS TotalTermUsage ,
		(SELECT    COUNT(CI.ContentItemID)
			  FROM      {databaseOwner}[{objectQualifier}ContentItems_Tags] T
			  INNER JOIN {databaseOwner}[{objectQualifier}ContentItems] CI ON CI.ContentItemID = T.ContentItemID
			  WHERE     T.TermID = @TermId
			  AND	    CI.CreatedOnDate > DATEADD(day, -30, GETDATE())
		) AS MonthTermUsage ,
		(SELECT    COUNT(CI.ContentItemID)
			  FROM      {databaseOwner}[{objectQualifier}ContentItems_Tags] T
			  INNER JOIN {databaseOwner}[{objectQualifier}ContentItems] CI ON CI.ContentItemID = T.ContentItemID
			  WHERE     T.TermID = @TermId
			  AND	    CI.CreatedOnDate > DATEADD(day, -7, GETDATE())
		) AS WeekTermUsage ,
		(SELECT    COUNT(CI.ContentItemID)
			  FROM      {databaseOwner}[{objectQualifier}ContentItems_Tags] T
			  INNER JOIN {databaseOwner}[{objectQualifier}ContentItems] CI ON CI.ContentItemID = T.ContentItemID
			  WHERE     T.TermID = @TermId
			  AND	    CI.CreatedOnDate > DATEADD(day, -1, GETDATE())
		) AS DayTermUsage
	FROM {databaseOwner}{objectQualifier}Taxonomy_Terms TT
	WHERE TermID = @TermId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetUnAuthorizedUsers]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUnAuthorizedUsers]
	@PortalID       int,
	@IncludeDeleted bit,
	@SuperUsersOnly bit		
AS
	SELECT  *
	FROM	{databaseOwner}{objectQualifier}vw_Users
	WHERE  PortalId = @PortalID
		AND Authorised = 0
		AND IsDeleted <= CASE @IncludeDeleted WHEN 0 THEN 0 ELSE 1 END
		--less than equal done to cover IsDeleted in (1,0) for IncludeDeleted...else just IsDeleted = 0
		AND IsSuperUser >= CASE @SuperUsersOnly WHEN 1 THEN 1 ELSE 0 END
	ORDER BY UserName
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetUnIndexedContentItems]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUnIndexedContentItems] 
AS
	SELECT *
	FROM {databaseOwner}{objectQualifier}ContentItems
	WHERE Indexed = 0
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetUrl]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure {databaseOwner}[{objectQualifier}GetUrl]

@PortalID     int,
@Url          nvarchar(255)

as

select *
from   {databaseOwner}{objectQualifier}Urls
where  PortalID = @PortalID
and    Url = @Url
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetUrlLog]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUrlLog]
	@URLTrackingID Int,
	@StartDate DateTime,
	@EndDate DateTime
AS
	BEGIN
		SELECT 
			L.*,
			{databaseOwner}[{objectQualifier}UserDisplayname](L.UserId) AS 'FullName'
		FROM {databaseOwner}{objectQualifier}UrlLog L
			INNER JOIN {databaseOwner} {objectQualifier}UrlTracking T ON L.UrlTrackingId = T.UrlTrackingId
		WHERE L.UrlTrackingID = @UrlTrackingID
			AND ((ClickDate >= @StartDate) OR @StartDate Is Null)
			AND ((ClickDate <= @EndDate ) OR @EndDate Is Null)
		ORDER BY ClickDate
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetUrls]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure {databaseOwner}[{objectQualifier}GetUrls]

@PortalID     int

as

select *
from   {databaseOwner}{objectQualifier}Urls
where  PortalID = @PortalID
order by Url
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetUrlTracking]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure {databaseOwner}[{objectQualifier}GetUrlTracking]

@PortalID     int,
@Url          nvarchar(255),
@ModuleId     int

as

select *
from   {databaseOwner}{objectQualifier}UrlTracking
where  PortalID = @PortalID
and    Url = @Url
and    ((ModuleId = @ModuleId) or (ModuleId is null and @ModuleId is null))
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetUser]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUser]

	@PortalID int,
	@UserID int

AS
SELECT * FROM {databaseOwner}{objectQualifier}vw_Users U
WHERE  UserId = @UserID
	AND    (PortalId = @PortalID or IsSuperUser = 1)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetUserAuthentication]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserAuthentication]
  @UserID          int

AS
  select * from {databaseOwner}{objectQualifier}UserAuthentication
     where UserId = @UserID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetUserByAuthToken]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserByAuthToken]

	@PortalId	int,
	@UserToken	nvarchar(1000),
	@AuthType	nvarchar(100)

AS
	SELECT u.* 
		FROM {databaseOwner}{objectQualifier}vw_Users u
			INNER JOIN {databaseOwner}{objectQualifier}UserAuthentication ua ON u.UserID = ua.UserID
	WHERE  ua.AuthenticationToken = @UserToken
		AND ua.AuthenticationType = @AuthType
		AND    (PortalId = @PortalId OR IsSuperUser = 1 OR @PortalId is null)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetUserByDisplayName]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserByDisplayName]

	@PortalID int,
	@DisplayName nvarchar(128)

AS
	SELECT * FROM {databaseOwner}{objectQualifier}vw_Users
	WHERE  DisplayName = @DisplayName
		AND  ((@PortalId IS NULL) OR (PortalId = @PortalID) OR IsSuperUser = 1)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetUserByPasswordResetToken]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserByPasswordResetToken]
	@PortalID int,
	@PasswordResetToken UNIQUEIDENTIFIER

AS
	SELECT * FROM {databaseOwner}{objectQualifier}vw_Users
	WHERE  PasswordResetToken = @PasswordResetToken
		AND  ((@PortalId IS NULL) OR (PortalId = @PortalID) OR IsSuperUser = 1)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetUserByUsername]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserByUsername]

	@PortalID int,
	@Username nvarchar(100)

AS
	SELECT * FROM {databaseOwner}{objectQualifier}vw_Users
	WHERE  Username = @Username
		AND  ((@PortalId IS NULL) OR (PortalId = @PortalID) OR IsSuperUser = 1)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetUserByVanityUrl]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserByVanityUrl]

	@PortalID int,
	@VanityUrl nvarchar(100)

AS
	SELECT * FROM {databaseOwner}{objectQualifier}vw_Users
	WHERE  VanityUrl = @VanityUrl
		AND  ((@PortalId IS NULL) OR (PortalId = @PortalID) OR IsSuperUser = 1)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetUserCountByPortal]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserCountByPortal]
 @PortalId int
AS
begin
 SELECT count(*)
 FROM {databaseOwner}{objectQualifier}UserPortals AS UP
 WHERE UP.IsDeleted = 0 AND UP.PortalID = @PortalID
end
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetUserProfile]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC {databaseOwner}[{objectQualifier}GetUserProfile] 
	@UserID int
AS
	SELECT
		ProfileID,
		UserID,
		PropertyDefinitionID,
		CASE WHEN (PropertyValue Is Null) THEN PropertyText ELSE PropertyValue END AS 'PropertyValue',
		Visibility,
		ExtendedVisibility,
		LastUpdatedDate
	FROM	{databaseOwner}{objectQualifier}UserProfile
	WHERE   UserId = @UserID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetUserRelationship]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationship] @UserRelationshipID INT
AS 
    SELECT  UserRelationshipID,
			UserID,
			RelatedUserID,
			RelationshipID,            
			Status,            
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}UserRelationships    
	WHERE UserRelationshipID = @UserRelationshipID
	ORDER BY UserRelationshipID ASC
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetUserRelationshipPreference]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationshipPreference] 
	@UserID INT,
	@RelationshipID INT
AS 
    SELECT  PreferenceID,
			UserID,
			RelationshipID,            
			DefaultResponse,            
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}UserRelationshipPreferences    
	WHERE UserID = @UserID
	  AND RelationshipID = @RelationshipID
	ORDER BY UserID ASC, RelationshipID ASC
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetUserRelationshipPreferenceByID]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationshipPreferenceByID] 
	@PreferenceID INT	
AS 
    SELECT  PreferenceID,
			UserID,
			RelationshipID,            
			DefaultResponse,            
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}UserRelationshipPreferences    
	WHERE @PreferenceID = @PreferenceID	  
	ORDER BY PreferenceID ASC
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetUserRelationships]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationships]
	@UserID INT
AS 
	SELECT  UserRelationshipID,
			UserID,
			RelatedUserID,
			RelationshipID,            
			Status,            
			CreatedByUserID ,
			CreatedOnDate ,
			LastModifiedByUserID ,
			LastModifiedOnDate
	FROM    {databaseOwner}{objectQualifier}UserRelationships    		
	WHERE UserID = @UserID OR RelatedUserID = @UserID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetUserRelationshipsByMultipleIDs]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserRelationshipsByMultipleIDs] 
	@UserID INT,
	@RelatedUserID INT,
	@RelationshipID INT,
	@Direction INT
AS 
	IF ( @Direction = 1 ) --OneWay
	  BEGIN
		SELECT  UserRelationshipID,
				UserID,
				RelatedUserID,
				RelationshipID,            
				Status,            
				CreatedByUserID ,
				CreatedOnDate ,
				LastModifiedByUserID ,
				LastModifiedOnDate
		FROM    {databaseOwner}{objectQualifier}UserRelationships    
		WHERE UserID = @UserID
		AND   RelatedUserID = @RelatedUserID
		AND   RelationshipID = @RelationshipID
		ORDER BY UserRelationshipID ASC    
	  END
	  ELSE IF ( @Direction = 2 ) --TwoWay
	  BEGIN
		SELECT  UserRelationshipID,
				UserID,
				RelatedUserID,
				RelationshipID,            
				Status,            
				CreatedByUserID ,
				CreatedOnDate ,
				LastModifiedByUserID ,
				LastModifiedOnDate
		FROM    {databaseOwner}{objectQualifier}UserRelationships    		
		WHERE (  (UserID = @UserID AND RelatedUserID = @RelatedUserID) 
			  OR (RelatedUserID = @UserID AND UserID = @RelatedUserID) --swap userids and check
			  )
		AND   RelationshipID = @RelationshipID
		ORDER BY UserRelationshipID ASC    
	  END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetUserRole]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserRole]

	@PortalID int, 
	@UserID int, 
	@RoleId int

AS
	SELECT	*
	    FROM	{databaseOwner}{objectQualifier}vw_UserRoles
	    WHERE   UserId = @UserID
		    AND  PortalId = @PortalID
		    AND  RoleId = @RoleId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetUserRoles]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserRoles]
	@PortalId  int,
	@UserId    int
AS
	SELECT *
		FROM {databaseOwner}{objectQualifier}vw_UserRoles
		WHERE UserID = @UserId AND PortalID = @PortalId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetUserRolesByUsername]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserRolesByUsername]
	@PortalID int, 
	@Username nvarchar(100), 
	@Rolename nvarchar(50)
AS
	IF @UserName Is Null
		BEGIN
			SELECT	*
				FROM {databaseOwner}{objectQualifier}vw_UserRoles
				WHERE PortalId = @PortalID AND (Rolename = @Rolename or @RoleName is NULL)
		END
	ELSE
		BEGIN
			IF @RoleName Is NULL
				BEGIN
					SELECT	*
						FROM {databaseOwner}{objectQualifier}vw_UserRoles
						WHERE PortalId = @PortalID AND (Username = @Username or @Username is NULL)
				END
			ELSE
				BEGIN
					SELECT	*
						FROM {databaseOwner}{objectQualifier}vw_UserRoles
						WHERE PortalId = @PortalID
							AND (Rolename = @Rolename or @RoleName is NULL)
							AND (Username = @Username or @Username is NULL)
				END
		END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetUsersAdvancedSearch]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUsersAdvancedSearch] 
(
    @PortalID int,                          -- portal                
    @UserId int,                            -- for determining correct visibility permissions
    @FilterUserId int,                      -- for filtering relationships on    
    @FilterRoleId int,                      -- for filtering by roles
    @RelationshipTypeId int,                -- for filtering by relationships
    @IsAdmin bit,                           -- determines visibility
    @PageSize int,                          -- page size
    @PageIndex int,                         -- 0 based page index
    @SortBy nvarchar(100),                  -- sort field
    @SortAscending bit,                     -- sort flag indicating whether sort is asc or desc
    @PropertyNames nvarchar(max),           -- list of property names to filter
    @PropertyValues nvarchar(max)           -- list of property values to filter
)
AS
BEGIN
    -- Setup Top XX
    DECLARE @topSql nvarchar(20) SET @topSql = ''
    IF @PageSize > -1 BEGIN SET @topSql = ' TOP ' + CONVERT(nvarchar(20), @PageSize) END
                
    -- Setup Specific Page
    DECLARE @minRowNumberSql nvarchar(20) SET @minRowNumberSql =  CONVERT(nvarchar(20), ((@PageIndex * @PageSize) + 1))
    -- Setup Pivot Field List
    DECLARE @pivotSql nvarchar(max) SELECT @pivotSql = {databaseOwner}{objectQualifier}GetProfileFieldSql(@PortalID, '')

    -- Get User specific columns
    DECLARE @UserColumns TABLE(ColumnName NVARCHAR(100))
    INSERT INTO @UserColumns SELECT COLUMN_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = '{objectQualifier}vw_Users' AND TABLE_SCHEMA = REPLACE('{databaseOwner}', '.', '')

    -- Lists Filters names and values into tables
    DECLARE @PropertyNamesTable TABLE (RowNumber INT, RowValue nvarchar(MAX))
    DECLARE @PropertyValuesTable TABLE (RowNumber INT, RowValue nvarchar(MAX))
    INSERT INTO @PropertyNamesTable SELECT * FROM {databaseOwner}{objectQualifier}ConvertListToTable(',', @PropertyNames)                      
    INSERT INTO @PropertyValuesTable SELECT * FROM {databaseOwner}{objectQualifier}ConvertListToTable(',', @PropertyValues)
                
    -- Gets filters that are on the User rather than Profile Properties
    DECLARE @UserFiltersTable TABLE (RowNumber Int, RowValue NVARCHAR(MAX))
    INSERT INTO @UserFiltersTable SELECT * FROM {databaseOwner}{objectQualifier}ConvertListToTable(',',@PropertyNames) WHERE RowValue IN (SELECT * FROM @UserColumns)


    DECLARE @sql nvarchar(max) SET @sql = ''
    DECLARE @filterSql nvarchar(max)SET @filterSql = ''

    -- ///////////////////////////////////////////////////
    -- FILTERING by PROFILE PROPERTY or USER PROPERTY
    -- ///////////////////////////////////////////////////
    --IF @PropertyNames IS NOT NULL AND @PropertyNames <> ''
    IF ((SELECT COUNT(*) FROM @PropertyNamesTable) > 0) AND ((SELECT COUNT(*) FROM @PropertyValuesTable)> 0) 
	    BEGIN
            DECLARE @propertyFilter nvarchar(max)
            DECLARE @userFilter nvarchar(max)
            DECLARE @userFilterJoin nvarchar(max) SET @userFilterJoin = ''
            DECLARE @profilePropertyCount INT
            DECLARE @userFilterCount INT
            DECLARE @propertyAndUserFilter nvarchar(10) SET @propertyAndUserFilter = ''
            DECLARE @groupBy NVARCHAR(300)

            -- Filters on Profile Properties    
            ;WITH CTE_PropertyNames(RowNumber, RowValue) AS
            (              SELECT * FROM @PropertyNamesTable
                            WHERE RowValue NOT IN (SELECT ColumnName FROM @UserColumns)),
            CTE_PropertyValues(RowNumber, RowValue) AS
            (              SELECT * FROM @PropertyValuesTable
                            WHERE RowValue NOT IN (SELECT ColumnName FROM @UserColumns))

            SELECT @propertyFilter = COALESCE(@propertyFilter + ' OR ' , ' ') 
                                        + ' (PropertyName=''' + N.RowValue 
                                        + CASE WHEN SUBSTRING(V.RowValue, 1, 1) = '$' AND SUBSTRING(V.RowValue, LEN(V.RowValue), 1) = '$' THEN
                                            ''' AND CHARINDEX(''$'' + PropertyValue + ''$'', ''' + V.RowValue + ''') > 0'
                                          ELSE 
                                            ''' AND ((PropertyValue LIKE ''' + V.RowValue +'%'') OR (PropertyValue LIKE ''% ' + V.RowValue +'%''))'
                                          END
                                        + ')'
            FROM CTE_PropertyNames AS N INNER JOIN CTE_PropertyValues AS V ON N.RowNumber = V.RowNumber
                                
            -- Filters on User Property                           
            SELECT @userFilter = COALESCE(@userFilter + ' AND ', ' ')  
										+ ' ((u.' + N.RowValue + ' LIKE ''' + V.RowValue +'%'') OR (u.' + N.RowValue + ' LIKE ''% ' + V.RowValue +'%'')) '
            FROM @UserFiltersTable AS N  INNER JOIN @PropertyValuesTable AS V ON N.RowNumber = V.RowNumber
                                
            SELECT @userFilterCount = COUNT(*) FROM @UserFiltersTable
            IF @userFilterCount > 0 BEGIN SET @userFilterJoin = ' INNER JOIN {objectQualifier}vw_Users u ON u.UserId = p.UserId ' END

            -- Determining the Group By Clause -- dependant on types of filters used
            SELECT @profilePropertyCount = COUNT(*) FROM {databaseOwner}{objectQualifier}ConvertListToTable(',', @PropertyNames)
            WHERE RowValue IN (SELECT PropertyName FROM {databaseOwner}{objectQualifier}ProfilePropertyDefinition WHERE PortalID = @PortalId)
            AND RowValue NOT IN (SELECT ColumnName FROM @UserColumns)

            IF @profilePropertyCount > 0
                BEGIN SET @groupBy = ' GROUP BY p.UserId HAVING COUNT(*) = ' + CONVERT(nvarchar(20),@profilePropertyCount ) END
            ELSE
                BEGIN SET @groupBy = ' GROUP BY p.UserId HAVING COUNT(*) > 0 '     END

            IF ( @profilePropertyCount > 0 AND @userFilterCount > 0)
            BEGIN SET @propertyAndUserFilter = ' AND ' END

            -- CREATE FINAL FILTER
            SET @filterSql = ' CREATE TABLE #MatchingUsers (UserId int, occurances int) INSERT INTO #MatchingUsers SELECT p.UserID, COUNT(*) AS occurances' 
                                        + ' FROM {databaseOwner}{objectQualifier}vw_profile p ' + @userFilterJoin
                                        + ' WHERE ' + COALESCE(' ( ' + @propertyFilter + ') ', ' ') + @propertyAndUserFilter + COALESCE(@userFilter, ' ') 
										+ ' AND ((Visibility = 0) OR (Visibility = 1 AND ' + CONVERT(nvarchar(20), @UserId) + ' > 0) OR (Visibility = 2 AND ' + CONVERT(nvarchar(20), @IsAdmin) + ' = 1))' 
                                        + @groupBy
		END

        -- ///////////////////////////////////////////////////      
        -- SETUP ROLE AND RELATIONSHIP FILTERS
        -- ///////////////////////////////////////////////////
        DECLARE @roleAndRelationshipFilter nvarchar(1000)
        DECLARE @roleFilter nvarchar(500) SET @roleFilter = ''
        DECLARE @relationshipFilter nvarchar(1000) SET @relationshipFilter = ''
        DECLARE @roleAndRelationshipFlag bit SET @roleAndRelationshipFlag  = 0
        DECLARE @RoleAndRelationshipSelect nvarchar(100) SET @RoleAndRelationshipSelect = ''
                                
        -- Filter by Role
        IF @FilterRoleId <> -1 
            BEGIN
                SET @roleAndRelationshipFlag = 1
                SET @roleFilter = ' JOIN {databaseOwner}{objectQualifier}UserRoles UR ON U.UserID = UR.UserID AND UR.Status = 1 '
					+ ' AND (UR.EffectiveDate < GETDATE() OR UR.EffectiveDate IS NULL) '
                    + ' AND (UR.ExpiryDate > GETDATE() OR UR.ExpiryDate IS NULL) AND UR.RoleID = ' + CONVERT(nvarchar(20), @FilterRoleId)
            END

        -- Filter by Relationship
        IF @RelationshipTypeId <> -1  
            BEGIN
                SET @roleAndRelationshipFlag = 1
                SET @relationshipFilter = ' JOIN {databaseOwner}{objectQualifier}Relationships REL ON REL.PortalID = ' + CONVERT(nvarchar(20), @PortalID)
                                            + ' AND RelationshipTypeID = ' + CONVERT(nvarchar(20), @RelationshipTypeId) 
                                            + ' JOIN {databaseOwner}{objectQualifier}UserRelationships UREL ON REL.RelationshipID = UREL.RelationshipID AND
                                            ((UREL.UserID = ' + CONVERT(nvarchar(20), @FilterUserId) + ' AND UREL.RelatedUserID = U.UserID) OR
                                            (UREL.UserID = U.UserID AND UREL.RelatedUserID = ' + CONVERT(nvarchar(20), @FilterUserId) + '))'
                                            + ' WHERE UREL.Status = 2'
            END 

        IF @roleAndRelationshipFlag = 1 BEGIN SET @RoleAndRelationshipSelect = ' AND s.UserId IN (SELECT userID FROM  RoleAndRelationUsers) ' END

        SET @roleAndRelationshipFilter =  ', RoleAndRelationUsers AS ( SELECT U.userId FROM {databaseOwner}{objectQualifier}vw_Users U ' + @roleFilter + @relationshipFilter + ' )' 

        -- ///////////////////////////////////////////////////  
        -- SET UP SORT
        -- ///////////////////////////////////////////////////
        DECLARE @sortSql nvarchar(1000) SET @sortSql = ''
        DECLARE @propertySort nvarchar(1000) SET @propertySort = ''
        DECLARE @filterJoin nvarchar(100) SET @filterJoin = ''
        DECLARE @filterSortSql nvarchar(1000) SET @filterSortSql = ''
        DECLARE @sortByUserProperty BIT         
        SELECT @sortByUserProperty = COUNT(*) FROM @UserColumns WHERE ColumnName = @SortBy

        IF ( @profilePropertyCount > 0 OR @userFilterCount > 0)
	        BEGIN SET @filterJoin = ' INNER JOIN #MatchingUsers m ON m.UserID = s.UserID ' END

        -- Determine the Type of Sort
        IF (@SortBy IS NOT NULL AND @SortBy <> '') AND @sortByUserProperty <> 1
	        BEGIN -- Sort By Profile Property
                SET @sortSql = {databaseOwner}{objectQualifier}GetSortSql(@SortBy,@SortAscending,'UserID')
                SET @propertySort = {databaseOwner}{objectQualifier}GetSortSql('PropertyValue',@SortAscending,'UserID')
                SET @filterSortSql = ' ;WITH SortedUsers AS ( SELECT ROW_NUMBER() OVER( ' + @propertySort + ' ) AS RowNumber, *  ' 
                                                + ' FROM {databaseOwner}{objectQualifier}vw_Profile WHERE PortalId = ' + CONVERT(nvarchar(20), @PortalID) + ' AND PropertyName = ''' + @SortBy + ''' )'
                                                + ' , MatchingSorted AS ( SELECT ROW_NUMBER() OVER(ORDER BY [RowNumber]) AS RowNumber, s.UserId FROM SortedUsers s '
                                                + @filterJoin + ' ) '
	        END
        ELSE
		    BEGIN   
                -- Sort By User Property
                IF @sortByUserProperty = 1 BEGIN SET @sortSql = {databaseOwner}{objectQualifier}GetSortSql(@SortBy,@SortAscending,'UserID')END
                                
                -- Default: Sort By UserID
                ELSE BEGIN SET @sortSql = {databaseOwner}{objectQualifier}GetSortSql('UserID',@SortAscending,'UserID') END                        
                SET @filterSortSql = ' ;WITH SortedUsers AS ( SELECT ROW_NUMBER() OVER( ' + @sortSql + ' ) AS RowNumber, * '
                                                + ' FROM {databaseOwner}{objectQualifier}vw_Users WHERE (PortalID = ' + CONVERT(nvarchar(20), @PortalID) + ' OR PortalID Is NULL) AND IsDeleted = 0)'
                                                + ' , MatchingSorted AS ( SELECT ROW_NUMBER() OVER(ORDER BY [RowNumber]) AS RowNumber, s.UserId FROM SortedUsers s '
                                                + @filterJoin + ' ) '
	        END

		-- Check if any Profile Property Definitions exist for this portal
		IF @pivotSql is not null
			BEGIN
				-- SELECT with PIVOT
				SET @pivotSql = 'SELECT * FROM (SELECT * FROM PivotedUsers PIVOT (MAX(PropertyValue) for PropertyName in (' + @pivotSql + ') ) as pivotTable) T '
			END
		ELSE
			BEGIN
				-- SELECT with DISTINCT
				SET @pivotSql = 'SELECT distinct UserID, PortalID, Username, Email, DisplayName, IsSuperUser, IsDeleted, AffiliateID, UpdatePassword, Authorised FROM PivotedUsers '
			END

        -- ///////////////////////////////////////////////////
        -- CREATE FINAL QUERY
        -- ///////////////////////////////////////////////////
        SET @sql = @filterSql
                + ' DECLARE @TempUsers TABLE (SortOrder INT, UserID INT) '
                + @filterSortSql
                + @roleAndRelationshipFilter
                + ' INSERT INTO @TempUsers SELECT ' + @topSql + ' * FROM (SELECT '
                + ' ROW_NUMBER() OVER ( ORDER BY [RowNumber] ) AS RowNumber, s.UserId FROM MatchingSorted s ' 
                + ' WHERE 1=1 ' + @roleAndRelationshipSelect
				+ ') t WHERE RowNumber >= '+ @minRowNumberSql
                + ' ;WITH PivotedUsers AS ( SELECT U.UserID, U.PortalID, U.Username, U.Email, U.DisplayName, U.IsSuperUser, U.IsDeleted, U.CreatedOnDate,        
                                                U.AffiliateID, U.UpdatePassword, U.Authorised, Prop.PropertyName,
                                                CASE
                                                    WHEN (P.Visibility = 0) THEN P.PropertyValue
                                                    WHEN (P.Visibility = 1 AND ' + CONVERT(nvarchar(20), @IsAdmin) + ' = 1) THEN P.PropertyValue
                                                    WHEN (P.Visibility = 1 AND ' + CONVERT(nvarchar(20), @IsAdmin) + ' = 0 AND ' + CONVERT(nvarchar(20), @UserId) + ' > 0) THEN P.PropertyValue
                                                    WHEN U.UserID = ' + CONVERT(nvarchar(20), @UserId) + ' OR (P.Visibility = 2 AND ' + CONVERT(nvarchar(20), @IsAdmin) + ' = 1) THEN P.PropertyValue
                                                    ELSE NULL
                                                END AS PropertyValue
                                            FROM   {databaseOwner}{objectQualifier}vw_Users AS U
                                                INNER JOIN {databaseOwner}{objectQualifier}UserProfile AS P ON U.UserID = P.UserID
                                                LEFT OUTER JOIN {databaseOwner}{objectQualifier}ProfilePropertyDefinition AS Prop ON 
                                                (Prop.PropertyDefinitionID = P.PropertyDefinitionID and Prop.Deleted = 0 and Prop.PortalID = ' + CONVERT(nvarchar(20), @PortalID) + ')
                                            WHERE U.UserId IN (SELECT UserId FROM @TempUsers) AND (U.PortalId = ' + CONVERT(nvarchar(20), @PortalID) + ' OR U.PortalId IS NULL)
                                            )' +
                @pivotSql + @sortSql + ' DROP TABLE #MatchingUsers'           

        EXEC(@sql)
END

GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetUsersBasicSearch]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUsersBasicSearch]
(
	@PortalID int,					-- portal
	@PageSize int,					-- page size
	@PageIndex int,					-- 0 based page index
	@SortBy nvarchar(100),			-- sort field
	@SortAscending bit,				-- sort flag indicating whether sort is asc or desc
	@PropertyName nvarchar(256),    -- property to filter by (username, diaplayname, email)
	@PropertyValue nvarchar(256)	-- value of property
)
AS
	-- Set up Top XX
	DECLARE @topSql nvarchar(20)
	SET @topSql = CONVERT(nvarchar(20), @PageSize)

	--Set up Count
	DECLARE @minRowNumberSql nvarchar(20)
	SET @minRowNumberSql =  CONVERT(nvarchar(20), ((@PageIndex * @PageSize) + 1))

	-- Set up Sort
	DECLARE @sortSql nvarchar(1000)
	SET @sortSql = {databaseOwner}{objectQualifier}GetSortSql(@SortBy, @SortAscending, 'UserID')

	-- Setup Pivot Field List
	DECLARE @pivotSql nvarchar(max)
	SELECT @pivotSql = {databaseOwner}{objectQualifier}GetProfileFieldSql(@PortalID, '')

	-- Setup FieldName Field List for temporary table
	DECLARE @fieldNames nvarchar(max)
	SELECT @fieldNames = {databaseOwner}{objectQualifier}GetProfileFieldSql(@PortalID, ' nvarchar(max)')

	DECLARE @sql nvarchar(max)
	SELECT @sql=
				'
					DECLARE @pivotedUsers TABLE
					(
						RowNumber int,
						UserID int,
						PortalID int,
						Username nvarchar(100),
						Email nvarchar(256),
						DisplayName nvarchar(128),
						IsSuperUser bit,
						IsDeleted bit,
						AffiliateID int,
						UpdatePassword bit,
						Authorised bit,
						' + @fieldNames + '
					);

					WITH TempUsers
					AS
					(
						SELECT TOP ' + @topSql + ' * FROM (
							SELECT
								ROW_NUMBER() OVER(' + @sortSql + ') AS RowNumber,
								U.UserID,
								U.PortalID,
								U.Username,
								U.Email,
								U.DisplayName,
								U.IsSuperUser,
								U.IsDeleted,
								U.AffiliateID,
								U.UpdatePassword,
								U.Authorised
								FROM {databaseOwner}{objectQualifier}vw_Users AS U
							WHERE (U.PortalID = ' + CONVERT(nvarchar(20), @PortalID) + ' OR U.PortalID Is NULL )
								AND ((U.' + @PropertyName + ' LIKE N''' + @PropertyValue + '%'')
									OR (U.' + @PropertyName + ' LIKE N''% ' + @PropertyValue + '%''))
								AND U.IsDeleted = 0
						) AS U
						WHERE RowNumber >= ' + @minRowNumberSql + '
					),
					TempUsersWithProfile
					AS
					(
						SELECT
							U.UserID,
							U.PortalID,
							U.Username,
							U.Email,
							U.DisplayName,
							U.IsSuperUser,
							U.IsDeleted,
							U.AffiliateID,
							U.UpdatePassword,
							U.Authorised,
							P.PropertyName,
							P.PropertyValue
						FROM TempUsers U
							INNER JOIN {databaseOwner}{objectQualifier}vw_Profile P ON P.UserID = U.UserID
					)
				    SELECT  * FROM (
					    SELECT  * FROM TempUsersWithProfile
					    PIVOT
					    (
						    MAX(PropertyValue) for PropertyName in (' + @pivotSql + ')
					    ) as pivotTable
                    ) T
					' + @sortSql
	EXEC(@sql)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetUsersByDisplayName]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUsersByDisplayName]
    @PortalID		int,
    @NameToMatch	nvarchar(256),
    @PageIndex		int,
    @PageSize		INT,
    @IncludeDeleted     bit,
    @SuperUsersOnly     bit		
AS
	BEGIN
		-- Set the page bounds
		DECLARE @PageLowerBound INT
		DECLARE @PageUpperBound INT
		SET @PageLowerBound = @PageSize * @PageIndex
		SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

		-- Create a temp table TO store the select results
		CREATE TABLE #PageIndexForUsers
		(
			IndexId int IDENTITY (0, 1) NOT NULL,
			UserId int
		)

		-- Insert into our temp table
		INSERT INTO #PageIndexForUsers (UserId)
			SELECT UserId FROM	{databaseOwner}{objectQualifier}vw_Users 
			WHERE  DisplayName LIKE @NameToMatch
				AND (IsDeleted <= CASE @IncludeDeleted WHEN 0 THEN 0 ELSE 1 END
							--less than equal done to cover IsDeleted in (1,0) for IncludeDeleted...else just IsDeleted = 0
				     OR IsDeleted Is NULL)
			        AND IsSuperUser >= CASE @SuperUsersOnly WHEN 1 THEN 1 ELSE 0 END
				AND ( PortalId = @PortalID OR (@PortalID is null ))
			ORDER BY DisplayName

		SELECT  *
		FROM	{databaseOwner}{objectQualifier}vw_Users u, 
				#PageIndexForUsers p
		WHERE  u.UserId = p.UserId
				AND (IsDeleted <= CASE @IncludeDeleted WHEN 0 THEN 0 ELSE 1 END
							--less than equal done to cover IsDeleted in (1,0) for IncludeDeleted...else just IsDeleted = 0
				     OR IsDeleted Is NULL)
			        AND IsSuperUser >= CASE @SuperUsersOnly WHEN 1 THEN 1 ELSE 0 END
				AND ( PortalId = @PortalID OR (@PortalID is null ))
				AND p.IndexId >= @PageLowerBound AND p.IndexId <= @PageUpperBound
		ORDER BY u.DisplayName

		SELECT  TotalRecords = COUNT(*)
		FROM    #PageIndexForUsers
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetUsersByEmail]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUsersByEmail]
	@PortalID  int,
	@EmailToMatch   nvarchar(256),
	@PageIndex      int,
	@PageSize       INT,
	@IncludeDeleted bit,
	@SuperUsersOnly bit		
AS
BEGIN
		-- Set the page bounds
		DECLARE 
			@PageLowerBound INT, 
			@PageUpperBound INT, 
			@RowsToReturn int, 
			@TotalRecords int

		exec {databaseOwner}{objectQualifier}CalculatePagingInformation @PageIndex, @PageSize, @RowsToReturn output, @PageLowerBound output, @PageUpperBound output

		declare @tblPageIndex table (
			IndexId int IDENTITY (0, 1) NOT NULL primary key,
			UserId int
		 )

		if @PortalId is null and @EmailToMatch IS NULL
			begin
				with [UsersByEmail] as (
					SELECT U.*, ROW_NUMBER() OVER (ORDER BY Email ASC) AS ROWID
						FROM    {databaseOwner}{objectQualifier}vw_Users U
						WHERE U.IsDeleted <= CASE @IncludeDeleted WHEN 0 THEN 0 ELSE 1 END
							--less than equal done to cover IsDeleted in (1,0) for IncludeDeleted...else just IsDeleted = 0
							AND U.IsSuperUser >= CASE @SuperUsersOnly WHEN 1 THEN 1 ELSE 0 END
				)
				select *, ROWID - 1 AS IndexID, UserID 
					from [UsersByEmail]
					where ROWID > @PageLowerBound AND ROWID < @PageUpperBound
			end
		else if @PortalId is null and @EmailToMatch IS NOT NULL 
			begin
				with [UsersByEmail] as (
					SELECT U.*, ROW_NUMBER() OVER (ORDER BY Email ASC) AS ROWID
						FROM    {databaseOwner}{objectQualifier}vw_Users U
						WHERE LOWER(U.Email) LIKE LOWER(@EmailToMatch)
							AND U.IsDeleted <= CASE @IncludeDeleted WHEN 0 THEN 0 ELSE 1 END
							AND U.IsSuperUser >= CASE @SuperUsersOnly WHEN 1 THEN 1 ELSE 0 END
					)
					select *, ROWID - 1 AS IndexID, UserID 
						from [UsersByEmail]
						where ROWID > @PageLowerBound AND ROWID < @PageUpperBound
			end
		else if @EmailToMatch IS NULL 
			begin
				with [UsersByEmail] as (
					SELECT U.*, ROW_NUMBER() OVER (ORDER BY Email ASC) AS ROWID
						FROM    {databaseOwner}{objectQualifier}vw_Users U
						WHERE U.PortalId = @PortalID
							AND U.IsDeleted <= CASE @IncludeDeleted WHEN 0 THEN 0 ELSE 1 END
							AND U.IsSuperUser >= CASE @SuperUsersOnly WHEN 1 THEN 1 ELSE 0 END
				)
				select *, ROWID - 1 AS IndexID, UserID 
					from [UsersByEmail]
					where ROWID > @PageLowerBound AND ROWID < @PageUpperBound
		  end
		else
			begin
				with [UsersByEmail] as (
					SELECT U.*, ROW_NUMBER() OVER (ORDER BY Email ASC) AS ROWID
						FROM    {databaseOwner}{objectQualifier}vw_Users U
						WHERE U.PortalId = @PortalID
							AND LOWER(U.Email) LIKE LOWER(@EmailToMatch)
							AND U.IsDeleted <= CASE @IncludeDeleted WHEN 0 THEN 0 ELSE 1 END
							AND U.IsSuperUser >= CASE @SuperUsersOnly WHEN 1 THEN 1 ELSE 0 END
				)
				select *, ROWID - 1 AS IndexID, UserID 
					from [UsersByEmail]
					where ROWID > @PageLowerBound AND ROWID < @PageUpperBound
			end
	 
		if @PortalId is null and @EmailToMatch IS NULL
			begin
				SELECT count(*) as TotalRecords
					FROM    {databaseOwner}{objectQualifier}vw_Users U
					WHERE U.IsDeleted <= CASE @IncludeDeleted WHEN 0 THEN 0 ELSE 1 END
						AND U.IsSuperUser >= CASE @SuperUsersOnly WHEN 1 THEN 1 ELSE 0 END
			end 
		else if @PortalId is null and @EmailToMatch IS NOT NULL 
			begin
				SELECT count(*) as TotalRecords
					FROM    {databaseOwner}{objectQualifier}vw_Users U
					WHERE LOWER(U.Email) LIKE LOWER(@EmailToMatch)
						AND U.IsDeleted <= CASE @IncludeDeleted WHEN 0 THEN 0 ELSE 1 END
						AND U.IsSuperUser >= CASE @SuperUsersOnly WHEN 1 THEN 1 ELSE 0 END
			end 
		else if @EmailToMatch IS NULL 
			begin
				SELECT count(*) as TotalRecords
					FROM    {databaseOwner}{objectQualifier}vw_Users U
					WHERE U.PortalId = @PortalID
						AND U.IsDeleted <= CASE @IncludeDeleted WHEN 0 THEN 0 ELSE 1 END
						AND U.IsSuperUser >= CASE @SuperUsersOnly WHEN 1 THEN 1 ELSE 0 END
			end 
		else 
			begin
				SELECT count(*) as TotalRecords
					FROM    {databaseOwner}{objectQualifier}vw_Users U
					WHERE U.PortalId = @PortalID
						AND LOWER(U.Email) LIKE LOWER(@EmailToMatch)
						AND U.IsDeleted <= CASE @IncludeDeleted WHEN 0 THEN 0 ELSE 1 END
						AND U.IsSuperUser >= CASE @SuperUsersOnly WHEN 1 THEN 1 ELSE 0 END
		end
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetUsersByProfileProperty]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUsersByProfileProperty]
    @PortalID		int,
    @PropertyName   nvarchar(256),
    @PropertyValue  nvarchar(256),
    @PageIndex      int,
    @PageSize       INT,
    @IncludeDeleted bit,
    @SuperUsersOnly bit	
AS
BEGIN
	-- Set the page bounds
	DECLARE @PageLowerBound INT
	DECLARE @PageUpperBound INT
	SET @PageLowerBound = @PageSize * @PageIndex
	SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

	-- Create a temp table TO store the select results
	CREATE TABLE #PageIndexForUsers
	(
		IndexId int IDENTITY (0, 1) NOT NULL,
		UserId int,
		DisplayName varchar(512)
	)

	-- Insert into our temp table
	INSERT INTO #PageIndexForUsers (UserId,DisplayName)
		SELECT DISTINCT U.UserId, U.DisplayName 
		FROM {databaseOwner}{objectQualifier}ProfilePropertyDefinition P
			INNER JOIN {databaseOwner}{objectQualifier}UserProfile     UP ON P.PropertyDefinitionID = UP.PropertyDefinitionID 
			INNER JOIN {databaseOwner}{objectQualifier}Users           U  ON UP.UserID = U.UserID
			INNER JOIN {databaseOwner}{objectQualifier}Lists           DT ON DT.EntryID = P.DataType
			LEFT  JOIN {databaseOwner}{objectQualifier}Lists           L  ON L.ListName = @PropertyName AND L.Value = UP.PropertyValue AND L.Text LIKE @PropertyValue
		WHERE (PropertyName = @PropertyName)
		  AND (PropertyValue LIKE @PropertyValue OR PropertyText LIKE @PropertyValue OR (DT.Value = 'List' AND L.EntryID IS NOT NULL ))
		  AND (IsDeleted <= CASE @IncludeDeleted WHEN 0 THEN 0 ELSE 1 END
						--less than equal done to cover IsDeleted in (1,0) for IncludeDeleted...else just IsDeleted = 0
				    OR IsDeleted Is NULL)
			AND IsSuperUser >= CASE @SuperUsersOnly WHEN 1 THEN 1 ELSE 0 END
			AND (P.Portalid = @PortalID OR (@PortalID is null ))
		ORDER BY U.DisplayName

	SELECT  *
	FROM	{databaseOwner}{objectQualifier}vw_Users u, 
			#PageIndexForUsers p
	WHERE  u.UserId = p.UserId
			AND (IsDeleted <= CASE @IncludeDeleted WHEN 0 THEN 0 ELSE 1 END
						--less than equal done to cover IsDeleted in (1,0) for IncludeDeleted...else just IsDeleted = 0
				    OR IsDeleted Is NULL)
			AND IsSuperUser >= CASE @SuperUsersOnly WHEN 1 THEN 1 ELSE 0 END
			AND ( PortalId = @PortalID OR (@PortalID is null ))
			AND p.IndexId >= @PageLowerBound AND p.IndexId <= @PageUpperBound
		ORDER BY U.DisplayName

	SELECT  TotalRecords = COUNT(*)
	FROM    #PageIndexForUsers
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetUsersByRolename]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUsersByRolename]
	@PortalID	INT,
	@Rolename	NVARCHAR(50)
AS
	DECLARE @UserPortalId INT
	DECLARE @PortalGroupId INT
	SELECT @PortalGroupId = PortalGroupId FROM {databaseOwner}[{objectQualifier}Portals] WHERE PortalID = @PortalID
	IF EXISTS(SELECT PortalGroupID FROM {databaseOwner}[{objectQualifier}PortalGroups] WHERE PortalGroupID = @PortalGroupId)
	BEGIN
		SELECT @UserPortalId = MasterPortalID FROM {databaseOwner}[{objectQualifier}PortalGroups] WHERE PortalGroupID = @PortalGroupId
	END
	ELSE
	BEGIN
		SELECT @UserPortalId = @PortalID
	END
	SELECT     
		U.*, 
		UP.PortalId, 
		UP.Authorised, 
    UP.HasAgreedToTerms,
    UP.HasAgreedToTermsOn,
    UP.RequestsRemoval,
		UP.IsDeleted,
		UP.RefreshRoles,
		UP.VanityUrl
	FROM {databaseOwner}{objectQualifier}UserPortals AS UP 
			RIGHT OUTER JOIN {databaseOwner}{objectQualifier}UserRoles  UR 
			INNER JOIN {databaseOwner}{objectQualifier}Roles R ON UR.RoleID = R.RoleID 
			RIGHT OUTER JOIN {databaseOwner}{objectQualifier}Users AS U ON UR.UserID = U.UserID 
		ON UP.UserId = U.UserID	
	WHERE ( UP.PortalId = @UserPortalId OR @UserPortalId IS Null )
		AND (UP.IsDeleted = 0 OR UP.IsDeleted Is NULL)
		AND (R.RoleName = @Rolename)
		AND (R.PortalId = @PortalID OR @PortalID IS Null )
	ORDER BY U.FirstName + ' ' + U.LastName

GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetUsersByUserName]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUsersByUserName]
    @PortalID		int,
    @UserNameToMatch	nvarchar(256),
    @PageIndex		int,
    @PageSize		INT,
    @IncludeDeleted     bit,
    @SuperUsersOnly     bit		
AS
	BEGIN
		-- Set the page bounds
		DECLARE @PageLowerBound INT
		DECLARE @PageUpperBound INT
		SET @PageLowerBound = @PageSize * @PageIndex
		SET @PageUpperBound = @PageSize - 1 + @PageLowerBound

		-- Create a temp table TO store the select results
		CREATE TABLE #PageIndexForUsers
		(
			IndexId int IDENTITY (0, 1) NOT NULL,
			UserId int
		)

		-- Insert into our temp table
		INSERT INTO #PageIndexForUsers (UserId)
			SELECT UserId FROM	{databaseOwner}{objectQualifier}vw_Users 
			WHERE  Username LIKE @UserNameToMatch
				AND (IsDeleted <= CASE @IncludeDeleted WHEN 0 THEN 0 ELSE 1 END
							--less than equal done to cover IsDeleted in (1,0) for IncludeDeleted...else just IsDeleted = 0
				     OR IsDeleted Is NULL)
			        AND IsSuperUser >= CASE @SuperUsersOnly WHEN 1 THEN 1 ELSE 0 END
				AND ( PortalId = @PortalID OR (@PortalID is null ))
			ORDER BY UserName

		SELECT  *
		FROM	{databaseOwner}{objectQualifier}vw_Users u, 
				#PageIndexForUsers p
		WHERE  u.UserId = p.UserId
				AND (IsDeleted <= CASE @IncludeDeleted WHEN 0 THEN 0 ELSE 1 END
							--less than equal done to cover IsDeleted in (1,0) for IncludeDeleted...else just IsDeleted = 0
				     OR IsDeleted Is NULL)
			        AND IsSuperUser >= CASE @SuperUsersOnly WHEN 1 THEN 1 ELSE 0 END
				AND ( PortalId = @PortalID OR (@PortalID is null ))
				AND p.IndexId >= @PageLowerBound AND p.IndexId <= @PageUpperBound
		ORDER BY u.UserName

		SELECT  TotalRecords = COUNT(*)
		FROM    #PageIndexForUsers
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}GetVocabularies]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetVocabularies] 
AS
	SELECT *
		FROM {databaseOwner}{objectQualifier}Taxonomy_Vocabularies
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}InsertPortalLocalization]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}InsertPortalLocalization]
@PortalID           int,
@CultureCode nvarchar(10),
	@PortalName         nvarchar(128),
	@LogoFile           nvarchar(50),
	@FooterText         nvarchar(100),
	@Description        nvarchar(500),
	@KeyWords           nvarchar(500),
	@BackgroundFile     nvarchar(50),
	@HomeTabId          int,
	@LoginTabId         int,
	@UserTabId          int,
	@AdminTabid			int,
	@SplashTabId          int,
@CreatedByUserID  int
AS
INSERT INTO {databaseOwner}[{objectQualifier}PortalLocalization]
           ([PortalID]
           ,[CultureCode]
           ,[PortalName]
           ,[LogoFile]
           ,[FooterText]
           ,[Description]
           ,[KeyWords]
           ,[BackgroundFile]
           ,[HomeTabId]
           ,[LoginTabId]
           ,[UserTabId]
           ,[AdminTabId]
           ,[SplashTabId]
           ,[CreatedByUserID]
           ,[CreatedOnDate]
           ,[LastModifiedByUserID]
           ,[LastModifiedOnDate])
     VALUES
     (
     @PortalID,
     @CultureCode,
     @PortalName,
	@LogoFile, 
	@FooterText,
	@Description,
	@KeyWords,
	@BackgroundFile,
	@HomeTabId ,
	@LoginTabId ,
	@UserTabId,
	@AdminTabid,
	@SplashTabId  ,
-1,
		getdate(),
		-1,
		getdate()
		)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}InsertSearchStopWords]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}InsertSearchStopWords]
	@StopWords 			nvarchar(MAX),
	@CreatedByUserID 		int,
	@PortalID				int,
	@CultureCode		nvarchar(50)
AS
BEGIN	
	INSERT INTO {databaseOwner}[{objectQualifier}SearchStopWords](
		[StopWords],  
		[CreatedByUserID],  
		[CreatedOnDate],  
		[LastModifiedByUserID],  
		[LastModifiedOnDate],
		[PortalID],
		[CultureCode]
	) VALUES (
		@StopWords,
		@CreatedByUserID,
	    GETUTCDATE(),
		@CreatedByUserID,
		GETUTCDATE(),
		@PortalID,
		@CultureCode
	)	

	SELECT SCOPE_IDENTITY()
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}IsUserInRole]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure {databaseOwner}[{objectQualifier}IsUserInRole]
    
@UserID        int,
@RoleId        int,
@PortalID      int

as

select {databaseOwner}{objectQualifier}UserRoles.UserId,
       {databaseOwner}{objectQualifier}UserRoles.RoleId
from {databaseOwner}{objectQualifier}UserRoles
inner join {databaseOwner}{objectQualifier}Roles on {databaseOwner}{objectQualifier}UserRoles.RoleId = {databaseOwner}{objectQualifier}Roles.RoleId
where  {databaseOwner}{objectQualifier}UserRoles.UserId = @UserID
and    {databaseOwner}{objectQualifier}UserRoles.RoleId = @RoleId
and    {databaseOwner}{objectQualifier}Roles.PortalId = @PortalID
and    ({databaseOwner}{objectQualifier}UserRoles.ExpiryDate >= getdate() or {databaseOwner}{objectQualifier}UserRoles.ExpiryDate is null)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Journal_Comment_Delete]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Comment_Delete]
@JournalId int,
@CommentId int
AS
DELETE FROM {databaseOwner}[{objectQualifier}Journal_Comments] 
	WHERE 
		(JournalId = @JournalId AND CommentId = @CommentId)
		OR
		(JournalId = @JournalId AND CommentId = -1)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Journal_Comment_Get]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Comment_Get]
@CommentId int
AS
SELECT jc.*, u.* FROM {databaseOwner}[{objectQualifier}Journal_Comments] as jc 
	INNER JOIN {databaseOwner}[{objectQualifier}Users] as u ON jc.UserId = u.UserId
WHERE jc.CommentId = @CommentId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Journal_Comment_Like]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Comment_Like]
		@JournalId int,
		@CommentId int,
		@UserId int,
		@UserName nvarchar(50)
	AS
	DECLARE @cxml xml
	SET @cxml = (SELECT CommentXML FROM {databaseOwner}{objectQualifier}Journal_Comments WHERE CommentId = @CommentId AND JournalId = @JournalId)
	IF @cxml IS NULL OR @cxml.exist('/root') = 0
		BEGIN
		DECLARE @x xml
			SET @x = '<root></root>';
			UPDATE {databaseOwner}{objectQualifier}Journal_Comments
				SET CommentXML = @x
				WHERE JournalId = @JournalId AND CommentId = @CommentId
		END
	IF EXISTS(SELECT CommentId
				FROM {databaseOwner}{objectQualifier}Journal_Comments
				WHERE JournalId = @JournalId AND CommentId = @CommentId
				AND CommentXML.exist('/root/likes/u[@uid=sql:variable("@userid")]') = 1)
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}Journal_Comments
				SET CommentXML.modify('delete (/root/likes/u[@uid=sql:variable("@UserId")])')
				WHERE JournalId = @JournalId AND CommentId = @CommentId
				AND CommentXML.exist('/root/likes/u[@uid=sql:variable("@UserId")]') = 1
		END
	ELSE
		BEGIN
			BEGIN
				IF NOT EXISTS(SELECT CommentId FROM {databaseOwner}{objectQualifier}Journal_Comments
								WHERE JournalId = @JournalId AND CommentId = @CommentID
								AND CommentXML.exist('/root/likes') = 1)
					BEGIN
						UPDATE {databaseOwner}{objectQualifier}Journal_Comments
						SET CommentXML.modify('insert <likes /> as last into (/root)[1]') 
						WHERE JournalId = @JournalId AND CommentId = @CommentId AND CommentXML.exist('/root') = 1
					END
			END
			BEGIN
				UPDATE {databaseOwner}{objectQualifier}Journal_Comments
				SET CommentXML.modify('insert <u uid="{xs:string(sql:variable("@UserId"))}" un="{xs:string(sql:variable("@UserName"))}" /> as last into (/root/likes)[1]')
				WHERE JournalId = @JournalId AND CommentId = @CommentId AND CommentXML.exist('/root/likes') = 1
			END
		END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Journal_Comment_List]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Comment_List]
@JournalId int
AS
SELECT jc.*, u.* FROM {databaseOwner}[{objectQualifier}Journal_Comments] as jc 
	INNER JOIN {databaseOwner}[{objectQualifier}Users] as u ON jc.UserId = u.UserId
WHERE jc.JournalId = @JournalId
ORDER BY jc.CommentId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Journal_Comment_ListByJournalIds]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Comment_ListByJournalIds]
@JounalIds nvarchar(max) = ''
AS
SELECT jc.*, u.* FROM {databaseOwner}[{objectQualifier}Journal_Comments] as jc 
	INNER JOIN {databaseOwner}[{objectQualifier}Users] as u ON jc.UserId = u.UserId
	INNER JOIN {databaseOwner}[{objectQualifier}Journal_Split](@JounalIds,';') as j ON j.id = jc.JournalId
ORDER BY jc.CommentId ASC
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Journal_Comment_Save]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Comment_Save]
	@JournalId int,
	@CommentId int,
	@UserId int,
	@Comment nvarchar(max),
	@CommentXML xml,
	@DateUpdated datetime
AS

DECLARE @cxml xml
DECLARE @xml xml
DECLARE @cdataComment nvarchar(max)

IF EXISTS(SELECT * FROM {databaseOwner}[{objectQualifier}Journal_Comments] WHERE JournalId = @JournalId AND CommentId = @CommentId)
BEGIN
	IF (LEN(@Comment) < 2000)
	BEGIN
		UPDATE {databaseOwner}[{objectQualifier}Journal_Comments]
		SET Comment = @Comment,
			CommentXML = @CommentXML,
			DateUpdated = IsNull(@DateUpdated, GETUTCDATE())
		WHERE JournalId = @JournalId AND CommentId = @CommentId
	END
	ELSE
	BEGIN		
		IF @CommentXML IS NULL
			SET @cxml = '<root></root>';
		ELSE
			SET @cxml = @CommentXML

		IF NOT(@cxml.exist('/root/comment') = 1)
			SET @cxml.modify('insert <comment>NULL</comment> as last into (/root)[1]') 

		SET @cdataComment = '<![CDATA[' + @Comment + ']]>'
		SET @cxml.modify('replace value of (/root/comment[1]/text())[1] with sql:variable("@cdataComment")')
		
		UPDATE {databaseOwner}[{objectQualifier}Journal_Comments]
		SET CommentXML = @cxml,
			Comment = NULL,
			DateUpdated = IsNull(@DateUpdated, GETUTCDATE())
		WHERE JournalId = @JournalId AND CommentId = @CommentId
	END
END
ELSE
BEGIN
	IF (LEN(@Comment) < 2000)
	BEGIN
		INSERT INTO {databaseOwner}[{objectQualifier}Journal_Comments]
			(JournalId, UserId, Comment, CommentXML, DateCreated, DateUpdated)
			VALUES
			(@JournalId, @UserId, @Comment, @CommentXML, GETUTCDATE(), GETUTCDATE())
		SET @CommentId = SCOPE_IDENTITY()
	END
	ELSE
	BEGIN
		IF @CommentXML IS NULL
			SET @cxml = '<root></root>';
		ELSE
			SET @cxml = @CommentXML

		IF NOT(@cxml.exist('/root/comment') = 1)
			SET @cxml.modify('insert <comment>NULL</comment> as last into (/root)[1]') 

		SET @cdataComment = '<![CDATA[' + @Comment + ']]>'
		SET @cxml.modify('replace value of (/root/comment[1]/text())[1] with sql:variable("@cdataComment")')
		
		INSERT INTO {databaseOwner}[{objectQualifier}Journal_Comments]
			(JournalId, UserId, Comment, CommentXML, DateCreated, DateUpdated)
			VALUES
			(@JournalId, @UserId, NULL, @cxml, GETUTCDATE(), GETUTCDATE())
		SET @CommentId = SCOPE_IDENTITY()
	END		
END
SELECT @CommentId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Journal_Comments_ToggleDisable]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Comments_ToggleDisable]
@PortalId int,
@JournalId int,
@Disabled bit
AS
UPDATE {databaseOwner}[{objectQualifier}Journal]
	SET CommentsDisabled = @Disabled
	WHERE PortalId = @PortalId AND JournalId = @JournalId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Journal_Comments_ToggleHidden]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Comments_ToggleHidden]
@PortalId int,
@JournalId int,
@Hidden bit
AS
UPDATE {databaseOwner}[{objectQualifier}Journal]
	SET CommentsHidden = @Hidden
	WHERE PortalId = @PortalId AND JournalId = @JournalId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Journal_Delete]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Delete]
	@JournalId int,
	@SoftDelete int = 0
	AS

	-- Hard Delete
	IF @SoftDelete <> 1 
	BEGIN
		DELETE FROM {databaseOwner}[{objectQualifier}Journal_Security] WHERE JournalId = @JournalId
		DELETE FROM {databaseOwner}[{objectQualifier}Journal_Comments] WHERE JournalId = @JournalId
		DELETE FROM {databaseOwner}[{objectQualifier}Journal] WHERE JournalId = @JournalId
	END

	-- Soft Delete
	IF @SoftDelete = 1 
	BEGIN
		UPDATE {databaseOwner}[{objectQualifier}Journal] SET IsDeleted = 1 WHERE JournalId = @JournalId
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Journal_DeleteByGroupId]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_DeleteByGroupId]
	@PortalId int,
	@GroupId int,
	@SoftDelete int = 0
	AS

	-- Hard Delete
	IF @SoftDelete <> 1 
	BEGIN
		DELETE {databaseOwner}[{objectQualifier}Journal_Security] 
		FROM {databaseOwner}[{objectQualifier}Journal_Security] as js  INNER JOIN {databaseOwner}[{objectQualifier}Journal] as j 
		   ON js.JournalId = j.JournalId
		WHERE j.PortalId = @PortalId AND j.GroupId = @GroupId AND @GroupId > 0 AND j.GroupId IS NOT NULL

		DELETE {databaseOwner}[{objectQualifier}Journal_Comments] 
		FROM {databaseOwner}[{objectQualifier}Journal_Comments] as jc  INNER JOIN {databaseOwner}[{objectQualifier}Journal] as j 
		   ON jc.JournalId = j.JournalId
		WHERE j.PortalId = @PortalId AND j.GroupId = @GroupId AND @GroupId > 0 AND j.GroupId IS NOT NULL

		DELETE FROM {databaseOwner}[{objectQualifier}Journal] WHERE PortalId = @PortalId AND GroupId = @GroupId AND @GroupId > 0 AND GroupId IS NOT NULL
	END

	-- Soft Delete
	IF @SoftDelete = 1 
	BEGIN
		UPDATE {databaseOwner}[{objectQualifier}Journal] SET IsDeleted = 1 WHERE PortalId = @PortalId AND GroupId = @GroupId AND @GroupId > 0 AND GroupId IS NOT NULL
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Journal_DeleteByKey]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_DeleteByKey]
	@PortalId int,
	@ObjectKey nvarchar(255),
	@SoftDelete int = 0
	AS
	DECLARE @JournalId int
	SET @JournalId = (SELECT JournalId FROM {databaseOwner}[{objectQualifier}Journal] WHERE PortalId = @PortalId AND ObjectKey = @ObjectKey AND @ObjectKey <> '' AND ObjectKey IS NOT NULL)

	-- Hard Delete
	IF @JournalId > 0 AND @SoftDelete <> 1 
	BEGIN
		DELETE FROM {databaseOwner}[{objectQualifier}Journal_Security] WHERE JournalId = @JournalId
		DELETE FROM {databaseOwner}[{objectQualifier}Journal_Comments] WHERE JournalId = @JournalId
		DELETE FROM {databaseOwner}[{objectQualifier}Journal] WHERE JournalId = @JournalId
	END

	-- Soft Delete
	IF @JournalId > 0 AND @SoftDelete = 1 
	BEGIN
		UPDATE {databaseOwner}[{objectQualifier}Journal] SET IsDeleted = 1 WHERE JournalId = @JournalId
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Journal_Get]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Get]
    @PortalId INT,
    @CurrentUserId INT,
    @JournalId INT,
    @IncludeAllItems INT = 0,
    @IsDeleted INT = 0,
    @SecurityCheck BIT = 0
    AS
    DECLARE @RegisteredRoleId INT
    DECLARE @PermissionCheck INT
    SELECT  @RegisteredRoleId = RegisteredRoleId FROM {databaseOwner}[{objectQualifier}Portals] WHERE PortalID = @PortalId
    SET @PermissionCheck = 1
    IF (@SecurityCheck = 1 AND NOT EXISTS(SELECT js.JournalId FROM {databaseOwner}[{objectQualifier}Journal_Security] js
		INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@CurrentUserId, @RegisteredRoleId) as t ON t.seckey = js.SecurityKey
		WHERE js.JournalId = @JournalId))
    BEGIN
		-- access denied when security check is required but the key was not found
		SET @PermissionCheck = 0
    END
	
    SELECT  	j.JournalId, 
				j.JournalTypeId, 
				j.Title, 
				j.Summary, 
				j.UserId, 
				j.DateCreated, 
				j.DateUpdated, 
				j.PortalId,
				j.ProfileId, 
				j.GroupId, 
				j.ObjectKey, 
				j.AccessKey,
				'JournalOwner' = '<entity><id>' + CAST(p.UserId as nvarchar(150)) + '</id><name><![CDATA[' + p.DisplayName + ']]></name></entity>',
				'JournalAuthor' = CASE WHEN ISNULL(a.UserId, -1) > 0 THEN '<entity><id>' + CAST(a.UserId as nvarchar(150)) + '</id><name><![CDATA[' + a.DisplayName + ']]></name></entity>' ELSE '' END,
				'JournalOwnerId' = ISNULL(j.ProfileId,j.UserId),
				jt.Icon, 
				jt.JournalType,
				'Profile' = CASE WHEN j.ProfileId > 0 THEN '<entity><id>' + CAST(p.UserID as nvarchar(150)) + '</id><name><![CDATA[' + p.DisplayName + ']]></name><vanity></vanity></entity>' ELSE '' END,
				'SimilarCount' = (SELECT COUNT(JournalId) FROM {databaseOwner}{objectQualifier}Journal WHERE ContentItemId = j.ContentItemId AND JournalTypeId = j.JournalTypeId),
				jd.JournalXML, 
				ContentItemId, 
				j.ItemData, 
				j.IsDeleted, 
				j.CommentsDisabled, 
				j.CommentsHidden
    FROM  	    {databaseOwner}[{objectQualifier}Journal] AS j
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_Types] as jt ON jt.JournalTypeId = j.JournalTypeId
				LEFT JOIN {databaseOwner}[{objectQualifier}Journal_Data] as jd on jd.JournalId = j.JournalId 
				LEFT JOIN {databaseOwner}[{objectQualifier}Users] AS p ON j.ProfileId = p.UserID 
				LEFT JOIN {databaseOwner}[{objectQualifier}Users] AS a ON j.UserId = a.UserID
    WHERE		@PermissionCheck = 1 AND
				((@IncludeAllItems = 0) AND (j.JournalId = @JournalId AND j.IsDeleted = @IsDeleted)) OR 
				((@IncludeAllItems = 1) AND (j.JournalId = @JournalId))
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Journal_GetByKey]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_GetByKey]
	@PortalId INT,
	@ObjectKey NVARCHAR(255),
	@IncludeAllItems INT = 0,
	@IsDeleted INT = 0
	AS
	SELECT     j.JournalId, j.JournalTypeId, j.Title, j.Summary, j.UserId, j.DateCreated, j.DateUpdated, j.PortalId,
				j.ProfileId, j.GroupId, j.ObjectKey, j.AccessKey,
				"JournalOwner" = '<entity><id>' + CAST(p.UserId as nvarchar(150)) + '</id><name><![CDATA[' + p.DisplayName + ']]></name></entity>',
				"JournalAuthor" = CASE WHEN ISNULL(a.UserId,-1) >0 THEN '<entity><id>' + CAST(a.UserId as nvarchar(150)) + '</id><name><![CDATA[' + a.DisplayName + ']]></name></entity>' ELSE '' END,
				"JournalOwnerId" = ISNULL(j.ProfileId,j.UserId),
				 jt.Icon, jt.JournalType,
				"Profile" = CASE WHEN j.ProfileId > 0 THEN '<entity><id>' + CAST(p.UserID as nvarchar(150)) + '</id><name><![CDATA[' + p.DisplayName + ']]></name><vanity></vanity></entity>' ELSE '' END,
				"SimilarCount" = (SELECT COUNT(JournalId) FROM {databaseOwner}{objectQualifier}Journal WHERE ContentItemId = j.ContentItemId AND JournalTypeId = j.JournalTypeId),
				jd.JournalXML, ContentItemId, j.ItemData, j.IsDeleted, j.CommentsDisabled, j.CommentsHidden
	FROM       	{databaseOwner}[{objectQualifier}Journal] AS j INNER JOIN
				{databaseOwner}[{objectQualifier}Journal_Types] as jt ON jt.JournalTypeId = j.JournalTypeId LEFT OUTER JOIN
				{databaseOwner}[{objectQualifier}Journal_Data] as jd on jd.JournalId = j.JournalId LEFT OUTER JOIN
				{databaseOwner}[{objectQualifier}Users] AS p ON j.ProfileId = p.UserID LEFT OUTER JOIN
				{databaseOwner}[{objectQualifier}Users] AS a ON j.UserId = a.UserID
	WHERE		((@IncludeAllItems = 0) AND (j.ObjectKey = @ObjectKey AND j.ObjectKey IS NOT NULL AND @ObjectKey <> '' AND j.IsDeleted = @IsDeleted)) 
				OR 
				((@IncludeAllItems = 1) AND (j.ObjectKey = @ObjectKey AND j.ObjectKey IS NOT NULL AND @ObjectKey <> ''))
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Journal_GetStatsForGroup]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_GetStatsForGroup]
	@PortalId INT,
	@GroupId INT
AS
SELECT Count(j.JournalTypeId) as JournalTypeCount, 
	   jt.JournalType 
	   FROM {databaseOwner}[{objectQualifier}Journal] AS j 
	   INNER JOIN {databaseOwner}[{objectQualifier}Journal_Types] AS jt ON jt.JournalTypeId = j.JournalTypeId
	WHERE j.GroupId = @GroupId AND j.PortalId = @PortalId AND j.IsDeleted = 0
	Group BY j.JournalTypeId, jt.JournalType
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Journal_Like]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Like]
@JournalId int,
@UserId int,
@UserName nvarchar(50)
AS 
IF NOT EXISTS (SELECT JournalId from {databaseOwner}[{objectQualifier}Journal_Data] WHERE JournalId = @JournalId)
	BEGIN
		DECLARE @x xml
		SET @x = '<items><item /></items>';
		INSERT INTO {databaseOwner}[{objectQualifier}Journal_Data] 
			(JournalId, JournalXML)
			VALUES
			(@JournalId, @x)
	END
IF EXISTS(SELECT j.JournalId 
			FROM {databaseOwner}{objectQualifier}Journal as j INNER JOIN
				{databaseOwner}{objectQualifier}Journal_Data as jx ON j.JournalId = jx.JournalId 
			WHERE j.JournalId = @JournalId 
				AND 
				jx.journalxml.exist('/items/likes/u[@uid=sql:variable("@userid")]') = 1)
BEGIN
UPDATE {databaseOwner}{objectQualifier}Journal_Data
SET JournalXML.modify('delete (/items/likes/u[@uid=sql:variable("@UserId")])')
WHERE JournalId = @JournalId 
	AND journalxml.exist('/items/likes/u[@uid=sql:variable("@UserId")]') = 1
END
ELSE
	BEGIN
		BEGIN
			IF NOT EXISTS(SELECT JournalId FROM {databaseOwner}{objectQualifier}Journal_Data
							WHERE JournalId = @JournalId 
									AND
								journalxml.exist('/items/likes') = 1)
				BEGIN
					UPDATE {databaseOwner}{objectQualifier}Journal_Data
					SET JournalXML.modify('insert <likes /> as last into (/items)[1]') 
					WHERE JournalId = @JournalId AND journalxml.exist('/items') = 1
				END
		END
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}Journal_Data
			SET JournalXML.modify('insert <u uid="{xs:string(sql:variable("@UserId"))}" un="{xs:string(sql:variable("@UserName"))}" /> as last into (/items/likes)[1]')
			Where JournalId = @JournalId AND journalxml.exist('/items/likes') = 1
		END
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Journal_LikeList]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_LikeList]
@PortalId int,
@JournalId int
AS
DECLARE @xdoc xml
set @xdoc = (SELECT journalxml.query('//likes') 
				from {databaseOwner}[{objectQualifier}Journal_Data] as jd
				INNER JOIN {databaseOwner}[{objectQualifier}Journal] as j ON j.JournalId = jd.JournalId
				 WHERE j.JournalId = @JournalId AND j.PortalId = @PortalId)
Select u.UserId, u.DisplayName,u.FirstName,u.LastName,u.Email,u.Username 
	FROM @xdoc.nodes('/likes//u') as e(x) 
CROSS APPLY {databaseOwner}[{objectQualifier}Users] as u
WHERE u.UserID = x.value('@uid[1]','int')
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Journal_ListForGroup]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_ListForGroup]
	@PortalId int,
	@ModuleId int,
	@CurrentUserId int,
	@GroupId int,
	@RowIndex int,
	@MaxRows int,
	@IncludeAllItems int = 0,
	@IsDeleted int = 0
	AS
	DECLARE @EndRow int
	SET @EndRow = @RowIndex + @MaxRows;
		DECLARE @j TABLE(id int IDENTITY, journalid int, datecreated datetime)
	IF EXISTS(SELECT * from {databaseOwner}[{objectQualifier}Journal_TypeFilters] WHERE ModuleId = @ModuleId)
	INSERT INTO @j 
		SELECT j.journalid, jt.datecreated from (
			SELECT DISTINCT js.JournalId from {databaseOwner}[{objectQualifier}Journal] as j
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_Security] as js ON js.JournalId = j.JournalId
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@CurrentUserId ,1) as t 
					ON t.seckey = js.SecurityKey AND (js.SecurityKey = 'R' + CAST(@GroupId as nvarchar(100)) OR js.SecurityKey = 'E')
					WHERE j.PortalId = @PortalId
			) as j INNER JOIN {databaseOwner}[{objectQualifier}Journal] jt ON jt.JournalId = j.JournalId AND jt.PortalId = @PortalId AND jt.GroupId = @GroupId
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_TypeFilters] as jf ON jf.JournalTypeId = jt.JournalTypeId AND jf.ModuleId = @ModuleId
			ORDER BY jt.DateCreated DESC, jt.JournalId DESC;
	ELSE
	INSERT INTO @j 
		SELECT j.journalid, jt.datecreated from (
			SELECT DISTINCT js.JournalId from {databaseOwner}[{objectQualifier}Journal] as j
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_Security] as js ON js.JournalId = j.JournalId
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@CurrentUserId ,1) as t 
					ON t.seckey = js.SecurityKey AND (js.SecurityKey = 'R' + CAST(@GroupId as nvarchar(100)) OR js.SecurityKey = 'E')
					WHERE j.PortalId = @PortalId
			) as j INNER JOIN {databaseOwner}[{objectQualifier}Journal] jt ON jt.JournalId = j.JournalId AND jt.PortalId = @PortalId AND jt.GroupId = @GroupId
			ORDER BY jt.DateCreated DESC, jt.JournalId DESC;
	WITH journalItems  AS
	(
		SELECT	j.JournalId,
				ROW_NUMBER() OVER (ORDER BY j.JournalId DESC) AS RowNumber
		FROM	{databaseOwner}[{objectQualifier}Journal] as j INNER JOIN @j as jtmp ON jtmp.JournalId = j.JournalId
		WHERE j.PortalId = @PortalId
		AND (((@IncludeAllItems = 0) AND (j.IsDeleted = @IsDeleted)) 
		OR (@IncludeAllItems = 1))
	)
	SELECT	j.JournalId, j.JournalTypeId, j.Title, j.Summary, j.UserId, j.DateCreated, j.DateUpdated, j.PortalId,
				j.ProfileId, j.GroupId, j.ObjectKey, j.AccessKey,
				"JournalOwner" = '<entity><id>' + CAST(r.RoleId as nvarchar(150)) + '</id><name><![CDATA[' + r.RoleName + ']]></name></entity>',
				"JournalAuthor" = CASE WHEN ISNULL(a.UserId,-1) >0 THEN '<entity><id>' + CAST(a.UserId as nvarchar(150)) + '</id><name><![CDATA[' + a.DisplayName + ']]></name></entity>' ELSE '' END,
				"JournalOwnerId" = ISNULL(j.ProfileId,j.UserId),
				 jt.Icon, jt.JournalType,
				"Profile" = CASE WHEN j.ProfileId > 0 THEN '<entity><id>' + CAST(p.UserID as nvarchar(150)) + '</id><name><![CDATA[' + p.DisplayName + ']]></name><vanity></vanity></entity>' ELSE '' END,
				"SimilarCount" = (SELECT COUNT(JournalId) FROM {databaseOwner}{objectQualifier}Journal WHERE ContentItemId = j.ContentItemId AND JournalTypeId = j.JournalTypeId),
				jd.JournalXML, j.ContentItemId, j.ItemData, RowNumber, j.IsDeleted, j.CommentsDisabled, j.CommentsHidden
	FROM	journalItems as ji INNER JOIN 
		{databaseOwner}[{objectQualifier}Journal] as j ON j.JournalId = ji.JournalId INNER JOIN
		{databaseOwner}[{objectQualifier}Journal_Types] as jt ON jt.JournalTypeId = j.JournalTypeId INNER JOIN
		{databaseOwner}[{objectQualifier}Roles] as r ON j.GroupId = r.RoleId LEFT OUTER JOIN
				{databaseOwner}[{objectQualifier}Journal_Data] as jd on jd.JournalId = j.JournalId LEFT OUTER JOIN
				{databaseOwner}[{objectQualifier}Users] AS p ON j.ProfileId = p.UserID LEFT OUTER JOIN
				{databaseOwner}[{objectQualifier}Users] AS a ON j.UserId = a.UserID
	WHERE		((@IncludeAllItems = 0) AND (RowNumber BETWEEN @RowIndex AND @EndRow AND j.IsDeleted = @IsDeleted)) 
				OR 
				((@IncludeAllItems = 1) AND (RowNumber BETWEEN @RowIndex AND @EndRow))
	ORDER BY RowNumber ASC;
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Journal_ListForProfile]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_ListForProfile]
	@PortalId int,
	@ModuleId int,
	@CurrentUserId int,
	@ProfileId int,
	@RowIndex int,
	@MaxRows int,
	@IncludeAllItems int = 0,
	@IsDeleted int = 0
	AS
	DECLARE @EndRow int
	SET @EndRow = @RowIndex + @MaxRows;
	DECLARE @j TABLE(id int IDENTITY, journalid int, datecreated datetime)
	IF EXISTS(SELECT * from {databaseOwner}[{objectQualifier}Journal_TypeFilters] WHERE ModuleId = @ModuleId)
	INSERT INTO @j 
		SELECT j.journalid, jt.datecreated from (
			SELECT DISTINCT js.JournalId from {databaseOwner}[{objectQualifier}Journal] as j
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_Security] as js ON js.JournalId = j.JournalId
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@CurrentUserId ,1) as t ON t.seckey = js.SecurityKey
				WHERE j.ProfileId = @ProfileId AND j.PortalId = @PortalId
			) as j INNER JOIN {databaseOwner}[{objectQualifier}Journal] jt ON jt.JournalId = j.JournalId AND jt.PortalId = @PortalId
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_TypeFilters] as jf ON jf.JournalTypeId = jt.JournalTypeId AND jf.ModuleId = @ModuleId
			ORDER BY jt.DateCreated DESC, jt.JournalId DESC;
	ELSE
	INSERT INTO @j 
		SELECT j.journalid, jt.datecreated from (
			SELECT DISTINCT js.JournalId from {databaseOwner}[{objectQualifier}Journal] as j
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_Security] as js ON js.JournalId = j.JournalId
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@CurrentUserId ,1) as t ON t.seckey = js.SecurityKey
				WHERE j.ProfileId = @ProfileId AND j.PortalId = @PortalId
			) as j INNER JOIN {databaseOwner}[{objectQualifier}Journal] jt ON jt.JournalId = j.JournalId AND jt.PortalId = @PortalId
			ORDER BY jt.DateCreated DESC, jt.JournalId DESC;
	WITH journalItems  AS
	(
		SELECT	j.JournalId,
				ROW_NUMBER() OVER (ORDER BY j.JournalId DESC) AS RowNumber
		FROM	{databaseOwner}[{objectQualifier}Journal] as j INNER JOIN @j as jtmp ON jtmp.JournalId = j.JournalId
		WHERE j.PortalId = @PortalId AND j.ProfileId = @ProfileId 
        AND (((@IncludeAllItems = 0) AND (j.IsDeleted = @IsDeleted)) 
		OR (@IncludeAllItems = 1))
	)
	SELECT	j.JournalId, j.JournalTypeId, j.Title, j.Summary, j.UserId, j.DateCreated, j.DateUpdated, j.PortalId,
				j.ProfileId, j.GroupId, j.ObjectKey, j.AccessKey,
				"JournalOwner" = '<entity><id>' + CAST(p.UserId as nvarchar(150)) + '</id><name><![CDATA[' + p.DisplayName + ']]></name></entity>',
				"JournalAuthor" = CASE WHEN ISNULL(a.UserId,-1) >0 THEN '<entity><id>' + CAST(a.UserId as nvarchar(150)) + '</id><name><![CDATA[' + a.DisplayName + ']]></name></entity>' ELSE '' END,
				"JournalOwnerId" = ISNULL(j.ProfileId,j.UserId),
				 jt.Icon, jt.JournalType,
				"Profile" = CASE WHEN j.ProfileId > 0 THEN '<entity><id>' + CAST(p.UserID as nvarchar(150)) + '</id><name><![CDATA[' + p.DisplayName + ']]></name><vanity></vanity></entity>' ELSE '' END,
				"SimilarCount" = (SELECT COUNT(JournalId) FROM {databaseOwner}{objectQualifier}Journal WHERE ContentItemId = j.ContentItemId AND JournalTypeId = j.JournalTypeId),
				jd.JournalXML, j.ContentItemId, j.ItemData, RowNumber, j.IsDeleted, j.CommentsDisabled, j.CommentsHidden
	FROM	journalItems as ji INNER JOIN 
		{databaseOwner}[{objectQualifier}Journal] as j ON j.JournalId = ji.JournalId INNER JOIN
	{databaseOwner}[{objectQualifier}Journal_Types] as jt ON jt.JournalTypeId = j.JournalTypeId LEFT OUTER JOIN
				{databaseOwner}[{objectQualifier}Journal_Data] as jd on jd.JournalId = j.JournalId LEFT OUTER JOIN
				{databaseOwner}[{objectQualifier}Users] AS p ON j.ProfileId = p.UserID LEFT OUTER JOIN
				{databaseOwner}[{objectQualifier}Users] AS a ON j.UserId = a.UserID
	WHERE	((@IncludeAllItems = 0) AND (RowNumber BETWEEN @RowIndex AND @EndRow AND j.IsDeleted = @IsDeleted)) 
			OR 
			((@IncludeAllItems = 1) AND (RowNumber BETWEEN @RowIndex AND @EndRow))	
	ORDER BY RowNumber ASC;
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Journal_ListForSummary]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_ListForSummary]
	@PortalId int,
	@ModuleId int,
	@CurrentUserId int,
	@RowIndex int,
	@MaxRows int,
	@IncludeAllItems int = 0,
	@IsDeleted int = 0	
	AS
	IF @RowIndex = 0
	BEGIN
		SET @RowIndex = 1
	END
	DECLARE @EndRow int
	SET @EndRow = @RowIndex + @MaxRows - 1;
	DECLARE @j TABLE(id int IDENTITY, journalid int, datecreated datetime)
	IF EXISTS(SELECT * from {databaseOwner}[{objectQualifier}Journal_TypeFilters] WHERE ModuleId = @ModuleId)
	INSERT INTO @j 
		SELECT j.journalid, jt.datecreated from (
			SELECT DISTINCT js.JournalId from {databaseOwner}[{objectQualifier}Journal] as j
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_Security] as js ON js.JournalId = j.JournalId
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@CurrentUserId ,1) as t ON t.seckey = js.SecurityKey
				WHERE j.PortalId = @PortalId
			) as j INNER JOIN {databaseOwner}[{objectQualifier}Journal] jt ON jt.JournalId = j.JournalId AND jt.PortalId = @PortalId
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_TypeFilters] as jf ON jf.JournalTypeId = jt.JournalTypeId AND jf.ModuleId = @ModuleId
			ORDER BY jt.DateCreated DESC, jt.JournalId DESC;
	ELSE
	INSERT INTO @j 
		SELECT j.journalid, jt.datecreated from (
			SELECT DISTINCT js.JournalId from {databaseOwner}[{objectQualifier}Journal] as j
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_Security] as js ON js.JournalId = j.JournalId
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@CurrentUserId ,1) as t ON t.seckey = js.SecurityKey
				WHERE j.PortalId = @PortalId
			) as j INNER JOIN {databaseOwner}[{objectQualifier}Journal] jt ON jt.JournalId = j.JournalId AND jt.PortalId = @PortalId
			ORDER BY jt.DateCreated DESC, jt.JournalId DESC;
	WITH journalItems  AS
	(
		SELECT	j.JournalId,
				ROW_NUMBER() OVER (ORDER BY j.JournalId DESC) AS RowNumber
		FROM	{databaseOwner}[{objectQualifier}Journal] as j INNER JOIN @j as jtmp ON jtmp.JournalId = j.JournalId
		WHERE j.PortalId = @PortalId 
        AND (((@IncludeAllItems = 0) AND (j.IsDeleted = @IsDeleted)) 
		OR (@IncludeAllItems = 1))
	)
	SELECT	j.JournalId, j.JournalTypeId, j.Title, j.Summary, j.UserId, j.DateCreated, j.DateUpdated, j.PortalId,
				j.ProfileId, j.GroupId, j.ObjectKey, j.AccessKey,
				"JournalOwner" = '<entity><id>' + CAST(p.UserId as nvarchar(150)) + '</id><name><![CDATA[' + p.DisplayName + ']]></name></entity>',
				"JournalAuthor" = CASE WHEN ISNULL(a.UserId,-1) >0 THEN '<entity><id>' + CAST(a.UserId as nvarchar(150)) + '</id><name><![CDATA[' + a.DisplayName + ']]></name></entity>' ELSE '' END,
				"JournalOwnerId" = ISNULL(j.ProfileId,j.UserId),
				 jt.Icon, jt.JournalType,
				"Profile" = CASE WHEN j.ProfileId > 0 THEN '<entity><id>' + CAST(p.UserID as nvarchar(150)) + '</id><name><![CDATA[' + p.DisplayName + ']]></name><vanity></vanity></entity>' ELSE '' END,
				"SimilarCount" = (SELECT COUNT(JournalId) FROM {databaseOwner}{objectQualifier}Journal WHERE ContentItemId = j.ContentItemId AND JournalTypeId = j.JournalTypeId),
				jd.JournalXML, j.ContentItemId, j.ItemData, RowNumber, j.IsDeleted, j.CommentsDisabled, j.CommentsHidden
	FROM	journalItems as ji INNER JOIN 
		{databaseOwner}[{objectQualifier}Journal] as j ON j.JournalId = ji.JournalId INNER JOIN
	{databaseOwner}[{objectQualifier}Journal_Types] as jt ON jt.JournalTypeId = j.JournalTypeId LEFT OUTER JOIN
				{databaseOwner}[{objectQualifier}Journal_Data] as jd on jd.JournalId = j.JournalId LEFT OUTER JOIN
				{databaseOwner}[{objectQualifier}Users] AS p ON j.ProfileId = p.UserID LEFT OUTER JOIN
				{databaseOwner}[{objectQualifier}Users] AS a ON j.UserId = a.UserID
	WHERE	((@IncludeAllItems = 0) AND (RowNumber BETWEEN @RowIndex AND @EndRow AND j.IsDeleted = @IsDeleted)) 
			OR 
			((@IncludeAllItems = 1) AND (RowNumber BETWEEN @RowIndex AND @EndRow ))
	ORDER BY RowNumber ASC;
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Journal_Save]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Save]
@PortalId int,
@JournalId int,
@JournalTypeId int,
@UserId int,
@ProfileId int,
@GroupId int,
@Title nvarchar(255),
@Summary nvarchar(2000),
@ItemData nvarchar(2000),
@JournalXML xml,
@ObjectKey nvarchar(255),
@AccessKey uniqueidentifier,
@SecuritySet nvarchar(2000),
@CommentsDisabled bit,
@CommentsHidden bit
AS
INSERT INTO {databaseOwner}[{objectQualifier}Journal]
	(JournalTypeId, UserId, DateCreated, DateUpdated, PortalId, ProfileId, GroupId,Title,Summary, ObjectKey, AccessKey, ItemData, CommentsHidden, CommentsDisabled)
	VALUES
	(@JournalTypeId, @UserId, GETUTCDATE(), GETUTCDATE(), @PortalId, @ProfileId, @GroupId, @Title, @Summary, @ObjectKey, @AccessKey, @ItemData, @CommentsHidden, @CommentsDisabled)
SET @JournalId = SCOPE_IDENTITY()
BEGIN
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Security]
	(JournalId, SecurityKey) 
	SELECT @JournalId, string from {databaseOwner}[{objectQualifier}Journal_SplitText](@SecuritySet,',')
END
IF @JournalXML IS NOT NULL
BEGIN
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Data]
	(JournalId, JournalXML)
	VALUES
	(@JournalId, @JournalXML)
END
SELECT @JournalId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Journal_TypeFilters_Delete]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_TypeFilters_Delete]
@PortalId int,
@ModuleId int
AS
DELETE FROM {databaseOwner}[{objectQualifier}Journal_TypeFilters] WHERE PortalId = @PortalId AND ModuleId=@ModuleId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Journal_TypeFilters_List]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_TypeFilters_List]
@PortalId int,
@ModuleId int
AS
SELECT jt.JournalTypeId, jt.JournalType from {databaseOwner}[{objectQualifier}Journal_Types] as jt INNER JOIN
	{databaseOwner}[{objectQualifier}Journal_TypeFilters] as jf ON jf.JournalTypeId = jt.JournalTypeId
WHERE jt.PortalId = @PortalId AND jf.ModuleId = @ModuleId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Journal_TypeFilters_Save]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_TypeFilters_Save]
@PortalId int,
@ModuleId int,
@JournalTypeId int
AS
INSERT INTO {databaseOwner}[{objectQualifier}Journal_TypeFilters] 
	(PortalId, ModuleId, JournalTypeId)
	VALUES
	(@PortalId, @ModuleId, @JournalTypeId)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Journal_Types_Delete]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Types_Delete]
@JournalTypeId int,
@PortalId int
AS
IF @JournalTypeId > 200
	BEGIN
		DELETE FROM {databaseOwner}[{objectQualifier}Journal_Security]
		WHERE JournalId IN (SELECT JournalId FROM {databaseOwner}[{objectQualifier}Journal] WHERE JournalTypeId=@JournalTypeId AND PortalId=@PortalId)
		DELETE FROM {databaseOwner}[{objectQualifier}Journal]
		WHERE 
			JournalTypeId = @JournalTypeId 
			AND 
			PortalId = @PortalId
		DELETE FROM {databaseOwner}[{objectQualifier}Journal_TypeFilters]
		WHERE
			JournalTypeId = @JournalTypeId
			AND 
			PortalId = @PortalId
		DELETE FROM {databaseOwner}[{objectQualifier}Journal_Types]
		WHERE 
			JournalTypeId = @JournalTypeId
			AND
			PortalId = @PortalId
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Journal_Types_Get]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Types_Get]
@JournalType nvarchar(25)
AS
SELECT * from {databaseOwner}[{objectQualifier}Journal_Types] WHERE JournalType = @JournalType
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Journal_Types_GetById]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Types_GetById]
@JournalTypeId int
AS
SELECT * from {databaseOwner}[{objectQualifier}Journal_Types] WHERE JournalTypeId = @JournalTypeId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Journal_Types_List]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Types_List]
@PortalId int
AS
SELECT * 
FROM {databaseOwner}[{objectQualifier}Journal_Types]
WHERE (PortalId = -1 OR PortalId = @PortalId)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Journal_Types_Save]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Types_Save]
@JournalTypeId int,
@JournalType nvarchar(25),
@icon nvarchar(25),
@PortalId int,
@IsEnabled bit,
@AppliesToProfile bit,
@AppliesToGroup bit,
@AppliesToStream bit,
@options nvarchar(max),
@SupportsNotify bit
AS
IF EXISTS(SELECT JournalTypeId from {databaseOwner}[{objectQualifier}Journal_Types] WHERE JournalTypeId=@JournalTypeId AND PortalId = @PortalId)
	BEGIN
		UPDATE {databaseOwner}[{objectQualifier}Journal_Types]
			SET
				JournalType=@JournalType,
				icon=@icon,
				IsEnabled = @IsEnabled,
				AppliesToProfile = @AppliesToProfile,
				AppliesToGroup = @AppliesToGroup,
				AppliesToStream = @AppliesToStream,
				Options = @options,
				SupportsNotify = @SupportsNotify
			WHERE
				PortalId = @PortalId AND JournalTypeId = @JournalTypeId
	END
ELSE
	BEGIN
		SET @JournalTypeId = (SELECT MAX(JournalTypeId)+1 FROM {databaseOwner}[{objectQualifier}Journal_Types])
		INSERT INTO {databaseOwner}[{objectQualifier}Journal_Types]
			(JournalTypeId, JournalType, icon, PortalId, IsEnabled, AppliesToProfile, AppliesToGroup, AppliesToStream, Options, SupportsNotify)
			VALUES
			(@JournalTypeId, @JournalType, @icon, @PortalId, @IsEnabled, @AppliesToProfile, @AppliesToGroup, @AppliesToStream, @options, @SupportsNotify)
	END
SELECT @JournalTypeId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Journal_Update]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Update]
@PortalId int,
@JournalId int,
@JournalTypeId int,
@UserId int,
@ProfileId int,
@GroupId int,
@Title nvarchar(255),
@Summary nvarchar(2000),
@ItemData nvarchar(2000),
@JournalXML xml,
@ObjectKey nvarchar(255),
@AccessKey uniqueidentifier,
@SecuritySet nvarchar(2000),
@CommentsDisabled bit,
@CommentsHidden bit
AS
UPDATE {databaseOwner}[{objectQualifier}Journal]
	SET 
		JournalTypeId = @JournalTypeId,
		UserId = @UserId,
		DateUpdated = GETUTCDATE(),
		PortalId = @PortalId,
		ProfileId = @ProfileId,
		GroupId = @GroupId,
		Title = @Title,
		Summary = @Summary,
		ObjectKey = @ObjectKey,
		AccessKey = @AccessKey,
		ItemData = @ItemData,
		CommentsHidden = @CommentsHidden,
		CommentsDisabled = @CommentsDisabled
	WHERE JournalId = @JournalId
IF @SecuritySet IS NOT NULL AND @SecuritySet <> ''
BEGIN
DELETE FROM {databaseOwner}[{objectQualifier}Journal_Security] WHERE JournalId = @JournalId
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Security]
	(JournalId, SecurityKey) 
	SELECT @JournalId, string from {databaseOwner}[{objectQualifier}Journal_SplitText](@SecuritySet,',')
END
SELECT @JournalId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Journal_UpdateContentItemId]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_UpdateContentItemId]
@JournalId int,
@ContentItemId int
AS
UPDATE {databaseOwner}[{objectQualifier}Journal]
	SET ContentItemId = @ContentItemId
WHERE JournalId = @JournalId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}LocalizeTab]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}LocalizeTab] 
	@TabId					int,
	@CultureCode			nvarchar(10),
	@LastModifiedByUserID	int
AS
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}Tabs
			SET 
				CultureCode				= @CultureCode,
				LastModifiedByUserID	= @LastModifiedByUserID,
				LastModifiedOnDate		= getdate()					
			WHERE TabID = @TabId
			
		UPDATE {databaseOwner}{objectQualifier}TabModules
			SET 
				CultureCode				= @CultureCode,
				LastModifiedByUserID	= @LastModifiedByUserID,
				LastModifiedOnDate		= getdate()					
			WHERE TabID = @TabId
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Messaging_GetInbox]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Messaging_GetInbox]
	@PortalID int,
	@UserID int,
	@PageNumber int,
	@PageSize int
AS
	-- Set the page bounds
	DECLARE 
		@PageLowerBound INT, 
		@PageUpperBound INT, 
		@RowsToReturn int, 
		@PageIndex int

		/* this is 1-based rather than 0-based indexing. Accomodating so that we are consistent with paging */
		SET @PageIndex = @PageNumber - 1

		exec {databaseOwner}[{objectQualifier}CalculatePagingInformation] @PageIndex, @PageSize, @RowsToReturn output, @PageLowerBound output, @PageUpperBound output

		begin 
			with UserInbox as (
				select * , ROW_NUMBER() over (order by Date desc) as RowNumber
					from {databaseOwner}{objectQualifier}Messaging_Messages 
					where (ToUserID = @UserID AND Status IN (1,2) AND SkipPortal = '0') 
						OR (FromUserID = @UserID AND Status = 0)
			)
			select * from UserInbox
				where RowNumber > @PageLowerBound AND RowNumber < @PageUpperBound
				order by RowNumber
		end
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Messaging_GetInboxCount]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Messaging_GetInboxCount] 
	@PortalID int,
	@UserID int
AS

	SELECT COUNT (*)[Body]
	FROM {databaseOwner}{objectQualifier}Messaging_Messages
	WHERE (ToUserID= @UserID AND Status in (1,2) AND SkipPortal = '0') 
		OR (FromUserID = @UserID AND Status = 0)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Messaging_GetMessage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Messaging_GetMessage] 
	@MessageID bigint
AS
	SELECT * FROM {objectQualifier}Messaging_Messages WHERE MessageID = @MessageID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Messaging_GetNewMessageCount]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Messaging_GetNewMessageCount] 
	@PortalID int,
	@UserID int
AS
	SELECT count(*) FROM {objectQualifier}Messaging_Messages WHERE ToUserID = @UserID AND Status = 1
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Messaging_GetNextMessageForDispatch]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Messaging_GetNextMessageForDispatch] 
	@SchedulerInstance uniqueidentifier
AS
	Declare  @target_messageID int

	SELECT @target_messageID =  MessageID FROM {objectQualifier}Messaging_Messages WHERE EmailSent = 0  AND  
	(EmailSchedulerInstance is NULL or EmailSchedulerInstance= '00000000-0000-0000-0000-000000000000') 
	AND status not in  (0,3) ORDER BY Date DESC

Update {objectQualifier}Messaging_Messages set EmailSchedulerInstance = @SchedulerInstance  where MessageID = @target_messageID
select * from {objectQualifier}Messaging_Messages where MessageID = @target_messageID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Messaging_MarkMessageAsDispatched]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Messaging_MarkMessageAsDispatched]
	@MessageId int
AS
BEGIN
	Update {objectQualifier}Messaging_Messages set EmailSent = 1, EmailSentDate =GETDATE()   where MessageID =@MessageId
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Messaging_Save_Message]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Messaging_Save_Message] 
   @PortalID int,
   @FromUserID int,
   @ToUserID int,
   @ToRoleID int,
   @Status int,
   @Subject nvarchar(max),
   @Body nvarchar(max),
   @Date datetime,
   @Conversation uniqueidentifier,
   @ReplyTo bigint,
   @AllowReply bit,
   @SkipPortal bit

AS
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}Messaging_Messages
       ([PortalID]
       ,[FromUserID]
	   ,[FromUserName]
       ,[ToUserID]
       ,[ToRoleID]
	   ,[ToUserName]
       ,[Status]
       ,[Subject]
       ,[Body]
       ,[Date]
       ,[Conversation]
       ,[ReplyTo]
       ,[AllowReply]
       ,[SkipPortal]
		,[EmailSent])
 SELECT
       @PortalID,
       @FromUserID,
	   (SELECT UserName FROM {objectQualifier}Users WHERE UserID = @FromUserID) as FromUserName,
       @ToUserID,
       @ToRoleID,
	   (SELECT UserName FROM {objectQualifier}Users WHERE UserID = @ToUserID) as ToUserName, 
       @Status,
       @Subject, 
       @Body,
       @Date, 
       @Conversation,
       @ReplyTo,
       @AllowReply, 
       @SkipPortal,
	   '0'
			
		SELECT SCOPE_IDENTITY()						
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Messaging_UpdateMessage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Messaging_UpdateMessage] 
   @MessageID bigint,
   @ToUserID int,
   @ToRoleID int,
   @Status int,
   @Subject nvarchar(max),
   @Body nvarchar(max),
   @Date datetime,
   @ReplyTo bigint,
   @AllowReply bit,
   @SkipPortal bit
AS
	UPDATE {databaseOwner}{objectQualifier}Messaging_Messages
	SET ToUserID=@ToUserID, 
		ToRoleID=@ToRoleID, 
		Status=@Status, 
		Subject=@Subject, 
		Body=@Body, 
		Date= @Date,
		ReplyTo= @ReplyTo,
		AllowReply = @AllowReply,
		SkipPortal = @SkipPortal
	WHERE MessageID=@MessageID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Mobile_DeletePreviewProfile]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Mobile_DeletePreviewProfile] @Id INT
AS 
		
    DELETE  FROM {databaseOwner}{objectQualifier}Mobile_PreviewProfiles
    WHERE   Id = @Id
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Mobile_DeleteRedirection]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Mobile_DeleteRedirection] @Id INT
AS 
    DELETE  FROM {databaseOwner}{objectQualifier}Mobile_RedirectionRules
    WHERE   RedirectionId = @id
		
    DELETE  FROM {databaseOwner}{objectQualifier}Mobile_Redirections
    WHERE   Id = @Id
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Mobile_DeleteRedirectionRule]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Mobile_DeleteRedirectionRule] @Id INT
AS 
    DELETE  FROM {databaseOwner}{objectQualifier}Mobile_RedirectionRules
    WHERE   Id = @id
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Mobile_GetAllRedirections]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Mobile_GetAllRedirections]
AS 
    SELECT  Id ,
            PortalId ,
            Name ,
            [Type] ,
            SortOrder ,
            SourceTabId ,
			IncludeChildTabs ,
            TargetType ,
            TargetValue ,
			Enabled ,
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}Mobile_Redirections    
	ORDER BY PortalId ASC, SortOrder ASC
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Mobile_GetPreviewProfiles]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Mobile_GetPreviewProfiles] @PortalId INT
AS 
    SELECT  Id, PortalId, Name, Width, Height, UserAgent, SortOrder, CreatedByUserID, CreatedOnDate, LastModifiedByUserID, LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}Mobile_PreviewProfiles
    WHERE   PortalId = @PortalId
	ORDER BY SortOrder ASC
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Mobile_GetRedirectionRules]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Mobile_GetRedirectionRules] @RedirectionId INT
AS 
    SELECT  Id ,
            RedirectionId ,
            Capability ,
            Expression
    FROM    {objectQualifier}Mobile_RedirectionRules
    WHERE RedirectionId = @RedirectionId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Mobile_GetRedirections]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Mobile_GetRedirections] @PortalId INT
AS 
    SELECT  Id ,
            PortalId ,
            Name ,
            [Type] ,
            SortOrder ,
            SourceTabId ,
			IncludeChildTabs ,
            TargetType ,
            TargetValue ,
			Enabled ,
            CreatedByUserID ,
            CreatedOnDate ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}{objectQualifier}Mobile_Redirections
    WHERE   PortalId = @PortalId
	ORDER BY SortOrder ASC
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Mobile_SavePreviewProfile]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Mobile_SavePreviewProfile]
    @Id INT ,
    @PortalId INT ,
    @Name NVARCHAR(50) ,
    @Width INT ,
    @Height INT ,
	@UserAgent NVARCHAR(260) ,
	@SortOrder INT ,
    @UserId INT
AS 
    IF ( @Id = -1 ) 
        BEGIN
            INSERT  {databaseOwner}{objectQualifier}Mobile_PreviewProfiles
                    ( PortalId ,
                      Name ,
                      Width ,
                      Height ,
					  UserAgent ,
					  SortOrder ,
                      CreatedByUserID ,
                      CreatedOnDate ,
                      LastModifiedByUserID ,
                      LastModifiedOnDate
			        
                    )
            VALUES  ( @PortalId , -- PortalId - int
                      @Name , -- Name - nvarchar(50)
                      @Width , -- Width - int
                      @Height , -- Height - int
					  @UserAgent ,
					  @SortOrder ,
                      @UserId , -- CreatedBy - int
                      GETDATE() , -- CreatedOn - datetime
                      @UserId , -- LastModifiedBy - int
                      GETDATE() -- LastModifiedOn - datetime
			        
                    )
                    
            SELECT  @Id = SCOPE_IDENTITY()
        END
    ELSE 
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}Mobile_PreviewProfiles
            SET     Name = @Name ,
                    Width = @Width ,
                    Height = @Height ,
					UserAgent = @UserAgent ,
					SortOrder = @SortOrder ,
                    LastModifiedByUserID = @UserId ,
                    LastModifiedOnDate = GETDATE()
            WHERE   Id = @Id
        END
        
    SELECT  @Id
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Mobile_SaveRedirection]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Mobile_SaveRedirection]
    @Id INT ,
    @PortalId INT ,
    @Name NVARCHAR(50) ,
    @Type INT ,
    @SortOrder INT ,
    @SourceTabId INT ,
	@IncludeChildTabs BIT ,
    @TargetType INT ,
    @TargetValue NVARCHAR(260) ,
	@Enabled BIT,
    @UserId INT
AS 
    IF ( @Id = -1 ) 
        BEGIN
            INSERT  {databaseOwner}{objectQualifier}Mobile_Redirections
                    ( PortalId ,
                      Name ,
                      Type ,
                      SortOrder ,
                      SourceTabId ,
					  IncludeChildTabs ,
                      TargetType ,
                      TargetValue ,
					  Enabled ,
                      CreatedByUserID ,
                      CreatedOnDate ,
                      LastModifiedByUserID ,
                      LastModifiedOnDate
			        
                    )
            VALUES  ( @PortalId , -- PortalId - int
                      @Name , -- Name - nvarchar(50)
                      @Type , -- Type - int
                      @SortOrder , -- SortOrder - int
                      @SourceTabId , -- SourceTabId - int
					  @IncludeChildTabs ,
                      @TargetType ,
                      @TargetValue ,
					  @Enabled ,
                      @UserId , -- CreatedBy - int
                      GETDATE() , -- CreatedOn - datetime
                      @UserId , -- LastModifiedBy - int
                      GETDATE() -- LastModifiedOn - datetime
			        
                    )
		SELECT  SCOPE_IDENTITY()
        END
    ELSE 
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}Mobile_Redirections
            SET     Name = @Name ,
                    [Type] = @Type ,
                    SortOrder = @SortOrder ,
                    SourceTabId = @SourceTabId ,
					IncludeChildTabs = @IncludeChildTabs ,
                    TargetType = @TargetType ,
                    TargetValue = @TargetValue ,
					Enabled = @Enabled ,
                    LastModifiedByUserID = @UserId ,
                    LastModifiedOnDate = GETDATE()
            WHERE   Id = @Id
			SELECT @Id
        END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}Mobile_SaveRedirectionRule]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROC {databaseOwner}[{objectQualifier}Mobile_SaveRedirectionRule]
    @Id INT ,
    @RedirectionId INT ,
    @Capbility NVARCHAR(50) ,
    @Expression NVARCHAR(50)
AS 
    IF @Id = -1 
        BEGIN
            INSERT  INTO {databaseOwner}{objectQualifier}Mobile_RedirectionRules
                    ( RedirectionId ,
                      Capability ,
                      Expression
		        )
            VALUES  ( @RedirectionId , -- RedirectionId - int
                      @Capbility , -- Capability - nvarchar(50)
                      @Expression  -- Expression - nvarchar(50)
		        )
        END
    ELSE 
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}Mobile_RedirectionRules
            SET     Capability = @Capbility ,
                    Expression = @Expression
            WHERE   Id = @Id
        END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}MoveTabAfter]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}MoveTabAfter] 
	@TabId					int,
	@AfterTabId				int,
	@LastModifiedByUserID	int
AS
	BEGIN
		DECLARE @OldParentId int
		DECLARE @NewParentId int
		DECLARE @PortalId int
		
		SET @OldParentId = (SELECT ParentId FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @TabId)
		SET @NewParentId = (SELECT ParentId FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @AfterTabId)
		SET @PortalId = (SELECT PortalId FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @TabId)

		DECLARE @TabOrder int
		SET @TabOrder = (SELECT TabOrder FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @TabId)
		
		IF (@OldParentId <> @NewParentId OR NOT (@OldParentId IS NULL AND @NewParentId IS NULL))
			-- Parent has changed
			BEGIN
				-- update TabOrder of Tabs with same original Parent
				UPDATE {databaseOwner}{objectQualifier}Tabs
					SET TabOrder = TabOrder - 2
					WHERE (ParentId = @OldParentId OR (ParentId IS NULL AND @OldParentId IS NULL)) 
						AND TabOrder > @TabOrder
						AND (PortalId = @PortalId OR (PortalId IS NULL AND @PortalId IS NULL))

				-- Get TabOrder of AfterTab
				SET @TabOrder = (SELECT TabOrder FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @AfterTabId)
						
				-- update TabOrder of Tabs with same new Parent
				UPDATE {databaseOwner}{objectQualifier}Tabs
					SET TabOrder = TabOrder + 2
					WHERE (ParentId = @NewParentId OR (ParentId IS NULL AND @NewParentId IS NULL)) 
						AND TabOrder > @TabOrder
						AND (PortalId = @PortalId OR (PortalId IS NULL AND @PortalId IS NULL))

				-- Update Tab with new TabOrder
				UPDATE {databaseOwner}{objectQualifier}Tabs
					SET 
						ParentId				= @NewParentId,
						TabOrder				= @TabOrder + 2,
						LastModifiedByUserID	= @LastModifiedByUserID,
						LastModifiedOnDate		= GETDATE()					
					WHERE TabID = @TabId
				EXEC {databaseOwner}{objectQualifier}BuildTabLevelAndPath @TabId, 1
			END
		ELSE
			-- Parent has not changed
			BEGIN
				-- Remove Tab from TabOrder
				UPDATE {databaseOwner}{objectQualifier}Tabs
					SET TabOrder = -1
					WHERE TabID = @TabId
					
				-- Reorder
				UPDATE {databaseOwner}{objectQualifier}Tabs
					SET TabOrder = TabOrder - 2
					WHERE (ParentId = @OldParentId OR (ParentId IS NULL AND @OldParentId IS NULL)) 
						AND TabOrder > @TabOrder
						AND TabId <> @TabId
						AND (PortalId = @PortalId OR (PortalId IS NULL AND @PortalId IS NULL))
						
				-- Get TabOrder of AfterTab
				SET @TabOrder = (SELECT TabOrder FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @AfterTabId)
										
				-- Reorder					
				UPDATE {databaseOwner}{objectQualifier}Tabs
					SET TabOrder = TabOrder + 2
					WHERE (ParentId = @OldParentId OR (ParentId IS NULL AND @OldParentId IS NULL)) 
						AND TabOrder > @TabOrder
						AND (PortalId = @PortalId OR (PortalId IS NULL AND @PortalId IS NULL))

				-- Update Tab with new TabOrder
				UPDATE {databaseOwner}{objectQualifier}Tabs
					SET 
						TabOrder				= @TabOrder + 2,
						LastModifiedByUserID	= @LastModifiedByUserID,
						LastModifiedOnDate		= GETDATE()					
					WHERE TabID = @TabId
				EXEC {databaseOwner}{objectQualifier}BuildTabLevelAndPath @TabId
			END
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}MoveTabBefore]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}MoveTabBefore] 
	@TabId					int,
	@BeforeTabId			int,
	@LastModifiedByUserID	int
AS
	BEGIN
		DECLARE @OldParentId int
		DECLARE @NewParentId int
		DECLARE @PortalId int
		
		SET @OldParentId = (SELECT ParentId FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @TabId)
		SET @NewParentId = (SELECT ParentId FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @BeforeTabId)
		SET @PortalId = (SELECT PortalId FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @TabId)
		
		DECLARE @TabOrder int
		SET @TabOrder = (SELECT TabOrder FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @TabId)
		
		IF (@OldParentId <> @NewParentId OR NOT (@OldParentId IS NULL AND @NewParentId IS NULL))
			-- Parent has changed
			BEGIN
				-- update TabOrder of Tabs with same original Parent
				UPDATE {databaseOwner}{objectQualifier}Tabs
					SET TabOrder = TabOrder - 2
					WHERE (ParentId = @OldParentId OR (ParentId IS NULL AND @OldParentId IS NULL)) 
						AND TabOrder > @TabOrder
						AND (PortalId = @PortalId OR (PortalId IS NULL AND @PortalId IS NULL))

				-- Get TabOrder of AfterTab
				SET @TabOrder = (SELECT TabOrder FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @BeforeTabId)
						
				-- update TabOrder of Tabs with same new Parent
				UPDATE {databaseOwner}{objectQualifier}Tabs
					SET TabOrder = TabOrder + 2
					WHERE (ParentId = @NewParentId OR (ParentId IS NULL AND @NewParentId IS NULL)) 
						AND TabOrder >= @TabOrder
						AND (PortalId = @PortalId OR (PortalId IS NULL AND @PortalId IS NULL))

				-- Update Tab with new TabOrder
				UPDATE {databaseOwner}{objectQualifier}Tabs
					SET 
						ParentId				= @NewParentId,
						TabOrder				= @TabOrder,
						LastModifiedByUserID	= @LastModifiedByUserID,
						LastModifiedOnDate		= GETDATE()					
					WHERE TabID = @TabId
				EXEC {databaseOwner}{objectQualifier}BuildTabLevelAndPath @TabId, 1
			END
		ELSE
			-- Parent has not changed
			BEGIN
				-- Remove Tab from TabOrder
				UPDATE {databaseOwner}{objectQualifier}Tabs
					SET TabOrder = -1
					WHERE TabID = @TabId
					
				-- Reorder
				UPDATE {databaseOwner}{objectQualifier}Tabs
					SET TabOrder = TabOrder - 2
					WHERE (ParentId = @OldParentId OR (ParentId IS NULL AND @OldParentId IS NULL)) 
						AND TabOrder > @TabOrder
						AND TabId <> @TabId
						AND (PortalId = @PortalId OR (PortalId IS NULL AND @PortalId IS NULL))
						
				-- Get TabOrder of BeforeTab
				SET @TabOrder = (SELECT TabOrder FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @BeforeTabId)
										
				-- Reorder					
				UPDATE {databaseOwner}{objectQualifier}Tabs
					SET TabOrder = TabOrder + 2
					WHERE (ParentId = @OldParentId OR (ParentId IS NULL AND @OldParentId IS NULL)) 
						AND TabOrder >= @TabOrder
						AND (PortalId = @PortalId OR (PortalId IS NULL AND @PortalId IS NULL))

				-- Update Tab with new TabOrder
				UPDATE {databaseOwner}{objectQualifier}Tabs
					SET 
						TabOrder				= @TabOrder,
						LastModifiedByUserID	= @LastModifiedByUserID,
						LastModifiedOnDate		= GETDATE()					
					WHERE TabID = @TabId
				EXEC {databaseOwner}{objectQualifier}BuildTabLevelAndPath @TabId
			END
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}MoveTabModule]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}MoveTabModule]
	@FromTabId				int,
	@ModuleId				int,
	@ToTabId				int,
	@PaneName				nvarchar(50),
	@LastModifiedByUserID	int

AS
	UPDATE {databaseOwner}{objectQualifier}TabModules
		SET 
			TabId = @ToTabId,   
			ModuleOrder = -1,
			PaneName = @PaneName,
			LastModifiedByUserID = @LastModifiedByUserID,
			LastModifiedOnDate = getdate()
		WHERE  TabId = @FromTabId
		AND    ModuleId = @ModuleId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}MoveTabToParent]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}MoveTabToParent] 
	@TabId					int,
	@NewParentId			int,
	@LastModifiedByUserID	int
AS
	BEGIN
		DECLARE @PortalId int
		SET @PortalId = (SELECT PortalId FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @TabId)

		DECLARE @OldParentId int
		SET @OldParentId = (SELECT ParentId FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @TabId)
		
		DECLARE @TabOrder int
		SET @TabOrder = (SELECT TabOrder FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @TabId)
		
		-- Get New TabOrder
		DECLARE @NewTabOrder int
		SET @NewTabOrder = (SELECT MAX(TabOrder) FROM {databaseOwner}{objectQualifier}Tabs 
						 WHERE (PortalId = @PortalID OR (PortalId IS NULL AND @PortalID IS NULL)) AND
							   (ParentId = @NewParentId OR (ParentId IS NULL AND @NewParentId IS NULL))
						)
		IF @NewTabOrder IS NULL 
			SET @NewTabOrder = 1
		ELSE
			SET @NewTabOrder = @NewTabOrder + 2			
				
		BEGIN
			-- update TabOrder of Tabs with same original Parent
			UPDATE {databaseOwner}{objectQualifier}Tabs
				SET TabOrder = TabOrder - 2
				WHERE (ParentId = @OldParentId OR (ParentId IS NULL AND @OldParentId IS NULL)) 
					AND TabOrder > @TabOrder
					AND (PortalId = @PortalId OR (PortalId IS NULL AND @PortalId IS NULL))

			-- Update Tab with new TabOrder
			UPDATE {databaseOwner}{objectQualifier}Tabs
				SET 
					ParentId				= @NewParentId,
					TabOrder				= @NewTabOrder,
					LastModifiedByUserID	= @LastModifiedByUserID,
					LastModifiedOnDate		= GETDATE()					
				WHERE TabID = @TabId
		END
		IF (@OldParentId <> @NewParentId) OR (@OldParentId IS NULL AND @NewParentId IS NOT NULL) OR (@OldParentId IS NOT NULL AND @NewParentId IS NULL)
			BEGIN
				EXEC {databaseOwner}{objectQualifier}BuildTabLevelAndPath @TabId, 1
			END
		ELSE
			BEGIN
				EXEC {databaseOwner}{objectQualifier}BuildTabLevelAndPath @TabId
			END
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}OutputCacheAddItem]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}OutputCacheAddItem]
  @ItemId     Int,
	@CacheKey   VarChar ( 36),
	@Data	    nVarChar(Max),
	@Expiration DateTime
AS
BEGIN
	IF NOT EXISTS (SELECT CacheKey from {databaseOwner}{objectQualifier}OutputCache where CacheKey = @CacheKey)
		begin
		    INSERT INTO dbo.OutputCache
				(ItemId, 
				CacheKey, 
				Data, 
				Expiration
				) VALUES 
				(@ItemId, 
				@CacheKey, 
				@Data, 
				@Expiration
				)
		end
	ELSE UPDATE {databaseOwner}{objectQualifier}OutputCache Set Data = @Data, Expiration = @Expiration Where CacheKey = @CacheKey
END


GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}OutputCacheGetItem]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}OutputCacheGetItem]
	@CacheKey VarChar (36)
AS
BEGIN
    SELECT *
     FROM  {databaseOwner}{objectQualifier}OutputCache
     WHERE CacheKey = @CacheKey
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}OutputCacheGetItemCount]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}OutputCacheGetItemCount]
	@ItemId int
AS
BEGIN
    SELECT COUNT(*) N
     FROM  {databaseOwner}{objectQualifier}OutputCache
     WHERE ItemId = @ItemId
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}OutputCacheGetKeys]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}OutputCacheGetKeys]
	@ItemId Int
AS
BEGIN
    SELECT CacheKey
     FROM  {databaseOwner}{objectQualifier}OutputCache
     WHERE ItemId = @ItemId OR @ItemId IS NULL
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}OutputCachePurgeCache]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}OutputCachePurgeCache]
AS
BEGIN
    DELETE
     FROM  {databaseOwner}{objectQualifier}OutputCache
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}OutputCachePurgeExpiredItems]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}OutputCachePurgeExpiredItems]
	@CurrentUtcDateTime DateTime
AS
BEGIN
    DELETE
     FROM  {databaseOwner}{objectQualifier}OutputCache
     WHERE Expiration <= @CurrentUtcDateTime
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}OutputCacheRemoveItem]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}OutputCacheRemoveItem]
	@ItemId Int
AS
BEGIN
    DELETE
    FROM  {databaseOwner}{objectQualifier}OutputCache
    WHERE ItemId = @ItemId
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}PublishTab]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}PublishTab]
	@TabID INT
AS
BEGIN 
        UPDATE {databaseOwner}[{objectQualifier}Tabs] SET            
            [HasBeenPublished] = 1
        WHERE TabID = @TabID
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}PurgeEventLog]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}PurgeEventLog]
AS
	DECLARE @PurgeBatchCount INT = ISNULL(
	(SELECT CAST(SettingValue AS INT) 
		FROM {databaseOwner}[{objectQualifier}HostSettings]
		WHERE SettingName = N'PurgeEventLogBatchCount' AND ISNUMERIC(SettingValue) > 0), 150000)

	;WITH logcounts AS
	(  
	  SELECT TOP(@PurgeBatchCount)
		LogConfigID, 
		ROW_NUMBER() OVER(PARTITION BY LogConfigID ORDER BY LogCreateDate DESC) AS logEventSequence	
	  FROM {databaseOwner}[{objectQualifier}EventLog]
	)
	DELETE lc
	FROM logcounts lc
		INNER JOIN {databaseOwner}[{objectQualifier}EventLogConfig] elc ON elc.ID = lc.LogConfigID
	WHERE elc.KeepMostRecent <> -1
		AND lc.logEventSequence > elc.KeepMostRecent

GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}PurgeScheduleHistory]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}PurgeScheduleHistory]
AS
BEGIN
	SET NOCOUNT ON;

	IF OBJECT_ID('tempdb..#ScheduleHistoryIDsToDelete') IS NOT NULL DROP TABLE #ScheduleHistoryIDsToDelete

	CREATE TABLE #ScheduleHistoryIDsToDelete (ScheduleHistoryID int NOT NULL);

	;WITH ScheduleHistoryWithRowNumber (ScheduleID, ScheduleHistoryID, StartDate, RowNumber) AS (
		SELECT
			ScheduleID,
			ScheduleHistoryID,
			StartDate,
			ROW_NUMBER() OVER (
				PARTITION BY ScheduleID
				ORDER BY StartDate
			)
		FROM {databaseOwner}[{objectQualifier}ScheduleHistory]
	)
	INSERT INTO #ScheduleHistoryIDsToDelete (ScheduleHistoryID)
	SELECT ScheduleHistoryID FROM (
		   SELECT s.ScheduleID, COUNT(*) - s.RetainHistoryNum AS ItemsToDelete
		   FROM {databaseOwner}[{objectQualifier}Schedule] s
		   INNER JOIN {databaseOwner}[{objectQualifier}ScheduleHistory] sh ON s.ScheduleID = sh.ScheduleID
		   WHERE s.Enabled = 1 AND s.RetainHistoryNum <> -1
		   GROUP BY s.ScheduleID, s.RetainHistoryNum
		   HAVING COUNT(*) > s.RetainHistoryNum
	) s
	INNER JOIN ScheduleHistoryWithRowNumber sh ON s.ScheduleID = sh.ScheduleID
	WHERE sh.RowNumber <= s.ItemsToDelete
	ORDER BY ScheduleHistoryID;

	DECLARE @rowsDeleted int = 1;

	WHILE @rowsDeleted > 0
	BEGIN
		BEGIN TRANSACTION;

		DELETE FROM {databaseOwner}[{objectQualifier}ScheduleHistory]
		WHERE ScheduleHistoryID IN (SELECT TOP (1000) ScheduleHistoryID FROM #ScheduleHistoryIDsToDelete);

		DELETE TOP (1000) FROM #ScheduleHistoryIDsToDelete;

		SET @rowsDeleted = @@ROWCOUNT;

		COMMIT TRANSACTION;
	END

	DROP TABLE #ScheduleHistoryIDsToDelete
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}RegisterAssembly]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure {databaseOwner}[{objectQualifier}RegisterAssembly]
	@PackageID      int,
	@AssemblyName   nvarchar(250),
	@Version		nvarchar(20)
As
BEGIN
	DECLARE @AssemblyID int
	DECLARE @CurrentVersion nvarchar(20)
	/*	@ReturnCode Values
		0 - Assembly NOT Registered Before
		1 - Assembly Already Registered - New Version > Current Version
		2 - Assembly Already Registered - New Version = Current Version
		3 - Assembly Already Registered - New Version < Current Version
	*/
	DECLARE @CompareVersion int

	-- First check if this assembly is registered to this package
	SET @AssemblyID = (SELECT AssemblyID
							FROM {databaseOwner}{objectQualifier}Assemblies
							WHERE PackageID = @PackageID
								AND AssemblyName = @AssemblyName)

	-- but assembly may be registerd by other packages so check for Max unstalled version
	SET @CurrentVersion  = (SELECT TOP 1 a.Version
							FROM {databaseOwner}{objectQualifier}Assemblies a
							CROSS APPLY {databaseOwner}[{objectQualifier}fn_ParseVersion](a.Version) AS v
							WHERE a.AssemblyName = @AssemblyName
							ORDER BY v.Major DESC, v.Minor DESC, v.Build DESC)

	SET @CompareVersion = {databaseOwner}{objectQualifier}fn_CompareVersion(@Version, @CurrentVersion)

	IF @AssemblyID IS NULL
		BEGIN
			-- AssemblyID is null (not registered)
			-- Add an assembly regsitration for this package
			INSERT INTO {databaseOwner}{objectQualifier}Assemblies (
				PackageID,
				AssemblyName,
				Version
			)
			VALUES (
				@PackageID,
				@AssemblyName,
				@Version
			)
		END
	ELSE
		BEGIN
			-- AssemblyID is not null - Assembly is registered
			IF @CompareVersion = 1
				BEGIN
					-- Newer version - Update Assembly registration
					UPDATE {databaseOwner}{objectQualifier}Assemblies
					SET    Version = @Version
					WHERE  AssemblyID = @AssemblyID
				END
		END

	SELECT @CompareVersion
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}RemovePortalLocalization]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}RemovePortalLocalization]
    @PortalId INT ,
    @CultureCode NVARCHAR(10)
AS 
    BEGIN
        SET NOCOUNT ON;

        DELETE  FROM {databaseOwner}{objectQualifier}PortalLocalization
        WHERE   PortalID = @PortalId
                AND CultureCode = @CultureCode

    END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}RemoveTermsFromContent]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}RemoveTermsFromContent] 
	@ContentItemID	int
AS
	DELETE {databaseOwner}{objectQualifier}ContentItems_Tags 
	WHERE ContentItemID = @ContentItemID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}RemoveUser]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}RemoveUser]
	@UserID		int,
	@PortalID   int
AS
	IF @PortalID IS NULL
		BEGIN
			-- Delete SuperUser
			DELETE FROM {databaseOwner}{objectQualifier}Users
				WHERE  UserId = @UserID
		END
	ELSE
		BEGIN
			-- Remove User from Portal
			DELETE FROM {databaseOwner}{objectQualifier}UserPortals
				WHERE  UserId = @UserID
                 AND PortalId = @PortalID
			IF NOT EXISTS (SELECT 1 FROM {databaseOwner}{objectQualifier}UserPortals WHERE  UserId = @UserID)
				-- Delete User (but not if SuperUser)
				BEGIN
					DELETE FROM {databaseOwner}{objectQualifier}Users
						WHERE  UserId = @UserID
							AND IsSuperUser = 0
					DELETE FROM {databaseOwner}{objectQualifier}UserRoles
						WHERE  UserID = @UserID
				END
			ELSE
				BEGIN
					DELETE ur FROM {databaseOwner}{objectQualifier}UserRoles ur
						INNER JOIN {databaseOwner}{objectQualifier}Roles r ON r.RoleID = ur.RoleID
						WHERE  UserID = @UserID AND r.PortalID = @PortalID
				END
		END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}ReplaceServerOnSchedules]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}ReplaceServerOnSchedules]
    @oldServerName nvarchar(50),
    @newServerName nvarchar(50)
AS
BEGIN
    SET NOCOUNT ON;
    
    UPDATE {databaseOwner}[{objectQualifier}Schedule] SET Servers = REPLACE(Servers, @oldServerName, @newServerName) WHERE Servers LIKE '%' + @oldServerName + '%'
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}ResetFilePublishedVersion]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}ResetFilePublishedVersion] 
@FileId int
AS
BEGIN
	UPDATE {databaseOwner}{objectQualifier}Files
		SET PublishedVersion = 1
		WHERE FileId = @FileId
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}ResetTermsAgreement]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}ResetTermsAgreement]
	@PortalId	INT
AS
	UPDATE {databaseOwner}{objectQualifier}UserPortals
	SET HasAgreedToTerms = 0
	WHERE PortalId = @PortalId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}RestoreTabModule]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}RestoreTabModule]
	@TabId      int,
	@ModuleId   int
AS
	UPDATE {databaseOwner}{objectQualifier}TabModules
		SET IsDeleted = 0,
			VersionGuid = newId(),
			LastModifiedOnDate = GETDATE()
	WHERE  TabId = @TabId
		AND    ModuleId = @ModuleId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}RestoreUser]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}RestoreUser]
	@UserID		int,
	@PortalID   int
AS
	IF @PortalID IS NULL
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}Users
				SET	IsDeleted = 0
				WHERE  UserId = @UserID
		END
	ELSE
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}UserPortals
				SET IsDeleted = 0
				WHERE  UserId = @UserID
					AND PortalId = @PortalID
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}SaveCoreAuditTypes]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}SaveCoreAuditTypes]
	@LogTypeKey nvarchar(35),  
	@LogTypeFriendlyName nvarchar(50),  
	@LogTypeOwner nvarchar(100),  
	@LogTypeCSSClass nvarchar(40) ,
	@LoggingIsActive bit,  
	@KeepMostRecent int,  
	@EmailNotificationIsActive bit  

AS  
 IF NOT EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}EventLogTypes WHERE LogTypeKey = @LogTypeKey)  
	BEGIN  
		-- Add new Event Type  
		EXEC {databaseOwner}{objectQualifier}AddEventLogType @LogTypeKey, @LogTypeFriendlyName, N'', @LogTypeOwner, @LogTypeCSSClass  

		-- Add new Event Type Config  
		EXEC {databaseOwner}{objectQualifier}AddEventLogConfig @LogTypeKey, NULL, @LoggingIsActive, @KeepMostRecent, @EmailNotificationIsActive, 1, 1, 1, N'', N''  
		  
		-- exit  
		Return
	END
  ELSE

		UPDATE {databaseOwner}{objectQualifier}EventLogTypes SET LogTypeFriendlyName = @LogTypeFriendlyName WHERE LogTypeKey = @LogTypeKey  

		UPDATE {databaseOwner}{objectQualifier}EventLogConfig
		SET LoggingIsActive=@LoggingIsActive,
		KeepMostRecent=@KeepMostRecent,
		EmailNotificationIsActive=@EmailNotificationIsActive
		WHERE LogTypeKey = @LogTypeKey
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}SaveExtensionUrlProviderSetting]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}SaveExtensionUrlProviderSetting] 
	@ExtensionUrlProviderID		int,
	@PortalId					int,
	@SettingName				nvarchar(100),
	@SettingValue				nvarchar(2000)
AS

	IF (SELECT COUNT(*) 
			FROM {databaseOwner}{objectQualifier}ExtensionUrlProviderSetting 
			WHERE ExtensionUrlProviderID = @ExtensionUrlProviderID
				AND PortalID = @PortalId
				AND SettingName = @SettingName) = 0
		BEGIN
			--ADD
			INSERT INTO {databaseOwner}{objectQualifier}ExtensionUrlProviderSetting
			        ( ExtensionUrlProviderID ,
			          PortalID ,
			          SettingName ,
			          SettingValue
			        )
			VALUES  ( @ExtensionUrlProviderID , -- ExtensionUrlProviderID - int
			          @PortalId , -- PortalID - int
			          @SettingName , -- SettingName - nvarchar(100)
			          @SettingValue  -- SettingValue - nvarchar(2000)
			        )
		END
	ELSE
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}ExtensionUrlProviderSetting	
				SET 
					SettingValue = @SettingValue
				WHERE ExtensionUrlProviderID = @ExtensionUrlProviderID
					AND PortalID = @PortalId
					AND SettingName = @SettingName
		END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}SaveJavaScriptLibrary]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}SaveJavaScriptLibrary]
	@JavaScriptLibraryID INT,
	@PackageID INT,
	@LibraryName NVARCHAR(200),
	@Version NVARCHAR(50),
	@FileName NVARCHAR(100),
	@ObjectName NVARCHAR(100),
	@PreferredScriptLocation int,
	@CDNPath NVARCHAR(250)
AS

	IF EXISTS (SELECT JavaScriptLibraryID FROM {objectQualifier}JavaScriptLibraries WHERE JavaScriptLibraryID = @JavaScriptLibraryID)
		BEGIN
			UPDATE {databaseOwner}[{objectQualifier}JavaScriptLibraries]
			   SET [PackageID] = @PackageID,
					[LibraryName] = @LibraryName,
					[Version] = @Version,
					[FileName] = @FileName,
					[ObjectName] = @ObjectName,
					[PreferredScriptLocation] = @PreferredScriptLocation,
					[CDNPath] = @CDNPath
			 WHERE JavaScriptLibraryID = @JavaScriptLibraryID
	 	END
	ELSE
		BEGIN
			INSERT INTO {databaseOwner}[{objectQualifier}JavaScriptLibraries] (
				[PackageID],
				[LibraryName],
				[Version],
				[FileName],
				[ObjectName],
				[PreferredScriptLocation],
				[CDNPath]
			)
			VALUES (
				@PackageID,
				@LibraryName,
				@Version,
				@FileName,
				@ObjectName,
				@PreferredScriptLocation,
				@CDNPath
			)
			SET @JavaScriptLibraryID = (SELECT @@IDENTITY)
		END

	SELECT @JavaScriptLibraryID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}SavePackageDependency]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}SavePackageDependency]
	@PackageDependencyID INT,
	@PackageID INT,
	@PackageName NVARCHAR(128),
	@Version NVARCHAR(50)
AS
	IF EXISTS (SELECT PackageDependencyID FROM {objectQualifier}PackageDependencies WHERE PackageID = @PackageID AND PackageName = @PackageName AND Version = @Version)
		BEGIN
			UPDATE {databaseOwner}[{objectQualifier}PackageDependencies]
			   SET [PackageID] = @PackageID,
					[PackageName] = @PackageName,
					[Version] = @Version
			 WHERE PackageDependencyID = @PackageDependencyID
		END
	ELSE
		BEGIN
			INSERT INTO {databaseOwner}[{objectQualifier}PackageDependencies] (
				[PackageID],
				[PackageName],
				[Version]
			)
			VALUES (
				@PackageID,
				@PackageName,
				@Version
			)
			SET @PackageDependencyID = (SELECT @@IDENTITY)
		END

	SELECT @PackageDependencyID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}SavePortalPermission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SavePortalPermission]
	@PortalId		    INT,
	@PermissionKey		VARCHAR(50),
    @RoleId             INT,
    @UserId             INT,
    @AllowAccess        BIT,
	@CurrentUserId	    INT
AS
    DECLARE @PortalPermissionId INT;
    SELECT @PortalPermissionId = PortalPermissionId FROM {databaseOwner}[{objectQualifier}vw_PortalPermissions]
        WHERE ((@PortalId IS NULL AND PortalId IS NULL) OR PortalId = @PortalId) AND PermissionKey = @PermissionKey AND ((@RoleId IS NULL AND RoleId IS NULL) OR RoleId = @RoleId) AND ((@UserId IS NULL AND UserId IS NULL) OR UserId = @UserId)
    IF (@PortalPermissionId IS NOT NULL)
    BEGIN
        UPDATE {databaseOwner}[{objectQualifier}PortalPermission] SET
	        [AllowAccess] = @AllowAccess,
	        [LastModifiedByUserID] = @CurrentUserId,
	        [LastModifiedOnDate] = GETDATE()
        WHERE ((@PortalId IS NULL AND PortalId IS NULL) OR PortalId = @PortalId) AND PortalPermissionId = @PortalPermissionId AND ((@RoleId IS NULL AND RoleId IS NULL) OR RoleId = @RoleId) AND ((@UserId IS NULL AND UserId IS NULL) OR UserId = @UserId)

        SELECT PortalPermissionId FROM {databaseOwner}[{objectQualifier}PortalPermission]
            WHERE ((@PortalId IS NULL AND PortalId IS NULL) OR PortalId = @PortalId) AND PortalPermissionId = @PortalPermissionId AND ((@RoleId IS NULL AND RoleId IS NULL) OR RoleId = @RoleId) AND ((@UserId IS NULL AND UserId IS NULL) OR UserId = @UserId)
    END
    ELSE
    BEGIN
        DECLARE @PermissionId INT;
        SELECT @PermissionId = PermissionId FROM {databaseOwner}[{objectQualifier}Permission]
            WHERE PermissionKey = @PermissionKey
        IF (@PermissionId IS NOT NULL)
        BEGIN
	        INSERT INTO {databaseOwner}[{objectQualifier}PortalPermission] (
		        [PortalId],
	            [PermissionId],
	            [AllowAccess],
                [RoleId],
                [UserId],
		        [CreatedByUserID],
		        [CreatedOnDate],
		        [LastModifiedByUserID],
		        [LastModifiedOnDate]
	        ) VALUES (
		        @PortalId,
	            @PermissionId,
	            @AllowAccess,
                @RoleId,
                @UserId,
		        @CurrentUserId,
		        GETDATE(),
		        @CurrentUserId,
		        GETDATE()
	        )

	        SELECT SCOPE_IDENTITY()
	    END
    END

GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}SaveRelationship]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}SaveRelationship]
    @RelationshipID INT,
    @RelationshipTypeID INT,    
    @Name NVARCHAR(50),
    @Description NVARCHAR(500),
	@UserID INT,
	@PortalID INT,
	@DefaultResponse INT,
	@CreateUpdateUserID INT
    
AS 
    IF ( @RelationshipID = -1 ) 
        BEGIN
            INSERT  {databaseOwner}{objectQualifier}Relationships
                    ( RelationshipTypeID,
                      Name ,            
                      Description,					
					  UserID,
					  PortalID,		
					  DefaultResponse,			
                      CreatedByUserID ,
                      CreatedOnDate ,
                      LastModifiedByUserID ,
                      LastModifiedOnDate
			        
                    )
            VALUES  ( @RelationshipTypeID , -- @RelationshipTypeID INT
                      @Name , -- Name - nvarchar(50)
                      @Description , -- @Description NVARCHAR(500)
					  @UserID , -- @UserID int
					  @PortalID , -- @PortalID int
					  @DefaultResponse, -- @DefaultResponse int
                      @CreateUpdateUserID , -- CreatedBy - int
                      GETDATE() , -- CreatedOn - datetime
                      @CreateUpdateUserID , -- LastModifiedBy - int
                      GETDATE() -- LastModifiedOn - datetime
			        
                    )
                    
            SELECT  @RelationshipID = SCOPE_IDENTITY()
        END
    ELSE 
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}Relationships
            SET     Name = @Name ,                    
                    Description = @Description,
					RelationshipTypeID = @RelationshipTypeID,
					UserID = @UserID,
					PortalID = @PortalID,
					DefaultResponse = @DefaultResponse,
                    LastModifiedByUserID = @CreateUpdateUserID,
                    LastModifiedOnDate = GETDATE()
            WHERE   RelationshipID = @RelationshipID
        END
        
    SELECT  @RelationshipID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}SaveRelationshipType]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}SaveRelationshipType]
    @RelationshipTypeID INT ,
    @Direction INT ,
    @Name NVARCHAR(50) ,
    @Description NVARCHAR(500) ,
    @UserID INT
AS 
    IF ( @RelationshipTypeID = -1 ) 
        BEGIN
            INSERT  {databaseOwner}{objectQualifier}RelationshipTypes
                    ( Direction,
                      Name ,            
                      Description,					
                      CreatedByUserID ,
                      CreatedOnDate ,
                      LastModifiedByUserID ,
                      LastModifiedOnDate
			        
                    )
            VALUES  ( @Direction , --  @Direction INT 
                      @Name , -- Name - nvarchar(50)
                      @Description , -- @Description NVARCHAR(500)
                      @UserID , -- CreatedBy - int
                      GETDATE() , -- CreatedOn - datetime
                      @UserID , -- LastModifiedBy - int
                      GETDATE() -- LastModifiedOn - datetime
			        
                    )
                    
            SELECT  @RelationshipTypeID = SCOPE_IDENTITY()
        END
    ELSE 
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}RelationshipTypes
            SET     Name = @Name ,
                    Direction = @Direction ,
                    Description = @Description ,
                    LastModifiedByUserID = @UserID ,
                    LastModifiedOnDate = GETDATE()
            WHERE   RelationshipTypeID = @RelationshipTypeID
        END
        
    SELECT  @RelationshipTypeID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}SaveTabUrl]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SaveTabUrl]
	@TabID				int,
	@SeqNum				int,
	@PortalAliasID		int,
	@PortalAliasUsage	int,
	@Url				nvarchar(200),
	@QueryString		nvarchar(200),
	@CultureCode		nvarchar(50),
	@HttpStatus			nvarchar(50),
	@IsSystem			bit,
	@ModifiedByUserID	int
AS
	IF @HttpStatus = '200'
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}TabUrls
				SET HttpStatus = '301',
				[LastModifiedByUserID]= @ModifiedByUserID,
				[LastModifiedOnDate]= getdate()
				WHERE TabID = @TabID
					AND CultureCode = @CultureCode
					AND (@PortalAliasID = @PortalAliasID OR (PortalAliasId IS NULL AND @PortalAliasID IS NULL))
					AND HttpStatus = '200'
		END  
	IF EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}TabUrls WHERE TabId = @TabID AND SeqNum = @SeqNum)
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}TabUrls
				SET 
					PortalAliasId = @PortalAliasID,
					PortalAliasUsage = @PortalAliasUsage,
					Url = @Url,
					QueryString = @QueryString,
					CultureCode = @CultureCode,
					HttpStatus = @HttpStatus,
					IsSystem = @IsSystem,
					[LastModifiedByUserID]= @ModifiedByUserID,
					[LastModifiedOnDate]= getdate()
			WHERE TabId = @TabID AND SeqNum = @SeqNum 
		END
	ELSE
		BEGIN
			INSERT INTO {databaseOwner}{objectQualifier}TabUrls
					( TabId ,
					  SeqNum ,
					  Url ,
					  QueryString ,
					  HttpStatus ,
					  CultureCode ,
					  IsSystem,
					  PortalAliasId ,
					  PortalAliasUsage,
					  [CreatedByUserID],
					  [CreatedOnDate],
				  	  [LastModifiedByUserID],
					  [LastModifiedOnDate]
					)
			VALUES  ( @TabID ,
					  @SeqNum ,
					  @Url ,
					  @QueryString ,
					  @HttpStatus ,
					  @CultureCode ,
					  @IsSystem,
					  @PortalAliasID ,
					  @PortalAliasUsage,
					  @ModifiedByUserID,
					  getdate(),
					  @ModifiedByUserID,
					  getdate()
					)
		END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}SaveTabVersion]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}SaveTabVersion]
    @Id INT,
    @TabId INT,
    @TimeStamp DATETIME,
    @Version INT,
	@IsPublished BIT,
    @CreatedByUserID [INT] = -1,
	@LastModifiedByUserID [INT] = -1
AS
BEGIN
    IF ISNULL(@Id, 0) = 0
    BEGIN
        INSERT INTO {databaseOwner}[{objectQualifier}TabVersions](            
            [TabId],
            [TimeStamp],
            [Version],
			[IsPublished],
            [CreatedByUserID],
            [CreatedOnDate],
            [LastModifiedByUserID],
            [LastModifiedOnDate]
        ) VALUES (
            @TabId,
            @TimeStamp,
            @Version,      
			@IsPublished,      
            @CreatedByUserID,
            GETDATE(),
            @LastModifiedByUserID,
            GETDATE()
        )

        SELECT @Id = SCOPE_IDENTITY()
    END
    ELSE
    BEGIN
        UPDATE {databaseOwner}[{objectQualifier}TabVersions] SET            
            [TabId] = @TabId,
            [Version] = @Version,
            [TimeStamp] = @TimeStamp,
			[IsPublished] = @IsPublished,
            [LastModifiedByUserID] = @LastModifiedByUserID,
            [LastModifiedOnDate] = GETDATE()
        WHERE TabVersionId = @Id
    END
	SELECT @Id
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}SaveTabVersionDetail]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}SaveTabVersionDetail]
    @Id INT,
    @TabVersionId INT,
    @ModuleId INT,
    @ModuleVersion INT,
	@PaneName NVARCHAR(50),
	@ModuleOrder INT,
	@Action INT,
    @CreatedByUserID [INT] = -1,
	@LastModifiedByUserID [INT] = -1
AS
BEGIN
    IF ISNULL(@Id, 0) = 0
    BEGIN
        INSERT INTO {databaseOwner}[{objectQualifier}TabVersionDetails](
            [TabVersionId],
            [ModuleId],
            [ModuleVersion],
			[PaneName],
            [ModuleOrder],
			[Action],
            [CreatedByUserID],
            [CreatedOnDate],
            [LastModifiedByUserID],
            [LastModifiedOnDate]
        ) VALUES (
            @TabVersionId,
			@ModuleId,            
            @ModuleVersion,            
			@PaneName,
			@ModuleOrder,
			@Action,
            @CreatedByUserID,
            GETDATE(),
            @LastModifiedByUserID,
            GETDATE()
        )

        SELECT @Id = SCOPE_IDENTITY()
    END
    ELSE
    BEGIN
        UPDATE {databaseOwner}[{objectQualifier}TabVersionDetails] SET            
            [TabVersionId] = @TabVersionId,
			[ModuleId] = @ModuleId,
            [ModuleVersion] = @ModuleVersion,            
            [PaneName] = @PaneName,
			[ModuleOrder] = @ModuleOrder,
			[Action] = @Action,
            [LastModifiedByUserID] = @LastModifiedByUserID,
            [LastModifiedOnDate] = GETDATE()
        WHERE TabVersionDetailId = @Id
    END
	SELECT @Id
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}SaveUserRelationship]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}SaveUserRelationship]
    @UserRelationshipID INT,
	@UserID INT,
	@RelatedUserID INT,
	@RelationshipID INT,
	@Status INT,
	@CreateUpdateUserID INT
    
AS 
    IF ( @UserRelationshipID = -1 ) 
        BEGIN
            INSERT  {databaseOwner}{objectQualifier}UserRelationships
                    ( UserID,
					  RelatedUserID,					
					  RelationshipID,
					  Status,
                      CreatedByUserID ,
                      CreatedOnDate ,
                      LastModifiedByUserID ,
                      LastModifiedOnDate
			        
                    )
            VALUES  ( @UserID , -- @UserID int
					  @RelatedUserID , -- @RelatedUserlID int
					  @RelationshipID, -- @RelationshipID int
					  @Status , -- @Status int
                      @CreateUpdateUserID , -- CreatedBy - int
                      GETDATE() , -- CreatedOn - datetime
                      @CreateUpdateUserID , -- LastModifiedBy - int
                      GETDATE() -- LastModifiedOn - datetime
			        
                    )
                    
            SELECT  @UserRelationshipID = SCOPE_IDENTITY()
        END
    ELSE 
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}UserRelationships
            SET     UserID = @UserID,
					RelatedUserID = @RelatedUserID,
					RelationshipID = @RelationshipID,
					Status = @Status,
                    LastModifiedByUserID = @CreateUpdateUserID,
                    LastModifiedOnDate = GETDATE()
            WHERE   UserRelationshipID = @UserRelationshipID
        END
        
    SELECT  @UserRelationshipID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}SaveUserRelationshipPreference]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}SaveUserRelationshipPreference]
    @PreferenceID INT,
	@UserID INT,	
	@RelationshipID INT,
	@DefaultResponse INT,
	@CreateUpdateUserID INT
    
AS 
    IF ( @PreferenceID = -1 ) 
        BEGIN
            INSERT  {databaseOwner}{objectQualifier}UserRelationshipPreferences
                    ( UserID,					  
					  RelationshipID,
					  DefaultResponse,
                      CreatedByUserID ,
                      CreatedOnDate ,
                      LastModifiedByUserID ,
                      LastModifiedOnDate
			        
                    )
            VALUES  ( @UserID , -- @UserID int					  
					  @RelationshipID, -- @RelationshipID int
					  @DefaultResponse , -- @DefaultResponse int
                      @CreateUpdateUserID , -- CreatedBy - int
                      GETDATE() , -- CreatedOn - datetime
                      @CreateUpdateUserID , -- LastModifiedBy - int
                      GETDATE() -- LastModifiedOn - datetime
			        
                    )
                    
            SELECT  @PreferenceID = SCOPE_IDENTITY()
        END
    ELSE 
        BEGIN
            UPDATE  {databaseOwner}{objectQualifier}UserRelationshipPreferences
            SET     UserID = @UserID,					
					RelationshipID = @RelationshipID,
					DefaultResponse = @DefaultResponse,
                    LastModifiedByUserID = @CreateUpdateUserID,
                    LastModifiedOnDate = GETDATE()
            WHERE   PreferenceID = @PreferenceID
        END
        
    SELECT  @PreferenceID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}SearchDeletedItems_Add]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}SearchDeletedItems_Add]
	@document nvarchar(max)
AS
BEGIN
	INSERT INTO {databaseOwner}{objectQualifier}SearchDeletedItems
		   (  document )
	VALUES ( @document )
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}SearchDeletedItems_DeleteProcessed]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}SearchDeletedItems_DeleteProcessed]
    @CutoffTime	DATETIME
AS
BEGIN
	DELETE FROM {databaseOwner}{objectQualifier}SearchDeletedItems
	WHERE [DateCreated] < @CutoffTime
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}SearchDeletedItems_Select]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}SearchDeletedItems_Select]
    @CutoffTime	DATETIME
AS
BEGIN
	SELECT document
	FROM {databaseOwner}{objectQualifier}SearchDeletedItems
	WHERE [DateCreated] < @CutoffTime
	ORDER BY [DateCreated]
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}SearchProfilePropertyValues]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}SearchProfilePropertyValues]
 @PortalId INT,
 @PropertyName NVARCHAR(50),
 @SearchString NVARCHAR(100)
AS
SELECT DISTINCT
 up.PropertyValue
FROM
 {databaseOwner}{objectQualifier}UserProfile up
 INNER JOIN {databaseOwner}{objectQualifier}ProfilePropertyDefinition ppd ON ppd.PropertyDefinitionID = up.PropertyDefinitionID
WHERE
 ppd.PortalID = @PortalId
 AND ppd.PropertyName = @PropertyName
 AND up.PropertyValue LIKE '%' + @SearchString + '%'
 AND up.PropertyValue IS NOT NULL
ORDER BY
 up.PropertyValue
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}SearchTypes_GetAll]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}SearchTypes_GetAll]
AS
    SELECT *
	FROM {databaseOwner}[{objectQualifier}SearchTypes]
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}SetAllPortalTabsSecure]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SetAllPortalTabsSecure]
@PortalId INT,
@Secure BIT
AS
UPDATE {databaseOwner}[{objectQualifier}Tabs]
SET IsSecure=@Secure
WHERE PortalId=@PortalId

GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}SetCorePackageVersions]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}SetCorePackageVersions]
AS
DECLARE @Version VARCHAR(10)
SET @Version = (SELECT TOP 1
 CAST(v.Major AS VARCHAR) + '.'
 + CAST(v.Minor AS VARCHAR) + '.'
 + CAST(v.Build AS VARCHAR)
FROM {databaseOwner}{objectQualifier}Version v
ORDER BY v.Major DESC, v.Minor DESC, v.Build DESC);
UPDATE {databaseOwner}{objectQualifier}Packages
SET Version=@Version
WHERE [Name] IN ('DotNetNuke.Authentication',
'DotNetNuke.SearchResults',
'DotNetNuke.Security',
'DotNetNuke.ACTIONBUTTONSkinObject',
'DotNetNuke.ACTIONSSkinObject',
'DotNetNuke.BANNERSkinObject',
'DotNetNuke.BREADCRUMBSkinObject',
'DotNetNuke.COPYRIGHTSkinObject',
'DotNetNuke.CURRENTDATESkinObject',
'DotNetNuke.DOTNETNUKESkinObject',
'DotNetNuke.DROPDOWNACTIONSSkinObject',
'DotNetNuke.HELPSkinObject',
'DotNetNuke.HOSTNAMESkinObject',
'DotNetNuke.ICONSkinObject',
'DotNetNuke.LANGUAGESkinObject',
'DotNetNuke.LINKACTIONSSkinObject',
'DotNetNuke.LINKSSkinObject',
'DotNetNuke.LOGINSkinObject',
'DotNetNuke.LOGOSkinObject',
'DotNetNuke.MENUSkinObject',
'DotNetNuke.NAVSkinObject',
'DotNetNuke.PRINTMODULESkinObject',
'DotNetNuke.PRIVACYSkinObject',
'DotNetNuke.SEARCHSkinObject',
'DotNetNuke.SIGNINSkinObject',
'DotNetNuke.TERMSSkinObject',
'DotNetNuke.TITLESkinObject',
'DotNetNuke.TREEVIEWSkinObject',
'DotNetNuke.USERSkinObject',
'DotNetNuke.VISIBILITYSkinObject',
'DotNetNuke.TEXTSkinObject',
'DotNetNuke.STYLESSkinObject',
'DotNetNuke.LEFTMENUSkinObject',
'DotNetNuke.JQUERYSkinObject',
'DotNetNuke.CONTROLPANEL.SkinObject',
'DefaultAuthentication',
'DotNetNuke.ViewProfile',
'DotNetNuke.TagsSkinObject',
'DotNetNuke.Skin.Default',
'DotNetNuke.Container.Default',
'DotNetNuke.Registration',
'DotNetNuke.ToastSkinObject',
'DotNetNuke.DNNCSSINCLUDESkinObject',
'DotNetNuke.DNNCSSEXCLUDESkinObject',
'DotNetNuke.DNNJSINCLUDESkinObject',
'DotNetNuke.DNNJSEXCLUDESkinObject');
UPDATE {databaseOwner}{objectQualifier}DesktopModules
SET Version=@Version
FROM {databaseOwner}{objectQualifier}DesktopModules dtm
INNER JOIN {databaseOwner}{objectQualifier}Packages p ON p.PackageID=dtm.PackageID
WHERE p.[Name] IN ('DotNetNuke.Authentication',
'DotNetNuke.SearchResults',
'DotNetNuke.Security',
'DotNetNuke.ACTIONBUTTONSkinObject',
'DotNetNuke.ACTIONSSkinObject',
'DotNetNuke.BANNERSkinObject',
'DotNetNuke.BREADCRUMBSkinObject',
'DotNetNuke.COPYRIGHTSkinObject',
'DotNetNuke.CURRENTDATESkinObject',
'DotNetNuke.DOTNETNUKESkinObject',
'DotNetNuke.DROPDOWNACTIONSSkinObject',
'DotNetNuke.HELPSkinObject',
'DotNetNuke.HOSTNAMESkinObject',
'DotNetNuke.ICONSkinObject',
'DotNetNuke.LANGUAGESkinObject',
'DotNetNuke.LINKACTIONSSkinObject',
'DotNetNuke.LINKSSkinObject',
'DotNetNuke.LOGINSkinObject',
'DotNetNuke.LOGOSkinObject',
'DotNetNuke.MENUSkinObject',
'DotNetNuke.NAVSkinObject',
'DotNetNuke.PRINTMODULESkinObject',
'DotNetNuke.PRIVACYSkinObject',
'DotNetNuke.SEARCHSkinObject',
'DotNetNuke.SIGNINSkinObject',
'DotNetNuke.TERMSSkinObject',
'DotNetNuke.TITLESkinObject',
'DotNetNuke.TREEVIEWSkinObject',
'DotNetNuke.USERSkinObject',
'DotNetNuke.VISIBILITYSkinObject',
'DotNetNuke.TEXTSkinObject',
'DotNetNuke.STYLESSkinObject',
'DotNetNuke.LEFTMENUSkinObject',
'DotNetNuke.JQUERYSkinObject',
'DotNetNuke.CONTROLPANEL.SkinObject',
'DefaultAuthentication',
'DotNetNuke.ViewProfile',
'DotNetNuke.TagsSkinObject',
'DotNetNuke.Skin.Default',
'DotNetNuke.Container.Default',
'DotNetNuke.Registration',
'DotNetNuke.ToastSkinObject',
'DotNetNuke.DNNCSSINCLUDESkinObject',
'DotNetNuke.DNNCSSEXCLUDESkinObject',
'DotNetNuke.DNNJSINCLUDESkinObject',
'DotNetNuke.DNNJSEXCLUDESkinObject');
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}SetEventMessageComplete]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}SetEventMessageComplete]
	
	@EventMessageID int

AS
	UPDATE {databaseOwner}{objectQualifier}EventQueue
		SET IsComplete = 1
	WHERE EventMessageID = @EventMessageID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}SetFileHasBeenPublished]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}SetFileHasBeenPublished] 
    @FileId                    int,
    @HasBeenPublished        bit
AS
BEGIN

    -- Change Files.HasBeenPublished to the passed value
    UPDATE {databaseOwner}[{objectQualifier}Files]
    SET     [HasBeenPublished] = @HasBeenPublished
    FROM {databaseOwner}[{objectQualifier}Files] f
    WHERE f.FileId = @FileId
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}SetPublishedVersion]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}SetPublishedVersion] 
    @FileId                    int,
    @NewPublishedVersion    int
AS
BEGIN

    -- Insert a new record in the FileVersions table for the old published version
    INSERT {databaseOwner}[{objectQualifier}FileVersions]
                ([FileId]
                ,[Version]
                ,[FileName]
                ,[Extension]
                ,[Size]
                ,[Width]
                ,[Height]
                ,[ContentType]
                ,[Content]
                ,[CreatedByUserID]
                ,[CreatedOnDate]
                ,[LastModifiedByUserID]
                ,[LastModifiedOnDate]
                ,[SHA1Hash])
    SELECT        [FileId]
                ,[PublishedVersion]  [Version]                
                ,CONVERT(nvarchar, [FileId]) + '_' + CONVERT(nvarchar, [PublishedVersion]) +'.v.resources' 
                ,[Extension]
                ,[Size]
                ,[Width]
                ,[Height]
                ,[ContentType]
                ,[Content]
                ,[CreatedByUserID]
                ,[CreatedOnDate]
                ,[LastModifiedByUserID]
                ,[LastModifiedOnDate]
                ,[SHA1Hash]                    
    FROM {objectQualifier}Files
    WHERE FileId = @FileId

    -- Change Files.PublishedVersion to the new version number
    UPDATE {databaseOwner}[{objectQualifier}Files]
    SET     [PublishedVersion] = @NewPublishedVersion        
        ,[Extension] =v.[Extension]
        ,[Size] = v.[Size]
        ,[Width] = v.[Width]
        ,[Height] = v.[Height]
        ,[ContentType] = v.[ContentType]
        ,[Content] = v.[Content]
        ,[CreatedByUserID] = v.[CreatedByUserID]
        ,[CreatedOnDate] = v.[CreatedOnDate]
        ,[LastModifiedByUserID] = v.[LastModifiedByUserID]
        ,[LastModifiedOnDate] = v.[LastModifiedOnDate]
        ,[SHA1Hash] = v.[SHA1Hash]
        ,[HasBeenPublished] = 1
    FROM {databaseOwner}[{objectQualifier}Files] f
        JOIN {databaseOwner}[{objectQualifier}FileVersions] v ON f.FileId = v.FileId
    WHERE f.FileId = @FileId
        AND v.Version = @NewPublishedVersion

    -- Delete the FileVersions entry of the version being published
    DELETE {databaseOwner}[{objectQualifier}FileVersions]
    WHERE FileId = @FileId AND Version = @NewPublishedVersion
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UnRegisterAssembly]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UnRegisterAssembly]
	@PackageID     INT,
	@AssemblyName   NVARCHAR(250)
AS
	DECLARE @ReturnCode BIT
	SET @ReturnCode = 1 -- 1 = Can Delete Assembly, 0 = Cannot Delete Assembly

	-- First remove the Assembly Reference for this Package
	DELETE FROM {databaseOwner}{objectQualifier}Assemblies
		WHERE PackageID = @PackageID
			AND AssemblyName = @AssemblyName

	IF EXISTS(SELECT TOP 1 PackageID FROM {databaseOwner}{objectQualifier}Assemblies WHERE AssemblyName = @AssemblyName)
		-- Set ReturnCode = 0, so assembly is not deleted
		SET @ReturnCode = 0

	SELECT @ReturnCode
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateAnonymousUser]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateAnonymousUser]
    @UserID  char(36),
    @PortalID  int,
    @TabID   int,
    @LastActiveDate datetime 
as
begin
 update {databaseOwner}{objectQualifier}AnonymousUsers set 
  TabID = @TabID,
  LastActiveDate = @LastActiveDate
 where
  UserID = @UserID
  and PortalID = @PortalID

 if @@ROWCOUNT = 0
 begin
  insert into {databaseOwner}{objectQualifier}AnonymousUsers
   (UserID, PortalID, TabID, CreationDate, LastActiveDate) 
  VALUES
   (@UserID, @PortalID, @TabID, GetDate(), @LastActiveDate)
 end
end
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateAuthentication]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateAuthentication]
	@AuthenticationID       int,
	@PackageID				int,
	@AuthenticationType     nvarchar(100),
	@IsEnabled				bit,
	@SettingsControlSrc     nvarchar(250),
	@LoginControlSrc		nvarchar(250),
	@LogoffControlSrc		nvarchar(250),
	@LastModifiedByUserID	int
AS
	UPDATE {databaseOwner}{objectQualifier}Authentication
	SET    PackageID = @PackageID,
		   AuthenticationType = @AuthenticationType,
		   IsEnabled = @IsEnabled,
		   SettingsControlSrc = @SettingsControlSrc,
		   LoginControlSrc = @LoginControlSrc,
		   LogoffControlSrc = @LogoffControlSrc,
		   [LastModifiedByUserID] = @LastModifiedByUserID,	
		   [LastModifiedOnDate] = getdate()
	WHERE  AuthenticationID = @AuthenticationID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateContentItem]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateContentItem] 
	@ContentItemID			int,
	@Content				nvarchar(max),
	@ContentTypeID			int,
	@TabID					int,
	@ModuleID				int, 
	@ContentKey				nvarchar(250),
	@Indexed				bit,
	@LastModifiedByUserID	int,
	@StateID				int = NULL
AS
	UPDATE {databaseOwner}[{objectQualifier}ContentItems] 
		SET 
			Content = @Content,
			ContentTypeID = @ContentTypeID,
			TabID = @TabID,
			ModuleID = @ModuleID,
			ContentKey = @ContentKey,
			Indexed = @Indexed,
			LastModifiedByUserID = @LastModifiedByUserID,
			LastModifiedOnDate = getdate(),
			StateID = @StateID
	WHERE ContentItemId = @ContentItemId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateContentType]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateContentType] 
	@ContentTypeId		int,
	@ContentType		nvarchar(250)
AS
	UPDATE {databaseOwner}{objectQualifier}ContentTypes 
		SET 
			ContentType = @ContentType
	WHERE ContentTypeId = @ContentTypeId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateContentWorkflow]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateContentWorkflow]
@WorkflowID int,
@WorkflowName nvarchar(40),
@Description nvarchar(256),
@IsDeleted bit,
@StartAfterCreating bit,
@StartAfterEditing bit,
@DispositionEnabled bit
AS

UPDATE {databaseOwner}{objectQualifier}ContentWorkflows
SET    WorkflowName = @WorkflowName,
       Description = @Description,
       IsDeleted = @IsDeleted,
	   StartAfterCreating = @StartAfterCreating,
	   StartAfterEditing = @StartAfterEditing,
	   DispositionEnabled = @DispositionEnabled
WHERE  WorkflowID = @WorkflowID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateContentWorkflowState]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateContentWorkflowState]
	@StateID int,
	@StateName nvarchar(40),
	@Order int,
	@IsActive bit,
	@SendEmail bit,
	@SendMessage bit,
	@IsDisposalState bit,
	@OnCompleteMessageSubject nvarchar(256),
	@OnCompleteMessageBody nvarchar(1024),
	@OnDiscardMessageSubject nvarchar(256),
	@OnDiscardMessageBody nvarchar(1024)
AS

UPDATE {databaseOwner}{objectQualifier}ContentWorkflowStates
SET [StateName] = @StateName,
	[Order] = @Order,
	[IsActive] = @IsActive,
	[SendEmail] = @SendEmail,
	[SendMessage] = @SendMessage,
	[IsDisposalState] = @IsDisposalState,
	[OnCompleteMessageSubject] = @OnCompleteMessageSubject,
	[OnCompleteMessageBody] = @OnCompleteMessageBody,
	[OnDiscardMessageSubject] = @OnDiscardMessageSubject,
	[OnDiscardMessageBody] = @OnDiscardMessageBody
WHERE  [StateID] = @StateID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateContentWorkflowStatePermission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateContentWorkflowStatePermission]
	@WorkflowStatePermissionID int, 
	@StateID int, 
	@PermissionID int, 
	@RoleID int ,
	@AllowAccess bit,
    @UserID int,
	@LastModifiedByUserID	int
AS
    UPDATE {databaseOwner}{objectQualifier}ContentWorkflowStatePermission 
    SET     
	    [StateID] = @StateID,
	    [PermissionID] = @PermissionID,
	    [RoleID] = @RoleID,
	    [AllowAccess] = @AllowAccess,
        [UserID] = @UserID,
        [LastModifiedByUserID] = @LastModifiedByUserID,
	    [LastModifiedOnDate] = getdate()
    WHERE
		[WorkflowStatePermissionID] = @WorkflowStatePermissionID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateDatabaseVersion]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateDatabaseVersion]
    @Major  int,
    @Minor  int,
    @Build  int
AS

INSERT INTO {databaseOwner}{objectQualifier}Version 
    ( Major, Minor, Build, CreatedDate )
VALUES ( @Major, @Minor, @Build, getdate() )

--Get formatted version numeber
DECLARE @version NVARCHAR(8)
SET @version = RIGHT('0' + CAST(@Major AS VARCHAR(2)), 2) + '.' + RIGHT('0' + CAST(@Minor AS VARCHAR(2)), 2) + '.' + RIGHT('0' + CAST(@Build AS VARCHAR(2)), 2)

--Version the core modules that don't have manifest
--Update Desktop modules
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Authentication'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Registration'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='SearchResults'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Security'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='ViewProfile'

--Update Packages
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.ACTIONBUTTONSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.ACTIONSSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Authentication'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.BANNERSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.BREADCRUMBSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.CONTROLPANEL.SkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.COPYRIGHTSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.CURRENTDATESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DefaultAuthentication'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.DNNCSSINCLUDESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.DNNCSSEXCLUDESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.DNNJSINCLUDESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.DNNJSEXCLUDESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.DOTNETNUKESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.DROPDOWNACTIONSSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.HELPSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.HOSTNAMESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.ICONSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.JQUERYSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LANGUAGESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LEFTMENUSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LINKACTIONSSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LINKSSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LOGINSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LOGOSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.MENUSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.NAVSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.PRINTMODULESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.PRIVACYSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Registration'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SearchResults'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SEARCHSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SIGNINSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Security'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.STYLESSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.TagsSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.TERMSSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.TEXTSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.TITLESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.ToastSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.TREEVIEWSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.USERSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.VISIBILITYSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.ViewProfile'

GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateDatabaseVersionAndName]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure {databaseOwner}[{objectQualifier}UpdateDatabaseVersionAndName]

	@Major  int,
	@Minor  int,
	@Build  int,
	@Name	nvarchar(50)

AS

	INSERT INTO {databaseOwner}{objectQualifier}Version (
		Major,
		Minor,
		Build,
		[Name],
		CreatedDate
	)
		VALUES (
			@Major,
			@Minor,
			@Build,
			@Name,
			getdate()
		)
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateDatabaseVersionIncrement]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateDatabaseVersionIncrement] 

	@Major  int,
	@Minor  int,
	@Build  int,
	@Increment int,
	@Name	nvarchar(50)

AS

	UPDATE {databaseOwner}{objectQualifier}Version
	SET Increment=@Increment where Major=@Major AND Minor=@Minor AND Build=@Build AND Name=@Name
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateDesktopModule]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateDesktopModule]
	@DesktopModuleId		int,
	@PackageID			int,
	@ModuleName			nvarchar(128),
	@FolderName			nvarchar(128),
	@FriendlyName			nvarchar(128),
	@Description			nvarchar(2000),
	@Version			nvarchar(50),
	@IsPremium			bit,
	@IsAdmin			bit,
	@BusinessController		nvarchar(200),
	@SupportedFeatures		int,
	@Shareable			int,
	@CompatibleVersions		nvarchar(500),
	@Dependencies			nvarchar(400),
	@Permissions			nvarchar(400),
	@ContentItemId			int,
	@LastModifiedByUserID		int,
	@AdminPage		nvarchar(128),
	@HostPage		nvarchar(128)

AS
    UPDATE {databaseOwner}{objectQualifier}DesktopModules
    SET	
        PackageID = @PackageID,
        ModuleName = @ModuleName,
        FolderName = @FolderName,
        FriendlyName = @FriendlyName,
        Description = @Description,
        Version = @Version,
        IsPremium = @IsPremium,
        IsAdmin = @IsAdmin,
        BusinessControllerClass = @BusinessController,
        SupportedFeatures = @SupportedFeatures,
        Shareable = @Shareable,
        CompatibleVersions = @CompatibleVersions,
        Dependencies = @Dependencies,
        Permissions = @Permissions,
        ContentItemId = @ContentItemId,
        LastModifiedByUserID = @LastModifiedByUserID,
        LastModifiedOnDate = getdate(),
        AdminPage=@AdminPage,
        HostPage=@HostPage
    WHERE  DesktopModuleId = @DesktopModuleId

GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateDesktopModulePermission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateDesktopModulePermission]
    @DesktopModulePermissionId Int, -- not null!
    @PortalDesktopModuleId     Int, -- not null!
    @PermissionId              Int, -- not null!
    @RoleId                    Int, -- might be negative for virtual roles
    @AllowAccess               Bit, -- false: deny, true: grant
    @UserId                    Int, -- -1 is replaced by Null
    @LastModifiedByUserId      Int  -- -1 is replaced by Null
AS
    UPDATE {databaseOwner}[{objectQualifier}DesktopModulePermission]
    SET
        [PortalDesktopModuleId] = @PortalDesktopModuleId,
        [PermissionId]          = @PermissionId,
        [RoleId]                = @RoleId,
        [AllowAccess]           = @AllowAccess,
        [UserId]                = CASE WHEN @UserId = -1 THEN Null ELSE @UserId  END,
        [LastModifiedByUserId]  = CASE WHEN @LastModifiedByUserId = -1 THEN Null ELSE @LastModifiedByUserId  END,
        [LastModifiedOnDate]    = GetDate()
    WHERE [DesktopModulePermissionId] = @DesktopModulePermissionId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateEventLogConfig]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateEventLogConfig]
	@ID int,
	@LogTypeKey nvarchar(35),
	@LogTypePortalID int,
	@LoggingIsActive bit,
	@KeepMostRecent int,
	@EmailNotificationIsActive bit,
	@NotificationThreshold int,
	@NotificationThresholdTime int,
	@NotificationThresholdTimeType int,
	@MailFromAddress nvarchar(50),
	@MailToAddress nvarchar(50)
AS
UPDATE {databaseOwner}{objectQualifier}EventLogConfig
SET 	LogTypeKey = @LogTypeKey,
	LogTypePortalID = @LogTypePortalID,
	LoggingIsActive = @LoggingIsActive,
	KeepMostRecent = @KeepMostRecent,
	EmailNotificationIsActive = @EmailNotificationIsActive,
	NotificationThreshold = @NotificationThreshold,
	NotificationThresholdTime = @NotificationThresholdTime,
	NotificationThresholdTimeType = @NotificationThresholdTimeType,
	MailFromAddress = @MailFromAddress,
	MailToAddress = @MailToAddress
WHERE	ID = @ID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateEventLogPendingNotif]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateEventLogPendingNotif]
	@LogConfigID int
AS
UPDATE {databaseOwner}{objectQualifier}EventLog
SET LogNotificationPending = 0
WHERE LogNotificationPending = 1
AND LogConfigID = @LogConfigID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateEventLogType]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateEventLogType]
	@LogTypeKey nvarchar(35),
	@LogTypeFriendlyName nvarchar(50),
	@LogTypeDescription nvarchar(128),
	@LogTypeOwner nvarchar(100),
	@LogTypeCSSClass nvarchar(40)
AS
UPDATE {databaseOwner}{objectQualifier}EventLogTypes
	SET LogTypeFriendlyName = @LogTypeFriendlyName,
	LogTypeDescription = @LogTypeDescription,
	LogTypeOwner = @LogTypeOwner,
	LogTypeCSSClass = @LogTypeCSSClass
WHERE	LogTypeKey = @LogTypeKey
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateExtensionUrlProvider]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateExtensionUrlProvider] 
	@ExtensionUrlProviderID		int,
	@IsActive					bit
AS
	UPDATE {databaseOwner}{objectQualifier}ExtensionUrlProviders
		SET IsActive = @IsActive
		WHERE ExtensionUrlProviderID = @ExtensionUrlProviderID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateFile]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateFile]
    @FileId                 Int,
    @VersionGuid            UniqueIdentifier,
    @FileName               nVarChar(246),
    @Extension              nVarChar(100),
    @Size                   Int,
    @Width                  Int,
    @Height                 Int,
    @ContentType            nVarChar(200),
    @FolderID               Int,
    @LastModifiedByUserID   Int,
    @Hash                   VarChar(40),
    @LastModificationTime   DateTime,
    @Title                  nVarChar(256),
    @Description            nVarChar(500),
    @EnablePublishPeriod    Bit,
    @StartDate              DateTime,
    @EndDate                DateTime,
    @ContentItemID          Int
AS
BEGIN
    SET NOCOUNT OFF;
    DECLARE @PortalID int;
    SELECT @PortalID = PortalID FROM {databaseOwner}[{objectQualifier}Folders] WHERE FolderID = @FolderID;
    UPDATE {databaseOwner}[{objectQualifier}Files]
     SET   FileName             = @FileName,
           VersionGuid          = @VersionGuid,
           Extension            = @Extension,
           Size                 = @Size,
           Width                = @Width,
           Height               = @Height,
           ContentType          = @ContentType,
           FolderID             = @FolderID,
           PortalID             = @PortalID,
           LastModifiedByUserID = @LastModifiedByUserID,
           LastModifiedOnDate   = GetDate(),
           SHA1Hash             = @Hash,
           LastModificationTime = @LastModificationTime,
           Title                = @Title,
           Description          = @Description,
           EnablePublishPeriod  = @EnablePublishPeriod,
           StartDate            = @StartDate,
           EndDate              = @EndDate,
           ContentItemID        = @ContentItemID
     WHERE FileId = @FileId
    
	--UPDATE THE PARENT FOLDERS UPDATED DATE TO LASTET DATE
	IF(@@ROWCOUNT>0 AND @FolderID IS NOT NULL)
	BEGIN
		EXEC {databaseOwner}[{objectQualifier}UpdateFolderModifiedOnToCurrentDate] @FolderID
	END

END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateFileContent]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure {databaseOwner}[{objectQualifier}UpdateFileContent]

@FileId      int,
@Content     image

as

update {databaseOwner}{objectQualifier}Files
set    Content = @Content
where  FileId = @FileId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateFileHashCode]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateFileHashCode]
	@FileId				  Int, 		-- Not Null
	@HashCode VARCHAR(40)  -- Not NULL
AS
BEGIN
    UPDATE {databaseOwner}[{objectQualifier}Files]
    SET    SHA1Hash = @HashCode
    WHERE  FileId = @FileId
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateFileLastModificationTime]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateFileLastModificationTime]
	@FileId				  Int, 		-- Not Null
	@LastModificationTime DateTime  -- Null: Now
AS
BEGIN
    UPDATE {databaseOwner}[{objectQualifier}Files]
    SET    LastModificationTime = IsNull(@LastModificationTime, GetDate())
    WHERE  FileId = @FileId
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateFileVersion]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateFileVersion]
	@FileID			int,
    @VersionGuid	uniqueidentifier
AS
    UPDATE {databaseOwner}{objectQualifier}Files
        SET    VersionGuid = @VersionGuid
    WHERE  FileID = @FileID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateFolder]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateFolder]
	@PortalID 				int,
	@VersionGuid 			uniqueidentifier,	
	@FolderID 				int,
	@FolderPath 			nvarchar(300),
	@MappedPath 			nvarchar(300),
	@StorageLocation 		int,
	@IsProtected 			bit,
	@IsCached 				bit,
	@LastUpdated 			datetime,
	@LastModifiedByUserID  	int,
	@FolderMappingID		int,
	@IsVersioned			bit = 0,
	@WorkflowID				int = NULL,
	@ParentID				int = NULL
AS
BEGIN
	SET NOCOUNT OFF;
	UPDATE {databaseOwner}[{objectQualifier}Folders]
	SET
		FolderPath = @FolderPath,
		MappedPath = @MappedPath,
		VersionGuid = @VersionGuid,
		StorageLocation = @StorageLocation,
		IsProtected = @IsProtected,
		IsCached = @IsCached,
		LastUpdated = @LastUpdated,
		LastModifiedByUserID = @LastModifiedByUserID,
		LastModifiedOnDate = getdate(),
		FolderMappingID = @FolderMappingID,
		IsVersioned = @IsVersioned,
		WorkflowID = @WorkflowID,
		ParentID = @ParentID
	WHERE FolderID = @FolderID
	
	--UPDATE THE PARENT FOLDERS UPDATED DATE TO LASTET DATE
	IF(@@ROWCOUNT>0 AND @ParentID IS NOT NULL)
	BEGIN
		EXEC {databaseOwner}[{objectQualifier}UpdateFolderModifiedOnToCurrentDate] @ParentID
	END
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateFolderMapping]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateFolderMapping]
	@FolderMappingID int,
	@MappingName nvarchar(50),
	@Priority int,
	@LastModifiedByUserID int
AS
BEGIN
	UPDATE {databaseOwner}[{objectQualifier}FolderMappings]
	SET
		MappingName = @MappingName,
		Priority = @Priority,
		LastModifiedByUserID = @LastModifiedByUserID,
		LastModifiedOnDate = GETDATE()
	WHERE FolderMappingID = @FolderMappingID
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateFolderMappingsSetting]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateFolderMappingsSetting]
	@FolderMappingID int,
	@SettingName nvarchar(50),
	@SettingValue nvarchar(2000),
	@LastModifiedByUserID int
AS
BEGIN
	UPDATE {databaseOwner}[{objectQualifier}FolderMappingsSettings]
	SET
		SettingValue = @SettingValue,
		LastModifiedByUserID = @LastModifiedByUserID,
		LastModifiedOnDate = GETDATE()
	WHERE FolderMappingID = @FolderMappingID AND SettingName = @SettingName
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateFolderModifiedOnToCurrentDate]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateFolderModifiedOnToCurrentDate]
    @FolderID	Int
AS
BEGIN
	SET NOCOUNT OFF;
	--Update the folder only if it has LastModifiedOnDate more than 59 secs old.
	--This is to avoid too many updates during massive sync
	UPDATE {databaseOwner}[{objectQualifier}Folders] SET LastModifiedOnDate=GETDATE() WHERE FolderID=@FolderID AND DATEDIFF(SECOND,LastModifiedOnDate,GETDATE())>=60
	IF(@@ROWCOUNT>0)
	BEGIN
		--Check if the parent also needs updation
		DECLARE @ParentID Int;
		SELECT @ParentID = ParentID FROM {databaseOwner}[{objectQualifier}Folders] WHERE FolderID=@FolderID
		IF(@ParentID>0)
		BEGIN
			EXEC {databaseOwner}[{objectQualifier}UpdateFolderModifiedOnToCurrentDate] @ParentID
		END
	END
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateFolderPermission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateFolderPermission]
    @FolderPermissionID     Int, -- not null!
    @FolderID               Int, -- not null!
    @PermissionId           Int, -- not null!
    @RoleId                 Int, -- might be negative for virtual roles
    @AllowAccess            Bit, -- false: deny, true: grant
    @UserId                 Int, -- -1 is replaced by Null
    @LastModifiedByUserId   Int  -- -1 is replaced by Null
AS
    UPDATE {databaseOwner}[{objectQualifier}FolderPermission] SET
        [FolderID]             = @FolderID,
        [PermissionID]         = @PermissionID,
        [RoleId]               = @RoleId,
        [AllowAccess]          = @AllowAccess,
        [UserId]               = CASE WHEN @UserId = -1 THEN Null ELSE @UserId  END,
        [LastModifiedByUserId] = CASE WHEN @LastModifiedByUserId = -1 THEN Null ELSE @LastModifiedByUserId  END,
        [LastModifiedOnDate]   = GetDate()
    WHERE
        [FolderPermissionID]   = @FolderPermissionID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateFolderVersion]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateFolderVersion]
	@FolderID		int,
    @VersionGuid	uniqueidentifier
AS
    UPDATE {databaseOwner}{objectQualifier}Folders
        SET    VersionGuid = @VersionGuid
    WHERE  FolderID = @FolderID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateHeirarchicalTerm]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateHeirarchicalTerm] 
	@TermID					int, 
	@VocabularyID			int,
	@ParentTermID			int,
	@Name					nvarchar(250),
	@Description			nvarchar(2500),
	@Weight					int,
	@LastModifiedByUserID	int
AS

	DECLARE @Left				int
	DECLARE @Right				int
	DECLARE @Width				int
	
	SET @Left = (SELECT TermLeft FROM {databaseOwner}{objectQualifier}Taxonomy_Terms WHERE TermID = @TermID)
	SET @Right = (SELECT TermRight FROM {databaseOwner}{objectQualifier}Taxonomy_Terms WHERE TermID = @TermID)
	SET @Width = @Right - @Left + 1
	
	BEGIN TRANSACTION
		BEGIN
			-- Temporarily remove term from heirarchy - but retain information about term and children 
			-- (these should now be -n, ...,-2,-1 etc)
			UPDATE {databaseOwner}{objectQualifier}Taxonomy_Terms 
				SET TermLeft = TermLeft - @Right - 1,
					TermRight = TermRight - @Right - 1
				WHERE TermLeft >= @Left
					AND TermRight <= @Right
					AND VocabularyID = @VocabularyID
			
			IF @@ERROR = 0
				BEGIN
					-- Update Left values for all items that are after the original term
					UPDATE {databaseOwner}{objectQualifier}Taxonomy_Terms 
						SET TermLeft = TermLeft - @Width 
						WHERE TermLeft >= @Left + @Width
							AND VocabularyID = @VocabularyID

					IF @@ERROR = 0
						BEGIN
						-- Update Right values for all items that are after the original term
							UPDATE {databaseOwner}{objectQualifier}Taxonomy_Terms 
								SET TermRight = TermRight - @Width 
								WHERE TermRight >= @Right
									AND VocabularyID = @VocabularyID

							IF @@ERROR = 0
								BEGIN
									-- Get Left value of Sibling that we are inserting before
									SET @Left = (SELECT TOP 1 TermLeft FROM {databaseOwner}{objectQualifier}Taxonomy_Terms 
														WHERE VocabularyID = @VocabularyID 
															AND ParentTermID = @ParentTermID
															AND Name > @Name
														ORDER BY Name)
														
									-- Term is to be inserted at end of sibling list so get the Right value of the parent, which will become our new left value						
									IF @Left IS NULL
										SET @Left = (SELECT TermRight FROM {databaseOwner}{objectQualifier}Taxonomy_Terms 
															WHERE VocabularyID = @VocabularyID 
																AND TermID = @ParentTermID)

									-- Left is still null means this is the first term in this vocabulary - set the Left to 1
									IF @Left IS NULL
										SET @Left = 1
							
									SET @Right = @Left + @Width - 1
																	
									-- Update Left values for all items that are after the updated term
									UPDATE {databaseOwner}{objectQualifier}Taxonomy_Terms 
										SET TermLeft = TermLeft + @Width 
										WHERE TermLeft >= @Left
											AND VocabularyID = @VocabularyID

									IF @@ERROR = 0
										BEGIN
										-- Update Right values for all items that are after the term
											UPDATE {databaseOwner}{objectQualifier}Taxonomy_Terms 
												SET TermRight = TermRight + @Width 
												WHERE TermRight >= @Left
													AND VocabularyID = @VocabularyID

											IF @@ERROR = 0
												BEGIN
													-- Update Left/Right values for all items temporarily removed from heirarchy
													UPDATE {databaseOwner}{objectQualifier}Taxonomy_Terms 
														SET TermLeft = TermLeft + @Left + @Width,
															TermRight = TermRight + @Left + @Width
														WHERE TermLeft < 0
															AND TermRight < 0
															AND VocabularyID = @VocabularyID

													IF @@ERROR = 0
														BEGIN
															-- Update Term
															UPDATE {databaseOwner}{objectQualifier}Taxonomy_Terms
																SET 
																	VocabularyID = @VocabularyID,
																	ParentTermID = @ParentTermID,
																	[Name] = @Name,
																	Description = @Description,
																	Weight = @Weight,
																	LastModifiedByUserID = @LastModifiedByUserID,
																	LastModifiedOnDate = getdate()
															WHERE TermID = @TermID

															IF @@ERROR = 0
																BEGIN
																	COMMIT TRANSACTION
																END
															ELSE
																BEGIN
																	-- Rollback the transaction
																	ROLLBACK TRANSACTION		
																END
															END
													ELSE
														BEGIN
															-- Rollback the transaction
															ROLLBACK TRANSACTION
														END
													END
											ELSE
												BEGIN
													-- Rollback the transaction
													ROLLBACK TRANSACTION
												END
											END
									ELSE
										BEGIN
											-- Rollback the transaction
											ROLLBACK TRANSACTION
										END
									END
								ELSE
									BEGIN
										-- Rollback the transaction
										ROLLBACK TRANSACTION		
									END
							END
					ELSE
						BEGIN
							-- Rollback the transaction
							ROLLBACK TRANSACTION
						END
				END
			ELSE
				BEGIN
					-- Rollback the transaction
					ROLLBACK TRANSACTION		
				END
		END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateHostSetting]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateHostSetting]
	@SettingName	   nvarchar( 50),
	@SettingValue	   nvarchar(Max),
	@SettingIsSecure   bit,
	@UserID	           int
AS
BEGIN
	-- empty value: remove setting
	IF IsNull(@SettingValue, N'') = N'' AND IsNull(@SettingName, N'') != N''
		DELETE FROM {databaseOwner}[{objectQualifier}HostSettings]
		 WHERE SettingName = @SettingName;
	ELSE IF IsNull(@SettingName, N'') != N'' BEGIN -- key must be valid
		MERGE INTO {databaseOwner}[{objectQualifier}HostSettings] S
		 USING (SELECT @SettingName SN, @SettingValue SV, @SettingIsSecure Sec) Q
		    ON (S.SettingName = Q.SN)
		 WHEN MATCHED AND (IsNull(S.SettingValue, N'') != IsNull(Q.SV, N'') OR S.SettingIsSecure != Q.Sec) THEN -- update only, if value has been modified:
			UPDATE SET [SettingValue] = Q.SV, [SettingIsSecure] = Q.Sec, [LastModifiedByUserID] = @UserID, [LastModifiedOnDate] = GetDate()
		 WHEN NOT MATCHED THEN 
		    INSERT ( SettingName,  SettingValue,  SettingIsSecure, CreatedByUserID    , CreatedOnDate, LastModifiedByUserID, LastModifiedOnDate)
			VALUES (@SettingName, @SettingValue, @SettingIsSecure, IsNull(@UserID, -1),     GetDate(),  IsNull(@UserID, -1),          GetDate());
	END; -- Else If
END; -- Procedure
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateIPFilter]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateIPFilter]
	@IPFilterID		int,
	@IPAddress		nvarchar(50),
	@SubnetMask		nvarchar(50),
	@RuleType		tinyint,
	@LastModifiedByUserID		int
AS 
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}IPFilter 
			SET 
				IPAddress = @IPAddress,
				SubnetMask = @SubnetMask,
				RuleType = @RuleType,
				LastModifiedByUserID = @LastModifiedByUserID,
				LastModifiedOnDate = getdate()
			WHERE IPFilterID = @IPFilterID
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateLanguage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateLanguage]

	@LanguageID			    int,
	@CultureCode		    nvarchar(50),
	@CultureName            nvarchar(200),
	@FallbackCulture        nvarchar(50),
	@LastModifiedByUserID	int

AS
	UPDATE {databaseOwner}{objectQualifier}Languages
		SET
			CultureCode = @CultureCode,
			CultureName = @CultureName,
			FallbackCulture = @FallbackCulture,
			[LastModifiedByUserID] = @LastModifiedByUserID,	
			[LastModifiedOnDate] = getdate()
	WHERE LanguageID = @LanguageID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateLanguagePack]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateLanguagePack]
	@LanguagePackID			int,
	@PackageID			    int,
	@LanguageID			    int,
	@DependentPackageID		int,
	@LastModifiedByUserID	int

AS
	UPDATE {databaseOwner}{objectQualifier}LanguagePacks
		SET
			PackageID = @PackageID,
			LanguageID = @LanguageID,
			DependentPackageID = @DependentPackageID,
			[LastModifiedByUserID] = @LastModifiedByUserID,	
			[LastModifiedOnDate] = GETDATE()
	WHERE LanguagePackID = @LanguagePackID

	SELECT @LanguagePackID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateLegacyFolders]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateLegacyFolders]
AS
	UPDATE TOP (500) {databaseOwner}{objectQualifier}Folders
		SET ParentID = (COALESCE(	
				(SELECT TOP 1
					F2.FolderID 
					FROM {databaseOwner}{objectQualifier}Folders AS F2
					WHERE SUBSTRING (F1.FolderPath, 1, LEN(F1.FolderPath) - 
						(CASE 
							WHEN CHARINDEX ('/', REVERSE(SUBSTRING(F1.FolderPath, 0, LEN(F1.FolderPath)))) != 0 
							THEN CHARINDEX ('/', REVERSE(SUBSTRING(F1.FolderPath, 0, LEN(F1.FolderPath)))) 
							ELSE LEN(F1.FolderPath) END
						 )) = F2.FolderPath
						AND (F2.PortalID = F1.PortalID OR (F1.PortalID IS NULL AND F2.PortalID IS NULL))
						AND LEN(F1.FolderPath) > LEN(F2.FolderPath)
					ORDER BY LEN(F2.FolderPath) DESC
					), -1))
	FROM {databaseOwner}{objectQualifier}Folders AS F1
	WHERE F1.ParentID IS NULL AND FolderPath <> ''
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateListEntry]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure {databaseOwner}[{objectQualifier}UpdateListEntry]
	
	@EntryID int, 
	@Value nvarchar(100), 
	@Text nvarchar(150), 
	@Description nvarchar(500),
	@LastModifiedByUserID	int

AS
	UPDATE {databaseOwner}{objectQualifier}Lists
		SET	
			[Value] = @Value,
			[Text] = @Text,	
			[Description] = @Description,
			[LastModifiedByUserID] = @LastModifiedByUserID,	
			[LastModifiedOnDate] = getdate()
		WHERE 	[EntryID] = @EntryID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateListSortOrder]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateListSortOrder]
(
	@EntryID	int, 
	@MoveUp		bit
)
AS
	DECLARE @EntryListName nvarchar(50)
	DECLARE @ParentID int
	DECLARE @CurrentSortValue int
	DECLARE @ReplaceSortValue int
	-- Get the current sort order
	SELECT @CurrentSortValue = [SortOrder], @EntryListName = [ListName], @ParentID = [ParentID] 
		FROM {databaseOwner}{objectQualifier}Lists WITH (nolock) 
		WHERE [EntryID] = @EntryID
	-- Move the item up or down?
	IF (@MoveUp = 1)
	  BEGIN
		IF (@CurrentSortValue != 1) -- we rearrange sort order only if list enable sort order - sortorder >= 1
		  BEGIN
			SET @ReplaceSortValue = @CurrentSortValue - 1
			UPDATE {databaseOwner}{objectQualifier}Lists 
				SET [SortOrder] = @CurrentSortValue 
				WHERE [SortOrder] = @ReplaceSortValue And [ListName] = @EntryListName And [ParentID] = @ParentID
			UPDATE {databaseOwner}{objectQualifier}Lists 
				SET [SortOrder] = @ReplaceSortValue 
				WHERE [EntryID] = @EntryID
		  END
	  END
	ELSE
	  BEGIN
		IF (@CurrentSortValue < (SELECT MAX([SortOrder]) FROM {databaseOwner}{objectQualifier}Lists))
		BEGIN
		  SET @ReplaceSortValue = @CurrentSortValue + 1
		  UPDATE {databaseOwner}{objectQualifier}Lists 
			SET [SortOrder] = @CurrentSortValue 
			WHERE SortOrder = @ReplaceSortValue And [ListName] = @EntryListName  And [ParentID] = @ParentID
		  UPDATE {databaseOwner}{objectQualifier}Lists 
			SET [SortOrder] = @ReplaceSortValue 
			WHERE EntryID = @EntryID
		END
	  END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateModule]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateModule]
	@ModuleId					int,
    @ModuleDefId                int,
	@ContentItemID				int,
	@AllTabs					bit, 
	@StartDate					datetime,
	@EndDate					datetime,
	@InheritViewPermissions		bit,
	@IsShareable				bit,
	@IsShareableViewOnly		bit,
	@IsDeleted					bit,
	@LastModifiedByUserID  		int
	
AS
	UPDATE	{databaseOwner}{objectQualifier}Modules
		SET		
			ModuleDefId = @ModuleDefId,
            ContentItemID = @ContentItemID,
			AllTabs = @AllTabs,
			StartDate = @StartDate,
			EndDate = @EndDate,
			InheritViewPermissions = @InheritViewPermissions,
			IsShareable = @IsShareable,
			IsShareableViewOnly = @IsShareableViewOnly,
			IsDeleted = @IsDeleted,
			LastModifiedByUserID = @LastModifiedByUserID,
			LastModifiedOnDate = getdate()
	WHERE  ModuleId = @ModuleId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateModuleControl]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateModuleControl]
	@ModuleControlId				int,
	@ModuleDefID					int,
	@ControlKey						nvarchar(50),
	@ControlTitle					nvarchar(50),
	@ControlSrc						nvarchar(256),
	@IconFile						nvarchar(100),
	@ControlType					int,
	@ViewOrder						int,
	@HelpUrl						nvarchar(200),
	@SupportsPartialRendering		bit,
	@SupportsPopUps					bit,
	@LastModifiedByUserID  			int

AS
	UPDATE {databaseOwner}{objectQualifier}ModuleControls
	SET    
		ModuleDefId = @ModuleDefId,
		ControlKey = @ControlKey,
		ControlTitle = @ControlTitle,
		ControlSrc = @ControlSrc,
		IconFile = @IconFile,
		ControlType = @ControlType,
		ViewOrder = ViewOrder,
		HelpUrl = @HelpUrl,
		SupportsPartialRendering = @SupportsPartialRendering,
		SupportsPopUps = @SupportsPopUps,
		LastModifiedByUserID = @LastModifiedByUserID,
		LastModifiedOnDate = getdate()
	WHERE  ModuleControlId = @ModuleControlId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateModuleDefinition]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateModuleDefinition]

	@ModuleDefId			int,    
	@FriendlyName			nvarchar(128),
	@DefinitionName			nvarchar(128),
	@DefaultCacheTime		int,
	@LastModifiedByUserID	int

as

update {databaseOwner}{objectQualifier}ModuleDefinitions 
	SET FriendlyName = @FriendlyName,
		DefinitionName = @DefinitionName,
		DefaultCacheTime = @DefaultCacheTime,
		LastModifiedByUserID = @LastModifiedByUserID,
		LastModifiedOnDate = getdate()
	WHERE ModuleDefId = @ModuleDefId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateModuleLastContentModifiedOnDate]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateModuleLastContentModifiedOnDate]
    @ModuleID	int
AS
    UPDATE {databaseOwner}{objectQualifier}Modules
        SET    LastContentModifiedOnDate = GETDATE()
    WHERE  ModuleID = @ModuleID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateModuleOrder]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateModuleOrder]
	@TabId              int,
	@ModuleId           int,
	@ModuleOrder        int,
	@PaneName           nvarchar(50)
AS
	UPDATE {databaseOwner}{objectQualifier}TabModules
		SET	ModuleOrder = @ModuleOrder,
			PaneName = @PaneName,
			VersionGuid = newId(),
			LastModifiedOnDate = GETDATE()
	WHERE TabId = @TabId
	  AND ModuleId = @ModuleId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateModulePermission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateModulePermission]
    @ModulePermissionId     Int, -- not null!
    @PortalId               Int, -- not null!
    @ModuleId               Int, -- not null!
    @PermissionId           Int, -- not null!
    @RoleId                 Int, -- might be negative for virtual roles
    @AllowAccess            Bit, -- false: deny, true: grant
    @UserId                 Int, -- -1 is replaced by Null
    @LastModifiedByUserId   Int  -- -1 is replaced by Null
AS
    UPDATE {databaseOwner}[{objectQualifier}ModulePermission] SET
        [ModuleId]             = @ModuleId,
        [PortalId]             = @PortalId,
        [PermissionId]         = @PermissionId,
        [RoleId]               = @RoleId,
        [AllowAccess]          = @AllowAccess,
        [UserId]               = CASE WHEN @UserId = -1 THEN Null ELSE @UserId  END,
        [LastModifiedByUserId] = CASE WHEN @LastModifiedByUserId = -1 THEN Null ELSE @LastModifiedByUserId  END,
        [LastModifiedOnDate]   = GetDate()
    WHERE
        [ModulePermissionID]   = @ModulePermissionID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateModuleSetting]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateModuleSetting]
	@ModuleID			int,           -- Not Null|-1
	@SettingName		nvarchar( 50), -- Not Null|''
	@SettingValue		nvarchar(Max), -- Null: remove setting
	@UserID				int            -- for logging
AS
BEGIN
	-- empty value: remove setting
	IF IsNull(@SettingValue, N'') = N'' AND IsNull(@SettingName, N'') != N''
		DELETE FROM {databaseOwner}[{objectQualifier}ModuleSettings]
		 WHERE IsNull(ModuleID, -1) = IsNull(@ModuleID, -1)
		   AND SettingName = @SettingName;
	ELSE IF IsNull(@SettingName, N'') != N'' AND IsNull(@ModuleID, -1) != -1 BEGIN -- key must be valid
		MERGE INTO {databaseOwner}[{objectQualifier}ModuleSettings] S
		 USING (SELECT @ModuleID MID, @SettingName SN, @SettingValue SV) Q
		    ON (S.ModuleID = Q.MID AND S.SettingName = Q.SN)
		 WHEN MATCHED AND IsNull(S.SettingValue, N'') != IsNull(Q.SV, N'') THEN -- update only, if value has been modified:
			UPDATE SET [SettingValue] = Q.SV, [LastModifiedByUserID] = @UserID, [LastModifiedOnDate] = GetDate()
		 WHEN NOT MATCHED THEN 
		    INSERT ( ModuleID,  SettingName,  SettingValue, CreatedByUserID    , CreatedOnDate, LastModifiedByUserID, LastModifiedOnDate)
			VALUES (@ModuleID, @SettingName, @SettingValue, IsNull(@UserID, -1),     GetDate(),  IsNull(@UserID, -1),          GetDate());
	END; -- Else If
END; -- Procedure
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateOnlineUser]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateOnlineUser]
@UserID 	INT,
@PortalID 	INT,
@TabID 		INT,
@LastActiveDate DATETIME 
AS
BEGIN
	IF EXISTS (SELECT UserID FROM {databaseOwner}{objectQualifier}Users WHERE UserID = @UserID)
	BEGIN
		IF EXISTS (SELECT UserID FROM {databaseOwner}{objectQualifier}UsersOnline WHERE UserID = @UserID and PortalID = @PortalID)
			UPDATE 
				{databaseOwner}{objectQualifier}UsersOnline
			SET 
				TabID = @TabID,
				LastActiveDate = @LastActiveDate
			WHERE
				UserID = @UserID
				and 
				PortalID = @PortalID
		ELSE
			INSERT INTO
				{databaseOwner}{objectQualifier}UsersOnline
				(UserID, PortalID, TabID, CreationDate, LastActiveDate) 
			VALUES
				(@UserID, @PortalID, @TabID, GetDate(), @LastActiveDate)
	END

END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdatePackage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdatePackage]
	@PackageID			int,
	@PortalID			int,
	@FriendlyName	    nvarchar(250),
	@Description	    nvarchar(2000),
	@PackageType	    nvarchar(50),
	@Version		    nvarchar(50),
	@License		    ntext,
	@Manifest		    ntext,
	@Owner				nvarchar(100),
	@Organization		nvarchar(100),
	@Url				nvarchar(250),
	@Email				nvarchar(100),
	@ReleaseNotes	    ntext,
	@IsSystemPackage    bit,
	@LastModifiedByUserID	int,
	@FolderName			nvarchar(128),
	@IconFile			nvarchar(100)
AS
	UPDATE {databaseOwner}{objectQualifier}Packages
		SET	
			PortalID = @PortalID,
			FriendlyName = @FriendlyName,
			[Description] = @Description,
			PackageType = @PackageType,
			Version = @Version,
			License = @License,
			Manifest = @Manifest,
			[Owner] = @Owner,
			Organization = @Organization,
			Url = @Url,
			Email = @Email,
			ReleaseNotes = @ReleaseNotes,
			IsSystemPackage = @IsSystemPackage,
			[LastModifiedByUserID] = @LastModifiedByUserID,	[LastModifiedOnDate] = getdate(),
			FolderName = @FolderName,
			IconFile = @IconFile
		WHERE  PackageID = @PackageID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdatePermission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdatePermission]
	@PermissionID			int, 
	@PermissionCode			varchar(50),
	@ModuleDefID			int, 
	@PermissionKey			varchar(50), 
	@PermissionName			varchar(50),
	@LastModifiedByUserID	int
AS

UPDATE {databaseOwner}{objectQualifier}Permission SET
	[ModuleDefID] = @ModuleDefID,
	[PermissionCode] = @PermissionCode,
	[PermissionKey] = @PermissionKey,
	[PermissionName] = @PermissionName,
	[LastModifiedByUserID] = @LastModifiedByUserID,
	[LastModifiedOnDate] = getdate()
WHERE
	[PermissionID] = @PermissionID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdatePortalAlias]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdatePortalAlias]
	@PortalAliasID		int,
	@PortalID 			int,
	@HTTPAlias 			nvarchar(200),
	@CultureCode		nvarchar(10),
	@Skin				nvarchar(100),
	@BrowserType		nvarchar(10),
	@IsPrimary			bit,
	@LastModifiedByUserID	int

AS

	IF @IsPrimary = 1
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}PortalAlias
				SET IsPrimary = 0
				WHERE (CultureCode = @CultureCode OR (CultureCode IS NULL AND @CultureCode IS NULL))
					AND (BrowserType = @BrowserType OR (BrowserType IS NULL AND @BrowserType IS NULL))
					AND (PortalID = @PortalID)
		END

	UPDATE {databaseOwner}{objectQualifier}PortalAlias
		SET 
			HTTPAlias = @HTTPAlias,
			CultureCode = @CultureCode,
			Skin = @Skin,
			BrowserType = @BrowserType,
			IsPrimary = @IsPrimary,
			LastModifiedByUserID = @LastModifiedByUserID,
			LastModifiedOnDate = getdate()
		WHERE PortalID = @PortalID
		AND	  PortalAliasID = @PortalAliasID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdatePortalAliasOnInstall]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdatePortalAliasOnInstall]
	@PortalAlias			nvarchar(200),
	@LastModifiedByUserID	int
AS
	UPDATE {databaseOwner}{objectQualifier}PortalAlias 
		SET HTTPAlias = @PortalAlias,
			LastModifiedByUserID = @LastModifiedByUserID,
			LastModifiedOnDate = getdate()
	WHERE  HTTPAlias = '_default'
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdatePortalDefaultLanguage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdatePortalDefaultLanguage]

	@PortalId            int,
	@CultureCode   nvarchar(50)
AS
	UPDATE {databaseOwner}{objectQualifier}Portals
		SET defaultlanguage=@CultureCode
		where portalid=@PortalId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdatePortalGroup]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdatePortalGroup]
	@PortalGroupID				int,
	@PortalGroupName			nvarchar(100),
	@PortalGroupDescription		nvarchar(2000),
	@AuthenticationDomain		nvarchar(200),
	@LastModifiedByUserID		int
AS 
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}PortalGroups 
			SET 
				PortalGroupName = @PortalGroupName,
				PortalGroupDescription = @PortalGroupDescription,
				AuthenticationDomain = @AuthenticationDomain,
				LastModifiedByUserID = @LastModifiedByUserID,
				LastModifiedOnDate = getdate()
			WHERE PortalGroupID = @PortalGroupID
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdatePortalInfo]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdatePortalInfo]
	@PortalID				INT,
	@PortalGroupID			INT,
	@PortalName				NVARCHAR(128),
	@LogoFile				NVARCHAR(50),
	@FooterText				NVARCHAR(100),
	@ExpiryDate				DATETIME,
	@UserRegistration		INT,
	@BannerAdvertising		INT,
	@Currency				CHAR(3),
	@AdministratorId		INT,
	@HostFee				MONEY,
	@HostSpace				INT,
	@PageQuota				INT,
	@UserQuota				INT,
	@PaymentProcessor		NVARCHAR(50),
	@ProcessorUserId		NVARCHAR(50),
	@ProcessorPassword		NVARCHAR(50),
	@Description			NVARCHAR(500),
	@KeyWords				NVARCHAR(500),
	@BackgroundFile			NVARCHAR(50),
	@SiteLogHistory			INT,
	@SplashTabId			INT,
	@HomeTabId				INT,
	@LoginTabId				INT,
	@RegisterTabId			INT,
	@UserTabId				INT,
	@SearchTabId			INT,
    @Custom404TabId			INT,
    @Custom500TabId			INT,
    @TermsTabId				INT,
    @PrivacyTabId			INT,
	@DefaultLanguage		NVARCHAR(10),
	@HomeDirectory			VARCHAR(100),
	@LastModifiedByUserID	INT,
	@CultureCode			NVARCHAR(50)

AS

	UPDATE {databaseOwner}{objectQualifier}Portals
		SET    
		   PortalGroupID		= @PortalGroupID,
		   ExpiryDate			= @ExpiryDate,
		   UserRegistration		= @UserRegistration,
		   BannerAdvertising	= @BannerAdvertising,
		   Currency				= @Currency,
		   AdministratorId		= @AdministratorId,
		   HostFee				= @HostFee,
		   HostSpace			= @HostSpace,
		   PageQuota			= @PageQuota,
		   UserQuota			= @UserQuota,
		   PaymentProcessor		= @PaymentProcessor,
		   ProcessorUserId		= @ProcessorUserId,
		   ProcessorPassword	= @ProcessorPassword,
		   SiteLogHistory		= @SiteLogHistory,
		   DefaultLanguage		= @DefaultLanguage,
		   HomeDirectory		= @HomeDirectory,
		   LastModifiedByUserID = @LastModifiedByUserID,
		   LastModifiedOnDate	= GETDATE()
	WHERE  PortalId = @PortalID

    IF EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}PortalLocalization WHERE PortalId = @PortalID AND CultureCode = @CultureCode)
	BEGIN 
		UPDATE {databaseOwner}{objectQualifier}PortalLocalization
			SET
				PortalName				= @PortalName,
				LogoFile				= @LogoFile,
				FooterText				= @FooterText,
				Description				= @Description,
				KeyWords				= @KeyWords,
				BackgroundFile			= @BackgroundFile,
				HomeTabId				= @HomeTabId,
				LoginTabId				= @LoginTabId,
				RegisterTabId			= @RegisterTabId,
				UserTabId				= @UserTabId,
				SplashTabId				= @SplashTabId,
				SearchTabId				= @SearchTabId,
                Custom404TabId			= @Custom404TabId,
                Custom500TabId			= @Custom500TabId,
				TermsTabId				= @TermsTabId,
				PrivacyTabId			= @PrivacyTabId,
				LastModifiedByUserID	= @LastModifiedByUserID,
				LastModifiedOnDate		= GETDATE()
		WHERE	PortalId = @PortalID 
			AND CultureCode = @CultureCode
	END 
ELSE
	BEGIN 
		DECLARE @AdminTabId int
		SET @AdminTabId = (SELECT AdminTabId 
								FROM {databaseOwner}{objectQualifier}PortalLocalization 
								WHERE PortalID = @PortalID AND CultureCode='en-US')

		INSERT INTO {databaseOwner}{objectQualifier}PortalLocalization (
			[PortalID],
			[CultureCode],
			[PortalName],
			[LogoFile],
			[FooterText],
			[Description],
			[KeyWords],
			[BackgroundFile],
			[HomeTabId],
			[LoginTabId],
			[UserTabId],
			[AdminTabId],
			[SplashTabId],
			[SearchTabId],
            [Custom404TabId],
            [Custom500TabId],
			[TermsTabId],
			[PrivacyTabId],
			[CreatedByUserID],
			[CreatedOnDate],
			[LastModifiedByUserID],
			[LastModifiedOnDate]
		)
		VALUES (
			@PortalID,
			@CultureCode,
			@PortalName,
			@LogoFile, 
			@FooterText,
			@Description,
			@KeyWords,
			@BackgroundFile,
			@HomeTabId ,
			@LoginTabId ,
			@UserTabId,
			@AdminTabid,
			@SplashTabId,
			@SearchTabId,
            @Custom404TabId,
            @Custom500TabId,
			@TermsTabId,
			@PrivacyTabId,
			-1,
			GETDATE(),
			-1,
			GETDATE()
		)
	END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdatePortalLanguage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdatePortalLanguage]
    @PortalId				int,
    @LanguageId				int,
    @IsPublished			bit,
    @LastModifiedByUserID  	int

AS
    UPDATE {databaseOwner}{objectQualifier}PortalLanguages 
        SET		
            IsPublished				= @IsPublished,
            LastModifiedByUserID	= @LastModifiedByUserID,
            LastModifiedOnDate		= getdate()
    WHERE PortalId = @PortalId
        AND LanguageId = @LanguageId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdatePortalSetting]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdatePortalSetting]
	@PortalID       int,
	@SettingName    nvarchar(50),
	@SettingValue   nvarchar(max),
	@UserID			int,
	@CultureCode    nvarchar(10),
	@IsSecure       bit = 0
AS
BEGIN
	-- Define parameter null
	SELECT	 @PortalID = IsNull(@PortalID, -1)
			,@SettingName = IsNull(@SettingName, N'')
			,@SettingValue = IsNull(@SettingValue, N'')
			,@UserID = IsNull(@UserID, -1)
			,@CultureCode = IsNull(@CultureCode, N'')

	-- Remove setting when value is null
	IF @SettingValue = N'' AND @SettingName != N''
		DELETE FROM {databaseOwner}[{objectQualifier}PortalSettings]
			WHERE IsNull(PortalID, -1) = @PortalID
			AND (CultureCode = @CultureCode OR @CultureCode = N'')
		 	AND SettingName = @SettingName;
	ELSE IF @SettingName != N'' AND @PortalID != -1  
	BEGIN
		MERGE INTO {databaseOwner}[{objectQualifier}PortalSettings] settings
		 USING (SELECT 
			@PortalID PortalID, 
			@CultureCode CultureCode, 
			@SettingName SettingName, 
			@SettingValue SettingValue, 
			@IsSecure IsSecure) input
		 ON (settings.PortalID = input.PortalID 
			AND IsNull(settings.CultureCode, N'') = input.CultureCode
			AND settings.SettingName = input.SettingName)
		 WHEN MATCHED 
			AND IsNull(settings.SettingValue, N'') != input.SettingValue THEN 
			-- Update if SettingValue has been modified
			UPDATE SET 
				 [SettingValue] = input.SettingValue
				,[LastModifiedByUserID] = @UserID
				,[LastModifiedOnDate] = GetDate()
				,[IsSecure] = input.IsSecure
		 WHEN NOT MATCHED THEN
			-- Add new portal setting
		    INSERT 
				(PortalID
				,SettingName
				,SettingValue
				,CultureCode
				,CreatedByUserID
				,CreatedOnDate
				,LastModifiedByUserID
				,LastModifiedOnDate
				,IsSecure)
			VALUES 
				(@PortalID
				,@SettingName
				,@SettingValue
				,NullIf(@CultureCode, N'')
				,@UserID
				,GetDate()
				,@UserID
				,GetDate()
				,@IsSecure);
		-- Saving a neutral setting overwrites all localized settings with same name
		IF @CultureCode = N''
			DELETE FROM {databaseOwner}[{objectQualifier}PortalSettings]
			 WHERE PortalID = @PortalID 
				AND SettingName = @SettingName 
				AND CultureCode IS NOT null;
	END; --ELSE IF
END; --PROCEDURE
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdatePortalSetup]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdatePortalSetup]
	@PortalId				INT,
	@AdministratorId		INT,
	@AdministratorRoleId	INT,
	@RegisteredRoleId		INT,
	@SplashTabId			INT,
	@HomeTabId				INT,
	@LoginTabId				INT,
	@RegisterTabId			INT,
	@UserTabId				INT,
	@SearchTabId            INT,
    @Custom404TabId         INT,
    @Custom500TabId         INT,
    @TermsTabId             INT,
    @PrivacyTabId           INT,
	@AdminTabId				INT,
	@CultureCode			NVARCHAR(50)

AS
	UPDATE {databaseOwner}{objectQualifier}Portals
		SET    
			AdministratorId = @AdministratorId, 
			AdministratorRoleId = @AdministratorRoleId, 
			RegisteredRoleId = @RegisteredRoleId
	WHERE  PortalId = @PortalId

	UPDATE {databaseOwner}{objectQualifier}PortalLocalization
		SET 
			HomeTabId = @HomeTabId,
			LoginTabId = @LoginTabId,
			UserTabId = @UserTabId,
			RegisterTabId = @RegisterTabId,
			AdminTabId = @AdminTabId,
			SplashTabId = @SplashTabId,
			SearchTabId = @SearchTabId,
            Custom404TabId = @Custom404TabId,
            Custom500TabId = @Custom500TabId,
            TermsTabId = @TermsTabId,
            PrivacyTabId = @PrivacyTabId
      WHERE portalID = @PortalID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateProfile]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure {databaseOwner}[{objectQualifier}UpdateProfile]

@UserID        int, 
@PortalID      int,
@ProfileData   ntext

as

update {databaseOwner}{objectQualifier}Profile
set    ProfileData = @ProfileData,
       CreatedDate = getdate()
where  UserId = @UserID
and    PortalId = @PortalID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdatePropertyDefinition]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdatePropertyDefinition]
	@PropertyDefinitionId int,
	@DataType int,
	@DefaultValue nvarchar(50),
	@PropertyCategory nvarchar(50),
	@PropertyName nvarchar(50),
	@ReadOnly bit,
	@Required bit,
	@ValidationExpression nvarchar(2000),
	@ViewOrder int,
	@Visible bit,
    @Length int,
    @DefaultVisibility int,
	@LastModifiedByUserID	int

AS
	UPDATE {databaseOwner}{objectQualifier}ProfilePropertyDefinition 
		SET DataType = @DataType,
			DefaultValue = @DefaultValue,
			PropertyCategory = @PropertyCategory,
			PropertyName = @PropertyName,
			ReadOnly = @ReadOnly,
			Required = @Required,
			ValidationExpression = @ValidationExpression,
			ViewOrder = @ViewOrder,
			Visible = @Visible,
			Length = @Length,
            DefaultVisibility = @DefaultVisibility,
			[LastModifiedByUserID] = @LastModifiedByUserID,	
			[LastModifiedOnDate] = getdate()
		WHERE PropertyDefinitionId = @PropertyDefinitionId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateRole]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateRole]
	@RoleId					int,
	@RoleGroupId			int,
	@RoleName				nvarchar(50),
	@Description			nvarchar(1000),
	@ServiceFee				money,
	@BillingPeriod			int,
	@BillingFrequency		char(1),
	@TrialFee				money,
	@TrialPeriod			int,
	@TrialFrequency			char(1),
	@IsPublic				bit,
	@AutoAssignment			bit,
	@RSVPCode				nvarchar(50),
	@IconFile				nvarchar(100),
	@LastModifiedByUserID	int,
	@Status					int,
	@SecurityMode			int,
	@IsSystemRole			bit
AS
	UPDATE {databaseOwner}{objectQualifier}Roles
	SET    RoleGroupId			= @RoleGroupId,
		   RoleName				= @RoleName,
		   Description			= @Description,
		   ServiceFee			= @ServiceFee,
		   BillingPeriod		= @BillingPeriod,
		   BillingFrequency		= @BillingFrequency,
		   TrialFee				= @TrialFee,
		   TrialPeriod			= @TrialPeriod,
		   TrialFrequency		= @TrialFrequency,
		   IsPublic				= @IsPublic,
		   AutoAssignment		= @AutoAssignment,
		   RSVPCode				= @RSVPCode,
		   IconFile				= @IconFile,
		   LastModifiedByUserID = @LastModifiedByUserID,
		   LastModifiedOnDate		= getdate(),
		   Status				= @Status,
		   SecurityMode			= @SecurityMode,
		   IsSystemRole			= @IsSystemRole
	WHERE  RoleId = @RoleId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateRoleGroup]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateRoleGroup] 
	@RoleGroupId		int,
	@RoleGroupName		nvarchar(50),
	@Description		nvarchar(1000),
	@LastModifiedUserID int
AS

	UPDATE {databaseOwner}{objectQualifier}RoleGroups
	SET    RoleGroupName		= @RoleGroupName,
		   Description			= @Description,
		   LastModifiedByUserID = @LastModifiedUserID,
		   LastModifiedOnDate		= getdate()
	WHERE  RoleGroupId = @RoleGroupId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateRoleSetting]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateRoleSetting]
	@RoleID				int,           -- Not Null|-1
	@SettingName		nvarchar( 50), -- Not Null|''
	@SettingValue		nvarchar(Max), -- Null: remove setting
	@UserID				int            -- for logging
AS
BEGIN
	-- empty value: remove setting
	IF IsNull(@SettingValue, N'') = N'' AND IsNull(@SettingName, N'') != N''
		DELETE FROM {databaseOwner}[{objectQualifier}RoleSettings]
		 WHERE IsNull(RoleID, -1) = IsNull(@RoleID, -1)
		   AND SettingName = @SettingName;
	ELSE IF IsNull(@SettingName, N'') != N'' AND IsNull(@RoleID, -1) != -1 BEGIN -- key must be valid
		MERGE INTO {databaseOwner}[{objectQualifier}RoleSettings] S
		 USING (SELECT @RoleID RID, @SettingName SN, @SettingValue SV) Q
		    ON (S.RoleID = Q.RID AND S.SettingName = Q.SN)
		 WHEN MATCHED AND IsNull(S.SettingValue, N'') != IsNull(Q.SV, N'') THEN -- update only, if value has been modified:
			UPDATE SET [SettingValue] = Q.SV, [LastModifiedByUserID] = @UserID, [LastModifiedOnDate] = GetDate()
		 WHEN NOT MATCHED THEN 
		    INSERT ( RoleID,  SettingName,  SettingValue, CreatedByUserID    , CreatedOnDate, LastModifiedByUserID, LastModifiedOnDate)
			VALUES (@RoleID, @SettingName, @SettingValue, IsNull(@UserID, -1),     GetDate(),  IsNull(@UserID, -1),          GetDate());
	END; -- Else If
END; -- Procedure
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateSchedule]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateSchedule]
	@ScheduleID int
	,@TypeFullName varchar(200)
	,@TimeLapse int
	,@TimeLapseMeasurement varchar(2)
	,@RetryTimeLapse int
	,@RetryTimeLapseMeasurement varchar(2)
	,@RetainHistoryNum int
	,@AttachToEvent varchar(50)
	,@CatchUpEnabled bit
	,@Enabled bit
	,@ObjectDependencies varchar(300)
	,@Servers varchar(150)
	,@LastModifiedByUserID	int
	,@FriendlyName varchar(200)
	,@ScheduleStartDate datetime
AS
UPDATE {databaseOwner}{objectQualifier}Schedule
	SET 
	TypeFullName = @TypeFullName
	,FriendlyName = @FriendlyName
	,TimeLapse = @TimeLapse
	,TimeLapseMeasurement = @TimeLapseMeasurement
	,RetryTimeLapse = @RetryTimeLapse
	,RetryTimeLapseMeasurement = @RetryTimeLapseMeasurement
	,RetainHistoryNum = @RetainHistoryNum
	,AttachToEvent = @AttachToEvent
	,CatchUpEnabled = @CatchUpEnabled
	,Enabled = @Enabled
	,ObjectDependencies = @ObjectDependencies
	,Servers = @Servers,
	[LastModifiedByUserID] = @LastModifiedByUserID,	
	[LastModifiedOnDate] = getdate(),
	ScheduleStartDate = @ScheduleStartDate
	WHERE ScheduleID = @ScheduleID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateScheduleHistory]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateScheduleHistory]
@ScheduleHistoryID int,
@EndDate datetime,
@Succeeded bit,
@LogNotes ntext,
@NextStart datetime
AS
UPDATE {databaseOwner}{objectQualifier}ScheduleHistory
SET	EndDate = @EndDate,
	Succeeded = @Succeeded,
	LogNotes = @LogNotes,
	NextStart = @NextStart
WHERE ScheduleHistoryID = @ScheduleHistoryID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateScopeType]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateScopeType] 
	@ScopeTypeId				int,
	@ScopeType					nvarchar(250)
AS
	UPDATE {databaseOwner}{objectQualifier}Taxonomy_ScopeTypes 
		SET 
			ScopeType = @ScopeType
	WHERE ScopeTypeId = @ScopeTypeId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateSearchCommonWord]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateSearchCommonWord]
	@CommonWordID int, 
	@CommonWord nvarchar(255), 
	@Locale nvarchar(10) 
AS

UPDATE {databaseOwner}{objectQualifier}SearchCommonWords SET
	[CommonWord] = @CommonWord,
	[Locale] = @Locale
WHERE
	[CommonWordID] = @CommonWordID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateSearchStopWords]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateSearchStopWords]
	@StopWordsID		int,
	@StopWords 			nvarchar(MAX),
	@LastModifiedByUserID 	int
AS
BEGIN	
	UPDATE {databaseOwner}{objectQualifier}SearchStopWords
			SET				
				StopWords = @StopWords,
				LastModifiedByUserID = @LastModifiedByUserID,
				LastModifiedOnDate = GETUTCDATE()
			WHERE StopWordsID = @StopWordsID
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateServer]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateServer]
    @ServerID           INT,
    @URL                NVARCHAR(255),
    @UniqueId           NVARCHAR(200),
    @Enabled            BIT,
    @Group              NVARCHAR(200)
AS
    UPDATE {databaseOwner}{objectQualifier}WebServers
        SET 
            URL = @URL,
            UniqueId = @UniqueId,
            Enabled = @Enabled,
            ServerGroup = @Group
        WHERE  ServerID = @ServerID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateServerActivity]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateServerActivity]
    @ServerName			NVARCHAR(50),
    @IISAppName			NVARCHAR(200),
    @CreatedDate		DATETIME,
    @LastActivityDate	DATETIME,
    @PingFailureCount   INT,
    @Enabled            BIT
AS

	DECLARE @ServerID int
	SET @ServerID = (SELECT ServerID FROM {databaseOwner}{objectQualifier}WebServers WHERE ServerName = @ServerName AND IISAppName = @IISAppName)

	IF @ServerID IS NULL
		BEGIN
			-- Insert
			INSERT INTO {databaseOwner}{objectQualifier}WebServers (
				ServerName,
				IISAppName,
				CreatedDate,
				LastActivityDate,
                PingFailureCount,
				[Enabled]
			)
			VALUES (
				@ServerName,
				@IISAppName,
				@CreatedDate,
				@LastActivityDate,
                @PingFailureCount,
				@Enabled
			)

            SELECT @ServerID = SCOPE_IDENTITY()
		END
	ELSE
		BEGIN
			-- Update
			UPDATE {databaseOwner}{objectQualifier}WebServers 
				SET 
					LastActivityDate = @LastActivityDate, PingFailureCount = @PingFailureCount, [Enabled] = @Enabled
				WHERE  ServerName = @ServerName AND IISAppName = @IISAppName
		END

    SELECT @ServerID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateSimpleTerm]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateSimpleTerm] 
	@TermID					int,
	@VocabularyID			int,
	@Name					nvarchar(250),
	@Description			nvarchar(2500),
	@Weight					int,
	@LastModifiedByUserID	int
AS
	UPDATE {databaseOwner}{objectQualifier}Taxonomy_Terms
		SET 
			VocabularyID = @VocabularyID,
			[Name] = @Name,
			Description = @Description,
			Weight = @Weight,
			LastModifiedByUserID = @LastModifiedByUserID,
			LastModifiedOnDate = getdate()
	WHERE TermID = @TermID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateSkin]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateSkin]

	@SkinID   int,
	@SkinSrc  nvarchar(200)

AS
	UPDATE {databaseOwner}{objectQualifier}Skins
		SET
			SkinSrc = @SkinSrc
	WHERE SkinID = @SkinID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateSkinControl]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateSkinControl]
	
	@SkinControlID					int,
	@PackageID						int,
	@ControlKey						nvarchar(50),
	@ControlSrc						nvarchar(256),
	@SupportsPartialRendering		bit,
	@LastModifiedByUserID	int

AS
	UPDATE {databaseOwner}{objectQualifier}SkinControls
	SET    
		PackageID = @PackageID,
		ControlKey = @ControlKey,
		ControlSrc = @ControlSrc,
		SupportsPartialRendering = @SupportsPartialRendering,
 		[LastModifiedByUserID] = @LastModifiedByUserID,	
		[LastModifiedOnDate] = getdate()
	WHERE  SkinControlID = @SkinControlID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateSkinPackage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateSkinPackage]
	@SkinPackageID  int,
	@PackageID      int,
	@PortalID       int,
	@SkinName       nvarchar(50),
	@SkinType       nvarchar(20),
	@LastModifiedByUserID	int
AS
	UPDATE {databaseOwner}{objectQualifier}SkinPackages
		SET
			PackageID = @PackageID,
			PortalID = @PortalID,
			SkinName = @SkinName,
			SkinType = @SkinType,
 			[LastModifiedByUserID] = @LastModifiedByUserID,	
			[LastModifiedOnDate] = getdate()
	WHERE SkinPackageID = @SkinPackageID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateSynonymsGroup]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateSynonymsGroup]
	@SynonymsGroupID		int,
	@SynonymsTags 			nvarchar(MAX),
	@LastModifiedByUserID 	int
AS
BEGIN	
	UPDATE {databaseOwner}{objectQualifier}SynonymsGroups
			SET				
				SynonymsTags = @SynonymsTags,
				LastModifiedByUserID = @LastModifiedByUserID,
				LastModifiedOnDate = GETUTCDATE()
			WHERE SynonymsGroupID = @SynonymsGroupID
END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateSystemMessage]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure {databaseOwner}[{objectQualifier}UpdateSystemMessage]

@PortalID     int,
@MessageName  nvarchar(50),
@MessageValue ntext

as

update {databaseOwner}{objectQualifier}SystemMessages
set    MessageValue = @MessageValue
where  ((PortalID = @PortalID) or (PortalID is null and @PortalID is null))
and    MessageName = @MessageName
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateTab]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateTab]
    @TabId                  Int,
    @ContentItemID          Int,
    @PortalId               Int,
    @VersionGuid            UniqueIdentifier,
    @DefaultLanguageGuid    UniqueIdentifier,
    @LocalizedVersionGuid   UniqueIdentifier,
    @TabName                nVarChar(200),
    @IsVisible              Bit,
    @DisableLink            Bit,
    @ParentId               Int,
    @IconFile               nVarChar(255),
    @IconFileLarge          nVarChar(255),
    @Title                  nVarChar(200),
    @Description            nVarChar(500),
    @KeyWords               nVarChar(500),
    @IsDeleted              Bit,
    @Url                    nVarChar(255),
    @SkinSrc                nVarChar(200),
    @ContainerSrc           nVarChar(200),
    @StartDate              DateTime,
    @EndDate                DateTime,
    @RefreshInterval        Int,
    @PageHeadText           nVarChar(max),
    @IsSecure               Bit,
    @PermanentRedirect      Bit,
    @SiteMapPriority        Float,
    @LastModifiedByUserID   Int,
    @CultureCode            nVarChar( 10),
    @IsSystem               Bit
AS
BEGIN
    DECLARE @OldParentId Int
    SET @OldParentId = (SELECT ParentId FROM {databaseOwner}[{objectQualifier}Tabs] WHERE TabID = @TabId)

    DECLARE @TabOrder Int
    SET @TabOrder = (SELECT TabOrder FROM {databaseOwner}[{objectQualifier}Tabs] WHERE TabID = @TabId)

    -- Get New TabOrder
    DECLARE @NewTabOrder Int
    SET @NewTabOrder = (SELECT MAX(TabOrder) FROM {databaseOwner}[{objectQualifier}Tabs] WHERE (ParentId = @ParentId OR (ParentId IS NULL AND @ParentId IS NULL)))
    IF @NewTabOrder IS NULL
        SET @NewTabOrder = 1
    ELSE
        SET @NewTabOrder = @NewTabOrder + 2

    UPDATE {databaseOwner}[{objectQualifier}Tabs]
        SET
            ContentItemID           = @ContentItemID,
            PortalId                = @PortalId,
            VersionGuid             = @VersionGuid,
            DefaultLanguageGuid     = @DefaultLanguageGuid,
            LocalizedVersionGuid    = @LocalizedVersionGuid,
            TabName                 = @TabName,
            IsVisible               = @IsVisible,
            DisableLink             = @DisableLink,
            ParentId                = @ParentId,
            IconFile                = @IconFile,
            IconFileLarge           = @IconFileLarge,
            Title                   = @Title,
            Description             = @Description,
            KeyWords                = @KeyWords,
            IsDeleted               = @IsDeleted,
            Url                     = @Url,
            SkinSrc                 = @SkinSrc,
            ContainerSrc            = @ContainerSrc,
            StartDate               = @StartDate,
            EndDate                 = @EndDate,
            RefreshInterval         = @RefreshInterval,
            PageHeadText            = @PageHeadText,
            IsSecure                = @IsSecure,
            PermanentRedirect       = @PermanentRedirect,
            SiteMapPriority         = @SiteMapPriority,
            LastModifiedByUserID    = @LastModifiedByUserID,
            LastModifiedOnDate      = getdate(),
            CultureCode             = @CultureCode,
            IsSystem                = @IsSystem
    WHERE  TabId = @TabId;

    IF (@OldParentId <> @ParentId) BEGIN
        -- update TabOrder of Tabs with same original Parent
        UPDATE {databaseOwner}[{objectQualifier}Tabs]
           SET TabOrder = TabOrder - 2
         WHERE (ParentId = @OldParentId)
           AND TabOrder > @TabOrder

        -- Update Tab with new TabOrder
        UPDATE {databaseOwner}[{objectQualifier}Tabs]
           SET TabOrder = @NewTabOrder
         WHERE TabID = @TabId
    END /* IF */

    EXEC {databaseOwner}{objectQualifier}BuildTabLevelAndPath @TabId, 1
END /* Procedure */
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateTabModule]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateTabModule]
    @TabModuleId            int,
    @TabId					int,
    @ModuleId				int,
	@ModuleTitle			nvarchar(256),
	@Header					ntext,
	@Footer					ntext,
    @ModuleOrder			int,
    @PaneName				nvarchar(50),
    @CacheTime				int,
    @CacheMethod			varchar(50),
    @Alignment				nvarchar(10),
    @Color					nvarchar(20),
    @Border					nvarchar(1),
    @IconFile				nvarchar(100),
    @Visibility				int,
    @ContainerSrc			nvarchar(200),
    @DisplayTitle			bit,
    @DisplayPrint			bit,
    @DisplaySyndicate		bit,
    @VersionGuid			uniqueidentifier,
    @DefaultLanguageGuid	uniqueidentifier,
    @LocalizedVersionGuid	uniqueidentifier,
    @CultureCode			nvarchar(10),
    @LastModifiedByUserID	int

AS
    UPDATE {databaseOwner}{objectQualifier}TabModules
        SET    
            TabId = @TabId,
            ModuleId = @ModuleId,
			ModuleTitle = @ModuleTitle,
			Header = @Header,
			Footer = @Footer, 
            ModuleOrder = @ModuleOrder,
            PaneName = @PaneName,
            CacheTime = @CacheTime,
            CacheMethod = @CacheMethod,
            Alignment = @Alignment,
            Color = @Color,
            Border = @Border,
            IconFile = @IconFile,
            Visibility = @Visibility,
            ContainerSrc = @ContainerSrc,
            DisplayTitle = @DisplayTitle,
            DisplayPrint = @DisplayPrint,
            DisplaySyndicate = @DisplaySyndicate,
            VersionGuid = @VersionGuid,
            DefaultLanguageGuid = @DefaultLanguageGuid,
            LocalizedVersionGuid = @LocalizedVersionGuid,
            CultureCode= @CultureCode,
            LastModifiedByUserID = @LastModifiedByUserID,
            LastModifiedOnDate = getdate()
        WHERE  TabModuleId = @TabModuleId

GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateTabModuleSetting]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateTabModuleSetting]
	@TabModuleID		int,           -- Not Null|-1
	@SettingName		nvarchar( 50), -- Not Null|''
	@SettingValue		nvarchar(Max), -- Null: remove setting
	@UserID				int            -- for logging
AS
BEGIN
	-- empty value: remove setting
	IF IsNull(@SettingValue, N'') = N'' AND IsNull(@SettingName, N'') != N''
		DELETE FROM {databaseOwner}[{objectQualifier}TabModuleSettings]
		 WHERE IsNull(TabModuleID, -1) = IsNull(@TabModuleID, -1)
		   AND SettingName = @SettingName;
	ELSE IF IsNull(@SettingName, N'') != N'' AND IsNull(@TabModuleID, -1) != -1 BEGIN -- key must be valid
		MERGE INTO {databaseOwner}[{objectQualifier}TabModuleSettings] S
		 USING (SELECT @TabModuleID MID, @SettingName SN, @SettingValue SV) Q
		    ON (S.TabModuleID = Q.MID AND S.SettingName = Q.SN)
		 WHEN MATCHED AND IsNull(S.SettingValue, N'') != IsNull(Q.SV, N'') THEN -- update only, if value has been modified:
			UPDATE SET [SettingValue] = Q.SV, [LastModifiedByUserID] = @UserID, [LastModifiedOnDate] = GetDate()
		 WHEN NOT MATCHED THEN 
		    INSERT ( TabModuleID,  SettingName,  SettingValue, CreatedByUserID    , CreatedOnDate, LastModifiedByUserID, LastModifiedOnDate)
			VALUES (@TabModuleID, @SettingName, @SettingValue, IsNull(@UserID, -1),     GetDate(),  IsNull(@UserID, -1),          GetDate());
	END; -- Else If
END; -- Procedure
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateTabModuleTranslationStatus]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateTabModuleTranslationStatus]
	@TabModuleId			int,
    @LocalizedVersionGuid	uniqueidentifier,
	@LastModifiedByUserID	int
AS
	UPDATE {databaseOwner}{objectQualifier}TabModules
		SET
		LocalizedVersionGuid	= @LocalizedVersionGuid,
		LastModifiedByUserID	= @LastModifiedByUserID,
		LastModifiedOnDate		= getdate()
	WHERE  TabModuleId = @TabModuleId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateTabModuleVersion]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateTabModuleVersion]
    @TabModuleID	int,
    @VersionGuid	uniqueidentifier
AS
    UPDATE {databaseOwner}{objectQualifier}TabModules
		SET VersionGuid = @VersionGuid,
			LastModifiedOnDate = GETDATE()
    WHERE  TabModuleID = @TabModuleID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateTabModuleVersionByModule]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateTabModuleVersionByModule]
    @ModuleID	int
AS
    UPDATE {databaseOwner}{objectQualifier}TabModules
        SET VersionGuid = NEWID(),
			LastModifiedOnDate = GETDATE()
    WHERE  ModuleID = @ModuleID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateTabOrder]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateTabOrder] 
	@TabId					int,
	@TabOrder				int,
	@ParentId				int,
	@LastModifiedByUserID	int
AS
	DECLARE @OldParentId INT
	SELECT @OldParentId = ParentId FROM {databaseOwner}{objectQualifier}Tabs WHERE TabID = @TabId
	UPDATE {objectQualifier}Tabs
		SET
			TabOrder				= @TabOrder,
			ParentId				= @ParentId,
			LastModifiedByUserID	= @LastModifiedByUserID,
			LastModifiedOnDate		= GETDATE()
	WHERE  TabId = @TabId
	IF @OldParentId <> @ParentId
		BEGIN
			EXEC {databaseOwner}{objectQualifier}BuildTabLevelAndPath @TabId, 1
		END
	ELSE
		BEGIN
			EXEC {databaseOwner}{objectQualifier}BuildTabLevelAndPath @TabId
		END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateTabPermission]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateTabPermission]
    @TabPermissionId        Int, -- not null!
    @TabId                  Int, -- not null!
    @PermissionId           Int, -- not null!
    @RoleId                 Int, -- might be negative for virtual roles
    @AllowAccess            Bit, -- false: deny, true: grant
    @UserId                 Int, -- -1 is replaced by Null
    @LastModifiedByUserId   Int  -- -1 is replaced by Null
AS
    UPDATE {databaseOwner}[{objectQualifier}TabPermission] SET
        [TabID]                = @TabId,
        [PermissionID]         = @PermissionId,
        [RoleID]               = @RoleId,
        [AllowAccess]          = @AllowAccess,
        [UserID]               = CASE WHEN @UserId = -1 THEN Null ELSE @UserId  END,
        [LastModifiedByUserId] = CASE WHEN @LastModifiedByUserId = -1 THEN Null ELSE @LastModifiedByUserId  END,
        [LastModifiedOnDate]   = GetDate()
    WHERE
        [TabPermissionID]      = @TabPermissionId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateTabSetting]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateTabSetting]
	@TabID	      	    int,           -- Not Null|-1
	@SettingName		nvarchar( 50), -- Not Null|''
	@SettingValue		nvarchar(Max), -- Null: remove setting
	@UserID				int            -- for logging
AS
BEGIN
	-- empty value: remove setting
	IF IsNull(@SettingValue, N'') = N'' AND IsNull(@SettingName, N'') != N''
		DELETE FROM {databaseOwner}[{objectQualifier}TabSettings]
		 WHERE IsNull(TabID, -1) = IsNull(@TabID, -1)
		   AND SettingName = @SettingName;
	ELSE IF IsNull(@SettingName, N'') != N'' AND IsNull(@TabID, -1) != -1 BEGIN -- key must be valid
		MERGE INTO {databaseOwner}[{objectQualifier}TabSettings] S
		 USING (SELECT @TabID MID, @SettingName SN, @SettingValue SV) Q
		    ON (S.TabID = Q.MID AND S.SettingName = Q.SN)
		 WHEN MATCHED AND IsNull(S.SettingValue, N'') != IsNull(Q.SV, N'') THEN -- update only, if value has been modified:
			UPDATE SET [SettingValue] = Q.SV, [LastModifiedByUserID] = @UserID, [LastModifiedOnDate] = GetDate()
		 WHEN NOT MATCHED THEN 
		    INSERT ( TabID,  SettingName,  SettingValue, CreatedByUserID    , CreatedOnDate, LastModifiedByUserID, LastModifiedOnDate)
			VALUES (@TabID, @SettingName, @SettingValue, IsNull(@UserID, -1),     GetDate(),  IsNull(@UserID, -1),          GetDate());
	END; -- Else If
END; -- Procedure
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateTabTranslationStatus]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateTabTranslationStatus]
	@TabId					int,
    @LocalizedVersionGuid	uniqueidentifier,
	@LastModifiedByUserID	int
AS
	UPDATE {databaseOwner}{objectQualifier}Tabs
		SET
		LocalizedVersionGuid	= @LocalizedVersionGuid,
		LastModifiedByUserID	= @LastModifiedByUserID,
		LastModifiedOnDate		= getdate()
	WHERE  TabId = @TabId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateTabVersion]    Script Date: 15/05/2024 23:15:28 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateTabVersion]
    @TabID			int,
    @VersionGuid	uniqueidentifier
AS
    UPDATE {databaseOwner}{objectQualifier}Tabs
        SET    VersionGuid = @VersionGuid
    WHERE  TabID = @TabID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateUrlTracking]    Script Date: 15/05/2024 23:15:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure {databaseOwner}[{objectQualifier}UpdateUrlTracking]

@PortalID     int,
@Url          nvarchar(255),
@LogActivity  bit,
@TrackClicks  bit,
@ModuleId     int,
@NewWindow    bit

as

update {databaseOwner}{objectQualifier}UrlTracking
set    LogActivity = @LogActivity,
       TrackClicks = @TrackClicks,
       NewWindow = @NewWindow
where  PortalID = @PortalID
and    Url = @Url
and    ((ModuleId = @ModuleId) or (ModuleId is null and @ModuleId is null))
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateUrlTrackingStats]    Script Date: 15/05/2024 23:15:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure {databaseOwner}[{objectQualifier}UpdateUrlTrackingStats]

@PortalID     int,
@Url          nvarchar(255),
@ModuleId     int

as

update {databaseOwner}{objectQualifier}UrlTracking
set    Clicks = Clicks + 1,
       LastClick = getdate()
where  PortalID = @PortalID
and    Url = @Url
and    ((ModuleId = @ModuleId) or (ModuleId is null and @ModuleId is null))
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateUser]    Script Date: 15/05/2024 23:15:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateUser]
	@UserID         int,
	@PortalID		int,
	@FirstName		nvarchar(50),
	@LastName		nvarchar(50),
	@IsSuperUser    bit,
	@Email          nvarchar(256),
	@DisplayName    nvarchar(100),
	@VanityUrl		nvarchar(100),
	@UpdatePassword	bit,
	@Authorised		bit,
	@RefreshRoles	bit,
	@LastIPAddress	nvarchar(50),
	@passwordResetToken uniqueidentifier,
	@passwordResetExpiration datetime,
	@IsDeleted		bit,
	@LastModifiedByUserID int
AS
	UPDATE {databaseOwner}{objectQualifier}Users
		SET
			FirstName = @FirstName,
			LastName = @LastName,
			IsSuperUser = @IsSuperUser,
			Email = @Email,
			DisplayName = @DisplayName,
			UpdatePassword = @UpdatePassword,
			PasswordResetToken=@passwordResetToken,
			PasswordResetExpiration=@passwordResetExpiration,
			LastIPAddress = @LastIPAddress,
			LastModifiedByUserID = @LastModifiedByUserID,
			LastModifiedOnDate = getdate()
		WHERE  UserId = @UserID
	
	IF @PortalID IS NULL
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}Users
				SET
					IsDeleted = @IsDeleted
				WHERE  UserId = @UserID
		END
	ELSE
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}UserPortals
				SET
					Authorised = @Authorised,
					RefreshRoles = @RefreshRoles,
					VanityUrl = @VanityUrl,
					IsDeleted = @IsDeleted
				WHERE  UserId = @UserID
					AND PortalId = @PortalID
		END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateUserLastIpAddress]    Script Date: 15/05/2024 23:15:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateUserLastIpAddress] 
	@UserID         int,
	@LastIPAddress	nvarchar(50)
AS
	UPDATE {databaseOwner}[{objectQualifier}Users] 
	SET	LastIPAddress = @LastIPAddress
	WHERE  UserId = @UserID
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateUserProfileProperty]    Script Date: 15/05/2024 23:15:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROC {databaseOwner}[{objectQualifier}UpdateUserProfileProperty] 

	@ProfileID				int,
	@UserID					int,
	@PropertyDefinitionID	int,
	@PropertyValue			ntext,
	@Visibility				int,
	@ExtendedVisibility		varchar(400),
	@LastUpdatedDate		datetime

AS
	IF @ProfileID IS NULL OR @ProfileID = -1
		-- Try the UserID/PropertyDefinitionID to see if the Profile property exists
		SELECT @ProfileID = ProfileID
			FROM   {databaseOwner}{objectQualifier}UserProfile
			WHERE  UserID = @UserID AND PropertyDefinitionID = @PropertyDefinitionID
	 
	IF @ProfileID IS NOT NULL
		-- Update Property
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}UserProfile
				SET PropertyValue = case when (DATALENGTH(@PropertyValue) > 7500) then NULL else @PropertyValue end,
					PropertyText = case when (DATALENGTH(@PropertyValue) > 7500) then @PropertyValue else NULL end,
					Visibility = @Visibility,
					ExtendedVisibility = @ExtendedVisibility,
					LastUpdatedDate = @LastUpdatedDate
				WHERE  ProfileID = @ProfileID
			SELECT @ProfileID
		END
	ELSE
		-- Insert New Property
		BEGIN
			IF @PropertyValue IS NOT NULL AND DATALENGTH(@PropertyValue) > 0
				BEGIN
					INSERT INTO {databaseOwner}{objectQualifier}UserProfile (
						UserID,
						PropertyDefinitionID,
						PropertyValue,
						PropertyText,
						Visibility,
						ExtendedVisibility,
						LastUpdatedDate
					  )
					VALUES (
						@UserID,
						@PropertyDefinitionID,
						case when (DATALENGTH(@PropertyValue) > 7500) then NULL else @PropertyValue end,
						case when (DATALENGTH(@PropertyValue) > 7500) then @PropertyValue else NULL end,
						@Visibility,
						@ExtendedVisibility,
						@LastUpdatedDate
					  )

					SELECT SCOPE_IDENTITY()
				END
			ELSE
				SELECT @ProfileID
		END
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateUserRole]    Script Date: 15/05/2024 23:15:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateUserRole]
    @UserRoleId		int, 
	@Status			int,
	@IsOwner		bit,
	@EffectiveDate	datetime = null,
	@ExpiryDate		datetime = null,
	@LastModifiedByUserID			int
AS
	UPDATE {databaseOwner}{objectQualifier}UserRoles 
		SET 
			Status = @Status,
			IsOwner = @IsOwner,
			ExpiryDate = @ExpiryDate,
			EffectiveDate = @EffectiveDate,
			IsTrialUsed = 1,
			LastModifiedByUserID = @LastModifiedByUserID,
			LastModifiedOnDate = getdate()
		WHERE  UserRoleId = @UserRoleId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UpdateVocabulary]    Script Date: 15/05/2024 23:15:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateVocabulary] 
	@VocabularyID			int,
	@VocabularyTypeID		int,
	@Name					nvarchar(250),
	@Description			nvarchar(2500),
	@Weight					int,
	@ScopeID				int,
	@ScopeTypeID			int,
	@LastModifiedByUserID	int
AS
	UPDATE {databaseOwner}{objectQualifier}Taxonomy_Vocabularies
		SET 
			VocabularyTypeID = @VocabularyTypeID,
			[Name] = @Name,
			Description = @Description,
			Weight = @Weight,
			ScopeID = @ScopeID,
			ScopeTypeID = @ScopeTypeID,
			LastModifiedByUserID = @LastModifiedByUserID,
			LastModifiedOnDate = getdate()
	WHERE VocabularyId = @VocabularyId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UserAgreedToTerms]    Script Date: 15/05/2024 23:15:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UserAgreedToTerms]
	@PortalId	INT,
	@UserId		INT
AS
	UPDATE {databaseOwner}{objectQualifier}UserPortals
	SET HasAgreedToTerms = 1, HasAgreedToTermsOn = GETDATE()
	WHERE PortalId = @PortalId AND UserId = @UserId
GO
/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}UserRequestsRemoval]    Script Date: 15/05/2024 23:15:29 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UserRequestsRemoval]
	@PortalId	INT,
	@UserId		INT,
	@Remove		BIT
AS
	UPDATE {databaseOwner}{objectQualifier}UserPortals
	SET RequestsRemoval = @Remove
	WHERE PortalId = @PortalId AND UserId = @UserId
GO


/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/