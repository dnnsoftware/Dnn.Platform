/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/


UPDATE {databaseOwner}{objectQualifier}HostSettings Set SettingValue ='http://help.dotnetnuke.com/070100/default.htm' Where SettingName='HelpURL'
GO


/* Add ExtensionUrlProviders */
/*****************************/

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}ExtensionUrlProviders]') AND type in (N'U'))
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}ExtensionUrlProviders]
		(
			[ExtensionUrlProviderID] [int] IDENTITY(1,1) NOT NULL,
			[ProviderName] [nvarchar](150) NOT NULL,
			[ProviderType] [nvarchar](1000) NOT NULL,
			[SettingsControlSrc] [nvarchar](1000) NULL,
			[IsActive] [bit] NOT NULL,
			[RewriteAllUrls] [bit] NOT NULL,
			[RedirectAllUrls] [bit] NOT NULL,
			[ReplaceAllUrls] [bit] NOT NULL,
			[DesktopModuleId] [int] NULL,
			CONSTRAINT [PK_{objectQualifier}ExtensionUrlProviders] PRIMARY KEY CLUSTERED ([ExtensionUrlProviderId] ASC)		
		)
	END
GO

/* Add ExtensionUrlProviderConfiguration */
/*****************************************/

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}ExtensionUrlProviderConfiguration]') AND type in (N'U'))
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}ExtensionUrlProviderConfiguration]
		(
			[ExtensionUrlProviderID] [int] NOT NULL,
			[PortalID] [int] NOT NULL,
			 CONSTRAINT [PK_{objectQualifier}ExtensionUrlProviderConfiguration] PRIMARY KEY CLUSTERED 
				(
					[ExtensionUrlProviderID] ASC,
					[PortalID]
				)
		)
	END
GO

/* View forExtensionUrlProviders */
/*********************************/

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}vw_ExtensionUrlProviders]') and OBJECTPROPERTY(id, N'IsView') = 1)
    DROP VIEW {databaseOwner}[{objectQualifier}vw_ExtensionUrlProviders]
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_ExtensionUrlProviders]
AS
	SELECT     
		P.ExtensionUrlProviderID, 
		PC.PortalID, 
		P.ProviderName, 
		P.IsActive, 
		P.RewriteAllUrls, 
		P.RedirectAllUrls, 
		P.ReplaceAllUrls, 
		P.DesktopModuleId
	FROM    {databaseOwner}{objectQualifier}ExtensionUrlProviderConfiguration PC
		RIGHT OUTER JOIN {databaseOwner}{objectQualifier}ExtensionUrlProviders P ON PC.ExtensionUrlProviderID = P.ExtensionUrlProviderID
GO


/* Add ExtensionUrlProviderSetting */
/***********************************/

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}ExtensionUrlProviderSetting]') AND type in (N'U'))
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}ExtensionUrlProviderSetting]
		(
			[ExtensionUrlProviderID] [int] NOT NULL,
			[PortalID] [int] NOT NULL,
			[SettingName] [nvarchar](100) NOT NULL,
			[SettingValue] [nvarchar](2000) NOT NULL,
			CONSTRAINT [PK_{objectQualifier}ExtensionUrlProviderSetting] PRIMARY KEY CLUSTERED 
			(
				[ExtensionUrlProviderID] ASC,
				[PortalID] ASC,
				[SettingName] ASC
			)
		)
	END
GO

/* Add ExtensionUrlProviderTab */
/*******************************/

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}ExtensionUrlProviderTab]') AND type in (N'U'))
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}ExtensionUrlProviderTab]
		(
			[ExtensionUrlProviderID] [int] NOT NULL,
			[PortalID] [int] NOT NULL,
			[TabID] [int] NOT NULL,
			[IsActive] [bit] NOT NULL,
			CONSTRAINT [PK_{objectQualifier}ExtensionUrlProviderTab] PRIMARY KEY CLUSTERED 
			(
				[ExtensionUrlProviderID] ASC,
				[PortalID] ASC,
				[TabID] ASC
			)
		)
	END
GO

/* Add TabAliasSkins */
/*********************/

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}TabAliasSkins]') AND type in (N'U'))
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}TabAliasSkins]
		(
			[TabAliasSkinId] [int] IDENTITY(1,1) NOT NULL,
			[TabId] [int] NOT NULL,
			[PortalAliasId] [int] NOT NULL,
			[SkinSrc] [nvarchar](200) NOT NULL,
			[CreatedByUserId] [int] NULL,
			[CreatedOnDate] [datetime] NULL,
			[LastModifiedByUserId] [int] NULL,
			[LastModifiedOnDate] [datetime] NULL,
			CONSTRAINT [PK_{objectQualifier}TabAliasSkin] PRIMARY KEY CLUSTERED ([TabAliasSkinId] ASC)
		)
	END
GO

/* Add TabUrls */
/***************/

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}TabUrls]') AND type in (N'U'))
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}TabUrls]
		(
			[TabId] [int] NOT NULL,
			[SeqNum] [int] NOT NULL,
			[Url] [nvarchar](200) NOT NULL,
			[QueryString] [nvarchar](200) NULL,
			[HttpStatus] [nvarchar](50) NOT NULL,
			[CultureCode] [nvarchar](50) NULL,
			[IsSystem] bit CONSTRAINT [DF_{objectQualifier}TabUrls_IsSystem]  DEFAULT ((0)) NOT NULL,
			[PortalAliasId] [int] NULL,
			[PortalAliasUsage] [int] NULL,
			CONSTRAINT [PK_{objectQualifier}TabRedirect] PRIMARY KEY CLUSTERED 
			(
				[TabId] ASC,
				[SeqNum] ASC
			)
		)
	END
GO


/* Add AddExtensionUrlProvider */
/**********************************/

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}AddExtensionUrlProvider]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}AddExtensionUrlProvider]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddExtensionUrlProvider] 
	@ExtensionUrlProviderID	int, 
    @DesktopModuleId		int, 
    @ProviderName			nvarchar(150), 
    @ProviderType			nvarchar(1000), 
    @SettingsControlSrc		nvarchar(1000), 
    @IsActive				bit, 
    @RewriteAllUrls			bit, 
    @RedirectAllUrls		bit, 
    @ReplaceAllUrls			bit
AS

IF EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}ExtensionUrlProviders WHERE ExtensionUrlProviderID = @ExtensionUrlProviderID)
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}ExtensionUrlProviders
			SET
				DesktopModuleId = @DesktopModuleId,
				ProviderName = @ProviderName,
				ProviderType = @ProviderType,
				SettingsControlSrc = @SettingsControlSrc,
				IsActive = @IsActive,
				RewriteAllUrls = @RewriteAllUrls,
				RedirectAllUrls = @RedirectAllUrls,
				ReplaceAllUrls = @ReplaceAllUrls
			WHERE ExtensionUrlProviderID = @ExtensionUrlProviderID
	END
ELSE
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}ExtensionUrlProviders (
				DesktopModuleId,
				ProviderName,
				ProviderType,
				SettingsControlSrc,
				IsActive,
				RewriteAllUrls,
				RedirectAllUrls,
				ReplaceAllUrls
		)
		VALUES (
				@DesktopModuleId,
				@ProviderName,
				@ProviderType,
				@SettingsControlSrc,
				@IsActive,
				@RewriteAllUrls,
				@RedirectAllUrls,
				@ReplaceAllUrls
		)
		
		SET @ExtensionUrlProviderID = @@IDENTITY
		
	END
	
SELECT @ExtensionUrlProviderID

GO

/* Add DeleteExtensionUrlProvider */
/**********************************/

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteExtensionUrlProvider]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteExtensionUrlProvider]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteExtensionUrlProvider] 
	@ExtensionUrlProviderID	int
AS

DELETE FROM {databaseOwner}{objectQualifier}ExtensionUrlProviders
	WHERE ExtensionUrlProviderID = @ExtensionUrlProviderID

GO

/* Add GetExtensionUrlProviders */
/********************************/

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetExtensionUrlProviders]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetExtensionUrlProviders]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetExtensionUrlProviders] 
	@PortalID	int 
AS
	SELECT 
		p.*, 
		pc.PortalID
	FROM  {databaseOwner}{objectQualifier}ExtensionUrlProviderConfiguration pc 
		RIGHT OUTER JOIN {databaseOwner}{objectQualifier}ExtensionUrlProviders p 
			ON pc.ExtensionUrlProviderID = p.ExtensionUrlProviderID
	WHERE pc.PortalID = @PortalID OR pc.PortalID IS Null

	SELECT ExtensionUrlProviderID, 
			PortalID, 
			SettingName, 
			SettingValue
	FROM {databaseOwner}{objectQualifier}ExtensionUrlProviderSetting
	WHERE PortalID = PortalID

	SELECT DISTINCT 
			P.ExtensionUrlProviderID,
			TM.TabID
		FROM {databaseOwner}{objectQualifier}DesktopModules DM
			INNER JOIN {databaseOwner}{objectQualifier}ModuleDefinitions MD ON DM.DesktopModuleID = MD.DesktopModuleID 
			INNER JOIN {databaseOwner}{objectQualifier}Modules M ON MD.ModuleDefID = M.ModuleDefID 
			INNER JOIN {databaseOwner}{objectQualifier}TabModules TM ON M.ModuleID = TM.ModuleID 
			INNER JOIN {databaseOwner}{objectQualifier}vw_ExtensionUrlProviders P ON DM.DesktopModuleID = P.DesktopModuleId
		WHERE     (P.PortalID = @PortalID) OR (P.PortalID IS NULL)
		  
		UNION
			SELECT  
				P.ExtensionUrlProviderID,
				PT.TabId
			FROM    {databaseOwner}{objectQualifier}ExtensionUrlProviderTab PT
				INNER JOIN {databaseOwner}{objectQualifier}ExtensionUrlProviders P ON P.ExtensionUrlProviderID = PT.ExtensionUrlProviderID
			WHERE   (PT.IsActive = 1)
GO

/* Add UpdateExtensionUrlProvider */
/**********************************/

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdateExtensionUrlProvider]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateExtensionUrlProvider]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateExtensionUrlProvider] 
	@ExtensionUrlProviderID		int,
	@IsActive					bit
AS
	UPDATE {databaseOwner}{objectQualifier}ExtensionUrlProviders
		SET IsActive = @IsActive
		WHERE ExtensionUrlProviderID = @ExtensionUrlProviderID

GO

/* Add SaveExtensionUrlProviderSetting */
/***************************************/

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SaveExtensionUrlProviderSetting]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}SaveExtensionUrlProviderSetting]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SaveExtensionUrlProviderSetting] 
	@ExtensionUrlProviderID		int,
	@PortalId					int,
	@SettingName				nvarchar(100),
	@SettingValue				nvarchar(2000)
AS

	IF (SELECT COUNT(*) 
			FROM {databaseOwner}{objectQualifier}ExtensionUrlProviderSetting 
			WHERE ExtensionUrlProviderID = @ExtensionUrlProviderID
				AND PortalID = @PortalId
				AND SettingName = @SettingName) = 0
		BEGIN
			--ADD
			INSERT INTO {databaseOwner}{objectQualifier}ExtensionUrlProviderSetting
			        ( ExtensionUrlProviderID ,
			          PortalID ,
			          SettingName ,
			          SettingValue
			        )
			VALUES  ( @ExtensionUrlProviderID , -- ExtensionUrlProviderID - int
			          @PortalId , -- PortalID - int
			          @SettingName , -- SettingName - nvarchar(100)
			          @SettingValue  -- SettingValue - nvarchar(2000)
			        )
		END
	ELSE
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}ExtensionUrlProviderSetting	
				SET 
					SettingValue = @SettingValue
				WHERE ExtensionUrlProviderID = @ExtensionUrlProviderID
					AND PortalID = @PortalId
					AND SettingName = @SettingName
		END
GO


/* Add New ExtensionUrlProviderSettings Control */
/************************************************/

IF NOT EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}ModuleControls WHERE ControlSrc = 'DesktopModules/Admin/UrlManagement/UrlProviderSettings.ascx')
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}ModuleControls (
			ControlKey,
			ControlTitle,
			ControlSrc,
			ControlType,
			SupportsPartialRendering,
			SupportsPopUps,
			CreatedByUserID,
			CreatedOnDate,
			LastModifiedByUserID,
			LastModifiedOnDate
		)
		VALUES (
			'UrlProviderSettings',
			'UrlProviderSettings',
			'DesktopModules/Admin/UrlManagement/UrlProviderSettings.ascx',
			2,
			0,
			1,
			-1,
			getdate(),
			-1,
			getdate()
		)


	END


/* Add GetTabAliasSkins */
/************************/

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetTabAliasSkins]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetTabAliasSkins]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabAliasSkins] 
(
	 @PortalID		int 
)
AS
	SELECT 
		t.TabId, 
		pa.PortalAliasId, 
		pa.HttpAlias, 
		t.SkinSrc, 
		t.CreatedByUserId, 
		t.CreatedOnDate, 
		t.LastModifiedByUserId, 
		t.LastModifiedOnDate
	FROM {databaseOwner}{objectQualifier}TabAliasSkins t
		INNER JOIN {databaseOwner}{objectQualifier}PortalAlias pa ON t.PortalAliasId = pa.PortalAliasId
	WHERE pa.PortalID = @PortalID OR @PortalID = -1
GO

/* Add GetTabCustomAliases */
/***************************/

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetTabCustomAliases]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetTabCustomAliases]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabCustomAliases] 
(
	 @PortalID		int 
)
AS
	SELECT 
		t.TabId, 
		Coalesce(trp.CultureCode, '') as CultureCode, 
		pa.HttpAlias
	FROM {databaseOwner}{objectQualifier}Tabs t
		INNER JOIN {databaseOwner}{objectQualifier}TabUrls trp ON trp.TabId = t.ParentId	
		INNER JOIN {databaseOwner}{objectQualifier}PortalAlias pa ON trp.PortalAliasId = pa.PortalAliasId
		WHERE trp.PortalAliasUsage = 1 /* child tabs inherit */
		  AND (@portalId = t.PortalId OR @portalId = -1)
		  AND NOT EXISTS (SELECT tr2.TabId 
							FROM {databaseOwner}{objectQualifier}TabUrls tr2 
							WHERE tr2.TabId = t.TabId 
								AND tr2.CultureCode = trp.CultureCode
							)
GO

/* Add DeleteTabUrl */
/*****************/

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteTabUrl]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteTabUrl]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteTabUrl] 
	@TabID				int,
	@SeqNum				int
AS
	DELETE FROM {databaseOwner}{objectQualifier}TabUrls
	WHERE TabId = @TabID AND SeqNum = @SeqNum 
GO

/* Add GetTabUrls */
/******************/

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetTabUrls]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetTabUrls]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabUrls] 
(
	 @PortalId		int 
)
AS
	SELECT 
		tu.TabId,	
		tu.SeqNum,	
		tu.Url,	
		tu.QueryString,
		tu.HttpStatus,	
		tu.CultureCode,
		tu.IsSystem,
		case when parentTu.PortalAliasUsage = 1 /* parent is set to 'child pages inherit' so get parent portal alias id */
			then 
				case when Coalesce(tu.PortalAliasId, 0) < 1 /* if this page has no specific alias id, then use parent*/
					then parentTu.PortalAliasId 
					else tu.PortalAliasId 
				END /* otherwise, use this page alias id */
			else tu.PortalALiasId 
		END as PortalAliasId,

		case when Coalesce(tu.PortalAliasUsage,0) = 0 and coalesce(tu.PortalALiasId,0) < 1 /* default value and no specific alias */
			then /* check for inheritance from parent */
				case when Coalesce(parentTu.PortalALiasUsage,0) = 1 and Coalesce(parentTu.PortalAliasId, 0) > 0 /* parent specifies an alias */
					then 3 /* inherited from parent */
					else 0 
				END /* default value */
			when Coalesce(tu.PortalAliasId,0) > 0 /*specific alias for this tab */
			then 
				case when coalesce(tu.PortalALiasUsage,0) < 1 
					then 1 /* if not set, default to 'child pages inherit'*/
					else tu.PortalAliasUsage 
				END
			else 
				0 /* default - fall through value */
		END as PortalAliasUsage 
	FROM {databaseOwner}{objectQualifier}TabUrls tu
		INNER JOIN {databaseOwner}{objectQualifier}Tabs t on t.TabId = tu.TabId
		LEFT JOIN {databaseOwner}{objectQualifier}TabUrls parentTu on t.ParentId = parentTu.TabId
			AND parentTu.CultureCode = tu.CultureCode
			and parentTu.PortalAliasUsage > 0	   
	WHERE (@portalId = PortalId OR @portalId = -1)
	ORDER BY PortalId, TabOrder, tu.SeqNum


GO

/* Add SaveTabUrl */
/*****************/

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SaveTabUrl]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}SaveTabUrl]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SaveTabUrl] 
	@TabID				int,
	@SeqNum				int,
	@PortalAliasID		int,
	@PortalAliasUsage	int,
	@Url				nvarchar(200),
	@QueryString		nvarchar(200),
	@CultureCode		nvarchar(50),
	@HttpStatus			nvarchar(50),
	@IsSystem			bit
AS
	IF @HttpStatus = '200'
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}TabUrls
				SET HttpStatus = '301'
				WHERE TabID = @TabID
					AND CultureCode = @CultureCode
					AND (@PortalAliasID = @PortalAliasID OR (PortalAliasId IS NULL AND @PortalAliasID IS NULL))
					AND HttpStatus = '200'
		END  
	IF EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}TabUrls WHERE TabId = @TabID AND SeqNum = @SeqNum)
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}TabUrls
				SET 
					PortalAliasId = @PortalAliasID,
					PortalAliasUsage = @PortalAliasUsage,
					Url = @Url,
					QueryString = @QueryString,
					CultureCode = @CultureCode,
					HttpStatus = @HttpStatus,
					IsSystem = @IsSystem
			WHERE TabId = @TabID AND SeqNum = @SeqNum 
		END
	ELSE
		BEGIN
			INSERT INTO {databaseOwner}{objectQualifier}TabUrls
					( TabId ,
					  SeqNum ,
					  Url ,
					  QueryString ,
					  HttpStatus ,
					  CultureCode ,
					  IsSystem,
					  PortalAliasId ,
					  PortalAliasUsage
					)
			VALUES  ( @TabID ,
					  @SeqNum ,
					  @Url ,
					  @QueryString ,
					  @HttpStatus ,
					  @CultureCode ,
					  @IsSystem,
					  @PortalAliasID ,
					  0
					)
		END
GO

/* Add GetCustomAliasesForTabs */
/*******************************/

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetCustomAliasesForTabs]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetCustomAliasesForTabs]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetCustomAliasesForTabs] 
AS
	SELECT Distinct HttpAlias
	FROM {databaseOwner}{objectQualifier}TabUrls tr
		INNER JOIN {databaseOwner}{objectQualifier}Tabs T ON t.TabId = tr.TabId
		LEFT JOIN {databaseOwner}{objectQualifier}TabUrls parentTr ON t.ParentId = parentTr.TabId
		INNER JOIN {databaseOwner}{objectQualifier}PortalAlias pa 
			ON pa.PortalAliasId = 
				case when parentTr.PortalAliasUsage = 1 /* parent is set to ''child pages inherit'' so get parent portal alias id */
					then 
						case when Coalesce(tr.PortalAliasId, 0) < 1 /* if this page has no specific alias id, then use parent*/
							then parentTr.PortalAliasId 
						else tr.PortalAliasId END /* otherwise, use this page alias id */
				else tr.PortalALiasId END 
	ORDER BY HttpAlias
GO

/* Add PasswordHistory Table */
/*****************************/

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}PasswordHistory]') AND type in (N'U'))
BEGIN


CREATE TABLE {databaseOwner}[{objectQualifier}PasswordHistory](
	[PasswordHistoryID] [int] IDENTITY(1,1) NOT NULL,
	[UserID] [int] NOT NULL,
	[Password] [nvarchar](128) NOT NULL,
	[PasswordSalt] [nvarchar](128) NOT NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}PasswordHistory] PRIMARY KEY CLUSTERED ( [PasswordHistoryID] ASC)
)


ALTER TABLE {databaseOwner}[{objectQualifier}PasswordHistory]  WITH CHECK ADD  CONSTRAINT [FK_{objectQualifier}PasswordHistory_{objectQualifier}Users] FOREIGN KEY([UserID])
REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID])
ON DELETE CASCADE

ALTER TABLE {databaseOwner}[{objectQualifier}PasswordHistory] CHECK CONSTRAINT [FK_{objectQualifier}PasswordHistory_{objectQualifier}Users]

END
GO

/**********************************************************/
/* Add AddPasswordHistory SP				  */
/**********************************************************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}AddPasswordHistory]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
    DROP PROCEDURE {databaseOwner}{objectQualifier}AddPasswordHistory
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}AddPasswordHistory
    @UserId			int,
    @Password			nvarchar(128),
    @PasswordSalt		nvarchar(128),
	@Retained			int,
    @CreatedByUserID  	int
AS

        BEGIN
		
          INSERT INTO {databaseOwner}{objectQualifier}PasswordHistory (
            UserId,
            [Password],
            PasswordSalt,
			CreatedByUserID,
			CreatedOnDate,
			LastModifiedByUserID,
			LastModifiedOnDate
          )
          VALUES (
            @UserId,
            @Password,
            @PasswordSalt,
            
			@CreatedByUserID,
			getdate(),
			@CreatedByUserID,
			getdate()
          )

		  DELETE FROM {databaseOwner}{objectQualifier}PasswordHistory where UserID=@UserId and PasswordHistoryID NOT IN (
					SELECT TOP (@Retained) PasswordHistoryID from {databaseOwner}{objectQualifier}PasswordHistory
					WHERE UserID=@UserId order by CreatedOnDate desc
					)

        END
GO

/**********************************************************/
/* Add GetPasswordHistory SP				  */
/**********************************************************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetPasswordHistory]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
    DROP PROCEDURE {databaseOwner}{objectQualifier}GetPasswordHistory
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetPasswordHistory
    @UserID			int
AS
        SELECT * from {databaseOwner}{objectQualifier}PasswordHistory where UserID=@UserID
GO

/* Add Password Reset Fields to Users Table */
/*******************************************/

ALTER TABLE {databaseOwner}{objectQualifier}Users 
	ADD
	PasswordResetToken uniqueidentifier NULL,
	PasswordResetExpiration datetime NULL

GO

/* Add Banned Common password seed list    */
/*******************************************/

INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure2', N'123456', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure3', N'password', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure4', N'12345678', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure5', N'qwerty', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure6', N'abc123', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure7', N'monkey', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure8', N'111111', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure9', N'consumer', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure10', N'letmein', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure11', N'dragon', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure12', N'trustno1', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure13', N'baseball', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure14', N'gizmodo', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure15', N'whatever', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure16', N'superman', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure17', N'1234567', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure18', N'sunshine', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure19', N'iloveyou', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure20', N'fuckyou', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure21', N'starwars', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure22', N'shadow', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure23', N'princess', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure24', N'cheese', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure25', N'123123', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure26', N'computer', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure27', N'gawker', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure28', N'football', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure29', N'blahblah', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure30', N'nintendo', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure31', N'soccer', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure32', N'654321', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure33', N'asdfasdf', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure34', N'master', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure35', N'michael', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure36', N'passw0rd', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure37', N'kotaku', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure38', N'pepper', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure39', N'666666', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure40', N'jennifer', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure41', N'buster', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure42', N'welcome', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure43', N'Password', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure44', N'batman', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure45', N'1q2w3e4r', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure46', N'maggie', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure47', N'michelle', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure48', N'killer', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure49', N'andrew', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure50', N'pokemon', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure51', N'internet', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure52', N'biteme', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure53', N'orange', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure54', N'jordan', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure55', N'ginger', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure56', N'aaaaaa', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure57', N'tigger', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure58', N'charlie', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure59', N'chicken', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure60', N'nothing', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure61', N'fuckoff', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure62', N'deadspin', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure63', N'george', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure64', N'valleywa', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure65', N'qwerty12', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure66', N'summer', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure67', N'swordfis', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure68', N'asdfgh', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure69', N'matthew', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure70', N'mustang', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure71', N'yankees', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure72', N'hannah', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure73', N'asdfghjk', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure74', N'1qaz2wsx', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure75', N'cookie', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure76', N'123qwe', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure77', N'midnight', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure78', N'purple', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure79', N'banana', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure80', N'scooter', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure81', N'matrix', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure82', N'daniel', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure83', N'jezebel', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure84', N'hunter', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure85', N'freedom', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure86', N'secret', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure87', N'redsox', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure88', N'joshua', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure89', N'phoenix', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure90', N'jessica', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure91', N'asshole', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure92', N'spiderma', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure93', N'asdf1234', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure94', N'foobar', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure95', N'william', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure96', N'jackson', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure97', N'qwertyui', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure98', N'nicole', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure99', N'123321', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure100', N'peanut', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure101', N'mickey', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure102', N'booger', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure103', N'samantha', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure104', N'hockey', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure105', N'121212', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure106', N'thx1138', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure107', N'ashley', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure108', N'silver', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure109', N'booboo', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure110', N'gizmodo1', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure111', N'chocolat', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure112', N'1q2w3e', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure113', N'metallic', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure114', N'bailey', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure115', N'google', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure116', N'babygirl', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure117', N'thomas', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure118', N'gateway', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure119', N'simpsons', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure120', N'remember', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure121', N'oliver', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure122', N'guitar', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure123', N'monster', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure124', N'qazwsx', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure125', N'taylor', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure126', N'madison', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure127', N'anthony', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure128', N'justin', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure129', N'elizabet', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure130', N'bubbles', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure131', N'november', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure132', N'drowssap', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure133', N'coffee', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure134', N'amanda', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure135', N'adidas', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure136', N'diamond', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure137', N'startrek', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure138', N'monkey12', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure139', N'butterfl', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure140', N'brooklyn', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure141', N'sparky', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure142', N'morgan', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure143', N'merlin', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure144', N'wordpass', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure145', N'maverick', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure146', N'elephant', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure147', N'Highlife', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure148', N'poopoo', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure149', N'lauren', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure150', N'nirvana', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure151', N'liverpoo', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure152', N'stupid', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure153', N'chelsea', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure154', N'compaq', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure155', N'boomer', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure156', N'yellow', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure157', N'sophie', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure158', N'fucker', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure159', N'q1w2e3r4', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure160', N'coolness', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure161', N'cocacola', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure162', N'blink182', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure163', N'zxcvbnm', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure164', N'snoopy', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure165', N'gundam', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure166', N'snowball', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure167', N'alexande', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure168', N'rachel', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure169', N'jasmine', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure170', N'7777777', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure171', N'danielle', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure172', N'basketba', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure173', N'boston', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure174', N'thunder', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure175', N'patrick', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure176', N'snickers', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure177', N'darkness', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure178', N'abcd1234', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure179', N'pumpkin', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure180', N'creative', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure181', N'88888888', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure182', N'smokey', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure183', N'bandit', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure184', N'123abc', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure185', N'brandon', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure186', N'sample12', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure187', N'godzilla', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure188', N'december', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure189', N'corvette', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure190', N'voodoo', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure191', N'turtle', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure192', N'spider', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure193', N'london', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure194', N'hahaha', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure195', N'austin', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure196', N'chicago', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure197', N'jonathan', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure198', N'hello123', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure199', N'tennis', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure200', N'scooby', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure201', N'naruto', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure202', N'fluffy', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure203', N'eagles', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure204', N'maxwell', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure205', N'mercedes', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure206', N'11111111', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure207', N'muffin', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure208', N'penguin', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure209', N'bullshit', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure210', N'jasper', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure211', N'flower', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure212', N'ferrari', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure213', N'steelers', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure214', N'pookie', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure215', N'murphy', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure216', N'joseph', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure217', N'calvin', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure218', N'apples', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure219', N'159753', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure220', N'slipknot', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure221', N'tucker', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure222', N'martin', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure223', N'11235813', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure224', N'goober', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure225', N'222222', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure226', N'jackass', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure227', N'chester', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure228', N'8675309', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure229', N'whocares', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure230', N'pineappl', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure231', N'nicholas', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure232', N'please', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure233', N'dakota', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure234', N'112233', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure235', N'winston', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure236', N'somethin', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure237', N'dallas', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure238', N'696969', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure239', N'rosebud', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure240', N'popcorn', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')
INSERT INTO {databaseOwner}[{objectQualifier}Lists] ( [ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])VALUES (N'BannedPasswords', N'failure241', N'shithead', 0, 0, 0, -1, N'', -1, 1, -1, '2013-03-07 09:13:51.647', -1, '2013-03-07 09:13:51.647')

GO

/* Update UserPortals Table */
/****************************/

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N'{objectQualifier}UserPortals ' AND COLUMN_NAME = 'VanityUrl')
	BEGIN
		ALTER TABLE {databaseOwner}[{objectQualifier}UserPortals] 
			ADD VanityUrl nvarchar(100) NULL
	END
GO

/* Update Users View */
/*********************/

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}vw_Users]') and OBJECTPROPERTY(id, N'IsView') = 1)
    DROP VIEW {databaseOwner}[{objectQualifier}vw_Users]
GO

CREATE VIEW {databaseOwner}{objectQualifier}vw_Users
AS
	SELECT DISTINCT 
        U.UserID, 
		(CASE WHEN IsSuperUser = 1 THEN NULL ELSE UP.PortalId END) AS PortalId, 
		U.Username, 
		U.FirstName, 
		U.LastName, 
		U.DisplayName, 
		U.IsSuperUser, 
        U.Email, 
		U.AffiliateId, 
		U.UpdatePassword, 
		UP.Authorised, 
		(CASE WHEN UP.PortalId IS NULL THEN U.IsDeleted ELSE UP.IsDeleted END) AS IsDeleted, 
        UP.RefreshRoles, 
		U.LastIPAddress, 
		U.PasswordResetToken,
		U.PasswordResetExpiration,
		U.CreatedByUserID, 
		U.CreatedOnDate, 
		U.LastModifiedByUserID, 
		U.LastModifiedOnDate, 
		UP.VanityUrl
	FROM {databaseOwner}{objectQualifier}Users AS U 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}UserPortals AS UP ON U.UserID = UP.UserId
GO

/* Update UpdateUser Procedure */
/*******************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdateUser]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateUser]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateUser]
	@UserID         int,
	@PortalID		int,
	@FirstName		nvarchar(50),
	@LastName		nvarchar(50),
	@IsSuperUser    bit,
	@Email          nvarchar(256),
	@DisplayName    nvarchar(100),
	@VanityUrl		nvarchar(100),
	@UpdatePassword	bit,
	@Authorised		bit,
	@RefreshRoles	bit,
	@LastIPAddress	nvarchar(50),
	@passwordResetToken uniqueidentifier,
	@passwordResetExpiration datetime,
	@IsDeleted		bit,
	@LastModifiedByUserID int
AS
	UPDATE {databaseOwner}{objectQualifier}Users
		SET
			FirstName = @FirstName,
			LastName = @LastName,
			IsSuperUser = @IsSuperUser,
			Email = @Email,
			DisplayName = @DisplayName,
			UpdatePassword = @UpdatePassword,
			PasswordResetToken=@passwordResetToken,
			PasswordResetExpiration=@passwordResetExpiration,
			LastIPAddress = @LastIPAddress,
			LastModifiedByUserID = @LastModifiedByUserID,
			LastModifiedOnDate = getdate()
		WHERE  UserId = @UserID
	
	IF @PortalID IS NULL
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}Users
				SET
					IsDeleted = @IsDeleted
				WHERE  UserId = @UserID
		END
	ELSE
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}UserPortals
				SET
					Authorised = @Authorised,
					RefreshRoles = @RefreshRoles,
					VanityUrl = @VanityUrl,
					IsDeleted = @IsDeleted
				WHERE  UserId = @UserID
					AND PortalId = @PortalID
		END
GO

/* Add ChangeUsername Procedure */
/*******************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}ChangeUsername]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}ChangeUsername]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}ChangeUsername]
	@UserId         int,
	@NewUsername	nvarchar(256)
AS
BEGIN
	DECLARE @OldUsername NVARCHAR(256)
	SET @OldUsername = (SELECT UserName FROM {databaseOwner}{objectQualifier}Users WHERE UserId = @UserId)

	UPDATE {databaseOwner}{objectQualifier}Users
		SET		Username=@NewUsername
		WHERE	UserId=@UserId

	UPDATE dbo.aspnet_Users
		SET		UserName=@NewUsername,
				LoweredUserName=LOWER(@NewUsername) 
		WHERE	UserName=@OldUsername

END

GO

/* Add GetPortalsByUser Procedure */
/*******************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetPortalsByUser]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetPortalsByUser]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPortalsByUser]
	@userID		int 
AS

	SELECT     {databaseOwner}{objectQualifier}vw_Portals.*
FROM         {databaseOwner}{objectQualifier}UserPortals INNER JOIN
                      {databaseOwner}{objectQualifier}vw_Portals ON 
					  {databaseOwner}{objectQualifier}UserPortals.PortalId = {databaseOwner}{objectQualifier}vw_Portals.PortalID
WHERE     ({databaseOwner}{objectQualifier}UserPortals.UserId = @userID)


GO

/* Add new PasswordReset Module Control */
/********************************************/

IF NOT EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}ModuleControls WHERE ControlSrc = 'Admin/Security/PasswordReset.ascx')
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}ModuleControls
			([ModuleDefID]
			,[ControlKey]
			,[ControlTitle]
			,[ControlSrc]
			,[IconFile]
			,[ControlType]
			,[ViewOrder]
			,[SupportsPartialRendering]
			,[CreatedByUserID]
			,[CreatedOnDate]
			,[LastModifiedByUserID]
			,[LastModifiedOnDate]
			,[SupportsPopUps])
		VALUES
			(NULL
			,'PasswordReset'
			,'PasswordReset'
			,'Admin/Security/PasswordReset.ascx'
			,''
			,-1
			,0
			,1
			,-1
			,getDate()
			,-1
			,getDate()
			,1)
	END
GO

/* Update Profile control to use new EditUser */
/**********************************************/

UPDATE {databaseOwner}{objectQualifier}ModuleControls
	SET ControlSrc = 'DesktopModules/Admin/Security/EditUser.ascx'
	WHERE ControlKey = 'Profile'
		AND ModuleDefID IS NULL
GO

/* Update IP filtering table */
/*****************************/

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}IPFilter]') AND type in (N'U'))
	BEGIN

CREATE TABLE {databaseOwner}[{objectQualifier}IPFilter](
	[IPFilterID] [int] IDENTITY(1,1) NOT NULL,
	[IPAddress] [nvarchar](50) NULL,
	[SubnetMask] [nvarchar](50) NULL,
	[RuleType] [tinyint] NULL,
	[CreatedByUserID] [int] NULL,
	[CreatedOnDate] [datetime] NULL,
	[LastModifiedByUserID] [int] NULL,
	[LastModifiedOnDate] [datetime] NULL,
 CONSTRAINT [PK_{objectQualifier}IPFilter] PRIMARY KEY CLUSTERED 
	(
	[IPFilterID] ASC
	)
)

END
GO

/* Add AddIPFilter Procedure */
/*****************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}AddIPFilter]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}AddIPFilter]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddIPFilter]
	@IPAddress nvarchar(50),
	@SubnetMask nvarchar(50),
	@RuleType tinyint,
	@CreatedByUserID			int
AS 
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}IPFilter  
		(
		[IPAddress]
           ,[SubnetMask]
           ,[RuleType]
           ,[CreatedByUserID]
           ,[CreatedOnDate]
           ,[LastModifiedByUserID]
           ,[LastModifiedOnDate]
		)  
		VALUES  
		( 
			@IPAddress , 
			@SubnetMask , 
			@RuleType,
			@CreatedByUserID , 
			getdate() , 
			@CreatedByUserID , 
			getdate() 
		) 
		 
		SELECT SCOPE_IDENTITY()
	END
GO


/* Add UpdateIPFilter Procedure */
/***********************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdateIPFilter]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateIPFilter]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateIPFilter]
	@IPFilterID		int,
	@IPAddress		nvarchar(50),
	@SubnetMask		nvarchar(50),
	@RuleType		tinyint,
	@LastModifiedByUserID		int
AS 
	BEGIN
		UPDATE {databaseOwner}{objectQualifier}IPFilter 
			SET 
				IPAddress = @IPAddress,
				SubnetMask = @SubnetMask,
				RuleType = @RuleType,
				LastModifiedByUserID = @LastModifiedByUserID,
				LastModifiedOnDate = getdate()
			WHERE IPFilterID = @IPFilterID
	END
GO


/* Add DeleteIPFilter Procedure */
/***********************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteIPFilter]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteIPFilter]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteIPFilter]
	@IPFilterID	int
AS 
	BEGIN
		DELETE FROM {databaseOwner}{objectQualifier}IPFilter  
			WHERE IPFilterID = @IPFilterID
	END
GO

/* Add GetIPFilters Procedure */
/*********************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetIPFilters]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetIPFilters]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetIPFilters]

AS 
	SELECT * FROM {databaseOwner}{objectQualifier}IPFilter
GO



/* file and folder table refactoring */
/*************************************/
IF  EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N'{objectQualifier}Files' AND COLUMN_NAME = 'Folder')
	BEGIN
		ALTER TABLE {databaseOwner}[{objectQualifier}Files] 
			DROP COLUMN Folder
	END
GO

IF  NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N'{objectQualifier}Folders' AND COLUMN_NAME = 'ParentID')
	BEGIN
		ALTER TABLE {databaseOwner}[{objectQualifier}Folders] 
			ADD ParentID int NULL
	END
GO

/* add calculated column for file folderpaths to help with extensions that do not use the API */
/*********************************************************************************************/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetFileFolderFunc]') AND type in (N'FN', N'IF', N'TF', N'FS', N'FT'))
	DROP FUNCTION {databaseOwner}[{objectQualifier}GetFileFolderFunc]
GO

CREATE FUNCTION {databaseOwner}[{objectQualifier}GetFileFolderFunc](@FolderD INT)
RETURNS nvarchar(246) 
AS
BEGIN
    DECLARE @folderPath nvarchar(246)
    select @folderPath=folderpath from {databaseOwner}[{objectQualifier}Folders] where folderid=@FolderD
return @folderPath
  
END;

GO
ALTER TABLE {databaseOwner}[{objectQualifier}Files] 
    ADD Folder AS {databaseOwner}[{objectQualifier}GetFileFolderFunc](FolderID) 
GO

/* Add File default metadata */
/*********************************/

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N'{objectQualifier}Files' AND COLUMN_NAME = 'Title')
	ALTER TABLE {databaseOwner}[{objectQualifier}Files] 
		ADD [Title] nvarchar(256) NULL
GO

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N'{objectQualifier}Files' AND COLUMN_NAME = 'StartDate')
	ALTER TABLE {databaseOwner}[{objectQualifier}Files] 
		ADD [StartDate] date NULL DEFAULT GETDATE()
GO

UPDATE {databaseOwner}[{objectQualifier}Files] 
	SET [StartDate] = COALESCE([CreatedOnDate], GETDATE())
GO

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N'{objectQualifier}Files' AND COLUMN_NAME = 'EnablePublishPeriod')
	ALTER TABLE {databaseOwner}[{objectQualifier}Files] 
		ADD [EnablePublishPeriod] bit NOT NULL DEFAULT 0
GO

ALTER TABLE {databaseOwner}[{objectQualifier}Files] 
	ALTER COLUMN [StartDate] date NOT NULL 
GO

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N'{objectQualifier}Files' AND COLUMN_NAME = 'EndDate')
	ALTER TABLE {databaseOwner}[{objectQualifier}Files] 
		ADD [EndDate] date NULL
GO

/* add folder versioning */
/*************************/
IF  NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N'{objectQualifier}Folders' AND COLUMN_NAME = 'Folder')
	BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}Folders] 
			ADD IsVersioned bit NOT NULL DEFAULT 0
	END
GO

IF  NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N'{objectQualifier}Files' AND COLUMN_NAME = 'Version')
	BEGIN
	ALTER TABLE {databaseOwner}[{objectQualifier}Files] 
			ADD PublishedVersion int NOT NULL DEFAULT 1
	END
GO

CREATE TABLE {databaseOwner}[{objectQualifier}FileVersions] (
  [FileId] INT NOT NULL,
  [Version] INT NOT NULL,
  [FileName] NVARCHAR(246) NOT NULL,
  [Extension] NVARCHAR(100) NOT NULL,
  [Size] INT NOT NULL,
  [Width] INT,
  [Height] INT,
  [ContentType] NVARCHAR(200) NOT NULL,
  [Content] IMAGE,
  [CreatedByUserID] INT,
  [CreatedOnDate] DATETIME,
  [LastModifiedByUserID] INT,
  [LastModifiedOnDate] DATETIME,
  [SHA1Hash] VARCHAR(40),
  CONSTRAINT [PK_{objectQualifier}FileVersions] PRIMARY KEY ([FileId], [Version])
)
GO

ALTER TABLE {databaseOwner}[{objectQualifier}FileVersions]
  ADD CONSTRAINT [FK_{objectQualifier}FileVersions_Files]
  FOREIGN KEY ([FileID]) REFERENCES {databaseOwner}[{objectQualifier}Files] ([FileID])
  ON DELETE CASCADE
GO

/* Add ContentItemID to Files */
/*******************************/

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N'{objectQualifier}Files' AND COLUMN_NAME = 'ContentItemID')
	ALTER TABLE {databaseOwner}[{objectQualifier}Files] 
		ADD [ContentItemID] int NULL
GO
  
ALTER TABLE {databaseOwner}{objectQualifier}Files 
	ADD CONSTRAINT FK_{objectQualifier}Files_{objectQualifier}ContentItems FOREIGN KEY ( [ContentItemID] ) 
	REFERENCES {databaseOwner}{objectQualifier}ContentItems ( [ContentItemID] ) 
GO

/* View for All Files */
/*********************************/

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}vw_Files]') AND type in (N'V'))
	DROP VIEW {databaseOwner}[{objectQualifier}vw_Files]
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_Files]
AS
	SELECT     
	   fi.[FileId]
      ,fi.[PortalId]
      ,fi.[FileName]
      ,fi.[Extension]
      ,fi.[Size]
      ,fi.[Width]
      ,fi.[Height]
      ,fi.[ContentType]
      ,fi.[FolderID]
      ,fi.[Content]
      ,fi.[CreatedByUserID]
      ,fi.[CreatedOnDate]
      ,fi.[LastModifiedByUserID]
      ,fi.[LastModifiedOnDate]
      ,fi.[UniqueId]
      ,fi.[VersionGuid]
      ,fi.[SHA1Hash]
      ,fi.[LastModificationTime]
      ,fi.[Title]
      ,fi.[StartDate]
      ,fi.[EnablePublishPeriod]
      ,fi.[EndDate]
      ,fi.[ContentItemID]
      ,fi.[PublishedVersion]
	  ,fo.FolderPath as [Folder]
	FROM       {databaseOwner}[{objectQualifier}Files] fi INNER JOIN
               {databaseOwner}[{objectQualifier}Folders] fo ON fi.FolderID = fo.FolderID	  
GO

/* View for enabled Files */
/*********************************/

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}vw_PublishedFiles]') AND type in (N'V'))
	DROP VIEW {databaseOwner}[{objectQualifier}vw_PublishedFiles]
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_PublishedFiles]
AS
	SELECT     
	   fi.[FileId]
      ,fi.[PortalId]
      ,fi.[FileName]
      ,fi.[Extension]
      ,fi.[Size]
      ,fi.[Width]
      ,fi.[Height]
      ,fi.[ContentType]
      ,fi.[FolderID]
      ,fi.[Content]
      ,fi.[CreatedByUserID]
      ,fi.[CreatedOnDate]
      ,fi.[LastModifiedByUserID]
      ,fi.[LastModifiedOnDate]
      ,fi.[UniqueId]
      ,fi.[VersionGuid]
      ,fi.[SHA1Hash]
      ,fi.[LastModificationTime]
      ,fi.[Title]
      ,fi.[StartDate]
      ,fi.[EnablePublishPeriod]
      ,fi.[EndDate]
      ,fi.[ContentItemID]
      ,fi.[PublishedVersion]
	  ,fi.[Folder]
	FROM       {databaseOwner}[{objectQualifier}vw_Files] fi
	  WHERE [EnablePublishPeriod] = 0 
		 OR ([StartDate] <= GETDATE()
			AND ([EndDate] IS NULL OR GETDATE() <= [EndDate]))
GO


IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetFileById]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetFileById]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFileById]
	@FileId int	,
	@RetrieveUnpublishedFiles bit = 0
AS
BEGIN
	IF @RetrieveUnpublishedFiles = 0 BEGIN
		SELECT FileId,
			   folders.PortalId,
			   [FileName],
			   Extension,
			   Size,
			   Width,
			   Height,
			   ContentType,
			   files.FolderID,
			   FolderPath AS 'Folder',
			   StorageLocation,
			   IsCached,
			   files.UniqueId,
			   files.VersionGuid,
			   files.SHA1Hash,
			   FolderMappingID,
			   LastModificationTime,
			   Title,
			   EnablePublishPeriod,
			   StartDate,
			   EndDate,
			   files.CreatedByUserID,
			   files.CreatedOnDate,
			   files.LastModifiedByUserID,
			   files.LastModifiedOnDate,
			   PublishedVersion,
			   ContentItemID
		FROM {databaseOwner}[{objectQualifier}vw_PublishedFiles] AS files
			INNER JOIN	[{objectQualifier}Folders] AS folders ON files.FolderID = folders.FolderID
		WHERE FileId = @FileId
	END
	ELSE BEGIN
		SELECT FileId,
			   folders.PortalId,
			   [FileName],
			   Extension,
			   Size,
			   Width,
			   Height,
			   ContentType,
			   files.FolderID,
			   FolderPath AS 'Folder',
			   StorageLocation,
			   IsCached,
			   files.[UniqueId],
			   files.[VersionGuid],
			   SHA1Hash,
			   FolderMappingID,
			   LastModificationTime,
			   Title,
			   EnablePublishPeriod,
			   StartDate,
			   EndDate,
			   files.CreatedByUserID,
			   files.CreatedOnDate,
			   files.LastModifiedByUserID,
			   files.LastModifiedOnDate,
			   PublishedVersion,
			   ContentItemID
		FROM {databaseOwner}[{objectQualifier}vw_Files] AS files
			INNER JOIN {databaseOwner}[{objectQualifier}Folders] AS folders ON files.FolderID = folders.FolderID
		WHERE FileId = @FileId
	END	
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}AddFile]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}AddFile]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddFile]
	@PortalId   int,
	@UniqueId   uniqueidentifier,
	@VersionGuid  uniqueidentifier,
	@FileName   nvarchar(246),
	@Extension   nvarchar(100),
	@Size    int,
	@Width    int,
	@Height    int,
	@ContentType  nvarchar(200),
	@Folder    nvarchar(246),
	@FolderID   int,
	@CreatedByUserID   int,
	@Hash     varchar(40),
	@LastModificationTime	datetime, 
	@Title					nvarchar(256),
	@EnablePublishPeriod	bit,
	@StartDate				datetime,
	@EndDate				datetime,
	@ContentItemID			int
AS
BEGIN
	DECLARE @FileID int

	UPDATE {databaseOwner}[{objectQualifier}Files]
	SET
		/* retrieves FileId from table */
		@FileID = FileId,
		FileName = @FileName,
		VersionGuid = @VersionGuid,
		Extension = @Extension,
		Size = @Size,
		Width = @Width,
		Height = @Height,
		ContentType = @ContentType,
		FolderID = @FolderID,
		LastModifiedByUserID = @CreatedByUserID,
		LastModifiedOnDate = getdate(),
		SHA1Hash = @Hash,
		LastModificationTime = @LastModificationTime, 
		Title = @Title,
		EnablePublishPeriod = @EnablePublishPeriod,
		StartDate = @StartDate,
		EndDate = @EndDate,
		ContentItemID = @ContentItemID
	WHERE
		FolderID = @FolderID AND FileName = @FileName

	IF @@ROWCOUNT = 0
	BEGIN
	INSERT INTO {databaseOwner}[{objectQualifier}Files] (
		PortalId,
		UniqueId,
		VersionGuid,
		FileName,
		Extension,
		Size,
		Width,
		Height,
		ContentType,
		FolderID,
		CreatedByUserID,
		CreatedOnDate,
		LastModifiedByUserID,
		LastModifiedOnDate,
		SHA1Hash,
		LastModificationTime, 
		Title,
		EnablePublishPeriod,
		StartDate,
		EndDate,
		ContentItemID
	)
	VALUES (
		@PortalId,
		@UniqueId,
		@VersionGuid,
		@FileName,
		@Extension,
		@Size,
		@Width,
		@Height,
		@ContentType,
		@FolderID,
		@CreatedByUserID,
		getdate(),
		@CreatedByUserID,
		getdate(),
		@Hash,
		@LastModificationTime, 
		@Title,
		@EnablePublishPeriod,
		@StartDate,
		@EndDate,
		@ContentItemID
	)

	SELECT @FileID = SCOPE_IDENTITY()
	END

	SELECT @FileID
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdateFile]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateFile]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateFile]
    @FileId					int,
    @VersionGuid			uniqueidentifier,	
    @FileName				nvarchar(246),
    @Extension				nvarchar(100),
    @Size					int,
    @Width					int,
    @Height					int,
    @ContentType			nvarchar(200),	
    @Folder					nvarchar(246),
    @FolderID				int,
	@LastModifiedByUserID  	int,
	@Hash					varchar(40),
	@LastModificationTime	datetime,
	@Title					nvarchar(256),
	@EnablePublishPeriod	bit,
	@StartDate				datetime,
	@EndDate				datetime,	
	@ContentItemID			int
AS
    UPDATE {databaseOwner}{objectQualifier}Files
        SET    FileName = @FileName,
               VersionGuid = @VersionGuid,
               Extension = @Extension,
               Size = @Size,
               Width = @Width,
               Height = @Height,
               ContentType = @ContentType,
               FolderID = @FolderID,
               LastModifiedByUserID = @LastModifiedByUserID,
               LastModifiedOnDate = getdate(),
			   SHA1Hash = @Hash,
			   LastModificationTime = @LastModificationTime,
			   Title = @Title,
			   EnablePublishPeriod = @EnablePublishPeriod,
			   StartDate = @StartDate,
			   EndDate = @EndDate,
			   ContentItemID = @ContentItemID
    WHERE  FileId = @FileId
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetFile]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetFile]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFile]
	@FileName nvarchar(246),
	@FolderID int,
	@RetrieveUnpublishedFiles bit = 0
AS
BEGIN
	IF @RetrieveUnpublishedFiles = 0 BEGIN
		SELECT FileId,
			   folders.PortalId,
			   [FileName],
			   Extension,
			   Size,
			   Width,
			   Height,
			   ContentType,
			   files.FolderID,
			   FolderPath AS 'Folder',
			   StorageLocation,
			   IsCached,
			   files.UniqueId,
			   files.VersionGuid,	   
			   files.SHA1Hash,
			   FolderMappingID,
			   LastModificationTime,
			   Title,
			   EnablePublishPeriod,
			   StartDate,
			   EndDate,
			   files.CreatedByUserID,
			   files.CreatedOnDate,
			   files.LastModifiedByUserID,
			   files.LastModifiedOnDate,
			   ContentItemID,
			   PublishedVersion
		FROM {databaseOwner}[{objectQualifier}vw_PublishedFiles] AS files
			INNER JOIN {databaseOwner}[{objectQualifier}Folders] AS folders ON files.FolderID = folders.FolderID
		WHERE [FileName] = @FileName AND files.FolderID = @FolderID
	END
	ELSE BEGIN
		SELECT FileId,
			   folders.PortalId,
			   [FileName],
			   Extension,
			   Size,
			   Width,
			   Height,
			   ContentType,
			   files.FolderID,
			   FolderPath AS 'Folder',
			   StorageLocation,
			   IsCached,
			   files.UniqueId,
			   files.VersionGuid,	   
			   files.SHA1Hash,
			   FolderMappingID,
			   LastModificationTime,
			   Title,
			   EnablePublishPeriod,
			   StartDate,
			   EndDate,
			   files.CreatedByUserID,
			   files.CreatedOnDate,
			   files.LastModifiedByUserID,
			   files.LastModifiedOnDate,
			   ContentItemID,
			   PublishedVersion
		FROM {databaseOwner}[{objectQualifier}vw_Files] AS files
			INNER JOIN {databaseOwner}[{objectQualifier}Folders] AS folders ON files.FolderID = folders.FolderID
		WHERE [FileName] = @FileName AND files.FolderID = @FolderID
	END
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetFiles]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetFiles]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFiles]
	@FolderID int,
	@RetrieveUnpublishedFiles bit = 0
AS
BEGIN
	IF @RetrieveUnpublishedFiles = 0 BEGIN
		SELECT 
			FileId,
			FO.PortalId,
			[FileName],
			Extension,
			Size,
			Width,
			Height,
			ContentType,
			F.FolderID,
			FolderPath AS 'Folder',
			StorageLocation,
			IsCached,
			F.UniqueId,
			F.VersionGuid,	   
			F.SHA1Hash,
			FolderMappingID,
			LastModificationTime,
			Title,
			EnablePublishPeriod,
			StartDate,
			EndDate,
			F.CreatedByUserID,
			F.CreatedOnDate,
			F.LastModifiedByUserID,
			F.LastModifiedOnDate,
			PublishedVersion,
			ContentItemID
		FROM {databaseOwner}[{objectQualifier}vw_PublishedFiles] F
			INNER JOIN {databaseOwner}[{objectQualifier}Folders] FO ON F.FolderID = FO.FolderID
		WHERE F.FolderID = @FolderID
		ORDER BY [FileName]
	END
	ELSE BEGIN
		SELECT 
			FileId,
			FO.PortalId,
			[FileName],
			Extension,
			Size,
			Width,
			Height,
			ContentType,
			F.FolderID,
			FolderPath AS 'Folder',
			StorageLocation,
			IsCached,
			F.UniqueId,
			F.VersionGuid,	   
			F.SHA1Hash,
			FolderMappingID,
			LastModificationTime,
			Title,
			EnablePublishPeriod,
			StartDate,
			EndDate,
			F.CreatedByUserID,
			F.CreatedOnDate,
			F.LastModifiedByUserID,
			F.LastModifiedOnDate,
			PublishedVersion,
			ContentItemID
		FROM {databaseOwner}[{objectQualifier}vw_Files] F
			INNER JOIN {databaseOwner}[{objectQualifier}Folders] FO ON F.FolderID = FO.FolderID
		WHERE F.FolderID = @FolderID
		ORDER BY [FileName]
	END
END
GO

/* Add GetFileVersionContent Procedure */
/**************************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetFileVersionContent]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetFileVersionContent]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFileVersionContent]

	@FileId		int,
	@Version	int

AS
	SELECT Content
	FROM {databaseOwner}[{objectQualifier}FileVersions]
	WHERE FileId = @FileId
		AND Version = @Version
GO

/* Add GetUserByVanityUrl Procedure */
/*******************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetUserByVanityUrl]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUserByVanityUrl]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUserByVanityUrl]

	@PortalID int,
	@VanityUrl nvarchar(100)

AS
	SELECT * FROM {databaseOwner}{objectQualifier}vw_Users
	WHERE  VanityUrl = @VanityUrl
		AND  ((@PortalId IS NULL) OR (PortalId = @PortalID) OR IsSuperUser = 1)

GO

/* Add new editipfilters Module Control */
/********************************************/

IF NOT EXISTS (SELECT * FROM {databaseOwner}{objectQualifier}ModuleControls WHERE ControlSrc = 'DesktopModules/Admin/HostSettings/EditIPFilters.ascx')
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}ModuleControls
			([ModuleDefID]
			,[ControlKey]
			,[ControlTitle]
			,[ControlSrc]
			,[IconFile]
			,[ControlType]
			,[ViewOrder]
			,[SupportsPartialRendering]
			,[CreatedByUserID]
			,[CreatedOnDate]
			,[LastModifiedByUserID]
			,[LastModifiedOnDate]
			,[SupportsPopUps])
		VALUES
			(NULL
			,'EditIPFilters'
			,'EditIPFilters'
			,'DesktopModules/Admin/HostSettings/EditIPFilters.ascx'
			,''
			,3
			,0
			,1
			,-1
			,getDate()
			,-1
			,getDate()
			,1)
	END
GO

/* Add global allow rule */
/*************************/
EXEC {databaseOwner}[{objectQualifier}AddIPFilter] '*','',1,-1

GO

/* Add GetIPFilter Procedure */
/*********************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetIPFilter]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetIPFilter]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetIPFilter]
@InputFilter int
AS 
	SELECT * FROM {databaseOwner}{objectQualifier}IPFilter where IPFilterID=@InputFilter
GO

/* Add AddUserPortal Procedure */
/*******************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}AddUserPortal]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}AddUserPortal]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddUserPortal]

	@PortalID		int,
	@UserID			int
AS

	IF not exists ( SELECT 1 FROM {databaseOwner}{objectQualifier}UserPortals WHERE UserID = @UserID AND PortalID = @PortalID ) AND @PortalID > -1
		BEGIN
			INSERT INTO {databaseOwner}{objectQualifier}UserPortals (
				UserID,
				PortalID,
				Authorised,
				CreatedDate
			)
			VALUES (
				@UserID,
				@PortalID,
				1,
				getdate()
			)
		END


GO



/* Update Portals View */
/***********************/

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}vw_Portals]') AND OBJECTPROPERTY(id, N'IsView') = 1)
	DROP VIEW {databaseOwner}[{objectQualifier}vw_Portals]
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_Portals]
AS
	SELECT DISTINCT 
		P.PortalID,
		P.PortalGroupID, 
		PL.PortalName, 
		CASE WHEN LEFT(LOWER(PL.LogoFile), 7) = 'fileid=' THEN
				(SELECT Folder + FileName FROM {databaseOwner}{objectQualifier}vw_Files WHERE fileid = CAST((RIGHT(LOWER(PL.LogoFile), Len(PL.LogoFile) - 7)) AS int)) 
			ELSE 
				PL.LogoFile 
			END AS LogoFile, 
		PL.FooterText, 
		P.ExpiryDate, 
		P.UserRegistration, 
		P.BannerAdvertising, 
		P.AdministratorId, 
		P.Currency, 
		P.HostFee, 
		P.HostSpace, 
		P.PageQuota, 
		P.UserQuota, 
		P.AdministratorRoleId, 
		P.RegisteredRoleId, 
		PL.Description, 
		PL.KeyWords, 
		CASE WHEN LEFT(LOWER(PL.BackgroundFile), 7) = 'fileid=' THEN
				(SELECT Folder + FileName FROM {databaseOwner}{objectQualifier}vw_Files WHERE fileid = CAST((RIGHT(LOWER(PL.BackgroundFile), Len(PL.BackgroundFile) - 7)) AS int)) 
			ELSE 
				PL.BackgroundFile 
			END AS BackgroundFile, 
		P.GUID, 
		P.PaymentProcessor, 
		P.ProcessorUserId, 
		P.ProcessorPassword, 
		P.SiteLogHistory, 
		U.Email, 
		P.DefaultLanguage, 
		P.TimezoneOffset, 
		PL.AdminTabId, 
		P.HomeDirectory, 
		PL.SplashTabId, 
		PL.HomeTabId, 
		PL.LoginTabId, 
		PL.RegisterTabId, 
		PL.UserTabId, 
		PL.SearchTabId,
		(SELECT  TOP (1) TabID
			FROM   {databaseOwner}{objectQualifier}Tabs
				WHERE      (PortalID IS NULL) AND (ParentId IS NULL))
			AS SuperTabId, 
		P.CreatedByUserID, 
		P.CreatedOnDate, 
		P.LastModifiedByUserID, 
		P.LastModifiedOnDate, 
		PL.CultureCode
	FROM {databaseOwner}{objectQualifier}Portals AS P 
		INNER JOIN {databaseOwner}{objectQualifier}PortalLocalization AS PL ON P.PortalID = PL.PortalID 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}Users AS U ON P.AdministratorId = U.UserID
GO

/* update GetPortalSettings */
/*************************/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}GetPortalSettings]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetPortalSettings]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPortalSettings]
	@PortalID int,
	@CultureCode   nvarchar(50)
AS
	SELECT 
		SettingName,
		CASE WHEN LEFT(LOWER({databaseOwner}{objectQualifier}PortalSettings.SettingValue), 6) = 'fileid' 
			THEN
				(SELECT Folder + FileName  
					FROM {databaseOwner}{objectQualifier}vw_Files 
					WHERE 'fileid=' + convert(varchar,{databaseOwner}{objectQualifier}vw_Files.FileID) = {databaseOwner}{objectQualifier}PortalSettings.SettingValue
				) 
			ELSE 
				{databaseOwner}{objectQualifier}PortalSettings.SettingValue  
			END 
		AS SettingValue,
		{databaseOwner}{objectQualifier}PortalSettings.CreatedByUserID,
		{databaseOwner}{objectQualifier}PortalSettings.CreatedOnDate,
		{databaseOwner}{objectQualifier}PortalSettings.LastModifiedByUserID,
		{databaseOwner}{objectQualifier}PortalSettings.LastModifiedOnDate,
		{databaseOwner}{objectQualifier}PortalSettings.CultureCode
	FROM {databaseOwner}{objectQualifier}PortalSettings 
	WHERE  PortalID = @PortalID
	
GO

/* update GetTabSetting */
/*********************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetTabSetting]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}GetTabSetting
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetTabSetting

	@TabID      	INT,
	@SettingName	NVARCHAR(50)

AS
	SELECT 
		CASE WHEN LEFT(LOWER({databaseOwner}{objectQualifier}TabSettings.SettingValue), 6) = 'fileid' 
			THEN
				(SELECT Folder + FileName  
					FROM {databaseOwner}{objectQualifier}vw_Files 
					WHERE 'fileid=' + CONVERT(VARCHAR,{databaseOwner}{objectQualifier}vw_Files.FileID) = {databaseOwner}{objectQualifier}TabSettings.SettingValue
				) 
			ELSE 
				{databaseOwner}{objectQualifier}TabSettings.SettingValue  
			END 
		AS SettingValue
	FROM 	{databaseOwner}{objectQualifier}TabSettings 
	WHERE  	TabID = @TabID 
	AND 	SettingName = @SettingName

GO

/* update GetTabSettings */
/**********************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetTabSettings]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}GetTabSettings
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetTabSettings
	@TabID int

AS
	SELECT 
		SettingName,
		CASE WHEN LEFT(LOWER({databaseOwner}{objectQualifier}TabSettings.SettingValue), 6) = 'fileid' 
			THEN
				(SELECT Folder + FileName  
					FROM {databaseOwner}{objectQualifier}vw_Files 
					WHERE 'fileid=' + CONVERT(VARCHAR,{databaseOwner}{objectQualifier}vw_Files.FileID) = {databaseOwner}{objectQualifier}TabSettings.SettingValue
				) 
			ELSE 
				{databaseOwner}{objectQualifier}TabSettings.SettingValue  
			END AS SettingValue
	FROM 	{databaseOwner}{objectQualifier}TabSettings 
	WHERE	TabID = @TabID

GO

/* Update GetModuleSetting */
/***************************/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}GetModuleSetting]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetModuleSetting]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetModuleSetting]

@ModuleId      int,
@SettingName   nvarchar(50)

AS
SELECT 
	CASE WHEN LEFT(LOWER({databaseOwner}{objectQualifier}ModuleSettings.SettingValue), 6) = 'fileid' 
		THEN
			(SELECT Folder + FileName  
				FROM {databaseOwner}{objectQualifier}vw_Files 
				WHERE 'fileid=' + convert(varchar,{databaseOwner}{objectQualifier}vw_Files.FileID) = {databaseOwner}{objectQualifier}ModuleSettings.SettingValue
			) 
		ELSE 
			{databaseOwner}{objectQualifier}ModuleSettings.SettingValue  
		END 
	AS SettingValue
FROM {databaseOwner}{objectQualifier}ModuleSettings 
WHERE  ModuleId = @ModuleId AND SettingName = @SettingName

GO


/* Update GetModuleSettings */
/****************************/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}GetModuleSettings]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetModuleSettings]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetModuleSettings]

@ModuleId int

AS
SELECT 
	SettingName,
	CASE WHEN LEFT(LOWER({databaseOwner}{objectQualifier}ModuleSettings.SettingValue), 6) = 'fileid' 
		THEN
			(SELECT Folder + FileName  
				FROM {databaseOwner}{objectQualifier}vw_Files 
				WHERE 'fileid=' + convert(varchar,{databaseOwner}{objectQualifier}vw_Files.FileID) = {databaseOwner}{objectQualifier}ModuleSettings.SettingValue
			) 
		ELSE 
			{databaseOwner}{objectQualifier}ModuleSettings.SettingValue  
		END
	AS SettingValue
FROM {databaseOwner}{objectQualifier}ModuleSettings 
WHERE  ModuleId = @ModuleId

GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}FindBanners]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}FindBanners]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}FindBanners]
	@PortalID     int,
	@BannerTypeId int,
	@GroupName    nvarchar(100)

AS
SELECT  B.BannerId,
		B.VendorId,
		BannerName,
		URL,
		CASE WHEN LEFT(LOWER(ImageFile), 6) = 'fileid' 
			THEN
				(SELECT Folder + FileName  
					FROM {databaseOwner}{objectQualifier}vw_Files 
					WHERE 'fileid=' + convert(varchar,{databaseOwner}{objectQualifier}vw_Files.FileID) = ImageFile
				) 
			ELSE 
				ImageFile  
			END 
		AS ImageFile,
		Impressions,
		CPM,
		B.Views,
		B.ClickThroughs,
		StartDate,
		EndDate,
		BannerTypeId,
		Description,
		GroupName,
		Criteria,
		B.Width,
		B.Height,
		B.ImageFile AS ImageFileRaw
FROM    {databaseOwner}{objectQualifier}Banners B
INNER JOIN {databaseOwner}{objectQualifier}Vendors V ON B.VendorId = V.VendorId
WHERE   (B.BannerTypeId = @BannerTypeId or @BannerTypeId is null)
AND     (B.GroupName = @GroupName or @GroupName is null)
AND     ((V.PortalId = @PortalID) or (@PortalID is null and V.PortalId is null))
AND     V.Authorized = 1 
AND     (getdate() <= B.EndDate or B.EndDate is null)
ORDER BY BannerId

GO

/* Update PortalsDefaultLanguage View */
/**************************************/

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}vw_PortalsDefaultLanguage]') AND OBJECTPROPERTY(id, N'IsView') = 1)
	DROP VIEW {databaseOwner}[{objectQualifier}vw_PortalsDefaultLanguage]
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_PortalsDefaultLanguage]
AS
	SELECT DISTINCT 
        P.PortalID, 
		P.PortalGroupID, 
		PL.PortalName, 
		PL.LogoFile, 
		PL.FooterText, 
		P.ExpiryDate, 
		P.UserRegistration, 
		P.BannerAdvertising, 
		P.AdministratorId, 
		P.Currency, 
		P.HostFee, 
        P.HostSpace, 
		P.PageQuota, 
		P.UserQuota, 
		P.AdministratorRoleId, 
		P.RegisteredRoleId, 
		PL.Description, 
		PL.KeyWords, 
		PL.BackgroundFile, 
		P.GUID, 
		P.PaymentProcessor,
        P.ProcessorUserId, 
		P.ProcessorPassword, 
		P.SiteLogHistory, 
		U.Email, 
		P.DefaultLanguage, 
		P.TimezoneOffset, 
		PL.AdminTabId, 
		P.HomeDirectory, 
		PL.SplashTabId, 
        PL.HomeTabId, 
		PL.LoginTabId, 
		PL.RegisterTabId, 
		PL.UserTabId, 
		PL.SearchTabId,
        (SELECT     TOP (1) TabID
			FROM          {databaseOwner}{objectQualifier}Tabs
				WHERE      (PortalID IS NULL) AND (ParentId IS NULL))
			AS SuperTabId, 
		P.CreatedByUserID, 
		P.CreatedOnDate, 
		P.LastModifiedByUserID, 
		P.LastModifiedOnDate, 
        PL.CultureCode
	FROM	{databaseOwner}{objectQualifier}Portals AS P 
		INNER JOIN (SELECT  
						PortalID, 
						PortalName, 
						CASE WHEN LEFT(LOWER(LogoFile), 7) = 'fileid=' THEN
								(SELECT Folder + FileName
									FROM {databaseOwner}{objectQualifier}vw_Files
									WHERE fileid = CAST((RIGHT(LOWER(LogoFile), LEN(LogoFile) - 7)) AS INT)) 
							ELSE 
								LogoFile
							END AS LogoFile,
						FooterText, 
						Description, 
						KeyWords, 
                        CASE WHEN LEFT(LOWER(BackgroundFile), 7) = 'fileid=' THEN
								(SELECT Folder + FileName
									FROM {databaseOwner}{objectQualifier}vw_Files
									WHERE fileid = CAST((RIGHT(LOWER(BackgroundFile), LEN(BackgroundFile) - 7)) AS INT)) 
							ELSE 
								BackgroundFile 
							END AS BackgroundFile, 
						AdminTabId, 
						SplashTabId, 
						HomeTabId, 
						LoginTabId, 
						RegisterTabId, 
						UserTabId, 
						SearchTabId, 
						CultureCode
				FROM    {databaseOwner}{objectQualifier}PortalLocalization) 
			AS PL ON P.PortalID = PL.PortalID AND PL.CultureCode = P.DefaultLanguage 
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}Users AS U ON P.AdministratorId = U.UserID
GO

/* Update PortalAlias Table */
/****************************/

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N'{objectQualifier}PortalAlias ' AND COLUMN_NAME = 'BrowserType')
	BEGIN
		ALTER TABLE {databaseOwner}[{objectQualifier}PortalAlias] 
			ADD BrowserType nvarchar(10) NULL
	END
GO

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N'{objectQualifier}PortalAlias ' AND COLUMN_NAME = 'Skin')
	BEGIN
		ALTER TABLE {databaseOwner}[{objectQualifier}PortalAlias] 
			ADD Skin nvarchar(100) NULL
	END
GO

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N'{objectQualifier}PortalAlias ' AND COLUMN_NAME = 'CultureCode')
	BEGIN
		ALTER TABLE {databaseOwner}[{objectQualifier}PortalAlias] 
			ADD CultureCode nvarchar(10) NULL
	END
GO

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N'{objectQualifier}PortalAlias ' AND COLUMN_NAME = 'IsPrimary')
	BEGIN
		ALTER TABLE {databaseOwner}[{objectQualifier}PortalAlias] 
			ADD IsPrimary bit NOT NULL CONSTRAINT DF_{objectQualifier}PortalAlias_IsPrimary DEFAULT 0
	END
GO

/* Update AddPortalAlias */
/*************************/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}AddPortalAlias]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}AddPortalAlias]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddPortalAlias]
	@PortalID 			int,
	@HTTPAlias 			nvarchar(200),
	@CultureCode		nvarchar(10),
	@Skin				nvarchar(100),
	@BrowserType		nvarchar(10),
	@IsPrimary			bit,
	@CreatedByUserID	int

AS

	IF @IsPrimary = 1
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}PortalAlias
				SET IsPrimary = 0
				WHERE (CultureCode = @CultureCode OR (CultureCode IS NULL AND @CultureCode IS NULL))
					AND (BrowserType = @BrowserType OR (BrowserType IS NULL AND @BrowserType IS NULL))
					AND (PortalID = @PortalID)
		END

	INSERT INTO {databaseOwner}{objectQualifier}PortalAlias (
		PortalID, 
		HTTPAlias,
		CultureCode,
		BrowserTYpe,
		Skin,
		IsPrimary,
		CreatedByUserID,
		CreatedOnDate,
		LastModifiedByUserID,
		LastModifiedOnDate
	)
	VALUES (
		@PortalID, 
		@HTTPAlias,
		@CultureCode,
		@BrowserTYpe,
		@Skin,
		@IsPrimary,
		@CreatedByUserID,
		getdate(),
		@CreatedByUserID,
		getdate()
	 )

	SELECT SCOPE_IDENTITY()

GO

/* Update UpdatePortalAlias */
/*************************/

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}UpdatePortalAlias]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdatePortalAlias]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdatePortalAlias]
	@PortalAliasID		int,
	@PortalID 			int,
	@HTTPAlias 			nvarchar(200),
	@CultureCode		nvarchar(10),
	@Skin				nvarchar(100),
	@BrowserType		nvarchar(10),
	@IsPrimary			bit,
	@LastModifiedByUserID	int

AS

	IF @IsPrimary = 1
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}PortalAlias
				SET IsPrimary = 0
				WHERE (CultureCode = @CultureCode OR (CultureCode IS NULL AND @CultureCode IS NULL))
					AND (BrowserType = @BrowserType OR (BrowserType IS NULL AND @BrowserType IS NULL))
					AND (PortalID = @PortalID)
		END

	UPDATE {databaseOwner}{objectQualifier}PortalAlias
		SET 
			HTTPAlias = @HTTPAlias,
			CultureCode = @CultureCode,
			Skin = @Skin,
			BrowserType = @BrowserType,
			IsPrimary = @IsPrimary,
			LastModifiedByUserID = @LastModifiedByUserID,
			LastModifiedOnDate = getdate()
		WHERE PortalID = @PortalID
		AND	  PortalAliasID = @PortalAliasID
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}AddFileVersion]') AND type in (N'P', N'PC'))
	DROP PROCEDURE  {databaseOwner}[{objectQualifier}AddFileVersion] 
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddFileVersion] 
	@FileId					int,
	@UniqueId				uniqueidentifier,
	@VersionGuid			uniqueidentifier,
	@FileName				nvarchar(246),
	@Extension				nvarchar(100),
	@Size					int,
	@Width					int,
	@Height					int,
	@ContentType			nvarchar(200),
	@Folder					nvarchar(246),
	@FolderID				int,
	@UserID					int,
	@Hash					varchar(40),
	@LastModificationTime	datetime, 
	@Title					nvarchar(256),
	@EnablePublishPeriod	bit,
	@StartDate				datetime,
	@EndDate				datetime,
	@ContentItemID			int,
	@IsPublished			bit,
	@Content				image = NULL
AS
BEGIN

	DECLARE @Version INT

	--	Calculate the new version = Max(Files.PublishedVersion, FileVersions.Versions) + 1
	SELECT @Version = MAX([Version]) + 1
	FROM (SELECT [Version]
			FROM {databaseOwner}[{objectQualifier}FileVersions]
			WHERE FileId = @FileId
			UNION
			SELECT PublishedVersion [Version]
			FROM {databaseOwner}{objectQualifier}Files
			WHERE FileId = @FileId) v

	IF  @IsPublished = 1
		BEGIN
			INSERT {databaseOwner}[{objectQualifier}FileVersions]
						([FileId]
						,[Version]
						,[FileName]
						,[Extension]
						,[Size]
						,[Width]
						,[Height]
						,[ContentType]
						,[Content]
						,[CreatedByUserID]
						,[CreatedOnDate]
						,[LastModifiedByUserID]
						,[LastModifiedOnDate]
						,[SHA1Hash])
			SELECT		[FileId]
						,[PublishedVersion]  [Version]				
						,CONVERT(nvarchar, [FileId]) + '_' + CONVERT(nvarchar, [PublishedVersion]) +'.v.resources' 
						,[Extension]
						,[Size]
						,[Width]
						,[Height]
						,[ContentType]
						,[Content]
						,[CreatedByUserID]
						,[CreatedOnDate]
						,[LastModifiedByUserID]
						,[LastModifiedOnDate]
						,[SHA1Hash]					
			FROM {objectQualifier}Files
			WHERE FileId = @FileId

			-- Change PublishedVersion
			UPDATE {databaseOwner}[{objectQualifier}Files]
			SET	 [PublishedVersion] = @Version
			WHERE FileId = @FileId
		END
	ELSE
		BEGIN
			INSERT {databaseOwner}[{objectQualifier}FileVersions]
							([FileId]
							,[Version]
							,[FileName]
							,[Extension]
							,[Size]
							,[Width]
							,[Height]
							,[ContentType]
							,[Content]
							,[CreatedByUserID]
							,[CreatedOnDate]
							,[LastModifiedByUserID]
							,[LastModifiedOnDate]
							,[SHA1Hash])
			VALUES (@FileId
					,@Version
					,CONVERT(nvarchar, @FileId) + '_' + CONVERT(nvarchar, @Version) +'.v.resources'
					,@Extension
					,@Size
					,@Width
					,@Height
					,@ContentType
					,@Content
					,@UserID
					,GETDATE()
					,@UserID
					,GETDATE()
					,@Hash)
		END

	SELECT @Version
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SetPublishedVersion]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}SetPublishedVersion]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SetPublishedVersion] 
	@FileId					int,
	@NewPublishedVersion	int
AS
BEGIN

	-- Insert a new record in the FileVersions table for the old published version
	INSERT {databaseOwner}[{objectQualifier}FileVersions]
				([FileId]
				,[Version]
				,[FileName]
				,[Extension]
				,[Size]
				,[Width]
				,[Height]
				,[ContentType]
				,[Content]
				,[CreatedByUserID]
				,[CreatedOnDate]
				,[LastModifiedByUserID]
				,[LastModifiedOnDate]
				,[SHA1Hash])
	SELECT		[FileId]
				,[PublishedVersion]  [Version]				
				,CONVERT(nvarchar, [FileId]) + '_' + CONVERT(nvarchar, [PublishedVersion]) +'.v.resources' 
				,[Extension]
				,[Size]
				,[Width]
				,[Height]
				,[ContentType]
				,[Content]
				,[CreatedByUserID]
				,[CreatedOnDate]
				,[LastModifiedByUserID]
				,[LastModifiedOnDate]
				,[SHA1Hash]					
	FROM {objectQualifier}Files
	WHERE FileId = @FileId

	-- Change Files.PublishedVersion to the new version number
	UPDATE {databaseOwner}[{objectQualifier}Files]
	SET	 [PublishedVersion] = @NewPublishedVersion		
		,[Extension] =v.[Extension]
		,[Size] = v.[Size]
		,[Width] = v.[Width]
		,[Height] = v.[Height]
		,[ContentType] = v.[ContentType]
		,[Content] = v.[Content]
		,[CreatedByUserID] = v.[CreatedByUserID]
		,[CreatedOnDate] = v.[CreatedOnDate]
		,[LastModifiedByUserID] = v.[LastModifiedByUserID]
		,[LastModifiedOnDate] = v.[LastModifiedOnDate]
		,[SHA1Hash] = v.[SHA1Hash]
	FROM {databaseOwner}[{objectQualifier}Files] f
		JOIN {databaseOwner}[{objectQualifier}FileVersions] v ON f.FileId = v.FileId
	WHERE f.FileId = @FileId
		AND v.Version = @NewPublishedVersion

    -- Delete the FileVersions entry of the version being published
	DELETE {databaseOwner}[{objectQualifier}FileVersions]
	WHERE FileId = @FileId AND Version = @NewPublishedVersion
END

GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetFileVersionsInFolder]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetFileVersionsInFolder]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFileVersionsInFolder]
@FolderId int
AS
BEGIN
	SELECT 
	   fv.[FileId]
      ,fv.[Version]
      ,fv.[FileName]
      ,fv.[Extension]
      ,fv.[Size]
      ,fv.[Width]
      ,fv.[Height]
      ,fv.[ContentType]
      ,fv.[CreatedByUserID]
      ,fv.[CreatedOnDate]
      ,fv.[LastModifiedByUserID]
      ,fv.[LastModifiedOnDate]
      ,fv.[SHA1Hash]
	FROM {databaseOwner}{objectQualifier}FileVersions fv, {databaseOwner}{objectQualifier}Files f
    WHERE fv.FileId = f.FileId and f.FolderId = @FolderId
END

GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetFileVersions]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetFileVersions]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFileVersions] 
@FileId int
AS
BEGIN
	SELECT 
	   [FileId]
      ,[Version]
      ,[FileName]
      ,[Extension]
      ,[Size]
      ,[Width]
      ,[Height]
      ,[ContentType]
      ,[CreatedByUserID]
      ,[CreatedOnDate]
      ,[LastModifiedByUserID]
      ,[LastModifiedOnDate]
      ,[SHA1Hash]
	FROM {databaseOwner}{objectQualifier}FileVersions fv
	WHERE fv.FileId = @FileId
END

GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetFileVersion]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetFileVersion]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFileVersion] 
	@FileId int,
	@Version int
AS
BEGIN
	SELECT 
	   [FileId]
      ,[Version]
      ,[FileName]
      ,[Extension]
      ,[Size]
      ,[Width]
      ,[Height]
      ,[ContentType]
      ,[CreatedByUserID]
      ,[CreatedOnDate]
      ,[LastModifiedByUserID]
      ,[LastModifiedOnDate]
      ,[SHA1Hash]
	FROM {databaseOwner}{objectQualifier}FileVersions fv
	WHERE FileId = @FileId
	  AND Version = @Version
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteFileVersion]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteFileVersion]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteFileVersion] 
	@FileId int,
	@Version int
AS
BEGIN
	DECLARE @PublishedVersion int

	-- Check there is at least one version
	IF NOT EXISTS(SELECT FileID FROM {objectQualifier}FileVersions WHERE FileId = @FileId)
	BEGIN
		SELECT NULL
		RETURN
	END
		
	SELECT @PublishedVersion = PublishedVersion
	FROM {databaseOwner}{objectQualifier}Files
	WHERE FileId = @FileId

	IF @PublishedVersion = @Version 
	BEGIN
		-- Get the previous version
		SELECT @PublishedVersion = MAX(Version)
		FROM {databaseOwner}{objectQualifier}FileVersions 
		WHERE FileId = @FileId
			AND Version < @Version

		-- If there is no previous version, get the min exsisting version
		IF @PublishedVersion IS NULL 
			SELECT @PublishedVersion = MIN(Version)
			FROM {databaseOwner}{objectQualifier}FileVersions 
			WHERE FileId = @FileId

		-- Update the published version
		IF @PublishedVersion IS NOT NULL 
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}Files
			SET [PublishedVersion] = @PublishedVersion,
				[Extension] = v.[Extension],
				[Size] = v.[Size],
				[Width] = v.Width,		
				[Height] = v.Height,
				[ContentType] = v.ContentType,
				[Content] = v.Content,
				[CreatedByUserID] = v.CreatedByUserID,
				[CreatedOnDate] = v.CreatedOnDate,
				[LastModifiedByUserID] = v.LastModifiedByUserID,
				[LastModifiedOnDate] = v.LastModifiedOnDate,
				[SHA1Hash] = v.SHA1Hash
			FROM {databaseOwner}{objectQualifier}files AS f
				INNER JOIN {databaseOwner}{objectQualifier}FileVersions AS v
				ON ( f.FileId = v.FileId AND v.Version = @PublishedVersion)		
			WHERE f.FileId = @FileId

			DELETE FROM {databaseOwner}{objectQualifier}FileVersions
			WHERE FileId = @FileId 
			AND Version = @PublishedVersion
		END
	END

	DELETE FROM {databaseOwner}{objectQualifier}FileVersions
	WHERE FileId = @FileId 
	  AND Version = @Version

	SELECT @PublishedVersion
END

GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}ResetFilePublishedVersion]') AND type in (N'P', N'PC'))
	DROP PROCEDURE  {databaseOwner}[{objectQualifier}ResetFilePublishedVersion] 
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}ResetFilePublishedVersion] 
@FileId int
AS
BEGIN
	UPDATE {databaseOwner}{objectQualifier}Files
		SET PublishedVersion = 1
		WHERE FileId = @FileId
END

GO

/* CONTENT WORKFLOW Tables */
/***************************/

IF NOT EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}ContentWorkflows') and OBJECTPROPERTY(id, N'IsTable') = 1)
	BEGIN
		CREATE TABLE {databaseOwner}{objectQualifier}ContentWorkflows
			(
				[WorkflowID] int NOT NULL IDENTITY (1, 1),
				[PortalID] int NULL,
				[WorkflowName] nvarchar(40) NOT NULL,
				[Description] nvarchar(256) NULL,
				[IsDeleted] bit NOT NULL,
				[StartAfterCreating] [bit] NOT NULL,
				[StartAfterEditing] [bit] NOT NULL,
				[DispositionEnabled] [bit] NOT NULL,
				CONSTRAINT [PK_{objectQualifier}ContentWorkflows] PRIMARY KEY CLUSTERED (WorkflowID),
				CONSTRAINT [IX_{objectQualifier}ContentWorkflows] UNIQUE NONCLUSTERED (PortalID ASC, WorkflowName ASC)
			) 
	END

GO

IF NOT EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}ContentWorkflowStates') and OBJECTPROPERTY(id, N'IsTable') = 1)
	BEGIN
		CREATE TABLE {databaseOwner}{objectQualifier}ContentWorkflowStates
			(
				[StateID] int NOT NULL IDENTITY (1, 1),
				[WorkflowID] int NOT NULL,
				[StateName] nvarchar(40) NOT NULL,
				[Order] int NOT NULL,
				[IsActive] [bit] NOT NULL,
				[SendEmail] [bit] NOT NULL,
				[SendMessage] [bit] NOT NULL,
				[IsDisposalState] [bit] NOT NULL,
				[OnCompleteMessageSubject] [nvarchar](256) NOT NULL,
				[OnCompleteMessageBody] [nvarchar](1024) NOT NULL,
				[OnDiscardMessageSubject] [nvarchar](256) NOT NULL,
				[OnDiscardMessageBody] [nvarchar](1024) NOT NULL,
				CONSTRAINT [PK_{objectQualifier}ContentWorkflowStates] PRIMARY KEY CLUSTERED (StateID),
				CONSTRAINT [IX_{objectQualifier}ContentWorkflowStates] UNIQUE NONCLUSTERED  (WorkflowID ASC, StateName ASC),
				CONSTRAINT [FK_{objectQualifier}ContentWorkflowStates_{objectQualifier}ContentWorkflows] FOREIGN KEY (WorkflowID) 
					REFERENCES {databaseOwner}{objectQualifier}ContentWorkflows (WorkflowID) ON DELETE  CASCADE
			) 
	END

GO

IF NOT EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}ContentWorkflowLogs') and OBJECTPROPERTY(id, N'IsTable') = 1)
	BEGIN
		CREATE TABLE {databaseOwner}{objectQualifier}ContentWorkflowLogs
			(
				[WorkflowLogID] [int] IDENTITY(1,1) NOT NULL,
				[Action] [nvarchar](40) NOT NULL,
				[Comment] [nvarchar](256) NOT NULL,
				[Date] [datetime] NOT NULL,
				[User] [int] NOT NULL,
				[WorkflowID] [int] NOT NULL,
				[ContentItemID] [int] NOT NULL,
				CONSTRAINT [PK_{objectQualifier}ContentWorkflowLogs] PRIMARY KEY CLUSTERED (WorkflowLogID),
				CONSTRAINT [FK_{objectQualifier}ContentWorkflowLogs_{objectQualifier}ContentWorkflows] FOREIGN KEY([WorkflowID])
					REFERENCES {databaseOwner}{objectQualifier}ContentWorkflows ([WorkflowID]) ON DELETE CASCADE,
				CONSTRAINT [FK_{objectQualifier}ContentWorkflowLogs_{objectQualifier}ContentItems] FOREIGN KEY([ContentItemID])
					REFERENCES {databaseOwner}{objectQualifier}ContentItems ([ContentItemID]) ON DELETE CASCADE
			) 	 
	END

GO

IF NOT EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}ContentWorkflowStatePermission') and OBJECTPROPERTY(id, N'IsTable') = 1)
	BEGIN
        CREATE TABLE {databaseOwner}[{objectQualifier}ContentWorkflowStatePermission]
	        (
		        [WorkflowStatePermissionID] [int] IDENTITY(1,1) NOT NULL,
		        [StateID] [int] NOT NULL,
		        [PermissionID] [int] NOT NULL,
		        [AllowAccess] [bit] NOT NULL,
		        [RoleID] [int] NULL,
		        [UserID] [int] NULL,
	            [CreatedByUserID] int NULL,
	            [CreatedOnDate] datetime NULL,
	            [LastModifiedByUserID] int NULL,
	            [LastModifiedOnDate] datetime NULL,
		        CONSTRAINT [PK_{objectQualifier}ContentWorkflowStatePermission] PRIMARY KEY CLUSTERED ([WorkflowStatePermissionID] ASC),
		        CONSTRAINT [IX_{objectQualifier}ContentWorkflowStatePermission] UNIQUE NONCLUSTERED ( [StateID] ASC, [PermissionID] ASC, [RoleID] ASC, [UserID] ASC ),
				CONSTRAINT [FK_{objectQualifier}ContentWorkflowStatePermission_{objectQualifier}ContentWorkflowStates] FOREIGN KEY([StateID]) 
					REFERENCES {databaseOwner}[{objectQualifier}ContentWorkflowStates] ([StateID]) ON DELETE CASCADE,
				CONSTRAINT [FK_{objectQualifier}ContentWorkflowStatePermission_{objectQualifier}Permission] FOREIGN KEY([PermissionID]) 
					REFERENCES {databaseOwner}[{objectQualifier}Permission] ([PermissionID]) ON DELETE CASCADE,
				CONSTRAINT [FK_{objectQualifier}ContentWorkflowStatePermission_{objectQualifier}Users] FOREIGN KEY([UserID]) 
					REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserID]) ON DELETE CASCADE
	        ) 
	END

GO

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N'{objectQualifier}Folders ' AND COLUMN_NAME = 'WorkflowID')
	BEGIN
		ALTER TABLE {databaseOwner}[{objectQualifier}Folders]
			ADD [WorkflowID] int NULL
		
		ALTER TABLE {databaseOwner}[{objectQualifier}Folders]  
			ADD  CONSTRAINT [FK_{objectQualifier}Folders_{objectQualifier}ContentWorkflows] FOREIGN KEY([WorkflowID]) 
			REFERENCES {databaseOwner}[{objectQualifier}ContentWorkflows] ([WorkflowID]) ON DELETE SET NULL  
	END

GO

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N'{objectQualifier}ContentItems ' AND COLUMN_NAME = 'StateID')
	BEGIN						
		ALTER TABLE {databaseOwner}[{objectQualifier}ContentItems]
			ADD [StateID] int NULL
		
		ALTER TABLE {databaseOwner}[{objectQualifier}ContentItems]  
			ADD  CONSTRAINT [FK_{objectQualifier}ContentItems_{objectQualifier}ContentWorkflowStates] FOREIGN KEY([StateID]) 
			REFERENCES {databaseOwner}[{objectQualifier}ContentWorkflowStates] ([StateID]) ON DELETE SET NULL
    END
GO

/* Add ContentWorkflowStatePermission View */
/*******************************************/

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}vw_ContentWorkflowStatePermissions]') and OBJECTPROPERTY(id, N'IsView') = 1)
    DROP VIEW {databaseOwner}[{objectQualifier}vw_ContentWorkflowStatePermissions]
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_ContentWorkflowStatePermissions]
AS
    SELECT     
	    WSP.WorkflowStatePermissionID, 
	    WSP.StateID, 
	    P.PermissionID, 
	    WSP.RoleID,
	    CASE WSP.RoleID
		    when -1 then 'All Users'
		    when -2 then 'Superuser'
		    when -3 then 'Unauthenticated Users'
		    else 	R.RoleName
	    END AS 'RoleName',
	    WSP.AllowAccess, 
	    WSP.UserID,
	    U.Username,
	    U.DisplayName, 
	    P.PermissionCode, 
	    P.ModuleDefID, 
	    P.PermissionKey, 
	    P.PermissionName, 
        WSP.CreatedByUserID, 
        WSP.CreatedOnDate, 
        WSP.LastModifiedByUserID, 
        WSP.LastModifiedOnDate    
    FROM {databaseOwner}{objectQualifier}ContentWorkflowStatePermission AS WSP 
	    LEFT OUTER JOIN {databaseOwner}{objectQualifier}Permission AS P ON WSP.PermissionID = P.PermissionID 
	    LEFT OUTER JOIN {databaseOwner}{objectQualifier}Roles AS R ON WSP.RoleID = R.RoleID
	    LEFT OUTER JOIN {databaseOwner}{objectQualifier}Users AS U ON WSP.UserID = U.UserID
GO

/* Add ContentWorkflows CRUD Store Procedures */
/**********************************************/

/* Add Content Workflow */
/************************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}AddContentWorkflow') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
    DROP PROCEDURE {databaseOwner}{objectQualifier}AddContentWorkflow
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}AddContentWorkflow
@PortalID int,
@WorkflowName nvarchar(40),
@Description nvarchar(256),
@IsDeleted bit,
@StartAfterCreating bit,
@StartAfterEditing bit,
@DispositionEnabled bit
AS

INSERT INTO {databaseOwner}{objectQualifier}ContentWorkflows (
  [PortalID],
  [WorkflowName],
  [Description],
  [IsDeleted],
  [StartAfterCreating],
  [StartAfterEditing],
  [DispositionEnabled]
)
VALUES (
  @PortalID,
  @WorkflowName,
  @Description,
  @IsDeleted,
  @StartAfterCreating,
  @StartAfterEditing,
  @DispositionEnabled
)

SELECT SCOPE_IDENTITY()

GO

/* Update Content Workflow */
/***************************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}UpdateContentWorkflow') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
    DROP PROCEDURE {databaseOwner}{objectQualifier}UpdateContentWorkflow
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}UpdateContentWorkflow
@WorkflowID int,
@WorkflowName nvarchar(40),
@Description nvarchar(256),
@IsDeleted bit,
@StartAfterCreating bit,
@StartAfterEditing bit,
@DispositionEnabled bit
AS

UPDATE {databaseOwner}{objectQualifier}ContentWorkflows
SET    WorkflowName = @WorkflowName,
       Description = @Description,
       IsDeleted = @IsDeleted,
	   StartAfterCreating = @StartAfterCreating,
	   StartAfterEditing = @StartAfterEditing,
	   DispositionEnabled = @DispositionEnabled
WHERE  WorkflowID = @WorkflowID

GO

/* Get Content Workflow */
/************************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}GetContentWorkflow') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
    DROP PROCEDURE {databaseOwner}{objectQualifier}GetContentWorkflow
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetContentWorkflow
@WorkflowID int
AS

SELECT 
  [WorkflowID],
  [PortalID],
  [WorkflowName],
  [Description],
  [IsDeleted],
  [StartAfterCreating],
  [StartAfterEditing],
  [DispositionEnabled]
FROM {databaseOwner}{objectQualifier}ContentWorkflows
WHERE WorkflowID = @WorkflowID

GO

/* Get Content Workflows */
/*************************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}GetContentWorkflows') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
    DROP PROCEDURE {databaseOwner}{objectQualifier}GetContentWorkflows
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}GetContentWorkflows
	@PortalID int
AS

SELECT
	[WorkflowID],
	[PortalID],
	[WorkflowName],
	[Description],
	[IsDeleted],
	[StartAfterCreating],
	[StartAfterEditing],
	[DispositionEnabled]
FROM {databaseOwner}{objectQualifier}ContentWorkflows
WHERE (PortalID = @PortalID OR PortalID IS null)

GO

/* Add Content Workflow State */
/******************************/

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}AddContentWorkflowState]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}AddContentWorkflowState]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddContentWorkflowState]
	@WorkflowID	int,
	@StateName nvarchar(40),
	@Order int,
	@IsActive bit,
	@SendEmail bit,
	@SendMessage bit,
	@IsDisposalState bit,
	@OnCompleteMessageSubject nvarchar(256),
	@OnCompleteMessageBody nvarchar(1024),
	@OnDiscardMessageSubject nvarchar(256),
	@OnDiscardMessageBody nvarchar(1024)
AS

INSERT INTO {databaseOwner}{objectQualifier}ContentWorkflowStates (
	[WorkflowID],
	[StateName],
	[Order],
	[IsActive],
	[SendEmail],
	[SendMessage],
	[IsDisposalState],
	[OnCompleteMessageSubject],
	[OnCompleteMessageBody],
	[OnDiscardMessageSubject],
	[OnDiscardMessageBody]
)
VALUES (
	@WorkflowID,
	@StateName,
	@Order,
	@IsActive,
	@SendEmail,
	@SendMessage,
	@IsDisposalState,
	@OnCompleteMessageSubject,
	@OnCompleteMessageBody,
	@OnDiscardMessageSubject,
	@OnDiscardMessageBody
)

SELECT SCOPE_IDENTITY()

GO

/* Update Content Workflow State */
/*********************************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}UpdateContentWorkflowState') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
    DROP PROCEDURE {databaseOwner}{objectQualifier}UpdateContentWorkflowState
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}UpdateContentWorkflowState
	@StateID int,
	@StateName nvarchar(40),
	@Order int,
	@IsActive bit,
	@SendEmail bit,
	@SendMessage bit,
	@IsDisposalState bit,
	@OnCompleteMessageSubject nvarchar(256),
	@OnCompleteMessageBody nvarchar(1024),
	@OnDiscardMessageSubject nvarchar(256),
	@OnDiscardMessageBody nvarchar(1024)
AS

UPDATE {databaseOwner}{objectQualifier}ContentWorkflowStates
SET [StateName] = @StateName,
	[Order] = @Order,
	[IsActive] = @IsActive,
	[SendEmail] = @SendEmail,
	[SendMessage] = @SendMessage,
	[IsDisposalState] = @IsDisposalState,
	[OnCompleteMessageSubject] = @OnCompleteMessageSubject,
	[OnCompleteMessageBody] = @OnCompleteMessageBody,
	[OnDiscardMessageSubject] = @OnDiscardMessageSubject,
	[OnDiscardMessageBody] = @OnDiscardMessageBody
WHERE  [StateID] = @StateID

GO

/* Delete Content Workflow State */
/*********************************/

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DeleteContentWorkflowState]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteContentWorkflowState]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteContentWorkflowState]
	@StateID int
AS
    DELETE FROM {databaseOwner}{objectQualifier}ContentWorkflowStates
    WHERE StateID = @StateID
GO


/* Get Content Workflow State */
/******************************/

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}GetContentWorkflowState]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetContentWorkflowState]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetContentWorkflowState]
	@StateID int
AS
    SELECT
		[StateID],
		[WorkflowID],
		[StateName],
		[Order],
		[IsActive],
		[SendEmail],
		[SendMessage],
		[IsDisposalState],
		[OnCompleteMessageSubject],
		[OnCompleteMessageBody],
		[OnDiscardMessageSubject],
		[OnDiscardMessageBody]
	FROM {databaseOwner}{objectQualifier}ContentWorkflowStates
    WHERE StateID = @StateID
GO

/* Get Content Workflow States */
/*******************************/

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}GetContentWorkflowStates]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetContentWorkflowStates]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetContentWorkflowStates]
	@WorkflowID int
AS
    SELECT 
		[StateID],
		[WorkflowID],
		[StateName],
		[Order],
		[IsActive],
		[SendEmail],
		[SendMessage],
		[IsDisposalState],
		[OnCompleteMessageSubject],
		[OnCompleteMessageBody],
		[OnDiscardMessageSubject],
		[OnDiscardMessageBody]
	FROM {databaseOwner}{objectQualifier}ContentWorkflowStates
    WHERE WorkflowID = @WorkflowID
GO

/* Get Content Workflow State Permission */
/*****************************************/

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}GetContentWorkflowStatePermission]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetContentWorkflowStatePermission]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetContentWorkflowStatePermission]
	@WorkflowStatePermissionID	int
AS
    SELECT *
    FROM {databaseOwner}{objectQualifier}vw_ContentWorkflowStatePermissions
    WHERE WorkflowStatePermissionID = @WorkflowStatePermissionID
GO

/* Get Content Workflow State Permissions */
/******************************************/

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}GetContentWorkflowStatePermissions]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetContentWorkflowStatePermissions]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetContentWorkflowStatePermissions]
AS
    SELECT *
    FROM {databaseOwner}{objectQualifier}vw_ContentWorkflowStatePermissions
GO

/* Get Content Workflow State Permissions By StateID */
/*****************************************************/

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}GetContentWorkflowStatePermissionsByStateID]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetContentWorkflowStatePermissionsByStateID]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetContentWorkflowStatePermissionsByStateID]
	@StateID int
AS
    SELECT *
    FROM {databaseOwner}{objectQualifier}vw_ContentWorkflowStatePermissions
	WHERE StateID = @StateID
GO

/* Delete Content Workflow State Permission */
/********************************************/

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DeleteContentWorkflowStatePermission]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteContentWorkflowStatePermission]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteContentWorkflowStatePermission]
	@WorkflowStatePermissionID int
AS
    DELETE FROM {databaseOwner}{objectQualifier}ContentWorkflowStatePermission
    WHERE WorkflowStatePermissionID = @WorkflowStatePermissionID
GO

/* Add Content Workflow State Permission */
/*****************************************/

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}AddContentWorkflowStatePermission]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}AddContentWorkflowStatePermission]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddContentWorkflowStatePermission]
	@StateID int,
	@PermissionID int,
	@RoleID int,
	@AllowAccess bit,
	@UserID int,
	@CreatedByUserID int
AS

	INSERT INTO {databaseOwner}{objectQualifier}ContentWorkflowStatePermission (
		[StateID],
		[PermissionID],
		[RoleID],
		[AllowAccess],
		[UserID],
		[CreatedByUserID],
		[CreatedOnDate],
		[LastModifiedByUserID],
		[LastModifiedOnDate]
	) VALUES (
		@StateID,
		@PermissionID,
		@RoleID,
		@AllowAccess,
		@UserID,
		@CreatedByUserID,
		getdate(),
		@CreatedByUserID,
		getdate()
	)

	SELECT SCOPE_IDENTITY()
GO

/* Update Content Workflow State Permission */
/********************************************/

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}UpdateContentWorkflowStatePermission]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateContentWorkflowStatePermission]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateContentWorkflowStatePermission]
	@WorkflowStatePermissionID int, 
	@StateID int, 
	@PermissionID int, 
	@RoleID int ,
	@AllowAccess bit,
    @UserID int,
	@LastModifiedByUserID	int
AS
    UPDATE {databaseOwner}{objectQualifier}ContentWorkflowStatePermission 
    SET     
	    [StateID] = @StateID,
	    [PermissionID] = @PermissionID,
	    [RoleID] = @RoleID,
	    [AllowAccess] = @AllowAccess,
        [UserID] = @UserID,
        [LastModifiedByUserID] = @LastModifiedByUserID,
	    [LastModifiedOnDate] = getdate()
    WHERE
		[WorkflowStatePermissionID] = @WorkflowStatePermissionID
GO

/* Add Content Workflow Log */
/****************************/

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}AddContentWorkflowLog]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}AddContentWorkflowLog]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddContentWorkflowLog]
	@Action nvarchar(40),
	@Comment nvarchar(256),
	@User int,
	@WorkflowID int,
	@ContentItemID int
AS
    INSERT INTO {databaseOwner}[{objectQualifier}ContentWorkflowLogs] (
		[Action],
		[Comment],
		[Date],
		[User],
		[WorkflowID],
		[ContentItemID]
	) VALUES (
		@Action,
		@Comment,
		getdate(),
		@User,
		@WorkflowID,
		@ContentItemID
	)

	SELECT SCOPE_IDENTITY()
GO

/* Get Content Workflow Logs */
/*****************************/

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}GetContentWorkflowLogs]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetContentWorkflowLogs]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetContentWorkflowLogs]
	@ContentItemID int,
	@WorkflowID int
AS
    SELECT *
	FROM {databaseOwner}[{objectQualifier}ContentWorkflowLogs]
	WHERE ContentItemID = @ContentItemID AND WorkflowID = @WorkflowID
GO

/* Delete Content Workflow Logs */
/********************************/

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DeleteContentWorkflowLogs]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteContentWorkflowLogs]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteContentWorkflowLogs]
	@ContentItemID int,
	@WorkflowID int
AS
    DELETE FROM {databaseOwner}[{objectQualifier}ContentWorkflowLogs]
	WHERE ContentItemID = @ContentItemID AND WorkflowID = @WorkflowID

	SELECT @@ROWCOUNT
GO

/* Search Types DB Changes */
IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SearchTypes]') AND type in (N'U'))
       BEGIN
              CREATE TABLE {databaseOwner}[{objectQualifier}SearchTypes]
              (
                     [SearchTypeId] [int] IDENTITY(1,1) NOT NULL,
                     [SearchTypeName] [nvarchar](100) NOT NULL,
					 [SearchResultClass] [nvarchar](256) NOT NULL,
                     CONSTRAINT [PK_{objectQualifier}SearchTypes] PRIMARY KEY CLUSTERED 
                           (
                                  [SearchTypeID] ASC
                           )
              )
       END
GO

IF NOT EXISTS(SELECT * FROM {databaseOwner}{objectQualifier}SearchTypes WHERE [SearchTypeName] = 'module') 
   BEGIN
         INSERT INTO  {databaseOwner}{objectQualifier}SearchTypes
            (SearchTypeName, SearchResultClass)
         VALUES  ('module', 'DotNetNuke.Services.Search.Controllers.ModuleResultController')
    END 
GO

IF NOT EXISTS(SELECT * FROM {databaseOwner}{objectQualifier}SearchTypes WHERE [SearchTypeName] = 'tab') 
   BEGIN
         INSERT INTO  {databaseOwner}{objectQualifier}SearchTypes
            (SearchTypeName, SearchResultClass)
         VALUES  ('tab', 'DotNetNuke.Services.Search.Controllers.TabResultController')
    END 
GO

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}SearchTypes_GetAll]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}[{objectQualifier}SearchTypes_GetAll]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SearchTypes_GetAll]
AS
    SELECT *
	FROM {databaseOwner}[{objectQualifier}SearchTypes]
GO

/* UPDATE vw_DesktopModules */
/****************************/
IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}vw_DesktopModules]') and OBJECTPROPERTY(id, N'IsView') = 1)
    DROP VIEW {databaseOwner}[{objectQualifier}vw_DesktopModules]
GO

CREATE VIEW {databaseOwner}{objectQualifier}vw_DesktopModules
AS
	SELECT
		DM.DesktopModuleID,
		DM.FriendlyName,
		DM.Description,
		DM.Version,
		DM.IsPremium,
		DM.IsAdmin,
		DM.BusinessControllerClass,
		DM.FolderName,
		DM.ModuleName,
		DM.SupportedFeatures,
		DM.CompatibleVersions,
		DM.Dependencies,
		DM.Permissions,
		DM.PackageID,
		DM.CreatedByUserID,
		DM.CreatedOnDate,
		DM.LastModifiedByUserID,
		DM.LastModifiedOnDate,
		CI.ContentItemID,
		CI.[Content],
		CI.ContentTypeID,
		CI.TabID,
		CI.ModuleID,
		CI.ContentKey,
		CI.Indexed,
		CI.StateID,
		DM.Shareable
	FROM {databaseOwner}[{objectQualifier}DesktopModules] AS DM
		LEFT OUTER JOIN {databaseOwner}[{objectQualifier}ContentItems] AS CI ON DM.ContentItemId = CI.ContentItemID
GO

/* update vw_TabModules */
IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}vw_TabModules]') and OBJECTPROPERTY(id, N'IsView') = 1)
    DROP VIEW {databaseOwner}[{objectQualifier}vw_TabModules]
GO

CREATE VIEW {databaseOwner}{objectQualifier}vw_TabModules
AS
    SELECT
		M.PortalID AS [OwnerPortalID],
        T.PortalID,
        TM.TabID, 
        TM.TabModuleID, 
        M.ModuleID, 
        M.ModuleDefID, 
        TM.ModuleOrder, 
        TM.PaneName, 
        TM.ModuleTitle, 
        TM.CacheTime, 
        TM.CacheMethod, 
        TM.Alignment, 
        TM.Color, 
        TM.Border, 
        CASE WHEN LEFT(LOWER(TM.IconFile), 6) = 'fileid' THEN (SELECT Folder + FileName FROM {databaseOwner}{objectQualifier}vw_Files WHERE 'fileid=' + CONVERT(varchar, {databaseOwner}{objectQualifier}vw_Files.FileID) = TM.IconFile) ELSE TM.IconFile END AS IconFile, 
        M.AllTabs, 
        TM.Visibility, 
        TM.IsDeleted, 
        TM.Header, 
        TM.Footer, 
        M.StartDate, 
        M.EndDate, 
        TM.ContainerSrc, 
        TM.DisplayTitle, 
        TM.DisplayPrint, 
        TM.DisplaySyndicate, 
        TM.IsWebSlice, 
        TM.WebSliceTitle, 
        TM.WebSliceExpiryDate, 
        TM.WebSliceTTL, 
        M.InheritViewPermissions,
		M.IsShareable,
		M.IsShareableViewOnly, 
        MD.DesktopModuleID, 
        MD.DefaultCacheTime, 
        MC.ModuleControlID, 
        DM.BusinessControllerClass, 
        DM.IsAdmin, 
        DM.SupportedFeatures,
        CI.ContentItemID,
        CI.Content,
        CI.ContentTypeID,
        CI.ContentKey,
        CI.Indexed,
		CI.StateID,
        TM.CreatedByUserID, 
        TM.CreatedOnDate, 
        TM.LastModifiedByUserID, 
        TM.LastModifiedOnDate,
        M.LastContentModifiedOnDate,
        TM.UniqueId, 
        TM.VersionGuid, 
        TM.DefaultLanguageGuid, 
        TM.LocalizedVersionGuid,
        TM.CultureCode
    FROM {databaseOwner}{objectQualifier}ModuleDefinitions AS MD 
        INNER JOIN {databaseOwner}{objectQualifier}Modules AS M ON MD.ModuleDefID = M.ModuleDefID 
        INNER JOIN {databaseOwner}{objectQualifier}ModuleControls AS MC ON MD.ModuleDefID = MC.ModuleDefID 
        INNER JOIN {databaseOwner}{objectQualifier}DesktopModules AS DM ON MD.DesktopModuleID = DM.DesktopModuleID 
        LEFT OUTER JOIN {databaseOwner}{objectQualifier}ContentItems AS CI ON M.ContentItemID = CI.ContentItemID
        LEFT OUTER JOIN {databaseOwner}{objectQualifier}TabModules AS TM ON M.ModuleID = TM.ModuleID
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}Tabs AS T ON TM.TabID = T.TabID
    WHERE (MC.ControlKey IS NULL)
GO

/* UPDATE vw_Modules */
IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}vw_Modules]') and OBJECTPROPERTY(id, N'IsView') = 1)
    DROP VIEW {databaseOwner}[{objectQualifier}vw_Modules]
GO

CREATE VIEW {databaseOwner}{objectQualifier}vw_Modules
AS
    SELECT     
		M.PortalID AS [OwnerPortalID],
        T.PortalID, 
        TM.TabID, 
        TM.TabModuleID, 
        M.ModuleID, 
        M.ModuleDefID, 
        TM.ModuleOrder, 
        TM.PaneName, 
        TM.ModuleTitle, 
        TM.CacheTime, 
        TM.CacheMethod, 
        TM.Alignment, 
        TM.Color, 
        TM.Border, 
        CASE WHEN LEFT(LOWER(TM.IconFile), 6) = 'fileid' THEN (SELECT Folder + FileName FROM {databaseOwner}{objectQualifier}vw_Files WHERE 'fileid=' + CONVERT(varchar, {databaseOwner}{objectQualifier}vw_Files.FileID) = TM.IconFile) ELSE TM.IconFile END AS IconFile, 
        M.AllTabs, 
        TM.Visibility, 
        TM.IsDeleted, 
        TM.Header, 
        TM.Footer, 
        M.StartDate, 
        M.EndDate, 
        TM.ContainerSrc, 
        TM.DisplayTitle, 
        TM.DisplayPrint, 
        TM.DisplaySyndicate, 
        TM.IsWebSlice, 
        TM.WebSliceTitle, 
        TM.WebSliceExpiryDate, 
        TM.WebSliceTTL, 
        M.InheritViewPermissions, 
		M.IsShareable,
		M.IsShareableViewOnly, 
        MD.DesktopModuleID, 
        MD.DefaultCacheTime, 
        MC.ModuleControlID, 
        DM.BusinessControllerClass, 
        DM.IsAdmin, 
        DM.SupportedFeatures,
        CI.ContentItemID,
        CI.Content,
        CI.ContentTypeID,
        CI.ContentKey,
        CI.Indexed,
		CI.StateID,
        M.CreatedByUserID, 
        M.CreatedOnDate, 
        M.LastModifiedByUserID, 
        M.LastModifiedOnDate,
        M.LastContentModifiedOnDate,
        TM.UniqueId, 
        TM.VersionGuid, 
        TM.DefaultLanguageGuid, 
        TM.LocalizedVersionGuid,
        TM.CultureCode
    FROM {databaseOwner}{objectQualifier}ModuleDefinitions AS MD 
        INNER JOIN {databaseOwner}{objectQualifier}Modules AS M ON MD.ModuleDefID = M.ModuleDefID 
        INNER JOIN {databaseOwner}{objectQualifier}ModuleControls AS MC ON MD.ModuleDefID = MC.ModuleDefID 
        INNER JOIN {databaseOwner}{objectQualifier}DesktopModules AS DM ON MD.DesktopModuleID = DM.DesktopModuleID 
        LEFT OUTER JOIN {databaseOwner}{objectQualifier}ContentItems AS CI ON M.ContentItemID = CI.ContentItemID
        LEFT OUTER JOIN {databaseOwner}{objectQualifier}TabModules AS TM ON M.ModuleID = TM.ModuleID
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}Tabs AS T ON TM.TabID = T.TabID
    WHERE (MC.ControlKey IS NULL)
GO

/* UPDATE vw_Tabs */
IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}vw_Tabs]') and OBJECTPROPERTY(id, N'IsView') = 1)
	DROP VIEW {databaseOwner}[{objectQualifier}vw_Tabs]
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_Tabs]
AS
	SELECT     
		T.TabID, 
		T.TabOrder, 
		T.PortalID, 
		T.TabName, 
		T.ParentId, 
		T.[Level], 
		T.TabPath, 
		T.UniqueId, 
		T.VersionGuid, 
		T.DefaultLanguageGuid, 
		T.LocalizedVersionGuid, 
		T.IsVisible, 
		CASE WHEN LEFT(LOWER(T .IconFile), 7) = 'fileid=' THEN
			(SELECT Folder + FileName
				FROM {databaseOwner}{objectQualifier}vw_Files
				WHERE fileid = CAST((RIGHT(LOWER(T.IconFile), Len(T.IconFile) - 7)) AS int)
			) ELSE T.IconFile 
			END AS IconFile, 
		CASE WHEN LEFT(LOWER(T .IconFileLarge), 7) = 'fileid=' THEN
			(SELECT Folder + FileName
				FROM  {databaseOwner}{objectQualifier}vw_Files
				WHERE fileid = CAST((RIGHT(LOWER(T.IconFileLarge), Len(T.IconFileLarge) - 7)) AS int)
			) ELSE T.IconFileLarge
			END AS IconFileLarge, 
		T.DisableLink, 
		T.Title, 
		T.Description, 
		T.KeyWords, 
		T.IsDeleted, 
		T.SkinSrc, 
		T.ContainerSrc, 
		T.StartDate, 
		T.EndDate, 
		T.Url, 
		CASE WHEN EXISTS (SELECT 1 FROM {databaseOwner}{objectQualifier}Tabs T2 WHERE T2.ParentId = T.TabId) THEN 'true' ELSE 'false' END AS HasChildren, 
		T.RefreshInterval, 
		T.PageHeadText, 
		T.IsSecure, 
		T.PermanentRedirect, 
		T.SiteMapPriority, 
		CI.ContentItemID, 
		CI.[Content], 
		CI.ContentTypeID, 
		CI.ModuleID, 
		CI.ContentKey, 
		CI.Indexed, 
		CI.StateID,
		T.CultureCode, 
		T.CreatedByUserID, 
		T.CreatedOnDate, 
		T.LastModifiedByUserID, 
		T.LastModifiedOnDate
	FROM  {databaseOwner}{objectQualifier}Tabs AS T
		LEFT OUTER JOIN {databaseOwner}{objectQualifier}ContentItems AS CI ON T.ContentItemID = CI.ContentItemID
GO

/* UPDATE AddContentItem */
/****************************/
IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}AddContentItem]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE {databaseOwner}[{objectQualifier}AddContentItem]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddContentItem] 
	@Content			nvarchar(max),
	@ContentTypeID		int,
	@TabID				int,
	@ModuleID			int, 
	@ContentKey			nvarchar(250),
	@Indexed			bit,
	@CreatedByUserID	int,
	@StateID			int = NULL
AS
	INSERT INTO {databaseOwner}[{objectQualifier}ContentItems] (
		Content,
		ContentTypeID,
		TabID,
		ModuleID,
		ContentKey,
		Indexed,
		CreatedByUserID,
		CreatedOnDate,
		LastModifiedByUserID,
		LastModifiedOnDate,
		StateID
	)

	VALUES (
		@Content,
		@ContentTypeID,
		@TabID,
		@ModuleID,
		@ContentKey,
		@Indexed,
		@CreatedByUserID,
		getdate(),
		@CreatedByUserID,
		getdate(),
		@StateID
	)

	SELECT SCOPE_IDENTITY()
GO

/* UPDATE UpdateContentItem */
/****************************/
IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}UpdateContentItem]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateContentItem]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateContentItem] 
	@ContentItemID			int,
	@Content				nvarchar(max),
	@ContentTypeID			int,
	@TabID					int,
	@ModuleID				int, 
	@ContentKey				nvarchar(250),
	@Indexed				bit,
	@LastModifiedByUserID	int,
	@StateID				int = NULL
AS
	UPDATE {databaseOwner}[{objectQualifier}ContentItems] 
		SET 
			Content = @Content,
			ContentTypeID = @ContentTypeID,
			TabID = @TabID,
			ModuleID = @ModuleID,
			ContentKey = @ContentKey,
			Indexed = @Indexed,
			LastModifiedByUserID = @LastModifiedByUserID,
			LastModifiedOnDate = getdate(),
			StateID = @StateID
	WHERE ContentItemId = @ContentItemId
GO

/* Update Content ItemId's on files */
/************************************/

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CountLegacyFiles]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CountLegacyFiles]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CountLegacyFiles]
AS
BEGIN

SELECT COUNT(*) FROM {databaseOwner}[{objectQualifier}Files] WHERE ContentItemID IS NULL
END
GO

IF NOT EXISTS(SELECT * FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME = N'[{objectQualifier}Folders]' AND COLUMN_NAME = 'MappedPath')
	BEGIN
		ALTER TABLE {databaseOwner}[{objectQualifier}Folders] 
			ADD MappedPath nvarchar(300) NULL
	END
GO

UPDATE {databaseOwner}{objectQualifier}Folders
	SET MappedPath = FolderPath
GO

/* Update AddFolder Procedure to include BuildFolderPath call */
/**************************************************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}AddFolder]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}AddFolder]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddFolder]
	@PortalID 			int,
	@UniqueId	 		uniqueidentifier,
	@VersionGuid 		uniqueidentifier,
	@FolderPath 		nvarchar(300),
	@MappedPath 		nvarchar(300),
	@StorageLocation 	int,
	@IsProtected 		bit,
	@IsCached 			bit,
	@LastUpdated 		datetime,
	@CreatedByUserID  	int,
	@FolderMappingID	int = 0,
	@IsVersioned		bit = 0,
	@WorkflowID			int = NULL,
	@ParentID			int = NULL
AS
BEGIN
	IF @FolderMappingID = 0 BEGIN
		SELECT @FolderMappingID = FM.FolderMappingID
		FROM {databaseOwner}[{objectQualifier}FolderMappings] as FM
		WHERE ISNULL(FM.PortalID, -1) = ISNULL(@PortalID, -1)
		AND FolderProviderType = (
			CASE @StorageLocation
				WHEN 0 THEN 'StandardFolderProvider'
				WHEN 1 THEN 'SecureFolderProvider'
				WHEN 2 THEN 'DatabaseFolderProvider'
				ELSE 'StandardFolderProvider'
			END
		)
	END
	
	INSERT INTO {databaseOwner}[{objectQualifier}Folders] (
		PortalID, 
		UniqueId,
		VersionGuid,
		FolderPath,
		MappedPath, 
		StorageLocation, 
		IsProtected, 
		IsCached, 
		LastUpdated,
		CreatedByUserID,
		CreatedOnDate,
		LastModifiedByUserID,
		LastModifiedOnDate,
		FolderMappingID,
		IsVersioned,
		WorkflowID,
		ParentID
	)
	VALUES (
		@PortalID, 
		@UniqueId,
		@VersionGuid,
		@FolderPath,
		@MappedPath, 
		@StorageLocation, 
		@IsProtected, 
		@IsCached, 
		@LastUpdated,
		@CreatedByUserID,
		getdate(),
		@CreatedByUserID,
		getdate(),
		@FolderMappingID,
		@IsVersioned,
		@WorkflowID,
		@ParentID
	)
	
	DECLARE @FolderId INT
    SELECT @FolderId = SCOPE_IDENTITY()
  
    SELECT @FolderId
END
GO

/* Update UpdateFolder Procedure to call BuildFolderPath */
/*********************************************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdateFolder]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateFolder]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateFolder]
	@PortalID 				int,
	@VersionGuid 			uniqueidentifier,	
	@FolderID 				int,
	@FolderPath 			nvarchar(300),
	@MappedPath 			nvarchar(300),
	@StorageLocation 		int,
	@IsProtected 			bit,
	@IsCached 				bit,
	@LastUpdated 			datetime,
	@LastModifiedByUserID  	int,
	@FolderMappingID		int,
	@IsVersioned			bit = 0,
	@WorkflowID				int = NULL,
	@ParentID				int = NULL
AS
BEGIN
	UPDATE {databaseOwner}[{objectQualifier}Folders]
	SET
		FolderPath = @FolderPath,
		MappedPath = @MappedPath,
		VersionGuid = @VersionGuid,
		StorageLocation = @StorageLocation,
		IsProtected = @IsProtected,
		IsCached = @IsCached,
		LastUpdated = @LastUpdated,
		LastModifiedByUserID = @LastModifiedByUserID,
		LastModifiedOnDate = getdate(),
		FolderMappingID = @FolderMappingID,
		IsVersioned = @IsVersioned,
		WorkflowID = @WorkflowID,
		ParentID = @ParentID
	WHERE FolderID = @FolderID
END
 
GO

IF NOT EXISTS (SELECT PermissionID FROM {databaseOwner}{objectQualifier}Permission WHERE PermissionCode = 'SYSTEM_CONTENTWORKFLOWSTATE' )
BEGIN
INSERT INTO {databaseOwner}{objectQualifier}Permission (
	[PermissionCode],
	[ModuleDefID],
	[PermissionKey],
	[PermissionName]
) VALUES (
	'SYSTEM_CONTENTWORKFLOWSTATE',
	-1,
	'REVIEW',
	'Review'
)
END
GO

/*DNN - 26222 Journal Type > Create new for 'product'*/

--Add Journal Type for Product
IF NOT EXISTS(SELECT * FROM {databaseOwner}{objectQualifier}Journal_Types
            WHERE [JournalType] = 'product') 
   BEGIN
		DECLARE @JournalTypeId INT
		SELECT @JournalTypeId = COALESCE(max(JournalTypeId),0) FROM {databaseOwner}{objectQualifier}Journal_Types
		SET @JournalTypeId = @JournalTypeId + 1

         INSERT INTO  {databaseOwner}{objectQualifier}Journal_Types
           ([JournalTypeID]
		   ,[JournalType]
           ,[icon]
           ,[PortalId]
           ,[IsEnabled]
           ,[AppliesToProfile]
           ,[AppliesToGroup]
           ,[AppliesToStream]
           ,[Options]
           ,[SupportsNotify]
           ,[EnableComments])
         VALUES  
		   (@JournalTypeId--<JournalTypeId, int,>
		   ,'product'--<JournalType, nvarchar(25),>
           ,''--<icon, nvarchar(25),>
           ,-1--<PortalId, int,>
           ,1--<IsEnabled, bit,>
           ,1--<AppliesToProfile, bit,>
           ,1--<AppliesToGroup, bit,>
           ,1--<AppliesToStream, bit,>
           ,NULL--<Options, nvarchar(max),>
           ,1--<SupportsNotify, bit,>
           ,1)--<EnableComments, bit,>
    END 
GO

/* Rename 'Search Engine Scheduler' to 'Search: Site Crawler' "*/
UPDATE {databaseOwner}{objectQualifier}Schedule SET FriendlyName = 'Search: Site Crawler' WHERE TypeFullName = 'DotNetNuke.Services.Search.SearchEngineScheduler, DOTNETNUKE'
/* Rename 'SearchCrawler' to 'Search: Url Crawler' "*/
UPDATE {databaseOwner}{objectQualifier}Schedule SET FriendlyName = 'Search: Url Crawler' WHERE TypeFullName = 'DotNetNuke.Professional.SearchCrawler.SearchSpider.SearchSpider, DotNetNuke.Professional.SearchCrawler'

GO

--Add delay in scheduled job so it does not start right after installation and cause write.lock issues
DECLARE @ScheduleID int
DECLARE @ServerName nvarchar(400)
SELECT @ScheduleID = ScheduleID  FROM {databaseOwner}[{objectQualifier}Schedule] WHERE TypeFullName = 'DotNetNuke.Services.Search.SearchEngineScheduler, DOTNETNUKE'
SELECT TOP 1 @ServerName = ServerName FROM {databaseOwner}[{objectQualifier}WebServers]
IF (@ScheduleID > 0)
BEGIN
	INSERT INTO {databaseOwner}[{objectQualifier}ScheduleHistory]
			   ([ScheduleID]
			   ,[StartDate]
			   ,[EndDate]
			   ,[Succeeded]
			   ,[LogNotes]
			   ,[Server])
		 VALUES
			   (@ScheduleID -- <ScheduleID, int,>
			   ,DateADD(SECOND, 30, GetDate())--<StartDate, datetime,>
			   ,DateADD(MINUTE, 3, GetDate())--<EndDate, datetime,>
			   ,1 --<Succeeded, bit,>
			   ,N'Initial Setup Task'--<LogNotes, ntext,>
			   ,@ServerName)--<Server, nvarchar(150),>
END
GO


IF NOT EXISTS (SELECT NotificationTypeID FROM {databaseOwner}{objectQualifier}CoreMessaging_NotificationTypes WHERE Name = 'ContentWorkflowNotification' )
BEGIN

INSERT INTO {databaseOwner}{objectQualifier}CoreMessaging_NotificationTypes(
	[Name]
      ,[Description]
      ,[CreatedByUserID]
      ,[CreatedOnDate]
      ,[LastModifiedByUserID]
      ,[LastModifiedOnDate]
) VALUES (
	'ContentWorkflowNotification',
	'Content Workflow Notification',
	-1,
	GETDATE(),
	-1,
	GETDATE()
)
END

/* Set Search Admin Module Partial Rendering Enabled */
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET SupportsPartialRendering = 1 WHERE ControlSrc = 'DesktopModules/Admin/SearchAdmin/SearchAdmin.ascx'

GO

/* Import categories from DL  */
/******************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}ImportDocumentLibraryCategories]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}ImportDocumentLibraryCategories]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}ImportDocumentLibraryCategories]
	@VocabularyID 				int
AS
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}dlfp_Category]') AND type in (N'U'))
	BEGIN
		INSERT INTO {databaseOwner}{objectQualifier}Taxonomy_Terms([Name],[VocabularyID])
		SELECT DISTINCT CategoryName,VID=@VocabularyID
		FROM         {databaseOwner}{objectQualifier}dlfp_Category where CategoryName NOT IN (SELECT [name] from {databaseOwner}{objectQualifier}Taxonomy_Terms)
	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}ImportDocumentLibraryCategoryAssoc]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}ImportDocumentLibraryCategoryAssoc]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}ImportDocumentLibraryCategoryAssoc]
AS
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}dlfp_Category]') AND type in (N'U'))
	BEGIN
	SELECT     dlc.CategoryName, {databaseOwner}{objectQualifier}Files.FileId
	FROM         {databaseOwner}{objectQualifier}dlfp_Category AS dlc INNER JOIN
                      {databaseOwner}{objectQualifier}dlfp_DocumentCategoryAssoc AS dlca ON dlc.CategoryID = dlca.CategoryID INNER JOIN
                      {databaseOwner}{objectQualifier}dlfp_Document AS dld ON dlca.DocumentID = dld.ID INNER JOIN
                      {databaseOwner}{objectQualifier}Files ON dld.ID = {databaseOwner}{objectQualifier}Files.FileId
	END
GO

/* content localization enhancements */

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteTranslatedTabs]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteTranslatedTabs]
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteTranslatedTabs]
    @PortalID INT ,
    @CultureCode NVARCHAR(10)
AS 
    BEGIN

        SET NOCOUNT ON;
		
        BEGIN TRY

            BEGIN TRANSACTION DeleteTranslatedTabs
		
			-- first store ContentItem records to be deleted
            DECLARE @TempDeleteCI TABLE ( ContentItemId INT )
        
            INSERT  INTO @TempDeleteCI
                    SELECT  ContentItemId
                    FROM    {databaseOwner}{objectQualifier}Tabs
                    WHERE   ( PortalID = @PortalID )
                            AND ( CultureCode = @CultureCode )

		-- delete all tabs in the portal that have been localized to the requested cultureCode
		-- This will also delete related tabmodule records
            DELETE  FROM {databaseOwner}{objectQualifier}Tabs
            WHERE   ( PortalID = @PortalID )
                    AND ( CultureCode = @CultureCode )

		
		-- append ContentItems to be deleted from stale modules
            INSERT  INTO @TempDeleteCI
                    SELECT  ContentItemID
                    FROM    {databaseOwner}{objectQualifier}ContentItems CI
                    WHERE   EXISTS ( SELECT *
                                     FROM   {databaseOwner}{objectQualifier}Modules M
                                     WHERE  ( CI.ModuleID = M.ModuleID )
                                            AND NOT EXISTS ( SELECT
                                                              *
                                                             FROM
                                                              {databaseOwner}{objectQualifier}TabModules TM
                                                             WHERE
                                                              M.ModuleID = TM.ModuleID ) )

		-- delete stale modules (these are modules that do not have a corresponding TabModules record,
		-- in other words: modules that are not placed on any page anymore)
            DELETE  FROM {databaseOwner}{objectQualifier}Modules
            WHERE   NOT EXISTS ( SELECT *
                                 FROM   {databaseOwner}{objectQualifier}TabModules
                                 WHERE  {databaseOwner}{objectQualifier}Modules.ModuleID = {databaseOwner}{objectQualifier}TabModules.ModuleID )

		-- finally delete all corresponding content items
            DELETE  FROM {databaseOwner}{objectQualifier}ContentItems
            WHERE   ContentItemID IN ( SELECT   ContentItemID
                                       FROM     @TempDeleteCI )

            COMMIT TRANSACTION DeleteTranslatedTabs

        END TRY
  
        BEGIN CATCH
            IF @@TRANCOUNT > 0 
                ROLLBACK TRANSACTION DeleteTranslatedTabs


            DECLARE @ErrorMessage NVARCHAR(4000);
            DECLARE @ErrorSeverity INT;

            SELECT  @ErrorMessage = ERROR_MESSAGE() ,
                    @ErrorSeverity = ERROR_SEVERITY();

            RAISERROR (@ErrorMessage, @ErrorSeverity, 1 );			
			
        END CATCH	      

    END

GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}EnsureNeutralLanguage]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}EnsureNeutralLanguage]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}EnsureNeutralLanguage]
    @PortalId INT ,
    @CultureCode NVARCHAR(10)
AS 
    BEGIN
        SET NOCOUNT ON;

        UPDATE  {databaseOwner}{objectQualifier}Tabs
        SET     CultureCode = NULL
        WHERE   PortalID = @PortalId
                AND CultureCode = @CultureCode
    END

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}ConvertTabToNeutralLanguage]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}ConvertTabToNeutralLanguage]
GO

Create PROCEDURE {databaseOwner}[{objectQualifier}ConvertTabToNeutralLanguage]
    @PortalId INT ,
    @TabId INT ,
    @CultureCode NVARCHAR(10)
AS 
    BEGIN
        SET NOCOUNT ON;

        UPDATE  {databaseOwner}{objectQualifier}Tabs
        SET     CultureCode = NULL
        WHERE   PortalID = @PortalId
                AND TabID = @TabID
                AND CultureCode = @CultureCode
    END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}RemovePortalLocalization]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}RemovePortalLocalization]
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}RemovePortalLocalization]
    @PortalId INT ,
    @CultureCode NVARCHAR(10)
AS 
    BEGIN
        SET NOCOUNT ON;

        DELETE  FROM {databaseOwner}{objectQualifier}PortalLocalization
        WHERE   PortalID = @PortalId
                AND CultureCode = @CultureCode

    END
GO

-- make sure that all modules have the same culture code as the page they are on
UPDATE {databaseOwner}{objectQualifier}TabModules
SET CultureCode = {databaseOwner}{objectQualifier}Tabs.CultureCode
FROM    {databaseOwner}{objectQualifier}TabModules
        INNER JOIN {databaseOwner}{objectQualifier}Tabs ON {databaseOwner}{objectQualifier}TabModules.TabID = {databaseOwner}{objectQualifier}Tabs.TabID
GO

IF  EXISTS (SELECT * FROM sys.foreign_keys WHERE object_id = OBJECT_ID(N'{databaseOwner}[FK_{objectQualifier}LanguagePacks_{objectQualifier}Languages]') AND parent_object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}LanguagePacks]'))
ALTER TABLE {databaseOwner}[{objectQualifier}LanguagePacks] DROP CONSTRAINT [FK_{objectQualifier}LanguagePacks_{objectQualifier}Languages]
GO


/* end content localization enhancements */

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetUsersByRolename]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUsersByRolename]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUsersByRolename]
	@PortalID	INT,
	@Rolename	NVARCHAR(50)
AS
	DECLARE @UserPortalId INT
	DECLARE @PortalGroupId INT
	SELECT @PortalGroupId = PortalGroupId FROM {databaseOwner}[{objectQualifier}Portals] WHERE PortalID = @PortalID
	IF EXISTS(SELECT PortalGroupID FROM {databaseOwner}[{objectQualifier}PortalGroups] WHERE PortalGroupID = @PortalGroupId)
	BEGIN
		SELECT @UserPortalId = MasterPortalID FROM {databaseOwner}[{objectQualifier}PortalGroups] WHERE PortalGroupID = @PortalGroupId
	END
	ELSE
	BEGIN
		SELECT @UserPortalId = @PortalID
	END
	SELECT     
		U.*, 
		UP.PortalId, 
		UP.Authorised, 
		UP.IsDeleted,
		UP.RefreshRoles,
		UP.VanityUrl
	FROM {databaseOwner}{objectQualifier}UserPortals AS UP 
			RIGHT OUTER JOIN {databaseOwner}{objectQualifier}UserRoles  UR 
			INNER JOIN {databaseOwner}{objectQualifier}Roles R ON UR.RoleID = R.RoleID 
			RIGHT OUTER JOIN {databaseOwner}{objectQualifier}Users AS U ON UR.UserID = U.UserID 
		ON UP.UserId = U.UserID	
	WHERE ( UP.PortalId = @UserPortalId OR @UserPortalId IS Null )
		AND (UP.IsDeleted = 0 OR UP.IsDeleted Is NULL)
		AND (R.RoleName = @Rolename)
		AND (R.PortalId = @PortalID OR @PortalID IS Null )
	ORDER BY U.FirstName + ' ' + U.LastName

GO

/* Update GetAllFiles Procedure to include audit and metadata columns in the results */
/*************************************************************************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetAllFiles]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetAllFiles]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetAllFiles]
AS
BEGIN
	SELECT   
	  FileId,  
	  FO.PortalId,  
	  [FileName],  
	  Extension,  
	  Size,  
	  Width,  
	  Height,  
	  ContentType,  
	  F.FolderID,  
	  FolderPath AS 'Folder',  
	  StorageLocation,  
	  IsCached,
	  F.UniqueId,
	  F.VersionGuid,
	  F.SHA1Hash,
	  FolderMappingID,  
	  LastModificationTime,  
	  Title,  
	  EnablePublishPeriod,  
	  StartDate,  
	  EndDate,  
	  F.CreatedByUserID,  
	  F.CreatedOnDate,  
	  F.LastModifiedByUserID,  
	  F.LastModifiedOnDate,  
	  PublishedVersion,  
	  ContentItemID
	FROM {databaseOwner}[{objectQualifier}vw_Files] F  
	INNER JOIN {databaseOwner}[{objectQualifier}Folders] FO ON F.FolderID = FO.FolderID  
END
GO

/***** Fix bug 22403: add unique index on server name column. *****/
DELETE FROM {databaseOwner}[{objectQualifier}Webservers]
	WHERE ServerID NOT IN (SELECT MIN(serverid) FROM {databaseOwner}[{objectQualifier}WebServers] GROUP BY ServerName)
GO

IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name='IX_{objectQualifier}WebServers_ServerName')
	CREATE UNIQUE NONCLUSTERED INDEX IX_{objectQualifier}WebServers_ServerName ON {databaseOwner}[{objectQualifier}WebServers](ServerName, IISAppName)
GO


/***** DNN-15093 - add support for partial rendering for Template export *****/
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET SupportsPartialRendering = 1 WHERE ControlKey='Template' AND ControlSrc='DesktopModules/Admin/Portals/template.ascx'
GO

/* Add Search Synonyms Group Table */
/**************************************/

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SynonymsGroups]') AND type in (N'U'))
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}SynonymsGroups]
		(
			[SynonymsGroupID] [int] IDENTITY(1,1) NOT NULL,			
			[SynonymsTags] [nvarchar](MAX) NOT NULL,
			[PortalID] [int] NOT NULL,
			[CultureCode] [nvarchar](50) NOT NULL,
			[CreatedByUserID] [int] NOT NULL,
			[CreatedOnDate] [datetime] NOT NULL,
			[LastModifiedByUserID] [int] NOT NULL,
			[LastModifiedOnDate] [datetime] NOT NULL
			CONSTRAINT [PK_{objectQualifier}SynonymsGroups] PRIMARY KEY CLUSTERED ([SynonymsGroupID] ASC)		
		)
	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetAllSynonymsGroups]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetAllSynonymsGroups]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetAllSynonymsGroups]
	@PortalID int,
	@CultureCode nvarchar(50)
AS
BEGIN
	SELECT   
	  [SynonymsGroupID],  
	  [SynonymsTags],  
	  [PortalID],
	  [CreatedByUserID],  
	  [CreatedOnDate],  
	  [LastModifiedByUserID],  
	  [LastModifiedOnDate]
	FROM {databaseOwner}{objectQualifier}SynonymsGroups 
	WHERE [PortalID] = @PortalID
	AND [CultureCode] = @CultureCode
	ORDER BY LastModifiedOnDate DESC
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}AddSynonymsGroup]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}AddSynonymsGroup]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddSynonymsGroup]
	@SynonymsTags 			nvarchar(MAX),
	@CreatedByUserID 		int,
	@PortalID				int,
	@CultureCode            nvarchar(50)
AS
BEGIN	
	INSERT INTO {databaseOwner}[{objectQualifier}SynonymsGroups](
		[SynonymsTags],  
		[CreatedByUserID],  
		[CreatedOnDate],  
		[LastModifiedByUserID],  
		[LastModifiedOnDate],
		[PortalID],
		[CultureCode]
	) VALUES (
		@SynonymsTags,
		@CreatedByUserID,
	    GETUTCDATE(),
		@CreatedByUserID,
		GETUTCDATE(),
		@PortalID,
		@CultureCode
	)	

	SELECT SCOPE_IDENTITY()
END
 
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdateSynonymsGroup]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateSynonymsGroup]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateSynonymsGroup]
	@SynonymsGroupID		int,
	@SynonymsTags 			nvarchar(MAX),
	@LastModifiedByUserID 	int
AS
BEGIN	
	UPDATE {databaseOwner}{objectQualifier}SynonymsGroups
			SET				
				SynonymsTags = @SynonymsTags,
				LastModifiedByUserID = @LastModifiedByUserID,
				LastModifiedOnDate = GETUTCDATE()
			WHERE SynonymsGroupID = @SynonymsGroupID
END
 
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteSynonymsGroup]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteSynonymsGroup]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteSynonymsGroup]
	@SynonymsGroupID int
AS
BEGIN	
	DELETE FROM {databaseOwner}{objectQualifier}SynonymsGroups WHERE SynonymsGroupID = @SynonymsGroupID
END
 
GO


/* Add Search Stop Words Table */
/**************************************/

IF NOT EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SearchStopWords]') AND type in (N'U'))
	BEGIN
		CREATE TABLE {databaseOwner}[{objectQualifier}SearchStopWords]
		(
			[StopWordsID] [int] IDENTITY(1,1) NOT NULL,			
			[StopWords] [nvarchar](MAX) NOT NULL,
			[CreatedByUserID] [int] NOT NULL,
			[CreatedOnDate] [datetime] NOT NULL,
			[LastModifiedByUserID] [int] NOT NULL,
			[LastModifiedOnDate] [datetime] NOT NULL,
			[PortalID] [int] NOT NULL,
			[CultureCode] [nvarchar](50) NOT NULL
			CONSTRAINT [PK_{objectQualifier}SearchStopWords] PRIMARY KEY CLUSTERED ([StopWordsID] ASC)		
		)
	END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetSearchStopWords]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetSearchStopWords]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetSearchStopWords]
	@PortalID int,
	@CultureCode nvarchar(50)
AS
BEGIN
	SELECT   
	  [StopWordsID],  
	  [StopWords],  
	  [CreatedByUserID],  
	  [CreatedOnDate],  
	  [LastModifiedByUserID],  
	  [LastModifiedOnDate],
	  [PortalID],
	  [CultureCode]
	FROM {databaseOwner}{objectQualifier}SearchStopWords 
	WHERE [PortalID] = @PortalID AND [CultureCode] = @CultureCode
END
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}InsertSearchStopWords]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}InsertSearchStopWords]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}InsertSearchStopWords]
	@StopWords 			nvarchar(MAX),
	@CreatedByUserID 		int,
	@PortalID				int,
	@CultureCode		nvarchar(50)
AS
BEGIN	
	INSERT INTO {databaseOwner}[{objectQualifier}SearchStopWords](
		[StopWords],  
		[CreatedByUserID],  
		[CreatedOnDate],  
		[LastModifiedByUserID],  
		[LastModifiedOnDate],
		[PortalID],
		[CultureCode]
	) VALUES (
		@StopWords,
		@CreatedByUserID,
	    GETUTCDATE(),
		@CreatedByUserID,
		GETUTCDATE(),
		@PortalID,
		@CultureCode
	)	

	SELECT SCOPE_IDENTITY()
END
 
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdateSearchStopWords]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateSearchStopWords]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateSearchStopWords]
	@StopWordsID		int,
	@StopWords 			nvarchar(MAX),
	@LastModifiedByUserID 	int
AS
BEGIN	
	UPDATE {databaseOwner}{objectQualifier}SearchStopWords
			SET				
				StopWords = @StopWords,
				LastModifiedByUserID = @LastModifiedByUserID,
				LastModifiedOnDate = GETUTCDATE()
			WHERE StopWordsID = @StopWordsID
END
 
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteSearchStopWords]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteSearchStopWords]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteSearchStopWords]
	@StopWordsID int
AS
BEGIN	
	DELETE FROM {databaseOwner}{objectQualifier}SearchStopWords WHERE StopWordsID = @StopWordsID
END
 
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetPortalSetting]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetPortalSetting]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPortalSetting]
    @PortalID INT ,
    @SettingName NVARCHAR(50) ,
    @CultureCode NVARCHAR(50)
AS 
    SELECT  TOP 1 PS.SettingName ,
            CASE WHEN LEFT(LOWER(PS.SettingValue), 6) = 'fileid'
                 THEN ( SELECT  Folder + FileName
                        FROM    {databaseOwner}{objectQualifier}vw_Files
                        WHERE   'fileid='
                                + CONVERT(VARCHAR, {databaseOwner}{objectQualifier}vw_Files.FileID) = PS.SettingValue
                      )
                 ELSE PS.SettingValue
            END AS SettingValue ,
            PS.CreatedByUserID ,
            PS.CreatedOnDate ,
            PS.LastModifiedByUserID ,
            PS.LastModifiedOnDate ,
            PS.CultureCode
    FROM    {databaseOwner}{objectQualifier}PortalSettings PS
    WHERE   PS.PortalID = @PortalID
            AND PS.SettingName = @SettingName
GO

/* update GetRolesBasicSearch to use refactored schema */
/*******************************************************/
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetRolesBasicSearch]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetRolesBasicSearch]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetRolesBasicSearch]
(
	@PortalID int,					-- portal
	@PageSize int,					-- page size
	@FilterBy nvarchar(100)			-- filter field
)
AS
BEGIN
	SELECT TOP (@PageSize) 
	RoleID,PortalID,RoleName,Description,ServiceFee,BillingFrequency,TrialPeriod,TrialFrequency,BillingPeriod,TrialFee,IsPublic,AutoAssignment,RoleGroupID,RSVPCode,CASE WHEN LEFT(LOWER(IconFile), 7) = 'fileid=' THEN
			(SELECT Folder + FileName
				FROM {databaseOwner}[{objectQualifier}vw_Files]
				WHERE fileid = CAST((RIGHT(LOWER(IconFile), Len(IconFile) - 7)) AS int)
			) ELSE ''
			END AS IconFile,
			CreatedByUserID,CreatedOnDate,LastModifiedByUserID,LastModifiedOnDate, Status, SecurityMode
	FROM {databaseOwner}[{objectQualifier}Roles]
	WHERE RoleName LIKE '%' + @FilterBy + '%'
	AND (PortalID = @PortalID OR (@PortalID is null))
	ORDER BY RoleName
END

GO


/* Fix Bug DNN26542  Remove Folder field from Vendors module */
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}GetVendor') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}{objectQualifier}GetVendor
GO

CREATE procedure {databaseOwner}{objectQualifier}GetVendor

@VendorId int,
@PortalId int

as

select {databaseOwner}{objectQualifier}Vendors.VendorName, 
       {databaseOwner}{objectQualifier}Vendors.Unit, 
       {databaseOwner}{objectQualifier}Vendors.Street, 
       {databaseOwner}{objectQualifier}Vendors.City, 
       {databaseOwner}{objectQualifier}Vendors.Region, 
       {databaseOwner}{objectQualifier}Vendors.Country, 
       {databaseOwner}{objectQualifier}Vendors.PostalCode, 
       {databaseOwner}{objectQualifier}Vendors.Telephone,
       {databaseOwner}{objectQualifier}Vendors.Fax,
       {databaseOwner}{objectQualifier}Vendors.Cell,
       {databaseOwner}{objectQualifier}Vendors.Email,
       {databaseOwner}{objectQualifier}Vendors.Website,
       {databaseOwner}{objectQualifier}Vendors.FirstName,
       {databaseOwner}{objectQualifier}Vendors.LastName,
       {databaseOwner}{objectQualifier}Vendors.ClickThroughs,
       {databaseOwner}{objectQualifier}Vendors.Views,
       {databaseOwner}{objectQualifier}Users.FirstName + ' ' + {databaseOwner}{objectQualifier}Users.LastName As CreatedByUser,
       {objectQualifier}Vendors.CreatedDate,
       case when {databaseOwner}{objectQualifier}Files.FileName is null then {databaseOwner}{objectQualifier}Vendors.LogoFile else {objectQualifier}Folders.FolderPath + {objectQualifier}Files.FileName end as LogoFile,
       {databaseOwner}{objectQualifier}Vendors.KeyWords,
       {databaseOwner}{objectQualifier}Vendors.Authorized,
       {databaseOwner}{objectQualifier}Vendors.PortalId
from {databaseOwner}{objectQualifier}Folders 
INNER JOIN {databaseOwner}{objectQualifier}Files ON {databaseOwner}{objectQualifier}Folders.FolderID = {databaseOwner}{objectQualifier}Files.FolderID RIGHT OUTER JOIN
{databaseOwner}{objectQualifier}Vendors LEFT OUTER JOIN
{databaseOwner}{objectQualifier}Users ON {databaseOwner}{objectQualifier}Vendors.CreatedByUser = {databaseOwner}{objectQualifier}Users.UserID ON 'fileid=' + CONVERT(varchar, {databaseOwner}{objectQualifier}Files.FileId) = {databaseOwner}{objectQualifier}Vendors.LogoFile
where  VendorId = @VendorId
and    (({objectQualifier}Vendors.PortalId = @PortalId) or ({objectQualifier}Vendors.PortalId is null and @PortalId is null))

GO


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetBanner]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetBanner]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetBanner]
@BannerId int
as
select B.BannerId,
	   B.VendorId,
	   case when F.FileName is null then B.ImageFile else {databaseOwner}{objectQualifier}Folders.FolderPath + F.FileName end As ImageFile,
	   B.BannerName,
	   B.Impressions,
	   B.CPM,
	   B.Views,
	   B.ClickThroughs,
	   B.StartDate,
	   B.EndDate,
	   U.FirstName + ' ' + U.LastName AS CreatedByUser,
	   B.CreatedDate,
	   B.BannerTypeId,
	   B.Description,
	   B.GroupName,
	   B.Criteria,
	   B.URL,        
	   B.Width,
	   B.Height,
	   B.ImageFile AS ImageFileRaw
from   {databaseOwner}{objectQualifier}Folders INNER JOIN
       {databaseOwner}{objectQualifier}Files AS F ON {databaseOwner}{objectQualifier}Folders.FolderID = F.FolderID RIGHT OUTER JOIN
       {databaseOwner}{objectQualifier}Banners AS B INNER JOIN
       {databaseOwner}{objectQualifier}Vendors AS V ON B.VendorId = V.VendorId LEFT OUTER JOIN
       {databaseOwner}{objectQualifier}Users AS U ON B.CreatedByUser = U.UserID ON 'FileId=' + CONVERT(varchar, F.FileId) = B.ImageFile
where  B.BannerId = @BannerId

GO


/* DNN   26657  System modules should be marked as such */

UPDATE {databaseOwner}[{objectQualifier}Packages] SET [IsSystemPackage] = 1 WHERE [FriendlyName] = 'Authentication'
UPDATE {databaseOwner}[{objectQualifier}Packages] SET [IsSystemPackage] = 1 WHERE [FriendlyName] = 'Lists'
UPDATE {databaseOwner}[{objectQualifier}Packages] SET [IsSystemPackage] = 1 WHERE [FriendlyName] = 'Log Viewer'
UPDATE {databaseOwner}[{objectQualifier}Packages] SET [IsSystemPackage] = 1 WHERE [FriendlyName] = 'Recycle Bin'
UPDATE {databaseOwner}[{objectQualifier}Packages] SET [IsSystemPackage] = 1 WHERE [FriendlyName] = 'Search Results'
UPDATE {databaseOwner}[{objectQualifier}Packages] SET [IsSystemPackage] = 1 WHERE [FriendlyName] = 'Users and Roles'
UPDATE {databaseOwner}[{objectQualifier}Packages] SET [IsSystemPackage] = 1 WHERE [FriendlyName] = 'Pages'
UPDATE {databaseOwner}[{objectQualifier}Packages] SET [IsSystemPackage] = 1 WHERE [FriendlyName] = 'Vendors'
UPDATE {databaseOwner}[{objectQualifier}Packages] SET [IsSystemPackage] = 1 WHERE [FriendlyName] = 'Languages'
UPDATE {databaseOwner}[{objectQualifier}Packages] SET [IsSystemPackage] = 1 WHERE [FriendlyName] = 'Skins'
UPDATE {databaseOwner}[{objectQualifier}Packages] SET [IsSystemPackage] = 1 WHERE [FriendlyName] = 'Console'
UPDATE {databaseOwner}[{objectQualifier}Packages] SET [IsSystemPackage] = 1 WHERE [FriendlyName] = 'ViewProfile'
UPDATE {databaseOwner}[{objectQualifier}Packages] SET [IsSystemPackage] = 1 WHERE [FriendlyName] = 'Sitemap'
UPDATE {databaseOwner}[{objectQualifier}Packages] SET [IsSystemPackage] = 1 WHERE [FriendlyName] = 'ContentList'
UPDATE {databaseOwner}[{objectQualifier}Packages] SET [IsSystemPackage] = 1 WHERE [FriendlyName] = 'Configuration Manager'
UPDATE {databaseOwner}[{objectQualifier}Packages] SET [IsSystemPackage] = 1 WHERE [FriendlyName] = 'Configuration Manager'
UPDATE {databaseOwner}[{objectQualifier}Packages] SET [IsSystemPackage] = 1 WHERE [FriendlyName] = 'ProfessionalPreview'
UPDATE {databaseOwner}[{objectQualifier}Packages] SET [IsSystemPackage] = 1 WHERE [FriendlyName] = 'Registration'
UPDATE {databaseOwner}[{objectQualifier}Packages] SET [IsSystemPackage] = 1 WHERE [FriendlyName] = 'CONTROLPANEL SkinObject'

/* Add GetLegacyFolderCount */
/****************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetLegacyFolderCount]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetLegacyFolderCount]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetLegacyFolderCount]
AS
	SELECT COUNT(*)
	FROM {databaseOwner}{objectQualifier}Folders
		WHERE ParentID IS NULL AND FolderPath <> ''
GO

/* Add UpdateLegacyFolders */
/***************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdateLegacyFolders]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateLegacyFolders]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateLegacyFolders]
AS
	UPDATE TOP (500) {databaseOwner}{objectQualifier}Folders
		SET ParentID = (COALESCE(	
				(SELECT TOP 1
					F2.FolderID 
					FROM {databaseOwner}{objectQualifier}Folders AS F2
					WHERE SUBSTRING (F1.FolderPath, 1, LEN(F1.FolderPath) - 
						(CASE 
							WHEN CHARINDEX ('/', REVERSE(SUBSTRING(F1.FolderPath, 0, LEN(F1.FolderPath)))) != 0 
							THEN CHARINDEX ('/', REVERSE(SUBSTRING(F1.FolderPath, 0, LEN(F1.FolderPath)))) 
							ELSE LEN(F1.FolderPath) END
						 )) = F2.FolderPath
						AND (F2.PortalID = F1.PortalID OR (F1.PortalID IS NULL AND F2.PortalID IS NULL))
						AND LEN(F1.FolderPath) > LEN(F2.FolderPath)
					ORDER BY LEN(F2.FolderPath) DESC
					), -1))
	FROM {databaseOwner}{objectQualifier}Folders AS F1
	WHERE F1.ParentID IS NULL AND FolderPath <> ''
GO

/* Add UpdateFileLastModificationTime */
/**************************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UpdateFileLastModificationTime]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateFileLastModificationTime]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateFileLastModificationTime]
@FileId int,
@LastModificationTime date
AS
	UPDATE {databaseOwner}{objectQualifier}Files 
	SET [LastModificationTime] = @LastModificationTime
	WHERE [FileId] = @FileId
GO

/* Update version number in DesktopModules */
/*******************************************/
DECLARE @version nvarchar(8)
SET @version = '07.01.00'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='SiteWizard'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Lists'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Authentication'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='FileManager'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='SiteLog'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Newsletters'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Portals'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='SQL'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='HostSettings'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='RecycleBin'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='LogViewer'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Scheduler'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='SearchAdmin'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Security'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Tabs'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Vendors'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Banners'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='ProfessionalPreview'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='SearchInput'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='SearchResults'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='FeedExplorer'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Extensions'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Solutions'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='WhatsNew'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Dashboard'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Languages'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Skins'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='SkinDesigner'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Console'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='GoogleAnalytics'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Marketplace'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='ViewProfile'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Sitemap'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='ContentList'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='ConfigurationManager'

UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Authentication'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Banners'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.FeedExplorer'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.FileManager'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.HostSettings'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Lists'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LogViewer'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Newsletters'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Portals'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.RecycleBin'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Scheduler'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SearchAdmin'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SearchInput'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SearchResults'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Security'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SiteLog'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SiteWizard'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Tabs'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SQL'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Vendors'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.ACTIONBUTTONSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.ACTIONSSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.BANNERSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.BREADCRUMBSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.COPYRIGHTSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.CURRENTDATESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.DOTNETNUKESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.DROPDOWNACTIONSSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.HELPSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.HOSTNAMESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.ICONSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LANGUAGESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LINKACTIONSSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LINKSSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LOGINSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LOGOSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.MENUSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.NAVSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.PRINTMODULESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.PRIVACYSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SEARCHSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SIGNINSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SOLPARTACTIONSSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SOLPARTMENUSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.TERMSSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.TITLESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.TREEVIEWSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.USERSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.VISIBILITYSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Extensions'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Solutions'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.TEXTSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.WhatsNew'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.STYLESSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LEFTMENUSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.JQUERYSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.CONTROLPANEL.SkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Dashboard'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Languages'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Skins'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Skin Designer'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Console'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Google Analytics'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DefaultAuthentication'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Marketplace'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.ViewProfile'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Sitemap'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.TagsSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.ContentList'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Configuration Manager'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.ProfessionalPreview'

UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Admin Console/Security Roles/About the Security Roles Module.html' WHERE ControlSrc='DesktopModules/Admin/Security/Roles.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Admin Console/Security Roles/Module Editors/Editing a Security Role.html' WHERE ControlSrc='DesktopModules/Admin/Security/EditRoles.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Building Your Site/Adding and Managing Pages/About Pages.html' WHERE ControlSrc='DesktopModules/Admin/Tabs/Tabs.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Building Your Site/Adding and Managing Pages/About Pages.html' WHERE ControlSrc='DesktopModules/Admin/Tabs/ManageTabs.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Admin Console/Site Settings/About the Site Settings Page.html' WHERE ControlSrc='DesktopModules/Admin/Portals/SiteSettings.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Admin Console/User Accounts/About the User Accounts Module.html' WHERE ControlSrc='DesktopModules/Admin/Security/Users.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Admin Console/User Accounts/Module Editors/Adding a User Account.html' WHERE ControlSrc='DesktopModules/Admin/Security/ManageUsers.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Admin Console/Vendors/About the Admin Vendors Module.html' WHERE ControlSrc='DesktopModules/Admin/Vendors/Vendors.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Admin Console/Vendors/Module Editors/Vendor Accounts/Adding a New Vendor.html' WHERE ControlSrc='DesktopModules/Admin/Vendors/EditVendors.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Building Your Site/Installed Modules/Banners/About the Banners Module.html' WHERE ControlSrc='DesktopModules/Admin/Banners/DisplayBanners.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Building Your Site/Installed Modules/Banners/Module Editors/Editing Banner Options.html' WHERE ControlSrc='DesktopModules/Admin/Banners/BannerOptions.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Admin Console/File Manager/About the Admin File Manager Module.html' WHERE ControlSrc='DesktopModules/Admin/FileManager/FileManager.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Admin Console/File Manager/Folder Editors/Uploading Files.html' WHERE ControlSrc='DesktopModules/Admin/FileManager/WebUpload.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Admin Console/Site Log/About the Site Log Module.html' WHERE ControlSrc='DesktopModules/Admin/SiteLog/SiteLog.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Admin Console/Newsletters/About the Newsletters Module.html' WHERE ControlSrc='DesktopModules/Admin/Newsletters/Newsletter.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Admin Console/Vendors/Module Editors/Vendor Banners/Adding an Image Banner to a Vendor.html' WHERE ControlSrc='DesktopModules/Admin/Vendors/EditBanner.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Admin Console/Security Roles/About the Security Roles Module.html' WHERE ControlSrc='DesktopModules/Admin/Security/SecurityRoles.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Host Console/Site Management/About the Site Management Page.html' WHERE ControlSrc='DesktopModules/Admin/Portals/Portals.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Host Console/SQL/About the SQL Page.html' WHERE ControlSrc='DesktopModules/Admin/SQL/SQL.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Host Console/Host Settings/About the Host Settings Page.html' WHERE ControlSrc='DesktopModules/Admin/HostSettings/HostSettings.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Admin Console/Recycle Bin/About the Recycle Bin Module.html' WHERE ControlSrc='DesktopModules/Admin/RecycleBin/RecycleBin.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Admin Console/Vendors/Module Editors/Affiliate Accounts/Adding an Affiliate Referral Account .html' WHERE ControlSrc='DesktopModules/Admin/Vendors/EditAffiliate.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Admin Console/Event Viewer/About the Log Viewer Module.html' WHERE ControlSrc='DesktopModules/Admin/LogViewer/LogViewer.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Admin Console/Event Viewer/SuperUsers/Editing Log Settings.html' WHERE ControlSrc='DesktopModules/Admin/LogViewer/EditLogTypes.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Host Console/Scheduler/About the Schedule Module.html' WHERE ControlSrc='DesktopModules/Admin/Scheduler/ViewSchedule.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Host Console/Scheduler/Editing a Task.html' WHERE ControlSrc='DesktopModules/Admin/Scheduler/EditSchedule.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Host Console/Scheduler/Viewing Schedule History For A Task.html' WHERE ControlSrc='DesktopModules/Admin/Scheduler/ViewScheduleHistory.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Host Console/Scheduler/Viewing Schedule Status.html' WHERE ControlSrc='DesktopModules/Admin/Scheduler/ViewScheduleStatus.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Host Console/Search Admin/About the Search Admin Module.html' WHERE ControlSrc='DesktopModules/Admin/SearchAdmin/SearchAdmin.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Host Console/Search Admin/About the Search Admin Module.html' WHERE ControlSrc='DesktopModules/Admin/SearchResults/SearchResults.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Admin Console/Site Wizard/About the Site Wizard Module.html' WHERE ControlSrc='DesktopModules/Admin/SiteWizard/SiteWizard.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Admin Console/Lists/About the Admin Lists Page.html' WHERE ControlSrc='DesktopModules/Admin/Lists/ListEditor.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Admin Console/Security Roles/Module Editors/Adding a Role Group.html' WHERE ControlSrc='DesktopModules/Admin/Security/EditGroups.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Managing Your User Account/Managing Your Profile/Managing your User Profile.html' WHERE ControlSrc='Admin/Users/ViewProfile.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Admin Console/Extensions/About the Admin Extensions Module.html' WHERE ControlSrc='DesktopModules/Admin/Extensions/Extensions.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Host Console/WhatsNew/About the Whats New Module.html' WHERE ControlSrc='DesktopModules/Admin/WhatsNew/WhatsNew.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Host Console/Dashboard/About the Dashboard Module.html' WHERE ControlSrc='DesktopModules/Admin/Dashboard/Dashboard.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Admin Console/Languages/About the Languages Management Module.html' WHERE ControlSrc='DesktopModules/Admin/Languages/languageEnabler.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Building Your Site/Installed Modules/Console/About the Console Module.htm' WHERE ControlSrc='DesktopModules/Admin/Console/ViewConsole.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Admin Console/Search Engine Site Map/About the Search Engine SiteMap Module.html' WHERE ControlSrc='DesktopModules/Admin/Sitemap/SitemapSettings.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Building Your Site/Installed Modules/Member Directory/About the Member Directory Module.html' WHERE ControlSrc='DesktopModules/MemberDirectory/View.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Building Your Site/Installed Modules/Social Groups/About the Social Groups Module.html' WHERE ControlSrc='DesktopModules/SocialGroups/Loader.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Building Your Site/Installed Modules/Social Groups/Adding a Social Group.html' WHERE ControlSrc='DesktopModules/SocialGroups/Create.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Admin Console/Skins/About the Skins Module.html' WHERE ControlSrc='DesktopModules/Admin/Skins/editskins.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Host Console/Configuration Manager/About the Configuration Manager Page.html' WHERE ControlSrc='DesktopModules/Admin/XmlMerge/XmlMerge.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Host Console/Device Detection Management/About the Device Detection Management Module.html' WHERE ControlSrc='DesktopModules/Admin/FiftyOneClientCapabilityProvider/Administration.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Host Console/HTML Editor Manager/About the HTML Editor Manager.html' WHERE ControlSrc='DesktopModules/Admin/RadEditorProvider/ProviderConfig.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Managing Your User Account/Managing Your Profile/Managing your User Profile.html' WHERE ControlSrc='DesktopModules/Admin/ViewProfile/ViewProfile.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Admin Console/Languages/SuperUsers/Adding a New Language.html' WHERE ControlSrc='DesktopModules/Admin/Languages/EditLanguage.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Host Console/Extensions/Installing an Extension.html' WHERE ControlSrc='DesktopModules/Admin/Extensions/Install.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Host Console/Extensions/Creating a New Extension.html' WHERE ControlSrc='DesktopModules/Admin/Extensions/ExtensionWizard.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Admin Console/Languages/SuperUsers/Creating a Full Language Pack.html' WHERE ControlSrc='DesktopModules/Admin/Languages/LanguagePackWriter.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Admin Console/Languages/SuperUsers/Verifying Resource Files.html' WHERE ControlSrc='DesktopModules/Admin/Languages/resourceverifier.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Host Console/Extensions/Creating a New Extension.html' WHERE ControlSrc='DesktopModules/Admin/Extensions/ExtensionWizard.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Host Console/Extensions/Creating a New Module.html' WHERE ControlSrc='DesktopModules/Admin/Extensions/Editors/EditModuleDefinition.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/#Using the Control Panel/Admin Console/Advanced Settings/About Advanced Settings.html' WHERE ControlSrc='DesktopModules/Admin/AdvancedSettings/AdvancedSettings.ascx'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://help.dotnetnuke.com/070100/default.htm#Documentation/Using the Control Panel/Admin Console/Languages/SuperUsers/Adding a New Language.html' WHERE ControlSrc='DesktopModules/Admin/Languages/EditLanguage.ascx'

/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/