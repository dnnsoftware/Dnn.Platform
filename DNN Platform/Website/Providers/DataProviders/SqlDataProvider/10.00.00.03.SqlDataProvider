/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/

/* =================================================================
    Create Missing Content Workflows:

    - This script ensures that the required content workflows and 
    their states exist in the database.
    - If the workflows or states already exist, they will not be modified,
      except for their keys.
    - If they do not exist, they will be created with default values.
   =================================================================*/

SET NOCOUNT ON;
SET XACT_ABORT ON; -- automatic rollback if anything fails

BEGIN TRY
    BEGIN TRANSACTION;

    /*------------------------------------------------------
        1.  Ensure known workflows has expected key
    ------------------------------------------------------*/

    -- ensure that each workflow with name 'Direct Publish' has workflow key 'DirectPublish'
    UPDATE {databaseOwner}{objectQualifier}ContentWorkflows
    SET WorkflowKey = 'DirectPublish'
    WHERE WorkflowName = N'Direct Publish' AND WorkflowKey <> 'DirectPublish';

    -- ensure that each workflow with name 'Save Draft' has workflow key 'SaveDraft'
    UPDATE {databaseOwner}{objectQualifier}ContentWorkflows
    SET WorkflowKey = 'SaveDraft'
    WHERE WorkflowName = N'Save Draft' AND WorkflowKey <> 'SaveDraft';
    -- ensure that each workflow with name 'Content Approval' has workflow key 'ContentApproval'
    UPDATE {databaseOwner}{objectQualifier}ContentWorkflows
    SET WorkflowKey = 'ContentApproval'
    WHERE WorkflowName = N'Content Approval' AND WorkflowKey <> 'ContentApproval';

    /*------------------------------------------------------
        2.  Ensure required content workflows exist
    ------------------------------------------------------*/
    ;WITH Wanted AS
    (
        SELECT  p.PortalID, w.*
        FROM    {databaseOwner}{objectQualifier}Portals AS p
        CROSS  APPLY (VALUES
            ('DirectPublish' ,N'Direct Publish'   ,N'Allows an author to directly publish content to the site.'),
            ('SaveDraft'     ,N'Save Draft'       ,N'Allows author to save a draft copy before the content is published.'),
            ('ContentApproval',N'Content Approval',N'Allows an author to manage content and then have it reviewed by other users before it is published.')
        ) w(WorkflowKey, WorkflowName, [Description])
    )
    MERGE {databaseOwner}{objectQualifier}ContentWorkflows AS tgt
    USING Wanted AS src
            ON  tgt.PortalID    = src.PortalID
            AND tgt.WorkflowKey = src.WorkflowKey
    WHEN NOT MATCHED BY TARGET THEN -- insert only
        INSERT (PortalID, WorkflowName, WorkflowKey, Description, IsSystem, IsDeleted)
        VALUES (src.PortalID, src.WorkflowName, src.WorkflowKey, src.Description, 1, 0);
    /*—no WHEN MATCHED clause—existing workflows stay exactly as they are—*/


    /*------------------------------------------------------
        3.  Ensure required content workflows states exist
    --------------------------------------------------------
        - Prefer name match (including translations)
        - Fallback to [Order] to keep one state per slot
    ------------------------------------------------------*/
    ;WITH Translations AS
    (
        -- Canonical name , Any equivalent/translated spelling
        SELECT N'Published'        AS Canon, N'Published'                AS Name UNION ALL
        SELECT N'Published'       , N'veröffentlicht'                    UNION ALL
        SELECT N'Published'       , N'Publicado'                         UNION ALL
        SELECT N'Published'       , N'Publié'                            UNION ALL
        SELECT N'Published'       , N'Pubblicato'                        UNION ALL
        SELECT N'Published'       , N'Publiceren'                        UNION ALL

        SELECT N'Draft'           , N'Draft'                             UNION ALL
        SELECT N'Draft'           , N'Borrador'                          UNION ALL
        SELECT N'Draft'           , N'Bozza'                             UNION ALL
        SELECT N'Draft'           , N'Brouillon'                         UNION ALL
        SELECT N'Draft'           , N'Concept'                           UNION ALL
        SELECT N'Draft'           , N'Entwurf'                           UNION ALL

        SELECT N'Ready For Review', N'Ready For Review'                  UNION ALL
        SELECT N'Ready For Review', N'bereit zur Überprüfung'            UNION ALL
        SELECT N'Ready For Review', N'Klaar voor review'                 UNION ALL
        SELECT N'Ready For Review', N'Listo para revisión'               UNION ALL
        SELECT N'Ready For Review', N'Prêt pour l''examen'               UNION ALL
        SELECT N'Ready For Review', N'Pronto Per la Revisione'
    ),
    StatesWanted AS
    (
        SELECT  cw.WorkflowID,
                v.WorkflowKey,
                v.[Order],
                v.StateName,
                v.IsSystem,
                v.SendNotification,
                v.SendNotificationToAdministrators
        FROM    {databaseOwner}{objectQualifier}ContentWorkflows AS cw
        CROSS APPLY (VALUES
            ('DirectPublish'  ,1,N'Published'        ,1,1,0),
            ('SaveDraft'      ,1,N'Draft'            ,1,1,0),
            ('SaveDraft'      ,2,N'Published'        ,1,1,0),
            ('ContentApproval',1,N'Draft'            ,1,1,0),
            ('ContentApproval',2,N'Ready For Review' ,1,1,1),
            ('ContentApproval',3,N'Published'        ,1,1,0)
        ) v(WorkflowKey,[Order],StateName,IsSystem,SendNotification,SendNotificationToAdministrators)
        WHERE cw.WorkflowKey = v.WorkflowKey
    )
    MERGE {databaseOwner}{objectQualifier}ContentWorkflowStates AS tgt
    USING StatesWanted AS src
        ON  tgt.WorkflowID = src.WorkflowID
        AND (
                -- 1) name match (canonical or any translation)
                tgt.StateName IN (
                        SELECT t.Name
                        FROM   Translations AS t
                        WHERE  t.Canon = src.StateName
                )
                -- 2) fallback: same slot/order if no name match
                OR tgt.[Order] = src.[Order]
            )
    WHEN NOT MATCHED BY TARGET THEN
        INSERT (WorkflowID, StateName, [Order], IsSystem, SendNotification, SendNotificationToAdministrators)
        VALUES (src.WorkflowID, src.StateName, src.[Order], src.IsSystem, src.SendNotification, src.SendNotificationToAdministrators);

    COMMIT TRANSACTION;

END TRY
BEGIN CATCH
    IF XACT_STATE() <> 0 ROLLBACK;
    THROW; -- re-raise original error
END CATCH;

GO
