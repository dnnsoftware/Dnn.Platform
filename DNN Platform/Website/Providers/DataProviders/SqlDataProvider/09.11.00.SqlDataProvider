
IF NOT EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}{objectQualifier}PortalPermission') AND OBJECTPROPERTY(id, N'IsTable') = 1)
BEGIN
    CREATE TABLE {databaseOwner}[{objectQualifier}PortalPermission](
	    	[PortalPermissionId] [INT] IDENTITY(1,1) NOT NULL,
			[PortalId] [INT] NULL,
	        [PermissionId] [INT] NOT NULL,
            [AllowAccess] [BIT] NOT NULL,
            [RoleID] [INT] NULL,
            [UserID] [INT] NULL,
	        [CreatedByUserID] [INT] NULL,
	        [CreatedOnDate] [DATETIME] NULL,
	        [LastModifiedByUserID] [INT] NULL,
	        [LastModifiedOnDate] [DATETIME] NULL,
        CONSTRAINT [PK_{objectQualifier}PortalPermission] PRIMARY KEY CLUSTERED ([PortalPermissionId] ASC),
        CONSTRAINT [FK_{objectQualifier}PortalPermission_PortalId] FOREIGN KEY([PortalId]) REFERENCES {databaseOwner}[{objectQualifier}Portals] ([PortalId]),
        CONSTRAINT [FK_{objectQualifier}PortalPermission_PermissionId] FOREIGN KEY([PermissionId]) REFERENCES {databaseOwner}[{objectQualifier}Permission] ([PermissionId]),
        CONSTRAINT [FK_{objectQualifier}PortalPermission_RoleId] FOREIGN KEY([RoleId]) REFERENCES {databaseOwner}[{objectQualifier}Roles] ([RoleId]),
        CONSTRAINT [FK_{objectQualifier}PortalPermission_UserId] FOREIGN KEY([UserId]) REFERENCES {databaseOwner}[{objectQualifier}Users] ([UserId])
    )
END
GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_{objectQualifier}PortalPermission_Roles] ON {databaseOwner}[{objectQualifier}PortalPermission] ([RoleID] ASC,[PortalID] ASC,[PermissionID] ASC) INCLUDE([AllowAccess]) WHERE ([RoleID] IS NOT NULL)
CREATE UNIQUE NONCLUSTERED INDEX [IX_{objectQualifier}PortalPermission_Users] ON {databaseOwner}[{objectQualifier}PortalPermission] ([UserID] ASC,[PortalID] ASC,[PermissionID] ASC) INCLUDE([AllowAccess]) WHERE ([UserID] IS NOT NULL)
CREATE UNIQUE NONCLUSTERED INDEX [IX_{objectQualifier}PortalPermission_Portals] ON {databaseOwner}[{objectQualifier}PortalPermission] ([PortalID] ASC,[PermissionID] ASC, [RoleID] ASC, [UserID] ASC) INCLUDE([AllowAccess])
CREATE NONCLUSTERED INDEX [IX_{objectQualifier}PortalPermission_Permission] ON {databaseOwner}[{objectQualifier}PortalPermission] ([PermissionID] ASC)

GO

CREATE VIEW [dbo].[vw_PortalPermissions]
AS
SELECT  PP.PortalPermissionID,
        PP.PortalId,
        P.PermissionID,
        PP.RoleID,
        R.RoleName,
        PP.AllowAccess,
        PP.UserID,
        U.Username,
        U.DisplayName,
        P.PermissionCode,
        P.ModuleDefID,
        P.PermissionKey,
        P.PermissionName,
        PP.CreatedByUserID,
        PP.CreatedOnDate,
        PP.LastModifiedByUserID,
        PP.LastModifiedOnDate
FROM        dbo.[PortalPermission]    AS PP
 INNER JOIN dbo.[Permission]       AS P  ON PP.PermissionID = P.PermissionID
 LEFT  JOIN dbo.[Roles]            AS R  ON PP.RoleID       = R.RoleID
 LEFT  JOIN dbo.[Users]            AS U  ON PP.UserID       = U.UserID
GO

IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}GetPortalPermission') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE {databaseOwner}{objectQualifier}GetPortalPermission
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPortalPermission]

	@PortalPermissionId INT

AS
SELECT *
FROM {databaseOwner}{objectQualifier}vw_PortalPermissions
WHERE PortalPermissionId = @PortalPermissionId

GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetPortalPermissionsByPortal]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}GetPortalPermissionsByPortal
GO

CREATE procedure {databaseOwner}{objectQualifier}GetPortalPermissionsByPortal
	
	@PortalID int

AS

	IF @PortalID is not null
		BEGIN 
			SELECT *
				FROM {databaseOwner}{objectQualifier}vw_PortalPermissions
				WHERE PortalID = @PortalID
		END
	ELSE
		BEGIN
			SELECT *
				FROM {databaseOwner}{objectQualifier}vw_PortalPermissions
				WHERE PortalID IS NULL 
		END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}SavePortalPermission') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE {databaseOwner}{objectQualifier}SavePortalPermission
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}SavePortalPermission
	@PortalId		    INT,
	@PermissionKey		VARCHAR(50),
    @RoleId             INT,
    @UserId             INT,
    @AllowAccess        BIT,
	@CurrentUserId	    INT
AS
    DECLARE @PortalPermissionId INT;
    SELECT @PortalPermissionId = PortalPermissionId FROM {databaseOwner}[{objectQualifier}vw_PortalPermissions]
        WHERE ((@PortalId IS NULL AND PortalId IS NULL) OR PortalId = @PortalId) AND PermissionKey = @PermissionKey AND ((@RoleId IS NULL AND RoleId IS NULL) OR RoleId = @RoleId) AND ((@UserId IS NULL AND UserId IS NULL) OR UserId = @UserId)
    IF (@PortalPermissionId IS NOT NULL)
    BEGIN
        UPDATE {databaseOwner}[{objectQualifier}PortalPermission] SET
	        [AllowAccess] = @AllowAccess,
	        [LastModifiedByUserID] = @CurrentUserId,
	        [LastModifiedOnDate] = GETDATE()
        WHERE ((@PortalId IS NULL AND PortalId IS NULL) OR PortalId = @PortalId) AND PortalPermissionId = @PortalPermissionId AND ((@RoleId IS NULL AND RoleId IS NULL) OR RoleId = @RoleId) AND ((@UserId IS NULL AND UserId IS NULL) OR UserId = @UserId)

        SELECT PortalPermissionId FROM {databaseOwner}[{objectQualifier}PortalPermission]
            WHERE ((@PortalId IS NULL AND PortalId IS NULL) OR PortalId = @PortalId) AND PortalPermissionId = @PortalPermissionId AND ((@RoleId IS NULL AND RoleId IS NULL) OR RoleId = @RoleId) AND ((@UserId IS NULL AND UserId IS NULL) OR UserId = @UserId)
    END
    ELSE
    BEGIN
        DECLARE @PermissionId INT;
        SELECT @PermissionId = PermissionId FROM {databaseOwner}[{objectQualifier}Permission]
            WHERE PermissionKey = @PermissionKey
        IF (@PermissionId IS NOT NULL)
        BEGIN
            INSERT INTO {databaseOwner}[{objectQualifier}PortalPermission] (
	            [PortalId],
	            [PermissionId],
	            [AllowAccess],
                [RoleId],
                [UserId],
	            [CreatedByUserID],
	            [CreatedOnDate],
	            [LastModifiedByUserID],
	            [LastModifiedOnDate]
            ) VALUES (
	            @PortalId,
	            @PermissionId,
	            @AllowAccess,
                @RoleId,
                @UserId,
	            @CurrentUserId,
	            GETDATE(),
	            @CurrentUserId,
	            GETDATE()
            )

            SELECT SCOPE_IDENTITY()
        END
    END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}DeletePortalPermission') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE {databaseOwner}{objectQualifier}DeletePortalPermission
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeletePortalPermission]
    @PortalPermissionId           INT
AS
    DELETE FROM {databaseOwner}[{objectQualifier}PortalPermission] 
        WHERE PortalPermissionId = @PortalPermissionId 
GO

IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}DeletePortalPermissionsByPortalID') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE {databaseOwner}{objectQualifier}DeletePortalPermissionsByPortalID
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeletePortalPermissionsByPortalID]
    @PortalId           INT
AS
    DELETE FROM {databaseOwner}[{objectQualifier}PortalPermission] 
        WHERE PortalId = @PortalId
GO

IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}DeletePortalPermissionsByUserID') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
    DROP PROCEDURE {databaseOwner}{objectQualifier}DeletePortalPermissionsByUserID
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeletePortalPermissionsByUserID]
    @PortalId           INT,
    @UserId             INT
AS
    DELETE FROM {databaseOwner}[{objectQualifier}PortalPermission] 
        WHERE PortalId = @PortalId AND UserId = @UserId
GO

INSERT INTO {databaseOwner}[{objectQualifier}Permission] ([PermissionCode], [ModuleDefID], [PermissionKey], [PermissionName], [ViewOrder], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate]) VALUES ('SYSTEM_PORTAL', -1, 'ADDTOPLEVELPAGE', 'Add Top Level Page', 9999, -1, GETDATE(), -1, GETDATE())
INSERT INTO {databaseOwner}[{objectQualifier}Permission] ([PermissionCode], [ModuleDefID], [PermissionKey], [PermissionName], [ViewOrder], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate]) VALUES ('SYSTEM_PORTAL', -1, 'PAGEADMIN', 'Page Admin', 9999, -1, GETDATE(), -1, GETDATE())

GO