/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}SetCorePackageVersions') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}SetCorePackageVersions
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}SetCorePackageVersions
AS
DECLARE @Version VARCHAR(10)
SET @Version = (SELECT TOP 1
 CAST(v.Major AS VARCHAR) + '.'
 + CAST(v.Minor AS VARCHAR) + '.'
 + CAST(v.Build AS VARCHAR)
FROM {databaseOwner}{objectQualifier}Version v
ORDER BY v.Major DESC, v.Minor DESC, v.Build DESC);
UPDATE {databaseOwner}{objectQualifier}Packages
SET Version=@Version
WHERE [Name] IN ('DotNetNuke.Authentication',
'DotNetNuke.SearchResults',
'DotNetNuke.Security',
'DotNetNuke.ACTIONBUTTONSkinObject',
'DotNetNuke.ACTIONSSkinObject',
'DotNetNuke.BANNERSkinObject',
'DotNetNuke.BREADCRUMBSkinObject',
'DotNetNuke.COPYRIGHTSkinObject',
'DotNetNuke.CURRENTDATESkinObject',
'DotNetNuke.DOTNETNUKESkinObject',
'DotNetNuke.DROPDOWNACTIONSSkinObject',
'DotNetNuke.HELPSkinObject',
'DotNetNuke.HOSTNAMESkinObject',
'DotNetNuke.ICONSkinObject',
'DotNetNuke.LANGUAGESkinObject',
'DotNetNuke.LINKACTIONSSkinObject',
'DotNetNuke.LINKSSkinObject',
'DotNetNuke.LOGINSkinObject',
'DotNetNuke.LOGOSkinObject',
'DotNetNuke.MENUSkinObject',
'DotNetNuke.NAVSkinObject',
'DotNetNuke.PRINTMODULESkinObject',
'DotNetNuke.PRIVACYSkinObject',
'DotNetNuke.SEARCHSkinObject',
'DotNetNuke.SIGNINSkinObject',
'DotNetNuke.TERMSSkinObject',
'DotNetNuke.TITLESkinObject',
'DotNetNuke.TREEVIEWSkinObject',
'DotNetNuke.USERSkinObject',
'DotNetNuke.VISIBILITYSkinObject',
'DotNetNuke.TEXTSkinObject',
'DotNetNuke.STYLESSkinObject',
'DotNetNuke.LEFTMENUSkinObject',
'DotNetNuke.JQUERYSkinObject',
'DotNetNuke.CONTROLPANEL.SkinObject',
'DefaultAuthentication',
'DotNetNuke.ViewProfile',
'DotNetNuke.TagsSkinObject',
'DotNetNuke.Skin.Default',
'DotNetNuke.Container.Default',
'DotNetNuke.Registration',
'DotNetNuke.ToastSkinObject',
'DotNetNuke.DNNCSSINCLUDESkinObject',
'DotNetNuke.DNNCSSEXCLUDESkinObject',
'DotNetNuke.DNNJSINCLUDESkinObject',
'DotNetNuke.DNNJSEXCLUDESkinObject');
UPDATE {databaseOwner}{objectQualifier}DesktopModules
SET Version=@Version
FROM {databaseOwner}{objectQualifier}DesktopModules dtm
INNER JOIN {databaseOwner}{objectQualifier}Packages p ON p.PackageID=dtm.PackageID
WHERE p.[Name] IN ('DotNetNuke.Authentication',
'DotNetNuke.SearchResults',
'DotNetNuke.Security',
'DotNetNuke.ACTIONBUTTONSkinObject',
'DotNetNuke.ACTIONSSkinObject',
'DotNetNuke.BANNERSkinObject',
'DotNetNuke.BREADCRUMBSkinObject',
'DotNetNuke.COPYRIGHTSkinObject',
'DotNetNuke.CURRENTDATESkinObject',
'DotNetNuke.DOTNETNUKESkinObject',
'DotNetNuke.DROPDOWNACTIONSSkinObject',
'DotNetNuke.HELPSkinObject',
'DotNetNuke.HOSTNAMESkinObject',
'DotNetNuke.ICONSkinObject',
'DotNetNuke.LANGUAGESkinObject',
'DotNetNuke.LINKACTIONSSkinObject',
'DotNetNuke.LINKSSkinObject',
'DotNetNuke.LOGINSkinObject',
'DotNetNuke.LOGOSkinObject',
'DotNetNuke.MENUSkinObject',
'DotNetNuke.NAVSkinObject',
'DotNetNuke.PRINTMODULESkinObject',
'DotNetNuke.PRIVACYSkinObject',
'DotNetNuke.SEARCHSkinObject',
'DotNetNuke.SIGNINSkinObject',
'DotNetNuke.TERMSSkinObject',
'DotNetNuke.TITLESkinObject',
'DotNetNuke.TREEVIEWSkinObject',
'DotNetNuke.USERSkinObject',
'DotNetNuke.VISIBILITYSkinObject',
'DotNetNuke.TEXTSkinObject',
'DotNetNuke.STYLESSkinObject',
'DotNetNuke.LEFTMENUSkinObject',
'DotNetNuke.JQUERYSkinObject',
'DotNetNuke.CONTROLPANEL.SkinObject',
'DefaultAuthentication',
'DotNetNuke.ViewProfile',
'DotNetNuke.TagsSkinObject',
'DotNetNuke.Skin.Default',
'DotNetNuke.Container.Default',
'DotNetNuke.Registration',
'DotNetNuke.ToastSkinObject',
'DotNetNuke.DNNCSSINCLUDESkinObject',
'DotNetNuke.DNNCSSEXCLUDESkinObject',
'DotNetNuke.DNNJSINCLUDESkinObject',
'DotNetNuke.DNNJSEXCLUDESkinObject');
GO

UPDATE {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients]
 SET   EmailSchedulerInstance = NULL
 WHERE EmailSchedulerInstance = '00000000-0000-0000-0000-000000000000';
GO


IF EXISTS (SELECT * FROM sys.indexes
            WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients]')
              AND Name = N'IX_{objectQualifier}CoreMessaging_MessageRecipients_ForDispatch')
    DROP INDEX [IX_{objectQualifier}CoreMessaging_MessageRecipients_ForDispatch]
    ON {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients];
GO

CREATE UNIQUE NONCLUSTERED INDEX [IX_{objectQualifier}CoreMessaging_MessageRecipients_ForDispatch]
    ON {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] 
        ([EmailSchedulerInstance], [UserID], [RecipientID])
   INCLUDE ([LastModifiedOnDate], [MessageID])
   WHERE   [EmailSent] = 0 
     AND   [Read]      = 0 
     AND   [Archived]  = 0;
GO


IF EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}vw_MessagesForDispatch]'))
    DROP VIEW {databaseOwner}[{objectQualifier}vw_MessagesForDispatch];
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_MessagesForDispatch]
AS
    SELECT R.[UserID], 
           R.[RecipientID],
           R.[EmailSchedulerInstance], 
           CASE 
            WHEN M.NotificationTypeID IS Null 
            THEN IsNull(P.[MessagesEmailFrequency],      0) -- direct mails are sent immediately by default
            ELSE IsNull(p.[NotificationsEmailFrequency], 2) -- notifications are sent as daily digest by default
           END AS EmailFrequency 
     FROM       {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] AS R 
     INNER JOIN {databaseOwner}[{objectQualifier}CoreMessaging_Messages]          AS M ON R.MessageID = M.MessageID
     LEFT  JOIN {databaseOwner}[{objectQualifier}CoreMessaging_UserPreferences]   AS P ON R.UserID    = P.UserID    AND M.PortalID = P.PortalID
     WHERE [EmailSent] = 0 AND [Read] = 0 AND [Archived] = 0;
GO


IF EXISTS (SELECT * FROM sys.Procedures WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_GetNextMessagesForInstantDispatch]'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNextMessagesForInstantDispatch];
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNextMessagesForInstantDispatch]
    @SchedulerInstance UNIQUEIDENTIFIER,
    @BatchSize         INT
AS 
BEGIN
    -- reset possibly remaining records from any previous run of this SchedulerInstance:
    UPDATE {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients]
       SET [EmailSchedulerInstance] = Null,
           [LastModifiedOnDate]     = GetDate()
     WHERE [EmailSchedulerInstance] = @SchedulerInstance
       AND [EmailSent] = 0 AND [Read] = 0 AND [Archived] = 0;
       
    -- reset possibly remaining outdated records from other instances:
    UPDATE {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients]
     SET   [EmailSchedulerInstance] = Null
     WHERE [EmailSent] = 0 AND [Read] = 0 AND [Archived] = 0
       AND [EmailSchedulerInstance] Is Not Null AND [LastModifiedOnDate] < DateAdd(hh, -2, GetDate());
       

    -- mark messages for dispatch, so they won't be handled by another SchedulerInstance:
    UPDATE TOP (@BatchSize) R
     SET   [EmailSchedulerInstance] = @SchedulerInstance,
           [LastModifiedOnDate]     = GetDate()
     FROM       {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] AS R 
     INNER JOIN {databaseOwner}[{objectQualifier}CoreMessaging_Messages]          AS M ON R.MessageID = M.MessageID
     LEFT  JOIN {databaseOwner}[{objectQualifier}CoreMessaging_UserPreferences]   AS P ON R.UserID    = P.UserID    AND M.PortalID = P.PortalID
     WHERE R.[EmailSent] = 0 AND R.[Read] = 0 AND R.[Archived] = 0 AND EmailSchedulerInstance IS NULL
       AND CASE 
            WHEN M.NotificationTypeID IS Null 
            THEN IsNull(P.[MessagesEmailFrequency],      0) -- direct mails are sent immediately by default
            ELSE IsNull(p.[NotificationsEmailFrequency], 2) -- notifications are sent as daily digest by default
           END = 0;

    SELECT M.[PortalID],
           M.[NotificationTypeID],
           M.[To],
           M.[From],
           M.[Subject],
           M.[Body],
           M.[SenderUserID],
           M.[ExpirationDate],
           M.[Context],
           R.[RecipientID],
           R.[MessageID],
           R.[UserID]
     FROM  {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] R
     JOIN  {databaseOwner}[{objectQualifier}CoreMessaging_Messages]          M ON R.MessageID = M.MessageID
     WHERE [EmailSent] = 0 -- Filter these columms 4 to use proper index
       AND [Read]      = 0
       AND [Archived]  = 0
       AND [EmailSchedulerInstance] = @SchedulerInstance
     ORDER BY --[PortalID],
              [UserID],
              [RecipientID]
END; -- Procedure
GO


IF EXISTS (SELECT * FROM sys.Procedures WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_GetNextMessagesForDigestDispatch]'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_GetNextMessagesForDigestDispatch];
GO

CREATE PROCEDURE [dbo].[CoreMessaging_GetNextMessagesForDigestDispatch]
    @Frequency         INT,
    @SchedulerInstance UNIQUEIDENTIFIER,
    @BatchSize         INT
AS 
BEGIN
    UPDATE R
     SET   [EmailSchedulerInstance] = @SchedulerInstance,
           [LastModifiedOnDate]     = GetDate()
     FROM  {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] R
     JOIN  (SELECT TOP (@BatchSize)
                   UserID
             FROM  dbo.[vw_MessagesForDispatch] 
             WHERE [EmailSchedulerInstance] IS NULL
             AND   [EmailFrequency] = @Frequency
             GROUP BY UserID
             ORDER BY UserID) D ON R.UserID = R.UserID 

    SELECT M.[PortalID],
           M.[NotificationTypeID],
           M.[To],
           M.[From],
           M.[Subject],
           M.[Body],
           M.[SenderUserID],
           M.[ExpirationDate],
           M.[Context],
           R.[RecipientID],
           R.[MessageID],
           R.[UserID]
     FROM  {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients] R
     JOIN  {databaseOwner}[{objectQualifier}CoreMessaging_Messages]          M ON R.MessageID = M.MessageID
     WHERE [EmailSent] = 0 -- Filter these 4 columms to use proper index
       AND [Read]      = 0
       AND [Archived]  = 0
       AND [EmailSchedulerInstance] = @SchedulerInstance
     ORDER BY --[PortalID],
              [UserID],
              [RecipientID] DESC
END; -- Procedure
GO

/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/
