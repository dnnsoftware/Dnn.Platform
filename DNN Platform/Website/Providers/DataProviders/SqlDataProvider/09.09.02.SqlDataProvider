IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetFoldersByPermissions]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetFoldersByPermissions]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFoldersByPermissions]
    @PortalId Int, -- Null|-1 retrieves host folders
    @Permissions nVarChar(300), -- list of permissions, to be required any of it, not the complete set. Use '*', '' OR Null for ANY.
    @UserId Int, -- Id of the user to be inspected, Null|-1 for anonymous users
    @FolderId Int, -- optional ID of a single folder to check (or Null|-1 for all)
    @FolderPath nVarChar(300) -- optional path of a single folder to check (or Null|'' for all)
AS
BEGIN
    DECLARE @IsSuperUser Bit = 0
    DECLARE @isadmin Bit = 0
    DECLARE @AllPerm Int = 0
    DECLARE @ReadPerm Int = 0
    DECLARE @WritePerm Int = 0
    DECLARE @BrowsePerm Int = 0
    DECLARE @AddPerm Int = 0

    -- Determine Admin or SuperUser
    IF IsNull(@UserId, -1) > 0 BEGIN -- not anonymous user
        SELECT @IsSuperUser = IsSuperUser FROM {databaseOwner}[{objectQualifier}Users] WHERE UserId = @UserId;
        IF @IsSuperUser != 0
            SET @IsAdmin = 1; -- superuser has portal admin permission as well 
         ELSE IF IsNull(@PortalId, -1) = -1
            SET @IsAdmin = 0 -- only superusers may access host files
         ELSE IF {databaseOwner}[{objectQualifier}UserIsInRole](@UserId, {databaseOwner}[{objectQualifier}AdministratorRoleId](@PortalId)) != 0
            SET @IsAdmin = 1;
    END;

    IF (IsNull(@PortalId, -1) = -1 AND @IsSuperUser != 0) OR (@IsAdmin != 0)
        -- shortcut for admins/superusers: return all folders (they are having always access to all of them)
        SELECT F.*
         FROM  {databaseOwner}[{objectQualifier}Folders] F
         WHERE IsNull(F.PortalID, -1) = IsNull(@PortalId, -1)
           AND (F.FolderID   = @FolderID   OR IsNull(@FolderID,    -1) =  -1)
           AND (F.FolderPath = @FolderPath OR IsNull(@FolderPath, N'') = N'')
         ORDER BY F.PortalID, F.FolderPath
         OPTION (OPTIMIZE FOR (@PortalId UNKNOWN));
    ELSE BEGIN
        --Retrieve Permission IDs
            SELECT TOP 1 @AllPerm    = PermissionID FROM {databaseOwner}[{objectQualifier}Permission] WHERE PermissionCode = N'SYSTEM_FOLDER' AND ModuleDefId = -1 AND PermissionKey = N'WRITE';
        IF IsNull(@Permissions, N'') LIKE N'%WRITE%'  SET @WritePerm = @AllPerm -- always checked, because WRITE always rules all other permissions
        IF IsNull(@Permissions, N'') LIKE N'%READ%'
            SELECT TOP 1 @ReadPerm   = PermissionID FROM {databaseOwner}[{objectQualifier}Permission] WHERE PermissionCode = N'SYSTEM_FOLDER' AND ModuleDefId = -1 AND PermissionKey = N'READ';
        IF IsNull(@Permissions, N'') LIKE N'%BROWSE%'
            SELECT TOP 1 @BrowsePerm = PermissionID FROM {databaseOwner}[{objectQualifier}Permission] WHERE PermissionCode = N'SYSTEM_FOLDER' AND ModuleDefId = -1 AND PermissionKey = N'BROWSE';
        IF IsNull(@Permissions, N'') LIKE N'%ADD%' -- advanced permission provider only
            SELECT TOP 1 @AddPerm    = PermissionID FROM {databaseOwner}[{objectQualifier}Permission] WHERE PermissionCode = N'SYSTEM_FOLDER' AND ModuleDefId = -1 AND PermissionKey = N'ADD';

        SELECT * FROM {databaseOwner}[{objectQualifier}Folders]
         WHERE (PortalID = IsNull(@PortalId, -1))
           AND (FolderPath = @FolderPath OR IsNull(@FolderPath, N'') = N'')
           AND (FolderID   = @FolderID   OR IsNull(@FolderID, -1) = -1)
           AND FolderId IN -- granted folders
                (SELECT DISTINCT P.FolderId FROM {databaseOwner}[{objectQualifier}FolderPermission] P
                                       LEFT JOIN {databaseOwner}[{objectQualifier}UserPortalRoles](@PortalId, @UserId) R ON P.RoleID = R.RoleID
                  WHERE (P.UserID = @UserId OR (R.RoleID Is Not Null))
                    AND PermissionID IN (@AddPerm, @ReadPerm, @BrowsePerm, @AllPerm)
                    AND AllowAccess = 1)
           AND NOT FolderId IN -- denied folders
                (SELECT DISTINCT P.FolderId FROM {databaseOwner}[{objectQualifier}FolderPermission] P
                                       LEFT JOIN {databaseOwner}[{objectQualifier}UserPortalRoles](@PortalId, @UserId) R ON P.RoleID = R.RoleID
                  WHERE (P.UserID = @UserId OR (R.RoleID Is Not Null))
                    AND PermissionID IN (@AddPerm, @ReadPerm, @BrowsePerm, @WritePerm)
                    AND AllowAccess = 0)
         ORDER BY PortalID, FolderPath
         OPTION (OPTIMIZE FOR (@FolderPath Unknown, @FolderId Unknown, @UserId Unknown));
    END
END -- Procedure
GO

IF (OBJECT_ID(N'{databaseOwner}[{objectQualifier}UserPortalRoles]') IS NOT NULL)
	DROP FUNCTION {databaseOwner}[{objectQualifier}UserPortalRoles]
GO

CREATE FUNCTION {databaseOwner}[{objectQualifier}UserPortalRoles]
(
    @PortalId int, -- not Null
    @UserId int -- not Null, -1 for anonymous users | > 0 for real users
)
RETURNS TABLE
AS
RETURN
    ( SELECT RoleID
        FROM {databaseOwner}[{objectQualifier}vw_UserRoles]
        WHERE PortalID = @PortalId
            AND UserID = @UserId
            AND ISNull(EffectiveDate, GetDate()) <= GetDate()
            AND IsNull(ExpiryDate, GetDate()) >= GetDate()
        UNION (SELECT -1)
        UNION (SELECT -3 WHERE @UserId <= 0)
    )
GO
