// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information

using System;
using System.Collections.Generic;
using System.IO;
using DotNetNuke.Common;
using DotNetNuke.Common.Utilities;
using Assembly = System.Reflection.Assembly;

namespace Dnn.PersonaBar.Security.Components.Checks
{
    public class CheckTelerikVulnerability : IAuditCheck
    {
        public string Id => "CheckTelerikVulnerability";

        public bool LazyLoad => false;

        public CheckResult Execute()
        {
            var result = new CheckResult(SeverityEnum.Unverified, this.Id);

            var fileSums = new List<string>
            {
                // SHA-256 hashes
                "63de0ee563f34c21b0688fb5f81be02bb2aee94c8e5c855fbece72e4de455945", //Telerik 2013.2.717.40
                "f6dc6dd32f4f5698217c72a512ce9872c002be98cfced9a0344b46c50c1a6f02"  //Telerik 2013.2.717.35
            };

            string[] configKeys = {
                "Telerik.AsyncUpload.ConfigurationEncryptionKey",
                "Telerik.Upload.ConfigurationHashKey",
                "Telerik.Web.UI.DialogParametersEncryptionKey",
            };

            var compareVersion = new Version(2017, 2, 711);
            var filePath = Path.Combine(Globals.ApplicationMapPath, "bin\\Telerik.Web.UI.dll");
            result.Severity = SeverityEnum.Pass;

            if (File.Exists(filePath))
            {
                var assemblyVersion = Assembly.Load(File.ReadAllBytes(filePath)).GetName().Version;
                if (assemblyVersion < compareVersion && !fileSums.Contains(Utility.GetFileCheckSum(filePath)))
                {
                    result.Severity = SeverityEnum.Failure;
                    result.Notes.Add("Telerik.Web.UI.dll assembly has't been patched.");
                }

                foreach (var configKey in configKeys)
                {
                    if (string.IsNullOrEmpty(Config.GetSetting(configKey)))
                    {
                        result.Severity = SeverityEnum.Failure;
                        result.Notes.Add("App Setting \"" + configKey + "\" doesn't exist in web.config.");
                    }
                }
            }
            else
            {
                result.Notes.Add("Telerik component is not installed in this site.");
            }

            return result;
        }
    }
}
