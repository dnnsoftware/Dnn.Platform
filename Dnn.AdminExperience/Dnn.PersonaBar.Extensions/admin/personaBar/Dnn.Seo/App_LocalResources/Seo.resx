<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="nav_Seo.Text" xml:space="preserve">
    <value>S E O</value>
  </data>
  <data name="URLManagementTab.Text" xml:space="preserve">
    <value>URL Management</value>
  </data>
  <data name="GeneralSettingsTab.Text" xml:space="preserve">
    <value>GENERAL SETTINGS</value>
  </data>
  <data name="ExtensionUrlProvidersTab.Text" xml:space="preserve">
    <value>EXTENSION URL PROVIDERS</value>
  </data>
  <data name="ExpressionsTab.Text" xml:space="preserve">
    <value>EXPRESSIONS</value>
  </data>
  <data name="TestURLTab.Text" xml:space="preserve">
    <value>TEST URL</value>
  </data>
  <data name="SitemapSettingsTab.Text" xml:space="preserve">
    <value>Sitemap Settings</value>
  </data>
  <data name="minusCharacter.Text" xml:space="preserve">
    <value>"-" e.g. page-name</value>
  </data>
  <data name="underscoreCharacter.Text" xml:space="preserve">
    <value>"_" e.g. page_name</value>
  </data>
  <data name="Do301RedirectToPortalHome.Text" xml:space="preserve">
    <value>Site Home Page</value>
  </data>
  <data name="Do404Error.Text" xml:space="preserve">
    <value>404 Error</value>
  </data>
  <data name="ReplacementCharacter.Text" xml:space="preserve">
    <value>Standard Replacement Character</value>
  </data>
  <data name="ReplacementCharacter.Help" xml:space="preserve">
    <value>Standard Replacement Character</value>
  </data>
  <data name="enableSystemGeneratedUrlsLabel.Text" xml:space="preserve">
    <value>Concatenate Page URLs</value>
  </data>
  <data name="enableSystemGeneratedUrlsLabel.Help" xml:space="preserve">
    <value>You can configure how the system will generate URLs.</value>
  </data>
  <data name="enableLowerCaseLabel.Help" xml:space="preserve">
    <value>Check this box to force URLs to be converted to lowercase.</value>
  </data>
  <data name="enableLowerCaseLabel.Text" xml:space="preserve">
    <value>Convert URLs to Lowercase</value>
  </data>
  <data name="autoAsciiConvertLabel.Help" xml:space="preserve">
    <value>When checked, any accented (diacritic) characters such as å and è will be converted to their plain-ascii equivalent.  Example : å -&gt; a and è -&gt; e.</value>
  </data>
  <data name="autoAsciiConvertLabel.Text" xml:space="preserve">
    <value>Convert Accented Characters</value>
  </data>
  <data name="setDefaultSiteLanguageLabel.Help" xml:space="preserve">
    <value>When checked, the default language for this site will always be set in the rewritten URL when no other language is found.</value>
  </data>
  <data name="setDefaultSiteLanguageLabel.Text" xml:space="preserve">
    <value>Set Default Site Language</value>
  </data>
  <data name="UrlRewriter.Text" xml:space="preserve">
    <value>URL REWRITER</value>
  </data>
  <data name="UrlRedirects.Text" xml:space="preserve">
    <value>URL REDIRECTS</value>
  </data>
  <data name="plDeletedPages.Help" xml:space="preserve">
    <value>Select the behavior that should occur when a user browses to a deleted, expired or disabled page.</value>
  </data>
  <data name="plDeletedPages.Text" xml:space="preserve">
    <value>Redirect deleted, expired, disabled pages to</value>
  </data>
  <data name="enable301RedirectsLabel.Help" xml:space="preserve">
    <value>Check this box if you want old "non-friendly" URLs to be redirected to the new URLs.</value>
  </data>
  <data name="enable301RedirectsLabel.Text" xml:space="preserve">
    <value>Redirect to Friendly URLs</value>
  </data>
  <data name="redirectOnWrongCaseLabel.Help" xml:space="preserve">
    <value>When checked, any URL that is not in lower case will be redirected to the lower case version of that URL.</value>
  </data>
  <data name="redirectOnWrongCaseLabel.Text" xml:space="preserve">
    <value>Redirect Mixed Case URLs</value>
  </data>
  <data name="GlobalSetting.Text" xml:space="preserve">
    <value>This is a global setting. Changes to this setting will affect all of your sites.</value>
  </data>
  <data name="ignoreRegExLabel.Help" xml:space="preserve">
    <value>The Ignore URL Regex pattern is used to stop processing of URLs by the URL Rewriting module.  This should be used when the URL in question doesn’t need to be rewritten, redirected or otherwise processed through the URL Rewriter.  Examples include images, css files, pdf files, service requests and requests for resources not associated with DotNetNuke.</value>
  </data>
  <data name="ignoreRegExLabel.Text" xml:space="preserve">
    <value>Ignore URL Regular Expression</value>
  </data>
  <data name="ignoreRegExInvalidPattern.Text" xml:space="preserve">
    <value>Ignore URL Regular Expression is invalid</value>
  </data>
  <data name="RegularExpressions.Text" xml:space="preserve">
    <value>REGULAR EXPRESSIONS</value>
  </data>
  <data name="ExtensionUrlProviders.Text" xml:space="preserve">
    <value>EXTENSION URL PROVIDERS</value>
  </data>
  <data name="SettingsUpdateSuccess.Text" xml:space="preserve">
    <value>The settings have been updated.</value>
  </data>
  <data name="SettingsError.Text" xml:space="preserve">
    <value>Could not update the settings. Please try later.</value>
  </data>
  <data name="SettingsRestoreWarning.Text" xml:space="preserve">
    <value>Are you sure you want to cancel your changes?</value>
  </data>
  <data name="Yes.Text" xml:space="preserve">
    <value>Yes</value>
  </data>
  <data name="No.Text" xml:space="preserve">
    <value>No</value>
  </data>
  <data name="doNotRewriteRegExLabel.Help" xml:space="preserve">
    <value>The Do Not Rewrite URL regular expression stops URL Rewriting from occurring on any URL that matches.  Use this value when a URL is being interpreted as a DotNetNuke page, but should not be.</value>
  </data>
  <data name="doNotRewriteRegExLabel.Text" xml:space="preserve">
    <value>Do Not Rewrite URL Regular Expression</value>
  </data>
  <data name="doNotRewriteRegExInvalidPattern.Text" xml:space="preserve">
    <value>Do Not Rewrite URL Regular Expression is invalid</value>
  </data>
  <data name="siteUrlsOnlyRegExInvalidPattern.Text" xml:space="preserve">
    <value>Site URLs Only Regular Expression is invalid</value>
  </data>
  <data name="siteUrlsOnlyRegExLabel.Help" xml:space="preserve">
    <value>The Site URLs Only regular expression pattern changes the processing order for matching URLs.  When matched, the URLs are evaluated against any of the regular expressions in the siteURLs.config file, without first being checked against the list of friendly URLs for the site.  Use this pattern to force processing through the siteURLs.config file for an explicit URL Rewrite or Redirect located within that file.</value>
  </data>
  <data name="siteUrlsOnlyRegExLabel.Text" xml:space="preserve">
    <value>Site URLs Only Regular Expression</value>
  </data>
  <data name="doNotRedirectUrlRegExInvalidPattern.Text" xml:space="preserve">
    <value>Do Not Redirect URL Regular Expression is invalid</value>
  </data>
  <data name="doNotRedirectUrlRegExLabel.Help" xml:space="preserve">
    <value>The Do Not Redirect URL regular expression pattern prevents matching URLs from being redirected in all cases.  Use this pattern when a URL is being redirected incorrectly.</value>
  </data>
  <data name="doNotRedirectUrlRegExLabel.Text" xml:space="preserve">
    <value>Do Not Redirect URL Regular Expression</value>
  </data>
  <data name="doNotRedirectHttpsUrlRegExInvalidPattern.Text" xml:space="preserve">
    <value>Do Not Redirect Https URL Regular Expression is invalid</value>
  </data>
  <data name="doNotRedirectHttpsUrlRegExLabel.Help" xml:space="preserve">
    <value>The Do Not Redirect https URL regular expression is used to stop unwanted redirects between http and https URLs.  It prevents the redirect for any matching URLs, and works both for http-&gt;https and https-&gt;http redirects.</value>
  </data>
  <data name="doNotRedirectHttpsUrlRegExLabel.Text" xml:space="preserve">
    <value>Do Not Redirect Https URL Regular Expression</value>
  </data>
  <data name="preventLowerCaseUrlRegExLabel.Help" xml:space="preserve">
    <value>The Prevent Lowercase URL regular expression stops the automatic conversion to lower case for any matching URLs.  Use this pattern to prevent the lowercase conversion of any URLs which need to remain in mixed/upper case.  This is frequently used to stop the conversion of URLs where the contents of the URL contain an encoded character or case-sensitive value.</value>
  </data>
  <data name="preventLowerCaseUrlRegExLabel.Text" xml:space="preserve">
    <value>Prevent Lowercase URL Regular Expression</value>
  </data>
  <data name="preventLowerCaseUrlRegExInvalidPattern.Text" xml:space="preserve">
    <value>Prevent Lowercase URL Regular Expression is invalid</value>
  </data>
  <data name="doNotUseFriendlyUrlsRegExLabel.Help" xml:space="preserve">
    <value>The Do Not Use Friendly URLs regular expression pattern is used to force certain DotNetNuke pages into using a longer URL for the page.  This is normally used to generate behaviour for backwards compatibility.</value>
  </data>
  <data name="doNotUseFriendlyUrlsRegExLabel.Text" xml:space="preserve">
    <value>Do Not Use Friendly URLs Regular Expression</value>
  </data>
  <data name="doNotUseFriendlyUrlsRegExInvalidPattern.Text" xml:space="preserve">
    <value>Do Not Use Friendly URLs Regular Expression is invalid</value>
  </data>
  <data name="keepInQueryStringRegExInvalidPattern.Text" xml:space="preserve">
    <value>Keep In Querystring Regular Expression is invalid</value>
  </data>
  <data name="keepInQueryStringRegExLabel.Help" xml:space="preserve">
    <value>The Keep in Querystring regular expression allows the matching of part of the friendly URL Path and ensuring that it stays in the querystring.  When a DotNetNuke URL of /pagename/key/value is generated, a ‘Keep in Querystring Regular Expression’ pattern of /key/value will match that part of the path and leave it as part of the querystring for the generated URL; e.g. /pagename?key=value.</value>
  </data>
  <data name="keepInQueryStringRegExLabel.Text" xml:space="preserve">
    <value>Keep in Querystring Regular Expression</value>
  </data>
  <data name="urlsWithNoExtensionRegExLabel.Help" xml:space="preserve">
    <value>The URLs with no Extension regular expression pattern is used to validate URLs that do not refer to a resource on the server, are not DotNetNuke pages, but can be requested with no URL extension.  URLs matching this regular expression will not be treated as a 404 when a matching DotNetNuke page can not be found for the URL.</value>
  </data>
  <data name="urlsWithNoExtensionRegExLabel.Text" xml:space="preserve">
    <value>URLs With No Extension Regular Expression</value>
  </data>
  <data name="urlsWithNoExtensionRegExInvalidPattern.Text" xml:space="preserve">
    <value>URLs With No Extension Regular Expression is invalid</value>
  </data>
  <data name="validFriendlyUrlRegExLabel.Help" xml:space="preserve">
    <value>This pattern is used to determine whether the characters that make up a page name or URL segment are valid for forming a friendly URL path. Characters that do not match the pattern will be removed from page names</value>
  </data>
  <data name="validFriendlyUrlRegExLabel.Text" xml:space="preserve">
    <value>Valid Friendly URL Regular Expression</value>
  </data>
  <data name="validFriendlyUrlRegExInvalidPattern.Text" xml:space="preserve">
    <value>Valid Friendly URL Regular Expression is invalid</value>
  </data>
  <data name="TestPageUrl.Text" xml:space="preserve">
    <value>TEST A PAGE URL</value>
  </data>
  <data name="TestUrlRewriting.Text" xml:space="preserve">
    <value>TEST URL REWRITING</value>
  </data>
  <data name="selectPageToTestLabel.Help" xml:space="preserve">
    <value>Select a page for this site to test out the URL generation.   You can use the ‘Search’ box to filter the list of pages.</value>
  </data>
  <data name="selectPageToTestLabel.Text" xml:space="preserve">
    <value>Page to Test</value>
  </data>
  <data name="NoneSpecified.Text" xml:space="preserve">
    <value>None Specified</value>
  </data>
  <data name="None.Text" xml:space="preserve">
    <value>None</value>
  </data>
  <data name="queryStringLabel.Help" xml:space="preserve">
    <value>To generate a URL which includes extra information in the path, add on the path information in the form of a querystring.  For example, entering &amp;key=value will change the generated URL to include/key/value in the URL path.  Use this feature to test out the example URLs generated by third party URLs.</value>
  </data>
  <data name="queryStringLabel.Text" xml:space="preserve">
    <value>Add Query String (optional)</value>
  </data>
  <data name="pageNameLabel.Help" xml:space="preserve">
    <value>Some modules generate a friendly URL by defining the last part of the URL explicitly.  If this is the case, enter the value for the ‘pagename’ value that is used when generating the URL.  If you have no explicit value, or do not know when to use this value, leave the value empty.</value>
  </data>
  <data name="pageNameLabel.Text" xml:space="preserve">
    <value>Custom Page Name / URL End String (optional)</value>
  </data>
  <data name="resultingUrlsLabel.Text" xml:space="preserve">
    <value>Resulting URLs</value>
  </data>
  <data name="resultingUrlsLabel.Help" xml:space="preserve">
    <value>Shows the list of URLs that can be generated from the selected page, depending on alias and/or language.</value>
  </data>
  <data name="TestUrlButtonCaption.Text" xml:space="preserve">
    <value>Test URL</value>
  </data>
  <data name="testUrlRewritingButton.Text" xml:space="preserve">
    <value>Test URL Rewriting</value>
  </data>
  <data name="testUrlRewritingLabel.Text" xml:space="preserve">
    <value>URL to Test</value>
  </data>
  <data name="testUrlRewritingLabel.Help" xml:space="preserve">
    <value>Enter a fully-qualified URL (including http:// or https://) into this box in order to test out the URL Rewriting / Redirecting.</value>
  </data>
  <data name="rewritingResultLabel.Help" xml:space="preserve">
    <value>Shows the rewritten URL, in the raw format that will be seen by the DNN platform and third-party extensions.</value>
  </data>
  <data name="rewritingResultLabel.Text" xml:space="preserve">
    <value>Rewriting Result</value>
  </data>
  <data name="languageLabel.Help" xml:space="preserve">
    <value>Shows the culture code as identified during the URL Rewriting process.</value>
  </data>
  <data name="languageLabel.Text" xml:space="preserve">
    <value>Identified Language / Culture</value>
  </data>
  <data name="identifiedTabLabel.Help" xml:space="preserve">
    <value>The name of the DNN page that has been identified during the URL Rewriting process.</value>
  </data>
  <data name="identifiedTabLabel.Text" xml:space="preserve">
    <value>Identified Page</value>
  </data>
  <data name="redirectionResultLabel.Help" xml:space="preserve">
    <value>If the tested URL is to be redirected, shows the redirect location of the URL.</value>
  </data>
  <data name="redirectionResultLabel.Text" xml:space="preserve">
    <value>Redirection Result</value>
  </data>
  <data name="redirectionReasonLabel.Help" xml:space="preserve">
    <value>Reason that this URL was redirected</value>
  </data>
  <data name="redirectionReasonLabel.Text" xml:space="preserve">
    <value>Redirection Reason</value>
  </data>
  <data name="operationMessagesLabel.Help" xml:space="preserve">
    <value>Any debug messages created during the test URL Rewriting process.</value>
  </data>
  <data name="operationMessagesLabel.Text" xml:space="preserve">
    <value>Operation Messages</value>
  </data>
  <data name="Alias_In_Url.Text" xml:space="preserve">
    <value>Alias In Url</value>
  </data>
  <data name="Built_In_Url.Text" xml:space="preserve">
    <value>Built In Url</value>
  </data>
  <data name="Custom_Tab_Alias.Text" xml:space="preserve">
    <value>Custom Tab Alias</value>
  </data>
  <data name="Deleted_Page.Text" xml:space="preserve">
    <value>Deleted Page</value>
  </data>
  <data name="Diacritic_Characters.Text" xml:space="preserve">
    <value>Diacritic Characters</value>
  </data>
  <data name="Disabled_Page.Text" xml:space="preserve">
    <value>Disabled Page</value>
  </data>
  <data name="Error_Event.Text" xml:space="preserve">
    <value>Error Event</value>
  </data>
  <data name="Exception.Text" xml:space="preserve">
    <value>Exception</value>
  </data>
  <data name="File_Url.Text" xml:space="preserve">
    <value>File Url</value>
  </data>
  <data name="Host_Portal_Used.Text" xml:space="preserve">
    <value>Host Portal Used</value>
  </data>
  <data name="Module_Provider_Redirect.Text" xml:space="preserve">
    <value>Module Provider Redirect</value>
  </data>
  <data name="Module_Provider_Rewrite_Redirect.Text" xml:space="preserve">
    <value>Module Provider Rewrite Redirect</value>
  </data>
  <data name="Not_Redirected.Text" xml:space="preserve">
    <value>Not Redirected</value>
  </data>
  <data name="No_Portal_Alias.Text" xml:space="preserve">
    <value>No Portal Alias</value>
  </data>
  <data name="Page_404.Text" xml:space="preserve">
    <value>Page 404</value>
  </data>
  <data name="Requested_404.Text" xml:space="preserve">
    <value>Requested 404</value>
  </data>
  <data name="Requested_404_In_Url.Text" xml:space="preserve">
    <value>Requested 404 In Url</value>
  </data>
  <data name="Requested_SplashPage.Text" xml:space="preserve">
    <value>Requested SplashPage</value>
  </data>
  <data name="Secure_Page_Requested.Text" xml:space="preserve">
    <value>Secure Page Requested</value>
  </data>
  <data name="SiteUrls_Config_Rule.Text" xml:space="preserve">
    <value>SiteUrls Config Rule</value>
  </data>
  <data name="Site_Root_Home.Text" xml:space="preserve">
    <value>Site Root Home</value>
  </data>
  <data name="Spaces_Replaced.Text" xml:space="preserve">
    <value>Spaces Replaced</value>
  </data>
  <data name="Tab_External_Url.Text" xml:space="preserve">
    <value>Tab External Url</value>
  </data>
  <data name="Tab_Permanent_Redirect.Text" xml:space="preserve">
    <value>Tab Permanent Redirect</value>
  </data>
  <data name="Unfriendly_Url_Child_Portal.Text" xml:space="preserve">
    <value>Unfriendly Url Child Portal</value>
  </data>
  <data name="Unfriendly_Url_TabId.Text" xml:space="preserve">
    <value>Unfriendly Url TabId</value>
  </data>
  <data name="User_Profile_Url.Text" xml:space="preserve">
    <value>User Profile Url</value>
  </data>
  <data name="Wrong_Portal_Alias.Text" xml:space="preserve">
    <value>Wrong Portal Alias</value>
  </data>
  <data name="Wrong_Portal_Alias_For_Browser_Type.Text" xml:space="preserve">
    <value>Wrong Portal Alias For Browser Type</value>
  </data>
  <data name="Wrong_Portal_Alias_For_Culture.Text" xml:space="preserve">
    <value>Wrong Portal Alias For Culture</value>
  </data>
  <data name="Wrong_Portal_Alias_For_Culture_And_Browser.Text" xml:space="preserve">
    <value>Wrong Portal Alias For Culture And Browser</value>
  </data>
  <data name="Wrong_Sub_Domain.Text" xml:space="preserve">
    <value>Wrong Sub Domain</value>
  </data>
  <data name="SitemapSettings.Text" xml:space="preserve">
    <value>GENERAL SITEMAP SETTINGS</value>
  </data>
  <data name="SitemapProviders.Text" xml:space="preserve">
    <value>SITEMAP PROVIDERS</value>
  </data>
  <data name="SiteSubmission.Text" xml:space="preserve">
    <value>SITE SUBMISSION</value>
  </data>
  <data name="sitemapUrlLabel.Help" xml:space="preserve">
    <value>Submit the Site Map to Google for better search optimization. Click Submit to get a Google Search Console account and verify your site ownership ( using the Verification option below ). Once verified, you can select the Add General Web Sitemap option on the Google Sitemaps tab and paste in the Site Map URL displayed.</value>
  </data>
  <data name="sitemapUrlLabel.Text" xml:space="preserve">
    <value>Sitemap URL</value>
  </data>
  <data name="lblCache.Help" xml:space="preserve">
    <value>Enable this option if you want to cache the Sitemap so it is not generated every time it is requested. This is specially necessary for big sites. If your site has more than 50.000 URLs the Sitemap will be cached with a default value of 1 day. Set this value to 0 to disable the caching.</value>
  </data>
  <data name="lblCache.Text" xml:space="preserve">
    <value>Days to Cache Sitemap For</value>
  </data>
  <data name="lnkResetCache.Text" xml:space="preserve">
    <value>Clear Cache</value>
  </data>
  <data name="lblExcludePriority.Help" xml:space="preserve">
    <value>This option can be used to remove certain pages from the Sitemap. For example you can setup a priority of 0.1 for a page and select 0.1 here to cause the page to not being included in the generated Sitemap.</value>
  </data>
  <data name="lblExcludePriority.Text" xml:space="preserve">
    <value>Exclude URLs With a Priority Lower Than</value>
  </data>
  <data name="lblMinPagePriority.Help" xml:space="preserve">
    <value>When "page level based priorities" is used, minimum priority for pages can be used to set the lowest priority that will be used on low level pages</value>
  </data>
  <data name="lblMinPagePriority.Text" xml:space="preserve">
    <value>Minimum Priority for Pages</value>
  </data>
  <data name="lblIncludeHidden.Help" xml:space="preserve">
    <value>When checked hidden pages (not visible in the menu) will also be included in the Sitemap. The default is not to include hidden pages.</value>
  </data>
  <data name="lblIncludeHidden.Text" xml:space="preserve">
    <value>Include Hidden Pages</value>
  </data>
  <data name="lblLevelPriority.Help" xml:space="preserve">
    <value>When checked, the priority for each page will be computed from the hierarchy level of the page. Top level pages will have a value of 1, second level 0.9, third level 0.8, ...  This setting will not change the value stored in the actual page but it will use the computed value when required.</value>
  </data>
  <data name="lblLevelPriority.Text" xml:space="preserve">
    <value>Use Page Level Based Priorities</value>
  </data>
  <data name="1Day.Text" xml:space="preserve">
    <value>1 Day</value>
  </data>
  <data name="2Days.Text" xml:space="preserve">
    <value>2 Days</value>
  </data>
  <data name="3Days.Text" xml:space="preserve">
    <value>3 Days</value>
  </data>
  <data name="4Days.Text" xml:space="preserve">
    <value>4 Days</value>
  </data>
  <data name="5Days.Text" xml:space="preserve">
    <value>5 Days</value>
  </data>
  <data name="6Days.Text" xml:space="preserve">
    <value>6 Days</value>
  </data>
  <data name="7Days.Text" xml:space="preserve">
    <value>7 Days</value>
  </data>
  <data name="DisableCaching.Text" xml:space="preserve">
    <value>Disable Caching</value>
  </data>
  <data name="enableSitemapProvider.Help" xml:space="preserve">
    <value>Enable Sitemap Provider</value>
  </data>
  <data name="enableSitemapProvider.Text" xml:space="preserve">
    <value>Enable Sitemap Provider</value>
  </data>
  <data name="overridePriority.Help" xml:space="preserve">
    <value>Override Priority</value>
  </data>
  <data name="overridePriority.Text" xml:space="preserve">
    <value>Override Priority</value>
  </data>
  <data name="Name.Header" xml:space="preserve">
    <value>NAME</value>
  </data>
  <data name="Enabled.Header" xml:space="preserve">
    <value>Enabled</value>
  </data>
  <data name="Priority.Header" xml:space="preserve">
    <value>Priority</value>
  </data>
  <data name="lblSearchEngine.Help" xml:space="preserve">
    <value>Submit your site to the selected search engine for indexing.</value>
  </data>
  <data name="lblSearchEngine.Text" xml:space="preserve">
    <value>Search Engine</value>
  </data>
  <data name="lblVerification.Help" xml:space="preserve">
    <value>When signing up with Google Search Console you will need to verify your site ownership. Choose the "Upload an HTML File" method from the Google Verification screen. Enter the file name displayed (ie. google53c0cef435b2b81e.html) into the Verification text box and click Create. Return to Google and select the Verify button.</value>
  </data>
  <data name="lblVerification.Text" xml:space="preserve">
    <value>Verification</value>
  </data>
  <data name="Submit.Text" xml:space="preserve">
    <value>Submit</value>
  </data>
  <data name="Create.Text" xml:space="preserve">
    <value>Create</value>
  </data>
  <data name="VerificationValidity.ErrorMessage" xml:space="preserve">
    <value>Valid file name must has an extension .html (ie. google53c0cef435b2b81e.html)</value>
  </data>
  <data name="NoExtensionUrlProviders.Text" xml:space="preserve">
    <value>No extension URL providers found</value>
  </data>
</root>