<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DotNetNuke</name>
    </assembly>
    <members>
        <member name="T:DotNetNuke.Application.Application">
            <summary>
            The Application class contains properties that describe the DotNetNuke Application.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:DotNetNuke.Application.Application.Company">
            <summary>
            Gets the company to which the DotNetNuke application is related.
            </summary>
            <value>Fixed result: DotNetNuke Corporation</value>
        </member>
        <member name="P:DotNetNuke.Application.Application.CurrentVersion">
            <summary>
            Gets the version of the currently installed DotNetNuke framework/application
            Can be prior to Version, if the application is pending to be upgraded.
            </summary>
            <value>The version as retreieved from the database version table.</value>
        </member>
        <member name="P:DotNetNuke.Application.Application.Description">
            <summary>
            Gets the description of the application
            </summary>
            <value>Fixed result: DNN Platform</value>
        </member>
        <member name="P:DotNetNuke.Application.Application.HelpUrl">
            <summary>
            Gets the help URL related to the DotNetNuke application
            </summary>
            <value>Fixed result: https://www.dnnsoftware.com/docs/ </value>
        </member>
        <member name="P:DotNetNuke.Application.Application.LegalCopyright">
            <summary>
            Gets the legal copyright.
            </summary>
            <value>Dynamic: DotNetNukeï¿½ is copyright 2002-todays year by DotNetNuke Corporation"</value>
        </member>
        <member name="P:DotNetNuke.Application.Application.Name">
            <summary>
            Gets the name of the application
            </summary>
            <value>Fixed result: DNNCORP.CE</value>
        </member>
        <member name="P:DotNetNuke.Application.Application.SKU">
            <summary>
            Gets the SKU (Stock Keeping Unit)
            </summary>
            <value>Fixed result: DNN</value>
        </member>
        <member name="P:DotNetNuke.Application.Application.Status">
            <summary>
            Gets the status of the DotnetNuke application
            </summary>
            <remarks>
            If the value is not be Stable, you will see the exactly status and version in page's title if allow display beta message in host setting.
            </remarks>
            <value>
            The value can be: None, Alpha, Beta, RC, Stable
            </value>
        </member>
        <member name="P:DotNetNuke.Application.Application.Title">
            <summary>
            Gets the title of the application
            </summary>
            <value>Fixed value: DotNetNuke.</value>
        </member>
        <member name="P:DotNetNuke.Application.Application.Trademark">
            <summary>
            Gets the trademark.
            </summary>
            <value>Fixed value: DotNetNuke,DNN</value>
        </member>
        <member name="P:DotNetNuke.Application.Application.Type">
            <summary>
            Gets the type of the application
            </summary>
            <value>Fixed value: Framework</value>
        </member>
        <member name="P:DotNetNuke.Application.Application.UpgradeUrl">
            <summary>
            Gets the upgrade URL.
            </summary>
            <value>Fixed value: http://update.dotnetnuke.com </value>
        </member>
        <member name="P:DotNetNuke.Application.Application.Url">
            <summary>
            Gets the URL of the application
            </summary>
            <value>Fixed value: https://www.dnnsoftware.com </value>
        </member>
        <member name="P:DotNetNuke.Application.Application.Version">
            <summary>
            Gets the version of the DotNetNuke framework/application
            </summary>
            <value>The version as retreieved from the Executing assembly.</value>
        </member>
        <member name="M:DotNetNuke.Application.Application.ApplyToProduct(System.String)">
            <summary>
              Determine whether a product specific change is to be applied
            </summary>
            <param name = "productNames">list of product names</param>
            <returns>true if product is within list of names</returns>
            <remarks>
            </remarks>
        </member>
        <member name="T:DotNetNuke.Application.ReleaseMode">
            <summary>
            The enumeration of release mode.
            </summary>
            <value>
            <list type="bullet">
            	<item>None: Not specified for the current release.</item>
            	<item>Alpha:Alpha release is an opportunity for customers to get an early look at a particular software feature.</item>
            	<item>Beta: Beta release is a mostly completed release, 
            			At this point we will have implemented most of the major features planned for a specific release. </item>
            	<item>RC: RC release will be the Stable release if there is no major show-stopping bugs, 
            			We have gone through all the major test scenarios and are just running through a final set of regression 
            			tests and verifying the packaging.</item>
            	<item>Stable: Stable release is believed to be ready for use, 
            			remember that only stable release can be used in production environment.</item>
            </list>
            </value>
        </member>
        <member name="F:DotNetNuke.Application.ReleaseMode.None">
            <summary>
            Not asssigned
            </summary>
        </member>
        <member name="F:DotNetNuke.Application.ReleaseMode.Alpha">
            <summary>
            Alpha release
            </summary>
        </member>
        <member name="F:DotNetNuke.Application.ReleaseMode.Beta">
            <summary>
            Beta release
            </summary>
        </member>
        <member name="F:DotNetNuke.Application.ReleaseMode.RC">
            <summary>
            Release candidate
            </summary>
        </member>
        <member name="F:DotNetNuke.Application.ReleaseMode.Stable">
            <summary>
            Stable release version
            </summary>
        </member>
        <member name="T:DotNetNuke.Application.AssemblyStatusAttribute">
            <summary>
            The status of current assembly.
            </summary>
            <example>
            [assembly: AssemblyStatus(ReleaseMode.Stable)]
            </example>
        </member>
        <member name="M:DotNetNuke.Application.AssemblyStatusAttribute.#ctor(DotNetNuke.Application.ReleaseMode)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetNuke.Application.AssemblyStatusAttribute" /> class.
            </summary>
            <param name="releaseMode">The release mode.</param>
        </member>
        <member name="P:DotNetNuke.Application.AssemblyStatusAttribute.Status">
            <summary>
            Status of current assembly.
            </summary>
        </member>
        <member name="T:DotNetNuke.Application.DotNetNukeContext">
            <summary>
            Defines the context for the environment of the DotNetNuke application
            </summary>
        </member>
        <member name="M:DotNetNuke.Application.DotNetNukeContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetNuke.Application.DotNetNukeContext" /> class.
            </summary>
        </member>
        <member name="M:DotNetNuke.Application.DotNetNukeContext.#ctor(DotNetNuke.Application.Application)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetNuke.Application.DotNetNukeContext" /> class using the provided application as base.
            </summary>
            <param name="application">The application.</param>
        </member>
        <member name="P:DotNetNuke.Application.DotNetNukeContext.Application">
            <summary>
            Get the application.
            </summary>
        </member>
        <member name="P:DotNetNuke.Application.DotNetNukeContext.ContainerEventListeners">
            <summary>
            Gets the container event listeners. The listeners will be called in each life cycle of load container.
            </summary>
            <see cref="T:DotNetNuke.UI.Containers.EventListeners.ContainerEventListener"/>
            <seealso cref="M:DotNetNuke.UI.Containers.Container.OnInit(System.EventArgs)"/>
            <seealso cref="M:DotNetNuke.UI.Containers.Container.OnLoad(System.EventArgs)"/>
            <seealso cref="M:DotNetNuke.UI.Containers.Container.OnPreRender(System.EventArgs)"/>
            <seealso cref="M:DotNetNuke.UI.Containers.Container.OnUnload(System.EventArgs)"/>
        </member>
        <member name="P:DotNetNuke.Application.DotNetNukeContext.SkinEventListeners">
            <summary>
            Gets the skin event listeners. The listeners will be called in each life cycle of load skin.
            </summary>
            <see cref="T:DotNetNuke.UI.Skins.EventListeners.SkinEventListener"/>
            <seealso cref="M:DotNetNuke.UI.Skins.Skin.OnInit(System.EventArgs)"/>
            <seealso cref="M:DotNetNuke.UI.Skins.Skin.OnLoad(System.EventArgs)"/>
            <seealso cref="M:DotNetNuke.UI.Skins.Skin.OnPreRender(System.EventArgs)"/>
            <seealso cref="M:DotNetNuke.UI.Skins.Skin.OnUnload(System.EventArgs)"/>
        </member>
        <member name="P:DotNetNuke.Application.DotNetNukeContext.Current">
            <summary>
            Gets or sets the current app context.
            </summary>
        </member>
        <member name="T:DotNetNuke.Common.Utilities.CryptographyUtils">
            -----------------------------------------------------------------------------
            Namespace:  DotNetNuke.Common.Utilities
            Project:    DotNetNuke
            Class:      CryptographyUtils
            -----------------------------------------------------------------------------
            <summary>
            CryptographyUtils is a Utility class that provides Cryptography Utility constants
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.RegexUtils.GetCachedRegex(System.String,System.Text.RegularExpressions.RegexOptions,System.Int32)">
            <summary>
            Creates and caches a Regex object for later use and retrieves it in a later call if it is cacehd
            </summary>
        </member>
        <member name="T:DotNetNuke.Common.Utilities.CacheItemArgs">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Common.Utilities
            Class:      CacheItemArgs
            -----------------------------------------------------------------------------
            <summary>
            The CacheItemArgs class provides an EventArgs implementation for the
            CacheItemExpiredCallback delegate
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.CacheItemArgs.#ctor(System.String)">
            -----------------------------------------------------------------------------
             <summary>
             Constructs a new CacheItemArgs Object
             </summary>
             <param name="key"></param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.CacheItemArgs.#ctor(System.String,System.Int32)">
            -----------------------------------------------------------------------------
             <summary>
             Constructs a new CacheItemArgs Object
             </summary>
             <param name="key"></param>
             <param name="timeout"></param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.CacheItemArgs.#ctor(System.String,System.Web.Caching.CacheItemPriority)">
            -----------------------------------------------------------------------------
             <summary>
             Constructs a new CacheItemArgs Object
             </summary>
             <param name="key"></param>
             <param name="priority"></param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.CacheItemArgs.#ctor(System.String,System.Int32,System.Web.Caching.CacheItemPriority)">
            -----------------------------------------------------------------------------
             <summary>
             Constructs a new CacheItemArgs Object
             </summary>
             <param name="key"></param>
             <param name="timeout"></param>
             <param name="priority"></param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.CacheItemArgs.#ctor(System.String,System.Int32,System.Web.Caching.CacheItemPriority,System.Object[])">
            -----------------------------------------------------------------------------
             <summary>
             Constructs a new CacheItemArgs Object
             </summary>
             <param name="key"></param>
             <param name="timeout"></param>
             <param name="priority"></param>
             <param name="parameters"></param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Common.Utilities.CacheItemArgs.CacheCallback">
            -----------------------------------------------------------------------------
             <summary>
             Gets and sets the Cache Item's CacheItemRemovedCallback delegate
             </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Common.Utilities.CacheItemArgs.CacheDependency">
            -----------------------------------------------------------------------------
             <summary>
             Gets and sets the Cache Item's CacheDependency
             </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Common.Utilities.CacheItemArgs.CacheKey">
            -----------------------------------------------------------------------------
             <summary>
             Gets the Cache Item's Key
             </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Common.Utilities.CacheItemArgs.CachePriority">
            -----------------------------------------------------------------------------
             <summary>
             Gets the Cache Item's priority (defaults to Default)
             </summary>
             <remarks>Note: DotNetNuke currently doesn't support the ASP.NET Cache's
             ItemPriority, but this is included for possible future use. </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Common.Utilities.CacheItemArgs.CacheTimeOut">
            -----------------------------------------------------------------------------
             <summary>
             Gets the Cache Item's Timeout
             </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Common.Utilities.CacheItemArgs.ParamList">
            -----------------------------------------------------------------------------
             <summary>
             Gets the Cache Item's Parameter List
             </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Common.Utilities.CacheItemArgs.Params">
            -----------------------------------------------------------------------------
             <summary>
             Gets the Cache Item's Parameter Array
             </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Common.Utilities.CacheItemExpiredCallback">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Common.Utilities
            Class:      CacheItemExpiredCallback
            -----------------------------------------------------------------------------
            <summary>
            The CacheItemExpiredCallback delegate defines a callback method that notifies
            the application when a CacheItem is Expired (when an attempt is made to get the item)
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.Calendar.InvokePopupCal(System.Web.UI.WebControls.TextBox)">
            -----------------------------------------------------------------------------
            <summary>
            Opens a popup Calendar
            </summary>
            <param name="Field">TextBox to return the date value</param>
            <returns></returns>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Common.Utilities.CBO">
            <summary>
            The CBO class generates objects.
            </summary>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.CBO.CloneObject(System.Object)">
            -----------------------------------------------------------------------------
            <summary>
            CloneObject clones an object
            </summary>
            <param name="objObject">The Object to Clone</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.CBO.CreateObject``1(System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            CreateObject creates a new object of Type TObject.
            </summary>
            <typeparam name="TObject">The type of object to create.</typeparam>
            <param name="initialise">A flag that indicates whether to initialise the
            object.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.CBO.FillCollection(System.Data.IDataReader,System.Type)">
            -----------------------------------------------------------------------------
            <summary>
            FillCollection fills a Collection of objects from a DataReader
            </summary>
            <param name="dr">The Data Reader</param>
            <param name="objType">The type of the Object</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.CBO.FillCollection(System.Data.IDataReader,System.Type,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            FillCollection fills a Collection of objects from a DataReader
            </summary>
            <param name="dr">The Data Reader</param>
            <param name="objType">The type of the Object</param>
            <param name="closeReader">Flag that indicates whether the Data Reader should be closed.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.CBO.FillCollection(System.Data.IDataReader,System.Type,System.Collections.IList@)">
            -----------------------------------------------------------------------------
            <summary>
            FillCollection fills a Collection of objects from a DataReader
            </summary>
            <param name="dr">The Data Reader</param>
            <param name="objType">The type of the Object</param>
            <param name="objToFill">An IList to fill</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.CBO.FillCollection``1(System.Data.IDataReader)">
            -----------------------------------------------------------------------------
            <summary>
            FillCollection fills a Collection of objects from a DataReader
            </summary>
            <typeparam name="TItem">The type of object</typeparam>
            <param name="dr">The Data Reader</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.CBO.FillCollection``1(System.Data.IDataReader,System.Collections.Generic.IList{``0}@)">
            -----------------------------------------------------------------------------
            <summary>
            FillCollection fills a Collection of objects from a DataReader
            </summary>
            <typeparam name="TItem">The type of object</typeparam>
            <param name="objToFill">The List to fill</param>
            <param name="dr">The Data Reader</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.CBO.FillCollection``1(System.Data.IDataReader,System.Collections.Generic.IList{``0},System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            FillCollection fills a List of objects from a DataReader
            </summary>
            <typeparam name="TItem">The type of the Object</typeparam>
            <param name="objToFill">The List to fill</param>
            <param name="dr">The Data Reader</param>
            <param name="closeReader">A flag that indicates whether the DataReader should be closed</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.CBO.FillCollection(System.Data.IDataReader,System.Type@,System.Int32@)">
            -----------------------------------------------------------------------------
            <summary>
            Generic version of FillCollection fills a List custom business object of a specified type 
            from the supplied DataReader
            </summary>
            <param name="dr">The IDataReader to use to fill the object</param>
            <param name="objType">The type of the Object</param>
            <param name="totalRecords">The total No of records</param>
            <returns>A List of custom business objects</returns>
            <remarks></remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.CBO.FillCollection``1(System.Data.IDataReader,System.Int32@)">
            -----------------------------------------------------------------------------
            <summary>
            Generic version of FillCollection fills a List custom business object of a specified type 
            from the supplied DataReader
            </summary>
            <typeparam name="T">The type of the business object</typeparam>
            <param name="dr">The IDataReader to use to fill the object</param>
            <param name="totalRecords"></param>
            <returns>A List of custom business objects</returns>
            <remarks></remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.CBO.FillDictionary``2(System.String,System.Data.IDataReader)">
            <summary>
            FillDictionary fills a Dictionary of objects from a DataReader
            </summary>
            <typeparam name="TKey">The key for the Dictionary</typeparam>
            <typeparam name="TValue">The value for the Dictionary Item</typeparam>
            <param name="keyField">The key field used for the Key</param>
            <param name="dr">The Data Reader</param>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.CBO.FillDictionary``2(System.String,System.Data.IDataReader,System.Boolean)">
            <summary>
            FillDictionary fills a Dictionary of objects from a DataReader
            </summary>
            <typeparam name="TKey">The key for the Dictionary</typeparam>
            <typeparam name="TValue">The value for the Dictionary Item</typeparam>
            <param name="keyField">The key field used for the Key</param>
            <param name="dr">The Data Reader</param>
            <param name="closeReader">A flag indicating whether to close the reader.</param>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.CBO.FillDictionary``2(System.String,System.Data.IDataReader,System.Collections.Generic.IDictionary{``0,``1})">
            -----------------------------------------------------------------------------
            <summary>
            FillDictionary fills a Dictionary of objects from a DataReader
            </summary>
            <typeparam name="TKey">The key for the Dictionary</typeparam>
            <typeparam name="TValue">The value for the Dictionary Item</typeparam>
            <param name="keyField">The key field used for the Key</param>
            <param name="objDictionary">The Dictionary to fill</param>
            <param name="dr">The Data Reader</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.CBO.FillObject``1(System.Data.IDataReader)">
            -----------------------------------------------------------------------------
            <summary>
            FillObject fills an object from a DataReader
            </summary>
            <typeparam name="TObject">The type of the object</typeparam>
            <param name="dr">The Data Reader</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.CBO.FillObject``1(System.Data.IDataReader,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            FillObject fills an object from a DataReader
            </summary>
            <typeparam name="TObject">The type of the object</typeparam>
            <param name="dr">The Data Reader</param>
            <param name="closeReader">A flag that indicates the reader should be closed</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.CBO.FillSortedList``2(System.String,System.Data.IDataReader)">
            -----------------------------------------------------------------------------
            <summary>
            FillSortedList fills a SortedList of objects from a DataReader
            </summary>
            <typeparam name="TKey">The key for the SortedList</typeparam>
            <typeparam name="TValue">The value for the SortedList Item</typeparam>
            <param name="keyField">The key field used for the Key</param>
            <param name="dr">The Data Reader</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.CBO.SerializeSettings(System.Collections.IDictionary,System.Xml.XmlDocument,System.String,System.String)">
            <summary>
              Iterates items in a IDictionary object and generates XML nodes
            </summary>
            <param name = "dictionary">The IDictionary to iterate</param>
            <param name = "document">The XML document the node should be added to</param>
            <param name="targetPath">Path at which to serialize settings</param>
            <param name = "elementName">The name of the new element created</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.CBO.GetCachedObject``1(DotNetNuke.Common.Utilities.CacheItemArgs,DotNetNuke.Common.Utilities.CacheItemExpiredCallback)">
            -----------------------------------------------------------------------------
            <summary>
            GetCachedObject gets an object from the Cache
            </summary>
            <typeparam name="TObject">The type of th object to fetch</typeparam>
            <param name="cacheItemArgs">A CacheItemArgs object that provides parameters to manage the
            cache AND to fetch the item if the cache has expired</param>
            <param name="cacheItemExpired">A CacheItemExpiredCallback delegate that is used to repopulate
            the cache if the item has expired</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.CBO.GetProperties``1">
            -----------------------------------------------------------------------------
            <summary>
            GetProperties gets a Dictionary of the Properties for an object
            </summary>
            <typeparam name="TObject">The type of the object</typeparam>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.CBO.GetProperties(System.Type)">
            -----------------------------------------------------------------------------
            <summary>
            GetProperties gets a Dictionary of the Properties for an object
            </summary>
            <param name="objType">The type of the object</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.CBO.InitializeObject(System.Object)">
            -----------------------------------------------------------------------------
            <summary>
            InitializeObject initialises all the properties of an object to their 
            Null Values.
            </summary>
            <param name="objObject">The object to Initialise</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.CBO.InitializeObject(System.Object,System.Type)">
            -----------------------------------------------------------------------------
            <summary>
            InitializeObject initialises all the properties of an object to their 
            Null Values.
            </summary>
            <param name="objObject">The object to Initialise</param>
            <param name="objType">The type of the object</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.CBO.SerializeObject(System.Object,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            SerializeObject serializes an Object
            </summary>
            <param name="objObject">The object to Initialise</param>
            <param name="fileName">A filename for the resulting serialized xml</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.CBO.SerializeObject(System.Object,System.Xml.XmlDocument)">
            -----------------------------------------------------------------------------
            <summary>
            SerializeObject serializes an Object
            </summary>
            <param name="objObject">The object to Initialise</param>
            <param name="document">An XmlDocument to serialize to</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.CBO.SerializeObject(System.Object,System.IO.Stream)">
            -----------------------------------------------------------------------------
            <summary>
            SerializeObject serializes an Object
            </summary>
            <param name="objObject">The object to Initialise</param>
            <param name="stream">A Stream to serialize to</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.CBO.SerializeObject(System.Object,System.IO.TextWriter)">
            -----------------------------------------------------------------------------
            <summary>
            SerializeObject serializes an Object
            </summary>
            <param name="objObject">The object to Initialise</param>
            <param name="textWriter">A TextWriter to serialize to</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.CBO.SerializeObject(System.Object,System.Xml.XmlWriter)">
            -----------------------------------------------------------------------------
            <summary>
            SerializeObject serializes an Object
            </summary>
            <param name="objObject">The object to Initialise</param>
            <param name="writer">An XmlWriter to serialize to</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Common.Utilities.Config">
            -----------------------------------------------------------------------------
            <summary>
            The Config class provides access to the web.config file
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.Config.AddAppSetting(System.Xml.XmlDocument,System.String,System.String,System.Boolean)">
            <summary>
            Adds a new AppSetting to Web.Config. The update parameter allows you to define if,
            when the key already exists, this need to be updated or not
            </summary>
            <param name="xmlDoc">xml representation of the web.config file</param>
            <param name="key">key to be created</param>
            <param name="value">value to be created</param>
            <param name="update">If setting already exists, it will be updated if this parameter true</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.Config.AddAppSetting(System.Xml.XmlDocument,System.String,System.String)">
            <summary>
            Adds a new AppSetting to Web.Config. If the key already exists, it will be updated with the new value
            </summary>
            <param name="xmlDoc">xml representation of the web.config file</param>
            <param name="key">key to be created</param>
            <param name="value">value to be created</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.Config.GetConnectionString">
            -----------------------------------------------------------------------------
            <summary>
            Gets the default connection String as specified in the provider.
            </summary>
            <returns>The connection String</returns>
            <remarks></remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.Config.GetConnectionString(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the specified connection String
            </summary>
            <param name="name">Name of Connection String to return</param>
            <returns>The connection String</returns>
            <remarks></remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.Config.GetDecryptionkey">
            -----------------------------------------------------------------------------
            <summary>
              Returns the decryptionkey from webconfig machinekey
            </summary>
            <returns>decryption key</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.Config.GetFcnMode">
            -----------------------------------------------------------------------------
            <summary>
              Returns the fcnMode from webconfig httpRuntime
            </summary>
            <returns>decryption key</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.Config.GetMaxUploadSize">
            -----------------------------------------------------------------------------
            <summary>
              Returns the maximum file size allowed to be uploaded to the application in bytes
            </summary>
            <returns>Size in bytes</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.Config.GetRequestFilterSize">
            -----------------------------------------------------------------------------
            <summary>
              Returns the maximum file size allowed to be uploaded based on the request filter limit
            </summary>
            <returns>Size in megabytes</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.Config.SetMaxUploadSize(System.Int64)">
            -----------------------------------------------------------------------------
            <summary>
              Sets the maximum file size allowed to be uploaded to the application in bytes
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.Config.GetUpgradeConnectionString">
            -----------------------------------------------------------------------------
            <summary>
            Gets the specified upgrade connection string
            </summary>
            <returns>The connection String</returns>
            <remarks></remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.Config.GetDataBaseOwner">
            -----------------------------------------------------------------------------
            <summary>
            Gets the specified database owner
            </summary>
            <returns>The database owner</returns>
            <remarks></remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.Config.GetObjectQualifer">
            -----------------------------------------------------------------------------
            <summary>
            Gets the specified object qualifier
            </summary>
            <returns>The object qualifier</returns>
            <remarks></remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.Config.GetPersistentCookieTimeout">
            <summary>
              Get's optional persistent cookie timeout value from web.config
            </summary>
            <returns>persistent cookie value</returns>
            <remarks>
              allows users to override default asp.net values
            </remarks>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.Config.GetProviderPath(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the specified provider path
            </summary>
            <returns>The provider path</returns>
            <remarks></remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.Config.UpdateUpgradeConnectionString(System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Updates the specified upgrade connection string
            </summary>
            <remarks></remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.Config.GetPathToFile(DotNetNuke.Common.Utilities.Config.ConfigFileType)">
            <summary>
              Gets the path for the specificed Config file
            </summary>
            <param name = "file">The config.file to get the path for</param>
            <returns>fully qualified path to the file</returns>
            <remarks>
              Will copy the file from the template directory as requried
            </remarks>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.Config.GetPathToFile(DotNetNuke.Common.Utilities.Config.ConfigFileType,System.Boolean)">
            <summary>
              Gets the path for the specificed Config file
            </summary>
            <param name = "file">The config.file to get the path for</param>
            <param name = "overwrite">force an overwrite of the config file</param>
            <returns>fully qualified path to the file</returns>
            <remarks>
              Will copy the file from the template directory as requried
            </remarks>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.Config.UpdateInstallVersion(System.Version)">
            <summary>
            UpdateInstallVersion, but only if the setting does not already exist
            </summary>
            <returns></returns>
        </member>
        <member name="T:DotNetNuke.Common.Utilities.DataCache">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Common.Utilities
            Class:      DataCache
            -----------------------------------------------------------------------------
            <summary>
            The DataCache class is a facade class for the CachingProvider Instance's
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Common.Utilities.DateUtils">
            <summary>
            Provides utility methods to work with Dates
            </summary>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.DateUtils.GetDatabaseTime">
            <summary>
            Gets the database time.
            </summary>
            <returns>Date/time of the database in UTC</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.DateUtils.GetDatabaseDateTimeOffset">
            <summary>
            Gets DateTime Offset of current DB 
            </summary>
            <returns>DateTimeOffset object</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.DateUtils.GetDatabaseUtcTime">
            <summary>
            Gets the database server's time in UTC.
            </summary>
            <returns>Date/time of the database in UTC</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.DateUtils.GetDatabaseLocalTime">
            <summary>
            Gets the database server's local time of the DB server and not the web server's local time.
            </summary>
            <returns>Date/time of the database in UTC</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.DateUtils.CalculateDateForDisplay(System.DateTime)">
            <summary>
            Returns a string with the pretty printed amount of time since the specified date.
            </summary>
            <param name="date">DateTime in UTC</param>
            <returns>String representing the required date for display</returns>
        </member>
        <member name="T:DotNetNuke.Common.Utilities.EnumExtensions">
            <summary>
            Extensions for enumeration of KeyValue Paire
            </summary>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.EnumExtensions.ToKeyValuePairs(System.Enum)">
            <summary>
            To the key value pairs.
            </summary>
            <param name="enumType">Type of the enum defined by GetType.</param>
            <returns>A list of Key Value pairs</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.FileExtensionWhitelist.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FileExtensionWhiteList class.
            </summary>
            <param name="extensionList">a comma seperated list of file extensions with no '.'</param>
            <remarks><paramref name="extensionList"/>should match the format used in the FileExtensions Host setting specifically it
            should not have an '.' in the extensions (e.g. txt,jpg,png,doc)</remarks>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.FileExtensionWhitelist.ToDisplayString">
            <summary>
            Returns a string suitale for display to an end user
            </summary>
            <returns>A String of the whitelist extensions formatted for display to an end user</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.FileExtensionWhitelist.ToDisplayString(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Formats the extension whitelist appropriate for display to an end user
            </summary>
            <param name="additionalExtensions">A list of additionalExtensions to add to the current extensions</param>
            <remarks><paramref name="additionalExtensions"/>case and '.' prefix will be corrected, and duplicates will be excluded from the string</remarks>
            <returns>A String of the whitelist extensions formatted for storage display to an end user</returns>
        </member>
        <member name="P:DotNetNuke.Common.Utilities.FileExtensionWhitelist.AllowedExtensions">
            <summary>
            The list of extensions in the whitelist.
            </summary>
            <remarks>All extensions are lowercase and prefixed with a '.'</remarks>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.FileExtensionWhitelist.IsAllowedExtension(System.String)">
            <summary>
            Indicates if the file extension is permitted by the Host Whitelist
            </summary>
            <param name="extension">The file extension with or without preceding '.'</param>
            <returns>True if extension is in whitelist or whitelist is empty.  False otherwise.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.FileExtensionWhitelist.IsAllowedExtension(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Indicates if the file extension is permitted by the Host Whitelist
            </summary>
            <param name="extension">The file extension with or without preceding '.'</param>
            <param name="additionalExtensions"></param>
            <returns>True if extension is in whitelist or whitelist is empty.  False otherwise.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.FileExtensionWhitelist.ToStorageString">
            <summary>
            Formats the extension whitelist appropriate for storage in the Host setting
            </summary>
            <returns>A String of the whitelist extensions formatted for storage as a Host setting</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.FileExtensionWhitelist.ToStorageString(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Formats the extension whitelist appropriate for storage in the Host setting
            </summary>
            <param name="additionalExtensions">A list of additionalExtensions to add to the current extensions</param>
            <remarks><paramref name="additionalExtensions"/>case and '.' prefix will be corrected, and duplicates will be excluded from the string</remarks>
            <returns>A String of the whitelist extensions formatted for storage as a Host setting</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.GetFileName(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the filename for a file path
            </summary>
            <param name="filePath">The full name of the file</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.WriteStream(System.Web.HttpResponse,System.IO.Stream)">
            -----------------------------------------------------------------------------
            <summary>
            Writes a Stream to the appropriate File Storage
            </summary>
            <param name="objResponse">The Id of the File</param>
            <param name="objStream">The Input Stream</param>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.AddToZip(ICSharpCode.SharpZipLib.Zip.ZipOutputStream@,System.String,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Adds a File to a Zip File
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.CopyFile(System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Tries to copy a file in the file system
            </summary>
            <param name="sourceFileName">The name of the source file</param>
            <param name="destFileName">The name of the destination file</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.DeleteFileWithWait(System.String,System.Int16,System.Int16)">
            -----------------------------------------------------------------------------
            <summary>
            Deletes file in areas with a high degree of concurrent file access (i.e. caching, logging) 
            This solves file concurrency issues under heavy load.
            </summary>
            <param name="fileName">String</param>
            <param name="waitInMilliseconds">Int16</param>
            <param name="maxAttempts">Int16</param>
            <returns>Boolean</returns>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.FileSystemUtils.DeleteFile(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Tries to delete a file from the file system
            </summary>
            <param name="fileName">The name of the file</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Common.Utilities.HtmlUtils">
            -----------------------------------------------------------------------------
            Namespace:  DotNetNuke.Common.Utilities
            Project:    DotNetNuke
            Class:      HtmlUtils
            -----------------------------------------------------------------------------
            <summary>
            HtmlUtils is a Utility class that provides Html Utility methods
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.HtmlUtils.Clean(System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            Clean removes any HTML Tags, Entities (and optionally any punctuation) from
            a string
            </summary>
            <remarks>
            Encoded Tags are getting decoded, as they are part of the content!
            </remarks>
            <param name="HTML">The Html to clean</param>
            <param name="RemovePunctuation">A flag indicating whether to remove punctuation</param>
            <returns>The cleaned up string</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.HtmlUtils.CleanWithTagInfo(System.String,System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
              CleanWithTagInfo removes unspecified HTML Tags, Entities (and optionally any punctuation) from a string.
            </summary>
            <param name = "html"></param>
            <param name="tagsFilter"></param>
            <param name = "removePunctuation"></param>
            <returns>The cleaned up string</returns>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.HtmlUtils.FormatEmail(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Formats an Email address
            </summary>
            <param name="Email">The email address to format</param>
            <returns>The formatted email address</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.HtmlUtils.FormatEmail(System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            Formats an Email address
            </summary>
            <param name="Email">The email address to format</param>
            <param name="cloak">A flag that indicates whether the text should be cloaked</param>
            <returns>The formatted email address</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.HtmlUtils.FormatText(System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            FormatText replaces <br/> tags by LineFeed characters
            </summary>
            <remarks>
            </remarks>
            <param name="HTML">The HTML content to clean up</param>
            <param name="RetainSpace">Whether ratain Space</param>
            <returns>The cleaned up string</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.HtmlUtils.ConvertToHtml(System.String)">
            -----------------------------------------------------------------------------
            <summary>
              Formats String as Html by replacing linefeeds by <br />
            </summary>
            <remarks>
            </remarks>
            <param name = "strText">Text to format</param>
            <returns>The formatted html</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.HtmlUtils.ConvertToText(System.String)">
            -----------------------------------------------------------------------------
            <summary>
              Formats Html as text by removing <br /> tags and replacing by linefeeds
            </summary>
            <remarks>
            </remarks>
            <param name = "strHtml">Html to format</param>
            <returns>The formatted text</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.HtmlUtils.FormatWebsite(System.Object)">
            -----------------------------------------------------------------------------
            <summary>
            Format a domain name including link
            </summary>
            <param name="Website">The domain name to format</param>
            <returns>The formatted domain name</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.HtmlUtils.Shorten(System.String,System.Int32,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Shorten returns the first (x) characters of a string
            </summary>
            <remarks>
            </remarks>
            <param name="txt">The text to reduces</param>
            <param name="length">The max number of characters to return</param>
            <param name="suffix">An optional suffic to append to the shortened string</param>
            <returns>The shortened string</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.HtmlUtils.StripEntities(System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            StripEntities removes the HTML Entities from the content
            </summary>
            <remarks>
            </remarks>
            <param name="HTML">The HTML content to clean up</param>
            <param name="RetainSpace">Indicates whether to replace the Entity by a space (true) or nothing (false)</param>
            <returns>The cleaned up string</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.HtmlUtils.ContainsEntity(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Checks whether the string contains any HTML Entity or not
            </summary>
            <remarks>
            </remarks>
            <param name="html">The HTML content to clean up</param>
            <returns>True if the string contains any entity</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.HtmlUtils.IsUrlEncoded(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Checks whether the string contains any URL encoded entity or not
            </summary>
            <param name="text">The string check</param>
            <returns>True if the string contains any URL encoded entity</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.HtmlUtils.RemoveInlineStyle(System.String)">
            <summary>
            Removes Inline CSS Styles
            </summary>
            <param name="HTML">The HTML content to clean up</param>
            <returns>The cleaned up string</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.HtmlUtils.StripTags(System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            StripTags removes the HTML Tags from the content
            </summary>
            <remarks>
            </remarks>
            <param name="HTML">The HTML content to clean up</param>
            <param name="RetainSpace">Indicates whether to replace the Tag by a space (true) or nothing (false)</param>
            <returns>The cleaned up string</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.HtmlUtils.StripUnspecifiedTags(System.String,System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
              StripUnspecifiedTags removes the HTML tags from the content -- leaving behind the info 
              for the specified HTML tags.
            </summary>
            <param name = "html"></param>
            <param name="specifiedTags"></param>
            <param name = "retainSpace"></param>
            <returns>The cleaned up string</returns>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.HtmlUtils.StripPunctuation(System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            StripPunctuation removes the Punctuation from the content
            </summary>
            <remarks>
            </remarks>
            <param name="HTML">The HTML content to clean up</param>
            <param name="RetainSpace">Indicates whether to replace the Punctuation by a space (true) or nothing (false)</param>
            <returns>The cleaned up string</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.HtmlUtils.StripWhiteSpace(System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            StripWhiteSpace removes the WhiteSpace from the content
            </summary>
            <remarks>
            </remarks>
            <param name="HTML">The HTML content to clean up</param>
            <param name="RetainSpace">Indicates whether to replace the WhiteSpace by a space (true) or nothing (false)</param>
            <returns>The cleaned up string</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.HtmlUtils.StripNonWord(System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            StripNonWord removes any Non-Word Character from the content
            </summary>
            <remarks>
            </remarks>
            <param name="HTML">The HTML content to clean up</param>
            <param name="RetainSpace">Indicates whether to replace the Non-Word Character by a space (true) or nothing (false)</param>
            <returns>The cleaned up string</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.HtmlUtils.IsHtml(System.String)">
            <summary>
              Determines wether or not the passed in string contains any HTML tags
            </summary>
            <param name = "text">Text to be inspected</param>
            <returns>True for HTML and False for plain text</returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.HtmlUtils.WriteError(System.Web.HttpResponse,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            WriteError outputs an Error Message during Install/Upgrade etc
            </summary>
            <remarks>
            </remarks>
            <param name="response">The ASP.Net Response object</param>
            <param name="file">The filename where the Error Occurred</param>
            <param name="message">The error message</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.HtmlUtils.WriteFeedback(System.Web.HttpResponse,System.Int32,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            WriteFeedback outputs a Feedback Line during Install/Upgrade etc
            </summary>
            <remarks>
            </remarks>
            <param name="response">The ASP.Net Response object</param>
            <param name="indent">The indent for this feedback message</param>
            <param name="message">The feedback message</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.HtmlUtils.WriteFeedback(System.Web.HttpResponse,System.Int32,System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            WriteFeedback outputs a Feedback Line during Install/Upgrade etc
            </summary>
            <remarks>
            </remarks>
            <param name="response">The ASP.Net Response object</param>
            <param name="indent">The indent for this feedback message</param>
            <param name="message">The feedback message</param>
            <param name="showtime">Show the timespan before the message</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.HtmlUtils.WriteKeepAlive">
            <summary>
            This method adds an empty char to the response stream to avoid closing http connection on long running tasks
            </summary>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.HtmlUtils.WriteFooter(System.Web.HttpResponse)">
            -----------------------------------------------------------------------------
            <summary>
            WriteFooter outputs the Footer during Install/Upgrade etc
            </summary>
            <remarks>
            </remarks>
            <param name="response">The ASP.Net Response object</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.HtmlUtils.WriteHeader(System.Web.HttpResponse,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            WriteHeader outputs the Header during Install/Upgrade etc
            </summary>
            <remarks>
            </remarks>
            <param name="response">The ASP.Net Response object</param>
            <param name="mode">The mode Install/Upgrade etc</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.HtmlUtils.AbsoluteToRelativeUrls(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Searches the provided html for absolute hrefs that match the provided aliases and converts them to relative urls
            </summary>
            <param name="html">The input html</param>
            <param name="aliases">a list of aliases that should be made into relative urls</param>
            <returns>html string</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.IJavaScriptUtils.RegisterJavascriptVariable(System.String,System.Object,System.Web.UI.Page,System.Type)">
            <summary>
            Registers a javascript variable in a page with its value
            </summary>
            <param name="variableName">Variable name and also the name of the registered code</param>
            <param name="value">Object to be assigned to the variable</param>
            <param name="page">Page where the varialbe will be registered</param>
            <param name="type">Type</param>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.ImageUtils.GetHeight(System.String)">
            <summary>
            return height of image
            </summary>
            <param name="sPath">file path of image</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.ImageUtils.GetWidth(System.String)">
            <summary>
            return width of image
            </summary>
            <param name="sPath">file path of image</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.ImageUtils.GetHeightFromStream(System.IO.Stream)">
            <summary>
            return height of image
            </summary>
            <param name="sFile">Stream of image</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.ImageUtils.GetWidthFromStream(System.IO.Stream)">
            <summary>
            width of image
            </summary>
            <param name="sFile">Steam of image</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.ImageUtils.CreateImage(System.String)">
            <summary>
            create an image
            </summary>
            <param name="sFile">path of load image file - will be resized according to height and width set</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.ImageUtils.CreateImage(System.String,System.Int32,System.Int32)">
            <summary>
            create an image
            </summary>
            <param name="sFile">path of image file</param>
            <param name="intHeight">height</param>
            <param name="intWidth">width</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.ImageUtils.CreateJPG(System.String,System.Drawing.Bitmap,System.Int32)">
            <summary>
            create a JPG image
            </summary>
            <param name="sFile">name of image</param>
            <param name="img">bitmap of image</param>
            <param name="compressionLevel">image quality</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.ImageUtils.CreateImageForDB(System.IO.Stream,System.Int32,System.Int32)">
            <summary>
            create an image based on a stream (read from a database)
            </summary>
            <param name="sFile">image name</param>
            <param name="intHeight">height</param>
            <param name="intWidth">width</param>
            <returns>steam</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.ImageUtils.GetEncoderInfo(System.String)">
            <summary>
            return the approriate encoded for the mime-type of the image being created
            </summary>
            <param name="myMimeType">mime type (e.g jpg/png)</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.ImageUtils.NewImageSize(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            scale an image based on existing dimensions and updated requirement
            </summary>
            <param name="currentWidth">current width</param>
            <param name="currentHeight">current height</param>
            <param name="newWidth">new width</param>
            <param name="newHeight">new height</param>
            <returns>updated calculated height/width minesions</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.IPathUtils.AddTrailingSlash(System.String)">
            <summary>
            Adds backslash to the specified source.
            </summary>
            <param name="source">The source string to be modified.</param>
            <returns>The original string plus a backslash.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.IPathUtils.FormatFolderPath(System.String)">
            <summary>
            Formats the provided folder path by adding a slash if needed.
            </summary>
            <param name="folderPath">The folder path to format.</param>
            <returns>The formatted path.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.IPathUtils.GetPhysicalPath(System.Int32,System.String)">
            <summary>
            Gets the physical path for the specified relative path.
            </summary>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.IPathUtils.GetRelativePath(System.Int32,System.String)">
            <summary>
            Gets the relative path for the specified physical path.
            </summary>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.IPathUtils.GetRootFolderMapPath(System.Int32)">
            <summary>
            Gets the physical root folder path for the specified portal
            </summary>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.IPathUtils.GetUserFolderPathElement(System.Int32,DotNetNuke.Common.Utilities.PathUtils.UserFolderElement)">
            <summary>
            Get elements from the user folder path.
            </summary>
            <param name="userID">The user identifier.</param>
            <param name="mode">The UserFolderElement to get.</param>
            <returns>The element from the user folder path.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.IPathUtils.IsDefaultProtectedPath(System.String)">
            <summary>
            Checks if a folder is a default protected folder.
            </summary>
            <param name="folderPath">The folder path.</param>
            <returns>True if the folderPath is a default protected folder. False otherwise.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.IPathUtils.MapPath(System.String)">
            <summary>
            The MapPath method maps the specified relative or virtual path to the corresponding physical directory on the server.
            </summary>
            <param name="path">Specifies the relative or virtual path to map to a physical directory. If Path starts with either 
            a forward (/) or backward slash (\), the MapPath method returns a path as if Path were a full, virtual path. If Path 
            doesn't start with a slash, the MapPath method returns a path relative to the directory of the .asp file being processed</param>
            <returns></returns>
            <remarks>
            If path is a null reference (Nothing in Visual Basic), then the MapPath method returns the full physical path 
            of the directory that contains the current application
            </remarks>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.IPathUtils.RemoveTrailingSlash(System.String)">
            <summary>
            Removes the trailing slash or backslash from the specified source.
            </summary>
            <param name="source">The source string to be modified.</param>
            <returns>The original string minus the trailing slash.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.IPathUtils.StripFolderPath(System.String)">
            <summary>
            Strips the original path by removing starting 0 or 0\\.
            </summary>
            <param name="originalPath">The original path.</param>
            <returns>The stripped path.</returns>
        </member>
        <member name="T:DotNetNuke.Common.Utilities.ObjectMappingInfo">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Common.Utilities
            Class:      ObjectMappingInfo
            -----------------------------------------------------------------------------
            <summary>
            The ObjectMappingInfo class is a helper class that holds the mapping information
            for a particular type.  This information is in two parts:
                - Information about the Database Table that the object is mapped to
                - Information about how the object is cached.
            For each object, when it is first accessed, reflection is used on the class and
            an instance of ObjectMappingInfo is created, which is cached for performance.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.ObjectMappingInfo.#ctor">
            -----------------------------------------------------------------------------
             <summary>
             Constructs a new ObjectMappingInfo Object
             </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Common.Utilities.ObjectMappingInfo.CacheKey">
            -----------------------------------------------------------------------------
            <summary>
            CacheKey gets the root value of the key used to identify the cached collection 
            in the ASP.NET Cache.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Common.Utilities.ObjectMappingInfo.CacheByProperty">
            -----------------------------------------------------------------------------
            <summary>
            CacheByProperty gets and sets the property that is used to cache collections
            of the object.  For example: Modules are cached by the "TabId" proeprty.  Tabs 
            are cached by the PortalId property.
            </summary>
            <remarks>If empty, a collection of all the instances of the object is cached.</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Common.Utilities.ObjectMappingInfo.CacheTimeOutMultiplier">
            -----------------------------------------------------------------------------
            <summary>
            CacheTimeOutMultiplier gets and sets the multiplier used to determine how long
            the cached collection should be cached.  It is multiplied by the Performance
            Setting - which in turn can be modified by the Host Account.
            </summary>
            <remarks>Defaults to 20.</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Common.Utilities.ObjectMappingInfo.ColumnNames">
            -----------------------------------------------------------------------------
            <summary>
            ColumnNames gets a dictionary of Database Column Names for the Object
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Common.Utilities.ObjectMappingInfo.ObjectType">
            -----------------------------------------------------------------------------
            <summary>
            ObjectType gets and sets the type of the object
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Common.Utilities.ObjectMappingInfo.PrimaryKey">
            -----------------------------------------------------------------------------
            <summary>
            PrimaryKey gets and sets the property of the object that corresponds to the
            primary key in the database
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Common.Utilities.ObjectMappingInfo.Properties">
            -----------------------------------------------------------------------------
            <summary>
            Properties gets a dictionary of Properties for the Object
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Common.Utilities.ObjectMappingInfo.TableName">
            -----------------------------------------------------------------------------
            <summary>
            TableName gets and sets the name of the database table that is used to
            persist the object.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.EscapedString.Combine(System.Collections.IEnumerable)">
            <summary>
            Combine the string values of the enumerable into an escaped string
            </summary>
            <param name="enumerable">An IEnumerable of values to combine</param>
            <returns>An escaped string that is seperated using the specified characeter.  The escape character is '\'.  
            The string returned by .ToString() is used as the value of each item in the IEnumerable.</returns>
            <remarks>The seperator char is ','</remarks>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.EscapedString.Combine(System.Collections.IEnumerable,System.Char)">
            <summary>
            Combine the string values of the enumerable into an escaped string
            </summary>
            <param name="enumerable">An IEnumerable of values to combine</param>
            <param name="seperator">The character to use as a seperator</param>
            <returns>An escaped string that is seperated using the specified characeter.  The escape character is '\'.  
            The string returned by .ToString() is used as the value of each item in the IEnumerable.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.EscapedString.Seperate(System.String)">
            <summary>
            Takes an escaped string and splits it into an IEnumerable of seperate strings
            </summary>
            <param name="combinedString">The string to seperate</param>
            <returns>IEnumerable of all the seperated strings</returns>
            <remarks>The escape character is '\', the seperator char is ','</remarks>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.EscapedString.Seperate(System.String,System.Char)">
            <summary>
            Takes an escaped string and splits it into an IEnumerable of seperate strings
            </summary>
            <param name="combinedString">The string to seperate</param>
            <param name="seperator">The character on which to split</param>
            <returns>IEnumerable of all the seperated strings</returns>
            <remarks>The escape character is '\'</remarks>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.PathUtils.AddTrailingSlash(System.String)">
            <summary>
            Adds backslash to the specified source.
            </summary>
            <param name="source">The source string to be modified.</param>
            <returns>The original string plus a backslash.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.PathUtils.FormatFolderPath(System.String)">
            <summary>
            Formats the provided folder path by adding a slash if needed.
            </summary>
            <param name="folderPath">The folder path to format.</param>
            <returns>The formatted path.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.PathUtils.GetPhysicalPath(System.Int32,System.String)">
            <summary>
            Gets the physical path for the specified relative path.
            </summary>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.PathUtils.GetRelativePath(System.Int32,System.String)">
            <summary>
            Gets the relative path for the specified physical path.
            </summary>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.PathUtils.GetRootFolderMapPath(System.Int32)">
            <summary>
            Gets the physical root folder path for the specified portal
            </summary>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.PathUtils.GetUserFolderPath(DotNetNuke.Entities.Users.UserInfo)">
            <summary>
            Gets the path to a user folder.
            </summary>
            <param name="user">The user info.</param>
            <returns>The path to a user folder.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.PathUtils.GetUserFolderPathElement(System.Int32,DotNetNuke.Common.Utilities.PathUtils.UserFolderElement)">
            <summary>
            Get elements from the user folder path.
            </summary>
            <param name="userID">The user identifier.</param>
            <param name="mode">The UserFolderElement to get.</param>
            <returns>The element from the user folder path.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.PathUtils.IsDefaultProtectedPath(System.String)">
            <summary>
            Checks if a folder is a default protected folder.
            </summary>
            <param name="folderPath">The folder path.</param>
            <returns>True if the folderPath is a default protected folder. False otherwise.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.PathUtils.MapPath(System.String)">
            <summary>
            The MapPath method maps the specified relative or virtual path to the corresponding physical directory on the server.
            </summary>
            <param name="path">Specifies the relative or virtual path to map to a physical directory. If Path starts with either 
            a forward (/) or backward slash (\), the MapPath method returns a path as if Path were a full, virtual path. If Path 
            doesn't start with a slash, the MapPath method returns a path relative to the directory of the .asp file being processed</param>
            <returns></returns>
            <remarks>
            If path is a null reference (Nothing in Visual Basic), then the MapPath method returns the full physical path 
            of the directory that contains the current application
            </remarks>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.PathUtils.RemoveTrailingSlash(System.String)">
            <summary>
            Removes the trailing slash or backslash from the specified source.
            </summary>
            <param name="source">The source string to be modified.</param>
            <returns>The original string minus the trailing slash.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.PathUtils.StripFolderPath(System.String)">
            <summary>
            Strips the original path by removing starting 0 or 0\\.
            </summary>
            <param name="originalPath">The original path.</param>
            <returns>The stripped path.</returns>
        </member>
        <member name="T:DotNetNuke.Common.Utilities.Internal.RetryableAction">
            <summary>
            Allows an action to be run and retried after a delay when an exception is thrown.
            <remarks>If the action never succeeds the final exception will be re-thrown for the caller to catch.</remarks>
            </summary>
        </member>
        <member name="P:DotNetNuke.Common.Utilities.Internal.RetryableAction.Action">
            <summary>
            The Action to execute
            </summary>
        </member>
        <member name="P:DotNetNuke.Common.Utilities.Internal.RetryableAction.Description">
            <summary>
            A message describing the action.  The primary purpose is to make the action identifiable in the log output.
            </summary>
        </member>
        <member name="P:DotNetNuke.Common.Utilities.Internal.RetryableAction.MaxRetries">
            <summary>
            The maximum number of retries to attempt
            </summary>
        </member>
        <member name="P:DotNetNuke.Common.Utilities.Internal.RetryableAction.Delay">
            <summary>
            The number of milliseconds to wait between retries.
            <remarks>The delay period is approximate and will be affected by the demands of other threads on the system.</remarks>
            </summary>
        </member>
        <member name="P:DotNetNuke.Common.Utilities.Internal.RetryableAction.DelayMultiplier">
            <summary>
            A factor by which the delay is adjusted after each retry.  Default is 1.
            <remarks>To double the delay with every retry use a factor of 2, retrys will be 1s, 2s, 4s, 8s...</remarks>
            <remarks>To quarter the delay with every retry use a factor of 0.25, retrys will be 1s, 0.25, 0.0625, 0.015625s...</remarks>
            </summary>
        </member>
        <member name="P:DotNetNuke.Common.Utilities.Internal.RetryableAction.SleepAction">
            <summary>
            Method that allows thread to sleep until next retry meant for unit testing purposes
            </summary>
        </member>
        <member name="T:DotNetNuke.Common.Utilities.SessionVariable`1">
            <summary>
            Wrapper class for <see cref="P:System.Web.HttpContext.Session"/>
            </summary>
            <typeparam name="T">The type of the value to be stored</typeparam>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.SessionVariable`1.#ctor(System.String)">
            <summary>
            Initializes a new HttpContext.Session item variable
            </summary>
            <param name="key">
            The key to use for storing the value in the items
            </param>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.SessionVariable`1.#ctor(System.String,System.Func{`0})">
            <summary>
            Initializes a new HttpContext.Session item variable with a initializer
            </summary>
            <param name="key">The key to use for storing the value in the HttpContext.Current.Session</param>
            <param name="initializer">A function that is called in order to create a default value per HttpContext.Current.Session</param>
            <remarks></remarks>
        </member>
        <member name="T:DotNetNuke.Common.Utilities.StateVariable`1">
            <summary>
            Wrapper class for any object that maps string key onto the object value (like Dictionary).
            </summary>
            <typeparam name="T"></typeparam>
            <remarks></remarks>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.StateVariable`1.#ctor(System.String)">
            <summary>
            Initializes a new item variable
            </summary>
            <param name="key">
            The key to use for storing the value in the items
            </param>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.StateVariable`1.#ctor(System.String,System.Func{`0})">
            <summary>
            Initializes a new item variable with a initializer
            </summary>
            <param name="key">The key to use for storing the value in the dictionary</param>
            <param name="initializer">A function that is called in order to create a default value per dictionary</param>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.Common.Utilities.StateVariable`1.Item(System.String)">
            <summary>
            Get/sets the value in associated dictionary/map
            </summary>
            <param name="key">Value key</param>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.StateVariable`1.Remove(System.String)">
            <summary>
            Removes the value in associated dictionary according
            </summary>
            <param name="key">Value key</param>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.Common.Utilities.StateVariable`1.HasValue">
            <summary>
            Indicates wether there is a value present or not
            </summary>
        </member>
        <member name="P:DotNetNuke.Common.Utilities.StateVariable`1.Value">
            <summary>
            Sets or gets the value in the current items
            </summary>
            <exception cref="T:System.InvalidOperationException">
            If you try to get a value while none is set use <see cref="P:DotNetNuke.Common.Utilities.StateVariable`1.ValueOrDefault"/> for safe access
            </exception>
        </member>
        <member name="P:DotNetNuke.Common.Utilities.StateVariable`1.ValueOrDefault">
            <summary>
            Gets the value in the current items or if none is available <c>default(T)</c>
            </summary>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.StateVariable`1.Clear">
            <summary>
            Clears the value in the current items
            </summary>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.StringExtensions.NormalizeString(System.String)">
            <summary>
            Takes a string and removes any diacritics
            </summary>
            <param name="input">String to normalize</param>
            <returns>String without diacritics</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.StringExtensions.ReplaceIgnoreCase(System.String,System.String,System.String)">
            <summary>
            Alternative to <see cref="M:System.String.Replace(System.String,System.String)"/> that supports case insensitive replacement
            </summary>
            <param name="source">The source.</param>
            <param name="oldValue">The old value.</param>
            <param name="newValue">The new value.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.UrlUtils.GetQSParamsForNavigateURL">
            <summary>
            getQSParamsForNavigateURL builds up a new querystring. This is necessary
            in order to prep for navigateUrl.
            we don't ever want a tabid, a ctl and a language parameter in the qs
            either, the portalid param is not allowed when the tab is a supertab
            (because NavigateUrl adds the portalId param to the qs)
            </summary>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.UrlUtils.IsSecureConnectionOrSslOffload(System.Web.HttpRequest)">
            <summary>
            check if connection is HTTPS
            or is HTTP but with ssloffload enabled on a secure page
            </summary>
            <param name="request">current request</param>
            <returns>true if HTTPS or if HTTP with an SSL offload header value, false otherwise</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.UrlUtils.Handle404Exception(System.Web.HttpResponse,DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>
            Redirect current response to 404 error page or output 404 content if error page not defined.
            </summary>
            <param name="response"></param>
            <param name="portalSetting"></param>
        </member>
        <member name="T:DotNetNuke.Common.Utilities.XmlExtensions">
            <summary>
            The XmlExtensions class allows you to write more efficient code to manage Xml documents
            </summary>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.XmlExtensions.AddElement(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Adds an element to the specified XmlNode.
            </summary>
            <param name="node">The node to add the element to.</param>
            <param name="elementName">Name of the element.</param>
            <param name="elementValue">The element value.</param>
            <returns>
            The added element
            </returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.XmlExtensions.AddElement(System.Xml.XmlNode,System.String,System.String,System.Boolean)">
            <summary>
            Adds an element to the specified XmlNode.
            </summary>
            <param name="node">The node to add the element to.</param>
            <param name="elementName">Name of the element.</param>
            <param name="elementValue">The element value.</param>
            <param name="useCData">if set to <c>true</c> use a CData encapsulation.</param>
            <returns>
            The added element
            </returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.XmlExtensions.AddElement(System.Xml.XmlNode,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Adds an element to the specified XmlNode using the specified namespace.
            </summary>
            <param name="node">The node to add the element to.</param>
            <param name="elementName">Name of the element (without the abbreviated prefix).</param>
            <param name="elementValue">The element value.</param>
            <param name="useCData">if set to <c>true</c> use a CData encapsulation.</param>
            <param name="namespaceUri">The namespace URI.</param>
            <param name="namespaceAbbr">The namespace abbreviation.</param>
            <returns>
            The added node
            </returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.XmlExtensions.AddAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            Adds an attribute to the specified node.
            </summary>
            <param name="node">The node to add the attribute to.</param>
            <param name="attributeName">Name of the attribute.</param>
            <param name="attributeValue">The attribute value.</param>
            <returns>The node the attribute was added to</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.XmlExtensions.AddAttribute(System.Xml.XmlNode,System.String,System.String,System.String,System.String)">
            <summary>
            Adds an attribute to an XmlNode using the specified namespace.
            </summary>
            <param name="node">The node to add the attribtue to.</param>
            <param name="attributeName">Name of the attribute without the namespace abbreviation prefix.</param>
            <param name="attributeValue">The attribute value.</param>
            <param name="namespaceUri">The namespace URI.</param>
            <param name="namespaceAbbr">The namespace abbreviation.</param>
            <returns>The node the attribute was added to</returns>
        </member>
        <member name="T:DotNetNuke.Common.Utilities.XmlUtils">
            -----------------------------------------------------------------------------
            <summary>
            The XmlUtils class provides Shared/Static methods for manipulating xml files
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.XmlUtils.GetAttributeValue(System.Xml.XPath.XPathNavigator,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value of an attribute
            </summary>
            <param name="nav">Parent XPathNavigator</param>
            <param name="attributeName">Thename of the Attribute</param>
            <returns></returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.XmlUtils.GetNodeValue(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>Gets the value of a child node as a <see cref="T:System.String"/></summary>
            <param name="navigator">A navigator pointing to the parent node</param>
            <param name="path">An XPath expression to find the child node</param>
            <returns>The value of the node or <see cref="F:System.String.Empty"/> if the node doesn't exist or doesn't have a value</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.XmlUtils.GetNodeValue(System.Xml.XPath.XPathNavigator,System.String,System.String)">
            <summary>Gets the value of a child node as a <see cref="T:System.String"/></summary>
            <param name="navigator">A navigator pointing to the parent node</param>
            <param name="path">An XPath expression to find the child node</param>
            <param name="defaultValue">Default value to return if the node doesn't exist or doesn't have a value</param>
            <returns>The value of the node or <paramref name="defaultValue"/></returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.XmlUtils.GetNodeValue(System.Xml.XmlNode,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value of node
            </summary>
            <param name="objNode">Parent node</param>
            <param name="nodeName">Child node to look for</param>
            <returns></returns>
            <remarks>
            If the node does not exist or it causes any error the default value will be returned.
            </remarks>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.XmlUtils.GetNodeValue(System.Xml.XmlNode,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value of node
            </summary>
            <param name="objNode">Parent node</param>
            <param name="nodeName">Child node to look for</param>
            <param name="defaultValue">Default value to return</param>
            <returns></returns>
            <remarks>
            If the node does not exist or it causes any error the default value will be returned.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.XmlUtils.GetNodeValueBoolean(System.Xml.XmlNode,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value of node
            </summary>
            <param name="objNode">Parent node</param>
            <param name="nodeName">Child node to look for</param>
            <returns></returns>
            <remarks>
            If the node does not exist or it causes any error the default value (False) will be returned.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.XmlUtils.GetNodeValueBoolean(System.Xml.XmlNode,System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value of node
            </summary>
            <param name="objNode">Parent node</param>
            <param name="nodeName">Child node to look for</param>
            <param name="defaultValue">Default value to return</param>
            <returns></returns>
            <remarks>
            If the node does not exist or it causes any error the default value will be returned.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.XmlUtils.GetNodeValueBoolean(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>Gets the value of a child node as a <see cref="T:System.Boolean"/></summary>
            <param name="navigator">A navigator pointing to the parent node</param>
            <param name="path">An XPath expression to find the child node</param>
            <returns>The value of the node or <c>false</c> if the node doesn't exist or doesn't have a value</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.XmlUtils.GetNodeValueBoolean(System.Xml.XPath.XPathNavigator,System.String,System.Boolean)">
            <summary>Gets the value of a child node as a <see cref="T:System.Boolean"/></summary>
            <param name="navigator">A navigator pointing to the parent node</param>
            <param name="path">An XPath expression to find the child node</param>
            <param name="defaultValue">Default value to return if the node doesn't exist or doesn't have a value</param>
            <returns>The value of the node or <paramref name="defaultValue"/></returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.XmlUtils.GetNodeValueDate(System.Xml.XmlNode,System.String,System.DateTime)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value of node
            </summary>
            <param name="objNode">Parent node</param>
            <param name="nodeName">Child node to look for</param>
            <param name="defaultValue">Default value to return</param>
            <returns></returns>
            <remarks>
            If the node does not exist or it causes any error the default value will be returned.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.XmlUtils.GetNodeValueDate(System.Xml.XPath.XPathNavigator,System.String,System.DateTime)">
            <summary>Gets the value of a child node as a <see cref="T:System.DateTime"/></summary>
            <param name="navigator">A navigator pointing to the parent node</param>
            <param name="path">An XPath expression to find the child node</param>
            <param name="defaultValue">Default value to return if the node doesn't exist or doesn't have a value</param>
            <returns>The value of the node or <paramref name="defaultValue"/></returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.XmlUtils.GetNodeValueInt(System.Xml.XmlNode,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value of node
            </summary>
            <param name="node">Parent node</param>
            <param name="nodeName">Child node to look for</param>
            <returns></returns>
            <remarks>
            If the node does not exist or it causes any error the default value (0) will be returned.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.XmlUtils.GetNodeValueInt(System.Xml.XmlNode,System.String,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value of node
            </summary>
            <param name="node">Parent node</param>
            <param name="nodeName">Child node to look for</param>
            <param name="defaultValue">Default value to return</param>
            <returns></returns>
            <remarks>
            If the node does not exist or it causes any error the default value will be returned.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.XmlUtils.GetNodeValueInt(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>Gets the value of a child node as an <see cref="T:System.Int32"/></summary>
            <param name="navigator">A navigator pointing to the parent node</param>
            <param name="path">An XPath expression to find the child node</param>
            <returns>The value of the node or <c>0</c> if the node doesn't exist or doesn't have a value</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.XmlUtils.GetNodeValueInt(System.Xml.XPath.XPathNavigator,System.String,System.Int32)">
            <summary>Gets the value of a child node as an <see cref="T:System.Int32"/></summary>
            <param name="navigator">A navigator pointing to the parent node</param>
            <param name="path">An XPath expression to find the child node</param>
            <param name="defaultValue">Default value to return if the node doesn't exist or doesn't have a value</param>
            <returns>The value of the node or <paramref name="defaultValue"/></returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.XmlUtils.GetNodeValueSingle(System.Xml.XmlNode,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value of node
            </summary>
            <param name="node">Parent node</param>
            <param name="nodeName">Child node to look for</param>
            <returns></returns>
            <remarks>
            If the node does not exist or it causes any error the default value (0) will be returned.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.XmlUtils.GetNodeValueSingle(System.Xml.XmlNode,System.String,System.Single)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value of node
            </summary>
            <param name="node">Parent node</param>
            <param name="nodeName">Child node to look for</param>
            <param name="defaultValue">Default value to return</param>
            <returns></returns>
            <remarks>
            If the node does not exist or it causes any error the default value will be returned.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.XmlUtils.GetNodeValueSingle(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>Gets the value of a child node as a <see cref="T:System.Single"/></summary>
            <param name="navigator">A navigator pointing to the parent node</param>
            <param name="path">An XPath expression to find the child node</param>
            <returns>The value of the node or <c>0</c> if the node doesn't exist or doesn't have a value</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.XmlUtils.GetNodeValueSingle(System.Xml.XPath.XPathNavigator,System.String,System.Single)">
            <summary>Gets the value of a child node as a <see cref="T:System.Single"/></summary>
            <param name="navigator">A navigator pointing to the parent node</param>
            <param name="path">An XPath expression to find the child node</param>
            <param name="defaultValue">Default value to return if the node doesn't exist or doesn't have a value</param>
            <returns>The value of the node or <paramref name="defaultValue"/></returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.XmlUtils.GetXmlWriterSettings(System.Xml.ConformanceLevel)">
            -----------------------------------------------------------------------------
            <summary>
            Gets an XmlWriterSettings object
            </summary>
            <param name="conformance">Conformance Level</param>
            <returns>An XmlWriterSettings</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.XmlUtils.XMLEncode(System.String)">
            -----------------------------------------------------------------------------
            <summary>
              Xml Encodes HTML
            </summary>
            <param name = "html">The HTML to encode</param>
            <returns></returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.XmlUtils.RemoveInvalidXmlCharacters(System.String)">
            <summary>
            Removes control characters and other non-UTF-8 characters
            </summary>
            <param name="content">The string to process</param>
            <returns>A string with no control characters or entities above 0x00FD</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.XmlUtils.XPathLiteral(System.String)">
            <summary>
            Produce an XPath literal equal to the value if possible; if not, produce
            an XPath expression that will match the value.
            
            Note that this function will produce very long XPath expressions if a value
            contains a long run of double quotes.
            </summary>
            <param name="value">The value to match.</param>
            <returns>If the value contains only single or double quotes, an XPath
            literal equal to the value.  If it contains both, an XPath expression,
            using concat(), that evaluates to the value.</returns>
            <remarks>From Stack Overflow (<see href="http://stackoverflow.com/a/1352556/2688"/>)</remarks>
        </member>
        <member name="T:DotNetNuke.Common.Utilities.Json">
            <summary>
            Serialize or Deserialize Json
            </summary>
        </member>
        <member name="T:DotNetNuke.Common.Utilities.JsonExtensionsWeb">
            <summary>
              Json Extensions based on the JavaScript Serializer in System.web
            </summary>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.JsonExtensionsWeb.ToJsonString(System.Object)">
            <summary>
              Serializes a type to Json. Note the type must be marked Serializable 
              or include a DataContract attribute.
            </summary>
            <param name = "value"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.JsonExtensionsWeb.ToJson(System.Object)">
            <summary>
              Extension method on object that serializes the value to Json. 
              Note the type must be marked Serializable or include a DataContract attribute.
            </summary>
            <param name = "value"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.JsonExtensionsWeb.FromJsonString(System.String,System.Type)">
            <summary>
              Deserializes a json string into a specific type. 
              Note that the type specified must be serializable.
            </summary>
            <param name = "json"></param>
            <param name = "type"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.JsonExtensionsWeb.FromJson(System.String,System.Type)">
            <summary>
              Extension method to string that deserializes a json string 
              into a specific type. 
              Note that the type specified must be serializable.
            </summary>
            <param name = "json"></param>
            <param name = "type"></param>
            <returns></returns>
        </member>
        <member name="T:DotNetNuke.Common.Utilities.SqlUtils">
            -----------------------------------------------------------------------------
            <summary>
              The SqlUtils class provides Shared/Static methods for working with SQL Server related code
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.SqlUtils.TranslateSQLException(System.Data.SqlClient.SqlException)">
            <summary>
              function to translate sql exceptions to readable messages. 
              It also captures cases where sql server is not available and guards against
              database connection details being leaked
            </summary>
            <param name = "exc"></param>
            <returns></returns>
            <remarks>
            </remarks>
        </member>
        <member name="T:DotNetNuke.Common.Utilities.FileSystemPermissionVerifier">
            <summary>
              Verifies the abililty to create and delete files and folders
            </summary>
            <remarks>
              This class is not meant for use in modules, or in any other manner outside the DotNetNuke core.
            </remarks>
        </member>
        <member name="P:DotNetNuke.Common.Utilities.FileSystemPermissionVerifier.BasePath">
            <summary>
            Base path need to verify permission.
            </summary>
        </member>
        <member name="M:DotNetNuke.Common.Utilities.FileSystemPermissionVerifier.VerifyFileCreate">
            -----------------------------------------------------------------------------
            <summary>
              VerifyFileCreate checks whether a file can be created
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.FileSystemPermissionVerifier.VerifyFileDelete">
            -----------------------------------------------------------------------------
            <summary>
              VerifyFileDelete checks whether a file can be deleted
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.FileSystemPermissionVerifier.VerifyFolderCreate">
            -----------------------------------------------------------------------------
            <summary>
              VerifyFolderCreate checks whether a folder can be created
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Utilities.FileSystemPermissionVerifier.VerifyFolderDelete">
            -----------------------------------------------------------------------------
            <summary>
              VerifyFolderDelete checks whether a folder can be deleted
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Common.Controls.Form">
            <summary>
            The Form will reset action to raw url instead of rewrite url.
            </summary>
        </member>
        <member name="T:DotNetNuke.Common.FileItem">
            <summary>
            This class handles basic elements about File Items. Is is a basic Get/Set for Value and Text
            </summary>
        </member>
        <member name="M:DotNetNuke.Common.FileItem.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetNuke.Common.FileItem" /> class.
            </summary>
            <param name="value">The value.</param>
            <param name="text">The text.</param>
        </member>
        <member name="P:DotNetNuke.Common.FileItem.Text">
            <summary>
            Gets the text.
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:DotNetNuke.Common.FileItem.Value">
            <summary>
            Gets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:DotNetNuke.Common.Globals">
            <summary>
            The global instance of DotNetNuke. all basic functions and properties are defined in this instance.
            </summary>
        </member>
        <member name="T:DotNetNuke.Common.Globals.PerformanceSettings">
            <summary>
            Enumeration of site performance setting, say by another way that means how to set the cache.
            </summary>
            <remarks>
            <para>Using cache will speed up the application to a great degree, we recommend to use cache for whole modules,
            but sometimes cache also make confuse for user, if we didn't take care of how to make cache expired when needed,
            such as if a data has already been deleted but the cache arn't clear, it will cause un expected errors.
            so you should choose a correct performance setting type when you trying to cache some stuff, and always remember
            update cache immediately after the data changed.</para>
            <para>default cache policy in core api will use cache timeout muitple Host Performance setting's value as cache time(unit: minutes):</para>
            <list type="bullet">
            <item>HostSettingsCacheTimeOut: 20</item>
            <item>PortalAliasCacheTimeOut: 200</item>
            <item>PortalSettingsCacheTimeOut: 20</item>
            <item>More cache timeout definitions see<see cref="T:DotNetNuke.Common.Utilities.DataCache"/></item>
            </list>
            </remarks>
        </member>
        <member name="F:DotNetNuke.Common.Globals.PerformanceSettings.NoCaching">
            <summary>
            No Caching
            </summary>
        </member>
        <member name="F:DotNetNuke.Common.Globals.PerformanceSettings.LightCaching">
            <summary>
            Caching for a short time
            </summary>
        </member>
        <member name="F:DotNetNuke.Common.Globals.PerformanceSettings.ModerateCaching">
            <summary>
            Caching for moderate
            </summary>
        </member>
        <member name="F:DotNetNuke.Common.Globals.PerformanceSettings.HeavyCaching">
            <summary>
            Caching for a long time
            </summary>
        </member>
        <member name="T:DotNetNuke.Common.Globals.PortalRegistrationType">
            <summary>
            Enumeration Of Registration Type for portal.
            </summary>
            <remarks>
            <para>NoRegistration: Disabled registration in portal.</para>
            <para>PrivateRegistration: Once user's account information has been submitted, 
            the portal Administrator will be notified and user's application will be subjected to a screening procedure. 
            If user's application is authorized, the user will receive notification of access to the portal environment.</para>
            <para>PublicRegistration: Once user's account information has been submitted, 
            user will be immediately granted access to the portal environment.</para>
            <para>VerifiedRegistration: Once user's account information has been submitted, 
            user will receive an email containing unique Verification Code. 
            The Verification Code will be required the first time when user attempt to sign in to the portal environment.</para>
            </remarks>
        </member>
        <member name="F:DotNetNuke.Common.Globals.PortalRegistrationType.NoRegistration">
            <summary>
            Disabled Registration
            </summary>
        </member>
        <member name="F:DotNetNuke.Common.Globals.PortalRegistrationType.PrivateRegistration">
            <summary>
            Account need be approved by portal's administrator.
            </summary>
        </member>
        <member name="F:DotNetNuke.Common.Globals.PortalRegistrationType.PublicRegistration">
            <summary>
            Account will be available after post registration data successful.
            </summary>
        </member>
        <member name="F:DotNetNuke.Common.Globals.PortalRegistrationType.VerifiedRegistration">
            <summary>
            Account will be available by verify code.
            </summary>
        </member>
        <member name="T:DotNetNuke.Common.Globals.UpgradeStatus">
            <summary>
            Enumeration Of Application upgrade status.
            </summary>
        </member>
        <member name="F:DotNetNuke.Common.Globals.UpgradeStatus.Upgrade">
            <summary>
            The application need update to a higher version.
            </summary>
        </member>
        <member name="F:DotNetNuke.Common.Globals.UpgradeStatus.Install">
            <summary>
            The application need to install itself.
            </summary>
        </member>
        <member name="F:DotNetNuke.Common.Globals.UpgradeStatus.None">
            <summary>
            The application is normal running.
            </summary>
        </member>
        <member name="F:DotNetNuke.Common.Globals.UpgradeStatus.Error">
            <summary>
            The application occur error when running.
            </summary>
        </member>
        <member name="F:DotNetNuke.Common.Globals.UpgradeStatus.Unknown">
            <summary>
            The application status is unknown,
            </summary>
            <remarks>This status should never be returned. its is only used as a flag that Status hasn't been determined.</remarks>
        </member>
        <member name="F:DotNetNuke.Common.Globals.glbRoleAllUsers">
            <summary>
            Global role id for all users
            </summary>
            <value>-1</value>
        </member>
        <member name="F:DotNetNuke.Common.Globals.glbRoleSuperUser">
            <summary>
            Global role id for super user
            </summary>
            <value>-2</value>
        </member>
        <member name="F:DotNetNuke.Common.Globals.glbRoleUnauthUser">
            <summary>
            Global role id for unauthenticated users
            </summary>
            <value>-3</value>
        </member>
        <member name="F:DotNetNuke.Common.Globals.glbRoleNothing">
            <summary>
            Global role id by default
            </summary>
            <value>-4</value>
        </member>
        <member name="F:DotNetNuke.Common.Globals.glbRoleAllUsersName">
            <summary>
            Global role name for all users
            </summary>
            <value>All Users</value>
        </member>
        <member name="F:DotNetNuke.Common.Globals.glbRoleSuperUserName">
            <summary>
            Global ro name for super user
            </summary>
            <value>Superuser</value>
        </member>
        <member name="F:DotNetNuke.Common.Globals.glbRoleUnauthUserName">
            <summary>
            Global role name for unauthenticated users
            </summary>
            <value>Unauthenticated Users</value>
        </member>
        <member name="F:DotNetNuke.Common.Globals.glbDefaultPage">
            <summary>
            Default page name
            </summary>
            <value>Default.aspx</value>
        </member>
        <member name="F:DotNetNuke.Common.Globals.glbHostSkinFolder">
            <summary>
            Default host skin folder
            </summary>
            <value>_default</value>
        </member>
        <member name="F:DotNetNuke.Common.Globals.glbDefaultControlPanel">
            <summary>
            Default control panel
            </summary>
            <value>Admin/ControlPanel/IconBar.ascx</value>
        </member>
        <member name="F:DotNetNuke.Common.Globals.glbAllowControlPanelToDetermineVisibility">
            <summary>
            Default setting to determine if selected control panel is loaded to evaluate visibility
            </summary>
            <value>false</value>
        </member>
        <member name="F:DotNetNuke.Common.Globals.glbDefaultPane">
            <summary>
            Default pane name
            </summary>
            <value>ContentPane</value>
        </member>
        <member name="F:DotNetNuke.Common.Globals.glbConfigFolder">
            <summary>
            Config files folder
            </summary>
            <value>\Config\</value>
        </member>
        <member name="F:DotNetNuke.Common.Globals.glbAboutPage">
            <summary>
            About page name
            </summary>
            <value>about.htm</value>
        </member>
        <member name="F:DotNetNuke.Common.Globals.glbDotNetNukeConfig">
            <summary>
            DotNetNuke config file
            </summary>
            <value>DotNetNuke.config</value>
        </member>
        <member name="F:DotNetNuke.Common.Globals.glbSuperUserAppName">
            <summary>
            Default portal id for super user
            </summary>
            <value>-1</value>
        </member>
        <member name="F:DotNetNuke.Common.Globals.glbProtectedExtension">
            <summary>
            extension of protected files
            </summary>
            <value>.resources</value>
        </member>
        <member name="F:DotNetNuke.Common.Globals.glbContainersPath">
            <summary>
            Default container folder
            </summary>
            <value>Portals/_default/Containers/</value>
        </member>
        <member name="F:DotNetNuke.Common.Globals.glbSkinsPath">
            <summary>
            Default skin folder
            </summary>
            <value>Portals/_default/Skins/</value>
        </member>
        <member name="F:DotNetNuke.Common.Globals.glbEmailRegEx">
            <summary>
            Email address regex pattern
            </summary>
            <value><![CDATA[^[a-zA-Z0-9_%+#&'*/=^`{|}~-](?:\.?[a-zA-Z0-9_%+#&'*/=^`{|}~-])*@(?:[a-zA-Z0-9_](?:(?:\.?|-*)[a-zA-Z0-9_])*\.[a-zA-Z]{2,9}|\[(?:2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?:2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?:2[0-4]\d|25[0-5]|[01]?\d\d?)\.(?:2[0-4]\d|25[0-5]|[01]?\d\d?)])$]]></value>
        </member>
        <member name="F:DotNetNuke.Common.Globals.glbUserNameRegEx">
            <summary>
            User Name regex pattern
            </summary>
            <value></value>
        </member>
        <member name="F:DotNetNuke.Common.Globals.glbScriptFormat">
            <summary>
            format of a script tag
            </summary>
            <value><![CDATA[<script type=\"text/javascript\" src=\"{0}\" ></script>]]></value>
        </member>
        <member name="P:DotNetNuke.Common.Globals.ApplicationPath">
            <summary>
            Gets the application path.
            </summary>
        </member>
        <member name="P:DotNetNuke.Common.Globals.ApplicationMapPath">
            <summary>
            Gets or sets the application map path.
            </summary>
            <value>
            The application map path.
            </value>
        </member>
        <member name="P:DotNetNuke.Common.Globals.DesktopModulePath">
            <summary>
            Gets the desktop module path.
            </summary>
            <value>ApplicationPath + "/DesktopModules/"</value>
        </member>
        <member name="P:DotNetNuke.Common.Globals.ImagePath">
            <summary>
            Gets the image path.
            </summary>
            <value>ApplicationPath + "/Images/"</value>
        </member>
        <member name="P:DotNetNuke.Common.Globals.DataBaseVersion">
            <summary>
            Gets the database version.
            </summary>
        </member>
        <member name="P:DotNetNuke.Common.Globals.HostMapPath">
            <summary>
            Gets or sets the host map path.
            </summary>
            <value>ApplicationMapPath + "Portals\_default\"</value>
        </member>
        <member name="P:DotNetNuke.Common.Globals.HostPath">
            <summary>
            Gets or sets the host path.
            </summary>
            <value>ApplicationPath + "/Portals/_default/"</value>
        </member>
        <member name="P:DotNetNuke.Common.Globals.InstallMapPath">
            <summary>
            Gets or sets the install map path.
            </summary>
            <value>server map path of InstallPath.</value>
        </member>
        <member name="P:DotNetNuke.Common.Globals.InstallPath">
            <summary>
            Gets or sets the install path.
            </summary>
            <value>ApplicationPath + "/Install/"</value>
        </member>
        <member name="P:DotNetNuke.Common.Globals.IISAppName">
            <summary>
            Gets or sets the name of the IIS app.
            </summary>
            <value>
            request.ServerVariables["APPL_MD_PATH"]
            </value>
        </member>
        <member name="P:DotNetNuke.Common.Globals.ServerName">
            <summary>
            Gets or sets the name of the server.
            </summary>
            <value>
            server name in config file or the server's marchine name.
            </value>
        </member>
        <member name="P:DotNetNuke.Common.Globals.OperatingSystemVersion">
            <summary>
            Gets or sets the operating system version.
            </summary>
            <value>
            The operating system version.
            </value>
        </member>
        <member name="P:DotNetNuke.Common.Globals.NETFrameworkVersion">
            <summary>
            Gets or sets the NET framework version.
            </summary>
            <value>
            The NET framework version.
            </value>
        </member>
        <member name="P:DotNetNuke.Common.Globals.DatabaseEngineVersion">
            <summary>
            Gets or sets the database engine version.
            </summary>
            <value>
            The database engine version.
            </value>
        </member>
        <member name="P:DotNetNuke.Common.Globals.DependencyProvider">
            <summary>
            Gets or sets the Dependency Service.
            </summary>
            <value>
            The Dependency Service.
            </value>
        </member>
        <member name="M:DotNetNuke.Common.Globals.Redirect(System.String,System.Boolean)">
            <summary>
            Redirects the specified URL.
            </summary>
            <param name="url">The URL.</param>
            <param name="endResponse">if set to <c>true</c> [end response].</param>
        </member>
        <member name="P:DotNetNuke.Common.Globals.Status">
            <summary>
            Gets the status of application.
            </summary>
            <seealso cref="!:GetStatus"/>
        </member>
        <member name="M:DotNetNuke.Common.Globals.IsInstalled">
            <summary>
            IsInstalled looks at various file artifacts to determine if DotNetNuke has already been installed.
            </summary>
            <returns></returns>
            <remarks>
            If DotNetNuke has been installed, then we should treat database connection errors as real errors.  
            If DotNetNuke has not been installed, then we should expect to have database connection problems
            since the connection string may not have been configured yet, which can occur during the installation
            wizard.
            </remarks>
        </member>
        <member name="M:DotNetNuke.Common.Globals.HasDataProviderLogFiles">
            <summary>
            Determines whether has data provider log files.
            </summary>
            <returns>
              <c>true</c> if has data provider log files; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.HasInstallationDate">
            <summary>
            Determines whether has installation date.
            </summary>
            <returns>
              <c>true</c> if has installation date; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.HasInstallVersion">
            <summary>
            Determines whether has InstallVersion set.
            </summary>
            <returns>
              <c>true</c> if has installation date; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.ModuleDirectoryExists(System.String)">
            <summary>
            Check whether the modules directory is exists.
            </summary>
            <param name="moduleName">Name of the module.</param>
            <returns>
            <c>true</c> if the module directory exist, otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.HasNonDefaultPortalDirectory">
            <summary>
            Determines whether has portal directory except default portal directory in portal path.
            </summary>
            <returns>
              <c>true</c> if has portal directory except default portal directory in portal path; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.IsInstallationURL">
            <summary>
            Determines whether current request is for install.
            </summary>
            <returns>
              <c>true</c> if current request is for install; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.GetCultureCode(System.Int32,System.Boolean,DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>
            Gets the culture code of the tab.
            </summary>
            <param name="TabID">The tab ID.</param>
            <param name="IsSuperTab">if set to <c>true</c> [is super tab].</param>
            <param name="settings">The settings.</param>
            <returns>return the tab's culture code, if ths tab doesn't exist, it will return current culture name.</returns>
        </member>
        <member name="P:DotNetNuke.Common.Globals.glbImageFileTypes">
            <summary>
            Image file types
            </summary>
            <value>Values read from ImageTypes List. If there is not List, default values will be jpg,jpeg,jpe,gif,bmp,png,svg,ico</value>
        </member>
        <member name="M:DotNetNuke.Common.Globals.BuildCrossTabDataSet(System.String,System.Data.IDataReader,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Builds the cross tab dataset.
            </summary>
            <param name="DataSetName">Name of the data set.</param>
            <param name="result">The result.</param>
            <param name="FixedColumns">The fixed columns.</param>
            <param name="VariableColumns">The variable columns.</param>
            <param name="KeyColumn">The key column.</param>
            <param name="FieldColumn">The field column.</param>
            <param name="FieldTypeColumn">The field type column.</param>
            <param name="StringValueColumn">The string value column.</param>
            <param name="NumericValueColumn">The numeric value column.</param>
            <returns>the dataset instance</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.BuildCrossTabDataSet(System.String,System.Data.IDataReader,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Globalization.CultureInfo)">
            -----------------------------------------------------------------------------
            <summary>
            converts a data reader with serialized fields into a typed data set
            </summary>
            <param name="DataSetName">Name of the dataset to be created</param>
            <param name="result">Data reader that contains all field values serialized</param>
            <param name="FixedColumns">List of fixed columns, delimited by commas. Columns must be contained in DataReader</param>
            <param name="VariableColumns">List of variable columns, delimited by commas. Columns must be contained in DataReader</param>
            <param name="KeyColumn">Name of the column, that contains the row ID. Column must be contained in DataReader</param>
            <param name="FieldColumn">Name of the column, that contains the field name. Column must be contained in DataReader</param>
            <param name="FieldTypeColumn">Name of the column, that contains the field type name. Column must be contained in DataReader</param>
            <param name="StringValueColumn">Name of the column, that contains the field value, if stored as string. Column must be contained in DataReader</param>
            <param name="NumericValueColumn">Name of the column, that contains the field value, if stored as number. Column must be contained in DataReader</param>
            <param name="Culture">culture of the field values in data reader's string value column</param>
            <returns>The generated DataSet</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Globals.ConvertDataReaderToDataSet(System.Data.IDataReader)">
            <summary>
            Converts the datareader to dataset.
            </summary>
            <param name="reader">The reader.</param>
            <returns>the dataset instance</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.ConvertDataReaderToDataTable(System.Data.IDataReader)">
            <summary>
            Converts the datareader to datatable.
            </summary>
            <param name="reader">The reader.</param>
            <returns>the datatable instance</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.ConvertDataReaderToDataTable(System.Data.IDataReader,System.Boolean)">
            <summary>
            Converts the datareader to datatable.
            </summary>
            <param name="reader">The reader.</param>
            <param name="closeReader">Whether close reader.</param>
            <returns>the datatable instance</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.GetAbsoluteServerPath(System.Web.HttpRequest)">
            <summary>
            Gets the absolute server path.
            </summary>
            <param name="Request">The request.</param>
            <returns>absolute server path</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.GetApplicationName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the ApplicationName for the MemberRole API.
            </summary>
            <remarks>
            This overload is used to get the current ApplcationName.  The Application
            Name is in the form Prefix_Id, where Prefix is the object qualifier
            for this instance of DotNetNuke, and Id is the current PortalId for normal
            users or glbSuperUserAppName for SuperUsers.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Globals.GetApplicationName(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the ApplicationName for the MemberRole API.
            </summary>
            <remarks>
            This overload is used to build the Application Name from the Portal Id
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Globals.FindDatabaseVersion(System.Int32,System.Int32,System.Int32)">
            <summary>
            Finds the database version.
            </summary>
            <param name="Major">The major.</param>
            <param name="Minor">The minor.</param>
            <param name="Build">The build.</param>
            <returns>return <c>true</c> if can find the specific version, otherwise will retur <c>false</c>.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.UpdateDataBaseVersion(System.Version)">
            <summary>
            Updates the database version.
            </summary>
            <param name="version">The version.</param>
        </member>
        <member name="M:DotNetNuke.Common.Globals.UpdateDataBaseVersionIncrement(System.Version,System.Int32)">
            <summary>
            Updates the database version.
            </summary>
            <param name="version">The version.</param>
            <param name="increment">The increment.</param>
        </member>
        <member name="M:DotNetNuke.Common.Globals.AddPort(System.String,System.String)">
            <summary>
            Adds the port.
            </summary>
            <param name="httpAlias">The HTTP alias.</param>
            <param name="originalUrl">The original URL.</param>
            <returns>url with port if the post number is not 80</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.GetDomainName(System.Web.HttpRequest)">
            <summary>
            Gets the name of the domain.
            </summary>
            <param name="request">The request.</param>
            <returns>domain name</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.GetDomainName(System.Web.HttpRequestBase)">
            <summary>
            Gets the name of the domain.
            </summary>
            <param name="request">The request.</param>
            <returns>domain name</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.GetDomainName(System.Web.HttpRequest,System.Boolean)">
            <summary>
            returns the domain name of the current request ( ie. www.domain.com or 207.132.12.123 or www.domain.com/directory if subhost )
            </summary>
            <param name="request">The request.</param>
            <param name="parsePortNumber">if set to <c>true</c> [parse port number].</param>
            <returns>domain name</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.GetDomainName(System.Web.HttpRequestBase,System.Boolean)">
            <summary>
            returns the domain name of the current request ( ie. www.domain.com or 207.132.12.123 or www.domain.com/directory if subhost )
            </summary>
            <param name="request">The request.</param>
            <param name="parsePortNumber">if set to <c>true</c> [parse port number].</param>
            <returns>domain name</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.UsePortNumber">
            <summary>
            Determin whether use port number by the value in config file.
            </summary>
            <returns>
            <c>true</c> if use port number, otherwise, return <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.GetFileList">
            <summary>
            Gets the file list.
            </summary>
            <returns>file list.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.GetFileList(System.Int32)">
            <summary>
            Gets the file list.
            </summary>
            <param name="portalId">The portal id.</param>
            <returns>file list</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.GetFileList(System.Int32,System.String)">
            <summary>
            Gets the file list.
            </summary>
            <param name="portalId">The portal id.</param>
            <param name="strExtensions">The STR extensions.</param>
            <returns>file list</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.GetFileList(System.Int32,System.String,System.Boolean)">
            <summary>
            Gets the file list.
            </summary>
            <param name="portalId">The portal id.</param>
            <param name="strExtensions">The STR extensions.</param>
            <param name="noneSpecified">if set to <c>true</c> [none specified].</param>
            <returns>file list</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.GetFileList(System.Int32,System.String,System.Boolean,System.String)">
            <summary>
            Gets the file list.
            </summary>
            <param name="PortalId">The portal id.</param>
            <param name="strExtensions">The STR extensions.</param>
            <param name="NoneSpecified">if set to <c>true</c> [none specified].</param>
            <param name="Folder">The folder.</param>
            <returns>file list</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.GetFileList(System.Int32,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Gets the file list.
            </summary>
            <param name="PortalId">The portal id.</param>
            <param name="strExtensions">The STR extensions.</param>
            <param name="NoneSpecified">if set to <c>true</c> [none specified].</param>
            <param name="Folder">The folder.</param>
            <param name="includeHidden">if set to <c>true</c> [include hidden].</param>
            <returns>file list</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.GetHostPortalSettings">
            <summary>
            Gets the host portal settings.
            </summary>
            <returns>Host portal settings</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.GetPortalDomainName(System.String,System.Web.HttpRequest,System.Boolean)">
            <summary>
            Gets the portal domain name.
            </summary>
            <param name="strPortalAlias">The portal alias.</param>
            <param name="Request">The request or <c>null</c>.</param>
            <param name="blnAddHTTP">if set to <c>true</c> calls <see cref="M:DotNetNuke.Common.Globals.AddHTTP(System.String)"/> on the result.</param>
            <returns>domain name</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.GetPortalSettings">
            <summary>
            Gets the portal settings.
            </summary>
            <returns>Portal settings</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.GetSubFolderPath(System.String,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Returns the folder path under the root for the portal 
            </summary>
            <param name="strFileNamePath">The folder the absolute path</param>
            <param name="portalId">Portal Id.</param>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Globals.GetTotalRecords(System.Data.IDataReader@)">
            -----------------------------------------------------------------------------
            <summary>
            The GetTotalRecords method gets the number of Records returned.
            </summary>
            <param name="dr">An <see cref="T:System.Data.IDataReader"/> containing the Total no of records</param>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Globals.SetStatus(DotNetNuke.Common.Globals.UpgradeStatus)">
            <summary>
            Sets the status.
            </summary>
            <param name="status">The status.</param>
        </member>
        <member name="M:DotNetNuke.Common.Globals.ImportFile(System.Int32,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            ImportFile - converts a file url (/Portals/0/somefile.gif) to the appropriate 
            FileID=xx identification for use in importing portals, tabs and modules
            </summary>
            <remarks>
            </remarks>
            <returns>An UpgradeStatus enum Upgrade/Install/None</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Globals.HTTPPOSTEncode(System.String)">
            <summary>
            Encode the post url
            </summary>
            <param name="strPost">The post url.</param>
            <returns>encoded value</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.SetApplicationName(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Sets the ApplicationName for the MemberRole API
            </summary>
            <remarks>
            This overload takes a the PortalId
            </remarks>
            <param name="PortalID">The Portal Id</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Globals.SetApplicationName(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Sets the ApplicationName for the MemberRole API
            </summary>
            <remarks>
            This overload takes a the PortalId
            </remarks>
            <param name="ApplicationName">The Application Name to set</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Globals.FormatAddress(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
            Formats the address on a single line ( ie. Unit, Street, City, Region, Country, PostalCode )
            </summary>
            <param name="Unit">The unit.</param>
            <param name="Street">The street.</param>
            <param name="City">The city.</param>
            <param name="Region">The region.</param>
            <param name="Country">The country.</param>
            <param name="PostalCode">The postal code.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.FormatVersion(System.Version)">
            <summary>
            Formats the system.version into the standard format nn.nn.nn
            </summary>
            <param name="version">The version.</param>
            <returns>Formatted  version as string</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.FormatVersion(System.Version,System.Boolean)">
            <summary>
            Formats the version.
            </summary>
            <param name="version">The version.</param>
            <param name="includeBuild">if set to <c>true</c> [include build].</param>
            <returns>Formatted version as string</returns>
            <example>
            <code lang="C#">
            var version = new Version(6, 0, 0, 147);
            string formattedVersion = FormatVersion(version, true); // formattedVersion's value will be: 06.00.00(147)
            </code>
            </example>
        </member>
        <member name="M:DotNetNuke.Common.Globals.FormatVersion(System.Version,System.String,System.Int32,System.String)">
            <summary>
            Formats  a version into the standard format nn.nn.nn
            </summary>
            <param name="version">The version to be formatted.</param>
            <param name="fieldFormat">The field format.</param>
            <param name="fieldCount">The field count.</param>
            <param name="delimiterCharacter">The delimiter character.</param>
            <returns>Formatted version as a string</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.CloakText(System.String)">
            <summary>
            Cloaks the text, obfuscate sensitive data to prevent collection by robots and spiders and crawlers
            </summary>
            <param name="PersonalInfo">The personal info.</param>
            <returns>obfuscated sensitive data by hustling ASCII characters</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.GetMediumDate(System.String)">
            <summary>
            Gets the medium date by current culture.
            </summary>
            <param name="strDate">The date.</param>
            <returns>return formatted content of the date if paramter isn't empty, else return the parameter.</returns>
            <example>
            <code lang="C#">
            var mediumDate = GetMediumDate("6/1/2011");
            </code>
            </example>
        </member>
        <member name="M:DotNetNuke.Common.Globals.GetShortDate(System.String)">
            <summary>
            Gets the short date.
            </summary>
            <param name="strDate">The date.</param>
            <returns>short date content of the input.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.IsAdminControl">
            <summary>
            Determines whether current request contains admin control information.
            </summary>
            <returns>
              <c>true</c> if current request contains admin control information; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.IsAdminSkin">
            <summary>
            Determines whether current request use admin skin.
            </summary>
            <returns>
              <c>true</c> if current request use admin skin; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.IsEditMode">
            -----------------------------------------------------------------------------
            <summary>
            Returns whether the current tab is in EditMode
            </summary>
            <returns><c>true</c> if the tab is in Edit mode; otherwise <c>false</c></returns>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Globals.IsLayoutMode">
            -----------------------------------------------------------------------------
            <summary>
            Returns whether the current tab is in LayoutMode
            </summary>
            <returns><c>true</c> if the current tab is in layout mode; otherwise <c>false</c></returns>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Globals.CreateRSS(System.Data.IDataReader,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Creates the RSS.
            </summary>
            <param name="dr">The dr.</param>
            <param name="TitleField">The title field.</param>
            <param name="URLField">The URL field.</param>
            <param name="CreatedDateField">The created date field.</param>
            <param name="SyndicateField">The syndicate field.</param>
            <param name="DomainName">Name of the domain.</param>
            <param name="FileName">Name of the file.</param>
        </member>
        <member name="M:DotNetNuke.Common.Globals.ManageUploadDirectory(System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            injects the upload directory into raw HTML for src and background tags
            </summary>
            <param name="strHTML">raw HTML text</param>
            <param name="strUploadDirectory">path of portal image directory</param>
            <returns>HTML with paths for images and background corrected</returns>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Globals.ManageTokenUploadDirectory(System.String,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            injects the upload directory into raw HTML for a single token
            </summary>
            <param name="strHTML">raw HTML text</param>
            <param name="strUploadDirectory">path of portal image directory</param>
            <param name="strToken">token to be replaced</param>
            <returns>HTML with paths for images and background corrected</returns>
            <remarks>
            called by ManageUploadDirectory for each token.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Globals.FindControlRecursive(System.Web.UI.Control,System.String)">
            <summary>
            Finds the control recursive from child to parent.
            </summary>
            <param name="objControl">current control.</param>
            <param name="strControlName">the control name which want to find out.</param>
            <returns>control which'name is strControlName, or else return null if didn't match any control.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.FindControlRecursiveDown(System.Web.UI.Control,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Searches control hierarchy from top down to find a control matching the passed in name
            </summary>
            <param name="objParent">Root control to begin searching</param>
            <param name="strControlName">Name of control to look for</param>
            <returns></returns>
            <remarks>
            This differs from FindControlRecursive in that it looks down the control hierarchy, whereas, the 
            FindControlRecursive starts at the passed in control and walks the tree up.  Therefore, this function is 
            more a expensive task.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Globals.SetFormFocus(System.Web.UI.Control)">
            <summary>
            Sets the form focus.
            </summary>
            <param name="control">The control.</param>
        </member>
        <member name="M:DotNetNuke.Common.Globals.GetExternalRequest(System.String)">
            <summary>
            Gets the external request.
            </summary>
            <param name="Address">The address.</param>
            <returns>Web request</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.GetExternalRequest(System.String,System.Net.NetworkCredential)">
            <summary>
            Gets the external request.
            </summary>
            <param name="Address">The address.</param>
            <param name="Credentials">The credentials.</param>
            <returns>Web request</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.DeleteFolderRecursive(System.String)">
            <summary>
            Deletes the folder recursive, include the folder itself will be deleted.
            </summary>
            <param name="strRoot">The root.</param>
        </member>
        <member name="M:DotNetNuke.Common.Globals.DeleteFilesRecursive(System.String,System.String)">
            <summary>
            Deletes the files recursive which match the filter, will not delete folders and will ignore folder which is hidden or system.
            </summary>
            <param name="strRoot">The root.</param>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:DotNetNuke.Common.Globals.CleanFileName(System.String)">
            <summary>
            Cleans the name of the file.
            </summary>
            <param name="FileName">Name of the file.</param>
            <returns>clean name</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.CleanFileName(System.String,System.String)">
            <summary>
            Cleans the name of the file.
            </summary>
            <param name="FileName">Name of the file.</param>
            <param name="BadChars">The bad chars.</param>
            <returns>clean name</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.CleanFileName(System.String,System.String,System.String)">
            <summary>
            Cleans the name of the file.
            </summary>
            <param name="FileName">Name of the file.</param>
            <param name="BadChars">The bad chars.</param>
            <param name="ReplaceChar">The replace char.</param>
            <returns>clean name</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.CleanName(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            CleanName - removes characters from Module/Tab names that are being used for file names
            in Module/Tab Import/Export.  
            </summary>
            <remarks>
            </remarks>
            <returns>A cleaned string</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Globals.CreateValidClass(System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
              CreateValidClass - removes characters from Module/Tab names which are invalid  
              for use as an XHTML class attribute / CSS class selector value and optionally
              prepends the letter 'A' if the first character is not alphabetic.  This differs 
              from <see>CreateValidID</see> which replaces invalid characters with an underscore
              and replaces the first letter with an 'A' if it is not alphabetic
            </summary>
            <param name = "inputValue">String to use to create the class value</param>
            <param name = "validateFirstChar">If set true, validate whether the first character
              is alphabetic and, if not, prepend the letter 'A' to the returned value</param>
            <remarks>
            </remarks>
            <returns>A string suitable for use as a class value</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Globals.CreateValidID(System.String)">
            <summary>
              Creates the valid ID.
            </summary>
            <param name = "inputValue">The input value.</param>
            <returns>String with a valid ID</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.AccessDeniedURL">
            <summary>
            Get the URL to show the "access denied" message.
            </summary>
            <returns>URL to access denied view</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.AccessDeniedURL(System.String)">
            <summary>
            Get the URL to show the "access denied" message.
            </summary>
            <param name="Message">The message to display.</param>
            <returns>URL to access denied view</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.AddHTTP(System.String)">
            <summary>
            Adds the current request's protocol (<c>"http://"</c> or <c>"https://"</c>) to the given URL, if it does not already have a protocol specified
            </summary>
            <param name="strURL">The URL</param>
            <returns>The formatted URL</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.ApplicationURL">
            -----------------------------------------------------------------------------
            <summary>
            Generates the Application root url (including the tab/page)
            </summary>
            <remarks>
            This overload assumes the current page
            </remarks>
            <returns>The formatted root url</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Globals.ApplicationURL(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Generates the Application root url (including the tab/page)
            </summary>
            <remarks>
            This overload takes the tabid (page id) as a parameter
            </remarks>
            <param name="TabID">The id of the tab/page</param>
            <returns>The formatted root url</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Globals.FormatHelpUrl(System.String,DotNetNuke.Entities.Portals.PortalSettings,System.String)">
            <summary>
            Formats the help URL, adding query-string parameters and a protocol (if missing).
            </summary>
            <param name="HelpUrl">The help URL.</param>
            <param name="objPortalSettings">The portal settings.</param>
            <param name="Name">The name of the module.</param>
            <returns>Formatted URL.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.FormatHelpUrl(System.String,DotNetNuke.Entities.Portals.PortalSettings,System.String,System.String)">
            <summary>
            Formats the help URL, adding query-string parameters and a protocol (if missing).
            </summary>
            <param name="HelpUrl">The help URL.</param>
            <param name="objPortalSettings">The portal settings.</param>
            <param name="Name">The name of the module.</param>
            <param name="Version">The version of the module.</param>
            <returns>Formatted URL.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.FriendlyUrl(DotNetNuke.Entities.Tabs.TabInfo,System.String)">
            <summary>
            Generates the correctly formatted friendly URL.
            </summary>
            <remarks>
            Assumes Default.aspx, and that portalsettings are saved to Context
            </remarks>
            <param name="tab">The current tab</param>
            <param name="path">The path to format.</param>
            <returns>The formatted (friendly) URL</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.FriendlyUrl(DotNetNuke.Entities.Tabs.TabInfo,System.String,System.String)">
            <summary>
            Generates the correctly formatted friendly URL
            </summary>
            <remarks>
            This overload includes an optional page to include in the url.
            </remarks>
            <param name="tab">The current tab</param>
            <param name="path">The path to format.</param>
            <param name="pageName">The page to include in the url.</param>
            <returns>The formatted (friendly) URL</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.FriendlyUrl(DotNetNuke.Entities.Tabs.TabInfo,System.String,DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>
            Generates the correctly formatted friendly URL
            </summary>
            <remarks>
            This overload includes the portal settings for the site
            </remarks>
            <param name="tab">The current tab</param>
            <param name="path">The path to format.</param>
            <param name="settings">The portal settings</param>
            <returns>The formatted (friendly) URL</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.FriendlyUrl(DotNetNuke.Entities.Tabs.TabInfo,System.String,System.String,DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>
            Generates the correctly formatted friendly URL
            </summary>
            <remarks>
            This overload includes an optional page to include in the URL, and the portal 
            settings for the site
            </remarks>
            <param name="tab">The current tab</param>
            <param name="path">The path to format.</param>
            <param name="pageName">The page to include in the URL.</param>
            <param name="settings">The portal settings</param>
            <returns>The formatted (friendly) url</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.FriendlyUrl(DotNetNuke.Entities.Tabs.TabInfo,System.String,System.String,System.String)">
            <summary>
            Generates the correctly formatted friendly url
            </summary>
            <remarks>
            This overload includes an optional page to include in the url, and the portal 
            alias for the site
            </remarks>
            <param name="tab">The current tab</param>
            <param name="path">The path to format.</param>
            <param name="pageName">The page to include in the URL.</param>
            <param name="portalAlias">The portal alias for the site</param>
            <returns>The formatted (friendly) URL</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.GetURLType(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Returns the type of URl (T=other tab, F=file, U=URL, N=normal)
            </summary>
            <remarks>
            </remarks>
            <param name="URL">The url</param>
            <returns>The url type</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Globals.ImportUrl(System.Int32,System.String)">
            <summary>
            Url's as internal links to Files, Tabs and Users should only be imported if
            those files, tabs and users exist. This function parses the url, and checks
            whether the internal links exist. 
            If the link does not exist, the function will return an empty string
            </summary>
            <param name="ModuleId">Integer</param>
            <param name="url">String</param>
            <returns>If an internal link does not exist, an empty string is returned, otherwise the passed in url is returned as is</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.LoginURL(System.String,System.Boolean)">
            <summary>
            Gets the login URL.
            </summary>
            <param name="returnUrl">The URL to redirect to after logging in.</param>
            <param name="overrideSetting">if set to <c>true</c>, show the login control on the current page, even if there is a login page defined for the site.</param>
            <returns>Formatted URL.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.LoginURL(System.String,System.Boolean,DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>
            Gets the login URL.
            </summary>
            <param name="returnUrl">The URL to redirect to after logging in.</param>
            <param name="overrideSetting">if set to <c>true</c>, show the login control on the current page, even if there is a login page defined for the site.</param>
            <param name="portalSettings">The Portal Settings.</param>
            <returns>Formatted URL.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.UserProfileURL(System.Int32)">
            <summary>
            Gets User profile URL.
            </summary>
            <param name="userId">The user id.</param>
            <returns>Formatted url.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.NavigateURL">
            <summary>
            Gets the URL to the current page.
            </summary>
            <returns>Formatted URL.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.NavigateURL(System.Int32)">
            <summary>
            Gets the URL to the given page.
            </summary>
            <param name="tabID">The tab ID.</param>
            <returns>Formatted URL.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.NavigateURL(System.Int32,System.Boolean)">
            <summary>
            Gets the URL to the given page.
            </summary>
            <param name="tabID">The tab ID.</param>
            <param name="isSuperTab">if set to <c>true</c> the page is a "super-tab," i.e. a host-level page.</param>
            <returns>Formatted URL.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.NavigateURL(System.String)">
            <summary>
            Gets the URL to show the control associated with the given control key.
            </summary>
            <param name="controlKey">The control key, or <see cref="F:System.String.Empty"/> or <c>null</c>.</param>
            <returns>Formatted URL.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.NavigateURL(System.String,System.String[])">
            <summary>
            Gets the URL to show the control associated with the given control key.
            </summary>
            <param name="controlKey">The control key, or <see cref="F:System.String.Empty"/> or <c>null</c>.</param>
            <param name="additionalParameters">Any additional parameters, in <c>"key=value"</c> format.</param>
            <returns>Formatted URL.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.NavigateURL(System.Int32,System.String)">
            <summary>
            Gets the URL to show the control associated with the given control key on the given page.
            </summary>
            <param name="tabID">The tab ID.</param>
            <param name="controlKey">The control key, or <see cref="F:System.String.Empty"/> or <c>null</c>.</param>
            <returns>Formatted URL.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.NavigateURL(System.Int32,System.String,System.String[])">
            <summary>
            Gets the URL to show the given page.
            </summary>
            <param name="tabID">The tab ID.</param>
            <param name="controlKey">The control key, or <see cref="F:System.String.Empty"/> or <c>null</c>.</param>
            <param name="additionalParameters">Any additional parameters.</param>
            <returns>Formatted URL.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.NavigateURL(System.Int32,DotNetNuke.Entities.Portals.PortalSettings,System.String,System.String[])">
            <summary>
            Gets the URL to show the given page.
            </summary>
            <param name="tabID">The tab ID.</param>
            <param name="settings">The portal settings.</param>
            <param name="controlKey">The control key, or <see cref="F:System.String.Empty"/> or <c>null</c>.</param>
            <param name="additionalParameters">Any additional parameters.</param>
            <returns>Formatted URL.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.NavigateURL(System.Int32,System.Boolean,DotNetNuke.Entities.Portals.PortalSettings,System.String,System.String[])">
            <summary>
            Gets the URL to show the given page.
            </summary>
            <param name="tabID">The tab ID.</param>
            <param name="isSuperTab">if set to <c>true</c> the page is a "super-tab," i.e. a host-level page.</param>
            <param name="settings">The portal settings.</param>
            <param name="controlKey">The control key, or <see cref="F:System.String.Empty"/> or <c>null</c>.</param>
            <param name="additionalParameters">Any additional parameters.</param>
            <returns>Formatted URL.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.NavigateURL(System.Int32,System.Boolean,DotNetNuke.Entities.Portals.PortalSettings,System.String,System.String,System.String[])">
            <summary>
            Gets the URL to show the given page.
            </summary>
            <param name="tabID">The tab ID.</param>
            <param name="isSuperTab">if set to <c>true</c> the page is a "super-tab," i.e. a host-level page.</param>
            <param name="settings">The portal settings.</param>
            <param name="controlKey">The control key, or <see cref="F:System.String.Empty"/> or <c>null</c>.</param>
            <param name="language">The language code.</param>
            <param name="additionalParameters">Any additional parameters.</param>
            <returns>Formatted URL.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.NavigateURL(System.Int32,System.Boolean,DotNetNuke.Entities.Portals.PortalSettings,System.String,System.String,System.String,System.String[])">
            <summary>
            Gets the URL to show the given page.
            </summary>
            <param name="tabID">The tab ID.</param>
            <param name="isSuperTab">if set to <c>true</c> the page is a "super-tab," i.e. a host-level page.</param>
            <param name="settings">The portal settings.</param>
            <param name="controlKey">The control key, or <see cref="F:System.String.Empty"/> or <c>null</c>.</param>
            <param name="language">The language code.</param>
            <param name="pageName">The page name to pass to <see cref="M:DotNetNuke.Common.Globals.FriendlyUrl(DotNetNuke.Entities.Tabs.TabInfo,System.String,System.String)"/>.</param>
            <param name="additionalParameters">Any additional parameters.</param>
            <returns>Formatted url.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.QueryStringEncode(System.String)">
            <summary>
            UrlEncode query string
            </summary>
            <param name="QueryString">The query string.</param>
            <returns>Encoded content</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.QueryStringDecode(System.String)">
            <summary>
            UrlDecode query string
            </summary>
            <param name="QueryString">The query string.</param>
            <returns>Decoded content</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.RegisterURL(System.String,System.String)">
            <summary>
            Gets Register URL.
            </summary>
            <param name="returnURL">The return URL.</param>
            <param name="originalURL">The original URL.</param>
            <returns>Formatted url.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.ResolveUrl(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Generates the correctly formatted url
            </summary>
            <remarks>
            </remarks>
            <param name="url">The url to format.</param>
            <returns>The formatted (resolved) url</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Globals.EncodeReservedCharacters(System.String)">
            <summary>
            Encodes the reserved characters.
            </summary>
            <param name="QueryString">The query string.</param>
            <returns>Encoded content</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.DateToString(System.DateTime)">
            <summary>
            Dates to string.
            </summary>
            <param name="DateValue">The date value.</param>
            <returns>return value of input with SortableDateTimePattern.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.GetHashValue(System.Object,System.String)">
            <summary>
            Gets the hash value.
            </summary>
            <param name="HashObject">The hash object.</param>
            <param name="DefaultValue">The default value.</param>
            <returns>HashOject's value or DefaultValue if HashObject is null.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.LinkClick(System.String,System.Int32,System.Int32)">
            <summary>
            Gets Link click url.
            </summary>
            <param name="Link">The link.</param>
            <param name="TabID">The tab ID.</param>
            <param name="ModuleID">The module ID.</param>
            <returns>Formatted url.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.LinkClick(System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets Link click url.
            </summary>
            <param name="Link">The link.</param>
            <param name="TabID">The tab ID.</param>
            <param name="ModuleID">The module ID.</param>
            <param name="TrackClicks">if set to <c>true</c> [track clicks].</param>
            <returns>Formatted url.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.LinkClick(System.String,System.Int32,System.Int32,System.Boolean,System.String)">
            <summary>
            Gets Link click url.
            </summary>
            <param name="Link">The link.</param>
            <param name="TabID">The tab ID.</param>
            <param name="ModuleID">The module ID.</param>
            <param name="TrackClicks">if set to <c>true</c> [track clicks].</param>
            <param name="ContentType">Type of the content.</param>
            <returns>Formatted url.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.LinkClick(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets Link click url.
            </summary>
            <param name="Link">The link.</param>
            <param name="TabID">The tab ID.</param>
            <param name="ModuleID">The module ID.</param>
            <param name="TrackClicks">if set to <c>true</c> [track clicks].</param>
            <param name="ForceDownload">if set to <c>true</c> [force download].</param>
            <returns>Formatted url.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.LinkClick(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.String)">
            <summary>
            Gets Link click url.
            </summary>
            <param name="Link">The link.</param>
            <param name="TabID">The tab ID.</param>
            <param name="ModuleID">The module ID.</param>
            <param name="TrackClicks">if set to <c>true</c> [track clicks].</param>
            <param name="ForceDownload">if set to <c>true</c> [force download].</param>
            <param name="PortalId">The portal id.</param>
            <param name="EnableUrlLanguage">if set to <c>true</c> [enable URL language].</param>
            <param name="portalGuid">The portal GUID.</param>
            <returns>Formatted url.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.GetRoleName(System.Int32)">
            <summary>
            Gets the name of the role.
            </summary>
            <param name="RoleID">The role ID.</param>
            <returns>Role Name</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.GetContent(System.String,System.String)">
            <summary>
            Gets the content.
            </summary>
            <param name="Content">The content.</param>
            <param name="ContentType">Type of the content.</param>
            <returns>specific node by content type of the whole document.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.GenerateTabPath(System.Int32,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            GenerateTabPath generates the TabPath used in Friendly URLS
            </summary>
            <remarks>
            </remarks>
            <param name="parentId">The Id of the Parent Tab</param>
            <param name="tabName">The Name of the current Tab</param>
            <returns>The TabPath</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Globals.GetHelpText(System.Int32)">
            <summary>
            Gets the help text.
            </summary>
            <param name="moduleControlId">The module control id.</param>
            <returns>help text.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.GetOnLineHelp(System.String,DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            Gets the online help url.
            </summary>
            <param name="HelpUrl">The help URL.</param>
            <param name="moduleConfig">The module config.</param>
            <returns>url.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.ValidateLoginTabID(System.Int32)">
            <summary>
            Check whether the tab contains "Account Login" module.
            </summary>
            <param name="tabId">The tab id.</param>
            <returns><c>true</c> if the tab contains "Account Login" module, otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.ValidateModuleInTab(System.Int32,System.String)">
            <summary>
            Check whether the tab contains specific module.
            </summary>
            <param name="tabId">The tab id.</param>
            <param name="moduleName">The module need to check.</param>
            <returns><c>true</c> if the tab contains the module, otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.FilenameMatchesExtensions(System.String,System.String)">
            <summary>
            Check whether the Filename matches extensions.
            </summary>
            <param name="filename">The filename.</param>
            <param name="strExtensions">The valid extensions.</param>
            <returns><c>true</c> if the Filename matches extensions, otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.DeserializeHashTableBase64(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            DeserializeHashTableBase64 deserializes a Hashtable using Binary Formatting
            </summary>
            <remarks>
            While this method of serializing is no longer supported (due to Medium Trust
            issue, it is still required for upgrade purposes.
            </remarks>
            <param name="Source">The String Source to deserialize</param>
            <returns>The deserialized Hashtable</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Globals.DeserializeHashTableXml(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            DeserializeHashTableXml deserializes a Hashtable using Xml Serialization
            </summary>
            <remarks>
            This is the preferred method of serialization under Medium Trust
            </remarks>
            <param name="Source">The String Source to deserialize</param>
            <returns>The deserialized Hashtable</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Globals.SerializeHashTableBase64(System.Collections.Hashtable)">
            -----------------------------------------------------------------------------
            <summary>
            SerializeHashTableBase64 serializes a Hashtable using Binary Formatting
            </summary>
            <remarks>
            While this method of serializing is no longer supported (due to Medium Trust
            issue, it is still required for upgrade purposes.
            </remarks>
            <param name="Source">The Hashtable to serialize</param>
            <returns>The serialized String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Globals.SerializeHashTableXml(System.Collections.Hashtable)">
            -----------------------------------------------------------------------------
            <summary>
            SerializeHashTableXml serializes a Hashtable using Xml Serialization
            </summary>
            <remarks>
            This is the preferred method of serialization under Medium Trust
            </remarks>
            <param name="Source">The Hashtable to serialize</param>
            <returns>The serialized String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Globals.IsHostTab(System.Int32)">
            <summary>
            Check whether the specific page is a host page.
            </summary>
            <param name="tabId">The tab ID.</param>
            <returns>if <c>true</c> the tab is a host page; otherwise, it is not a host page.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Globals.UserProfilePicFormattedUrl">
            <summary>
            Return User Profile Picture Formatted Url. UserId, width and height can be passed to build a formatted Avatar Url.
            </summary>        
            <returns>Formatted url,  e.g. http://www.mysite.com/DnnImageHandler.ashx?mode=profilepic&amp;userid={0}&amp;h={1}&amp;w={2} 
            </returns>
            <remarks>Usage: ascx - &lt;asp:Image ID="avatar" runat="server" CssClass="SkinObject" /&gt;
            code behind - avatar.ImageUrl = string.Format(Globals.UserProfilePicFormattedUrl(), userInfo.UserID, 32, 32)
            </remarks>
        </member>
        <member name="M:DotNetNuke.Common.Globals.UserProfilePicRelativeUrl">
            <summary>
            Return User Profile Picture relative Url. UserId, width and height can be passed to build a formatted relative Avatar Url.
            </summary>        
            <returns>Formatted url,  e.g. /DnnImageHandler.ashx?userid={0}&amp;h={1}&amp;w={2} considering child portal
            </returns>
            <remarks>Usage: ascx - &lt;asp:Image ID="avatar" runat="server" CssClass="SkinObject" /&gt;
            code behind - avatar.ImageUrl = string.Format(Globals.UserProfilePicRelativeUrl(), userInfo.UserID, 32, 32)
            </remarks>
        </member>
        <member name="M:DotNetNuke.Common.Globals.UserProfilePicRelativeUrl(System.Boolean)">
            <summary>
            Return User Profile Picture relative Url. UserId, width and height can be passed to build a formatted relative Avatar Url.
            </summary>        
            <param name="includeCdv">Indicates if cdv (Cache Delayed Verification) has to be included in the returned URL.</param>
            <returns>Formatted url,  e.g. /DnnImageHandler.ashx?userid={0}&amp;h={1}&amp;w={2} considering child portal
            </returns>
            <remarks>Usage: ascx - &lt;asp:Image ID="avatar" runat="server" CssClass="SkinObject" /&gt;
            code behind - avatar.ImageUrl = string.Format(Globals.UserProfilePicRelativeUrl(), userInfo.UserID, 32, 32)
            </remarks>
        </member>
        <member name="T:DotNetNuke.Common.HttpContextSource">
            <summary>
            A unit testable alternative to HttpContext.Current
            </summary>
        </member>
        <member name="P:DotNetNuke.Common.HttpContextSource.Current">
            <summary>
            Gets the current HttpContext
            </summary>
        </member>
        <member name="M:DotNetNuke.Common.HttpContextSource.RegisterInstance(System.Web.HttpContextBase)">
            <summary>
            Injects a fake/mock context for unit testing
            </summary>
            <param name="instance">The fake context to inject</param>
        </member>
        <member name="T:DotNetNuke.Common.Initialize">
            <summary>
            The Object to initialize application.
            </summary>
        </member>
        <member name="M:DotNetNuke.Common.Initialize.Init(System.Web.HttpApplication)">
            -----------------------------------------------------------------------------
            <summary>
            Inits the app.
            </summary>
            <param name="app">The app.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Initialize.LogStart">
            -----------------------------------------------------------------------------
            <summary>
            LogStart logs the Application Start Event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Initialize.LogEnd">
            -----------------------------------------------------------------------------
            <summary>
            LogEnd logs the Application Start Event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Initialize.ProcessHttpModule(System.Web.HttpRequest,System.Boolean,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            Tests whether this request should be processed in an HttpModule
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Initialize.StartScheduler(System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            StartScheduler starts the Scheduler
            </summary>
            <param name="resetAppStartElapseTime">Whether reset app start elapse time before running schedule tasks.</param>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Common.Initialize.StopScheduler">
            -----------------------------------------------------------------------------
            <summary>
            StopScheduler stops the Scheduler
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Common.Internal.IGlobals.ApplicationPath">
            <summary>
            Gets the application path.
            </summary>
        </member>
        <member name="P:DotNetNuke.Common.Internal.IGlobals.HostMapPath">
            <summary>
            Gets or sets the host map path.
            </summary>
            <value>ApplicationMapPath + "Portals\_default\"</value>
        </member>
        <member name="M:DotNetNuke.Common.Internal.IGlobals.GetSubFolderPath(System.String,System.Int32)">
            <summary>
            Returns the folder path under the root for the portal 
            </summary>
            <param name="fileNamePath">The folder the absolute path</param>
            <param name="portalId">Portal Id.</param>
        </member>
        <member name="M:DotNetNuke.Common.Internal.IGlobals.LinkClick(System.String,System.Int32,System.Int32)">
            <summary>
            Gets Link click url.
            </summary>
            <param name="link">The link.</param>
            <param name="tabId">The tab ID.</param>
            <param name="moduleId">The module ID.</param>
            <returns>Formatted url.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Internal.IGlobals.LinkClick(System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Int32,System.Boolean,System.String)">
            <summary>
            Gets Link click url.
            </summary>
            <param name="Link">The link</param>
            <param name="TabID">The Tab ID</param>
            <param name="ModuleID">The Module ID</param>
            <param name="TrackClicks">Check whether it has to track clicks</param>
            <param name="ForceDownload">Check whether it has to force the download</param>
            <param name="PortalId">The Portal ID</param>
            <param name="EnableUrlLanguage">Check whether the portal has enabled  ulr languages</param>
            <param name="portalGuid">The Portal GUID</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Common.Internal.IGlobals.ResolveUrl(System.String)">
            <summary>
            Generates the correctly formatted url
            </summary>
            <remarks>
            </remarks>
            <param name="url">The url to format.</param>
            <returns>The formatted (resolved) url</returns>
        </member>
        <member name="M:DotNetNuke.Common.Internal.IGlobals.IsHostTab(System.Int32)">
            <summary>
            Check whether the specific page is a host page.
            </summary>
            <param name="tabId">The tab ID.</param>
            <returns>if <c>true</c> the tab is a host page; otherwise, it is not a host page.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Internal.IGlobals.AddHTTP(System.String)">
            <summary>
            Adds the current request's protocol (<c>"http://"</c> or <c>"https://"</c>) to the given URL, if it does not already have a protocol specified
            </summary>
            <param name="strURL">The URL</param>
            <returns>The formatted URL</returns>
        </member>
        <member name="M:DotNetNuke.Common.Internal.IGlobals.GetPortalDomainName(System.String,System.Web.HttpRequest,System.Boolean)">
            <summary>
            Gets the portal domain name.
            </summary>
            <param name="strPortalAlias">The portal alias.</param>
            <param name="Request">The request or <c>null</c>.</param>
            <param name="blnAddHTTP">if set to <c>true</c> calls <see cref="M:DotNetNuke.Common.Internal.IGlobals.AddHTTP(System.String)"/> on the result.</param>
            <returns>domain name</returns>
        </member>
        <member name="M:DotNetNuke.Common.Internal.IGlobals.GetDomainName(System.Uri)">
            <summary>
            Gets the name of the domain.
            </summary>
            <param name="requestedUri">The requested Uri</param>
            <returns>domain name</returns>
        </member>
        <member name="M:DotNetNuke.Common.Internal.IGlobals.GetDomainName(System.Uri,System.Boolean)">
            <summary>
            returns the domain name of the current request ( ie. www.domain.com or 207.132.12.123 or www.domain.com/directory if subhost )
            </summary>
            <param name="requestedUri">The requested Uri</param>
            <param name="parsePortNumber">if set to <c>true</c> [parse port number].</param>
            <returns>domain name</returns>
        </member>
        <member name="M:DotNetNuke.Common.Internal.IGlobals.FormatHelpUrl(System.String,DotNetNuke.Entities.Portals.PortalSettings,System.String)">
            <summary>
            Formats the help URL, adding query-string parameters and a protocol (if missing).
            </summary>
            <param name="HelpUrl">The help URL.</param>
            <param name="objPortalSettings">The portal settings.</param>
            <param name="Name">The name of the module.</param>
            <returns>Formatted URL.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Internal.IGlobals.FormatHelpUrl(System.String,DotNetNuke.Entities.Portals.PortalSettings,System.String,System.String)">
            <summary>
            Formats the help URL, adding query-string parameters and a protocol (if missing).
            </summary>
            <param name="HelpUrl">The help URL.</param>
            <param name="objPortalSettings">The portal settings.</param>
            <param name="Name">The name of the module.</param>
            <param name="Version">The version of the module.</param>
            <returns>Formatted URL.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Internal.IGlobals.AccessDeniedURL">
            <summary>
            Get the URL to show the "access denied" message.
            </summary>
            <returns>URL to access denied view</returns>
        </member>
        <member name="M:DotNetNuke.Common.Internal.IGlobals.AccessDeniedURL(System.String)">
            <summary>
            Get the URL to show the "access denied" message.
            </summary>
            <param name="Message">The message to display.</param>
            <returns>URL to access denied view</returns>
        </member>
        <member name="M:DotNetNuke.Common.Internal.IGlobals.LoginURL(System.String,System.Boolean)">
            <summary>
            Gets the login URL.
            </summary>
            <param name="returnURL">The URL to redirect to after logging in.</param>
            <param name="override">if set to <c>true</c>, show the login control on the current page, even if there is a login page defined for the site.</param>
            <returns>Formatted URL.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Internal.IGlobals.NavigateURL">
            <summary>
            Gets the URL to the current page.
            </summary>
            <returns>Formatted URL.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Internal.IGlobals.NavigateURL(System.Int32)">
            <summary>
            Gets the URL to the given page.
            </summary>
            <param name="tabID">The tab ID.</param>
            <returns>Formatted URL.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Internal.IGlobals.NavigateURL(System.Int32,System.Boolean)">
            <summary>
            Gets the URL to the given page.
            </summary>
            <param name="tabID">The tab ID.</param>
            <param name="isSuperTab">if set to <c>true</c> the page is a "super-tab," i.e. a host-level page.</param>
            <returns>Formatted URL.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Internal.IGlobals.NavigateURL(System.String)">
            <summary>
            Gets the URL to show the control associated with the given control key.
            </summary>
            <param name="controlKey">The control key, or <see cref="F:System.String.Empty"/> or <c>null</c>.</param>
            <returns>Formatted URL.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Internal.IGlobals.NavigateURL(System.String,System.String[])">
            <summary>
            Gets the URL to show the control associated with the given control key.
            </summary>
            <param name="controlKey">The control key, or <see cref="F:System.String.Empty"/> or <c>null</c>.</param>
            <param name="additionalParameters">Any additional parameters, in <c>"key=value"</c> format.</param>
            <returns>Formatted URL.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Internal.IGlobals.NavigateURL(System.Int32,System.String)">
            <summary>
            Gets the URL to show the control associated with the given control key on the given page.
            </summary>
            <param name="tabID">The tab ID.</param>
            <param name="controlKey">The control key, or <see cref="F:System.String.Empty"/> or <c>null</c>.</param>
            <returns>Formatted URL.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Internal.IGlobals.NavigateURL(System.Int32,System.String,System.String[])">
            <summary>
            Gets the URL to show the given page.
            </summary>
            <param name="tabID">The tab ID.</param>
            <param name="controlKey">The control key, or <see cref="F:System.String.Empty"/> or <c>null</c>.</param>
            <param name="additionalParameters">Any additional parameters.</param>
            <returns>Formatted URL.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Internal.IGlobals.NavigateURL(System.Int32,DotNetNuke.Entities.Portals.PortalSettings,System.String,System.String[])">
            <summary>
            Gets the URL to show the given page.
            </summary>
            <param name="tabID">The tab ID.</param>
            <param name="settings">The portal settings.</param>
            <param name="controlKey">The control key, or <see cref="F:System.String.Empty"/> or <c>null</c>.</param>
            <param name="additionalParameters">Any additional parameters.</param>
            <returns>Formatted URL.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Internal.IGlobals.NavigateURL(System.Int32,System.Boolean,DotNetNuke.Entities.Portals.PortalSettings,System.String,System.String[])">
            <summary>
            Gets the URL to show the given page.
            </summary>
            <param name="tabID">The tab ID.</param>
            <param name="isSuperTab">if set to <c>true</c> the page is a "super-tab," i.e. a host-level page.</param>
            <param name="settings">The portal settings.</param>
            <param name="controlKey">The control key, or <see cref="F:System.String.Empty"/> or <c>null</c>.</param>
            <param name="additionalParameters">Any additional parameters.</param>
            <returns>Formatted URL.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Internal.IGlobals.NavigateURL(System.Int32,System.Boolean,DotNetNuke.Entities.Portals.PortalSettings,System.String,System.String,System.String[])">
            <summary>
            Gets the URL to show the given page.
            </summary>
            <param name="tabID">The tab ID.</param>
            <param name="isSuperTab">if set to <c>true</c> the page is a "super-tab," i.e. a host-level page.</param>
            <param name="settings">The portal settings.</param>
            <param name="controlKey">The control key, or <see cref="F:System.String.Empty"/> or <c>null</c>.</param>
            <param name="language">The language code.</param>
            <param name="additionalParameters">Any additional parameters.</param>
            <returns>Formatted URL.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Internal.IGlobals.NavigateURL(System.Int32,System.Boolean,DotNetNuke.Entities.Portals.PortalSettings,System.String,System.String,System.String,System.String[])">
            <summary>
            Gets the URL to show the given page.
            </summary>
            <param name="tabID">The tab ID.</param>
            <param name="isSuperTab">if set to <c>true</c> the page is a "super-tab," i.e. a host-level page.</param>
            <param name="settings">The portal settings.</param>
            <param name="controlKey">The control key, or <see cref="F:System.String.Empty"/> or <c>null</c>.</param>
            <param name="language">The language code.</param>
            <param name="pageName">The page name to pass to <see cref="M:DotNetNuke.Common.Internal.IGlobals.FriendlyUrl(DotNetNuke.Entities.Tabs.TabInfo,System.String,System.String)"/>.</param>
            <param name="additionalParameters">Any additional parameters.</param>
            <returns>Formatted url.</returns>
        </member>
        <member name="M:DotNetNuke.Common.Internal.IGlobals.FriendlyUrl(DotNetNuke.Entities.Tabs.TabInfo,System.String)">
            <summary>
            Generates the correctly formatted friendly URL.
            </summary>
            <remarks>
            Assumes Default.aspx, and that portalsettings are saved to Context
            </remarks>
            <param name="tab">The current tab</param>
            <param name="path">The path to format.</param>
            <returns>The formatted (friendly) URL</returns>
        </member>
        <member name="M:DotNetNuke.Common.Internal.IGlobals.FriendlyUrl(DotNetNuke.Entities.Tabs.TabInfo,System.String,System.String)">
            <summary>
            Generates the correctly formatted friendly URL
            </summary>
            <remarks>
            This overload includes an optional page to include in the url.
            </remarks>
            <param name="tab">The current tab</param>
            <param name="path">The path to format.</param>
            <param name="pageName">The page to include in the url.</param>
            <returns>The formatted (friendly) URL</returns>
        </member>
        <member name="M:DotNetNuke.Common.Internal.IGlobals.FriendlyUrl(DotNetNuke.Entities.Tabs.TabInfo,System.String,DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>
            Generates the correctly formatted friendly URL
            </summary>
            <remarks>
            This overload includes the portal settings for the site
            </remarks>
            <param name="tab">The current tab</param>
            <param name="path">The path to format.</param>
            <param name="settings">The portal settings</param>
            <returns>The formatted (friendly) URL</returns>
        </member>
        <member name="M:DotNetNuke.Common.Internal.IGlobals.FriendlyUrl(DotNetNuke.Entities.Tabs.TabInfo,System.String,System.String,DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>
            Generates the correctly formatted friendly URL
            </summary>
            <remarks>
            This overload includes an optional page to include in the URL, and the portal 
            settings for the site
            </remarks>
            <param name="tab">The current tab</param>
            <param name="path">The path to format.</param>
            <param name="pageName">The page to include in the URL.</param>
            <param name="settings">The portal settings</param>
            <returns>The formatted (friendly) url</returns>
        </member>
        <member name="M:DotNetNuke.Common.Internal.IGlobals.FriendlyUrl(DotNetNuke.Entities.Tabs.TabInfo,System.String,System.String,System.String)">
            <summary>
            Generates the correctly formatted friendly url
            </summary>
            <remarks>
            This overload includes an optional page to include in the url, and the portal 
            alias for the site
            </remarks>
            <param name="tab">The current tab</param>
            <param name="path">The path to format.</param>
            <param name="pageName">The page to include in the URL.</param>
            <param name="portalAlias">The portal alias for the site</param>
            <returns>The formatted (friendly) URL</returns>
        </member>
        <member name="P:DotNetNuke.Common.Lists.ListEntryInfo.Text">
            <summary>
            Localized text value of the list entry item. An attempt is made to look up the key "[ParentKey].[Value].Text" in the resource file 
            "App_GlobalResources/List_[ListName]". If not found the original (database) value is used.
            </summary>
            <value>
            Localized text value
            </value>
        </member>
        <member name="P:DotNetNuke.Common.Lists.ListEntryInfo.TextNonLocalized">
            <summary>
            Gets the text value bypassing localization.
            </summary>
            <value>
            The text value of the list entry item as it was set originally.
            </value>
        </member>
        <member name="M:DotNetNuke.Common.Lists.ListController.AddListEntry(DotNetNuke.Common.Lists.ListEntryInfo)">
            <summary>
            Adds a new list entry to the database. If the current thread locale is not "en-US" then the text value will also be 
            persisted to a resource file under App_GlobalResources using the list's name and the value as key.
            </summary>
            <param name="listEntry">The list entry.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Common.Lists.ListController.UpdateListEntry(DotNetNuke.Common.Lists.ListEntryInfo)">
            <summary>
            Updates the list entry in the database using the values set on the listEntry. Note that if the current thread locale is not "en-US" then the
            text value will be persisted to a resource file under App_GlobalResources using the list's name and the value as key. Also the supplied text value 
            will *not* be written to the database in this case (i.e. we expect the text value in the database to be the en-US text value).
            </summary>
            <param name="listEntry">The list entry info item to update.</param>
        </member>
        <member name="T:DotNetNuke.Common.Utils.NetworkUtils">
            <summary>
            Utility functions for network information
            </summary>
        </member>
        <member name="M:DotNetNuke.Common.Utils.NetworkUtils.GetAddress(System.String,DotNetNuke.Common.Utils.AddressType)">
            <summary>
            Gets the address.
            </summary>
            <param name="Host">The host.</param>
            <param name="AddressFormat">The address format.</param>
            <returns>Returns IP address</returns>
            <remarks><seealso cref="T:DotNetNuke.Common.Utils.AddressType"></seealso></remarks>
        </member>
        <member name="M:DotNetNuke.Common.Utils.NetworkUtils.IPtoLong(System.Net.IPAddress)">
            <summary>
            Convert IP address to long integer
            </summary>
            <param name="ip">The ip address</param>
            <returns>IP Address in long</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utils.NetworkUtils.LongToIp(System.Int64)">
            <summary>
            Longs to ip address.
            </summary>
            <param name="ip">The ip address</param>
            <returns>IP Number as formatted string</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utils.NetworkUtils.MaskFromCidr(System.Int32)">
            <summary>
            Masks from cidr.
            </summary>
            <param name="cidr">The Classless Inter-Domain Routing (cidr)</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Common.Utils.NetworkUtils.FormatAsCidr(System.String,System.String)">
            <summary>
            Formats as cidr.
            </summary>
            <param name="startIP">The start ip.</param>
            <param name="subnetMask">The subnet mask.</param>
            <returns>Classless Inter-Domain Routing</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utils.NetworkUtils.Network2IpRange(System.String,System.UInt32@,System.UInt32@)">
            <summary>
            Network2s the ip range.
            </summary>
            <param name="sNetwork">The network name.</param>
            <param name="startIP">The start ip.</param>
            <param name="endIP">The end ip.</param>
        </member>
        <member name="M:DotNetNuke.Common.Utils.NetworkUtils.IP2Int(System.String)">
            <summary>
            Convert IP to Integer
            </summary>
            <param name="ipNumber">The ip number.</param>
            <returns>IP number as integer</returns>
        </member>
        <member name="M:DotNetNuke.Common.Utils.NetworkUtils.IsIPInRange(System.String,System.String,System.String)">
            <summary>
            Determines whether ip is in range.
            </summary>
            <param name="currentIP">The current ip.</param>
            <param name="startIP">The start ip.</param>
            <param name="subnetmask">The subnetmask.</param>
            <returns>True or False</returns>
        </member>
        <member name="T:DotNetNuke.Common.Utils.AddressType">
            <summary>
            Enumration of IP AddressTyes
            </summary>
        </member>
        <member name="T:DotNetNuke.Common.XmlValidatorBase">
            <summary>
            Base class od XmlValidator
            </summary>
        </member>
        <member name="P:DotNetNuke.Common.XmlValidatorBase.Errors">
            <summary>
            Gets or sets the errors.
            </summary>
            <value>
            The errors.
            </value>
        </member>
        <member name="P:DotNetNuke.Common.XmlValidatorBase.SchemaSet">
            <summary>
            Gets the schema set.
            </summary>
        </member>
        <member name="M:DotNetNuke.Common.XmlValidatorBase.ValidationCallBack(System.Object,System.Xml.Schema.ValidationEventArgs)">
            <summary>
            Validations the call back.
            </summary>
            <param name="sender">The sender.</param>
            <param name="args">The <see cref="T:System.Xml.Schema.ValidationEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:DotNetNuke.Common.XmlValidatorBase.IsValid">
            <summary>
            Determines whether this instance is valid.
            </summary>
            <returns>
              <c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetNuke.Common.XmlValidatorBase.Validate(System.IO.Stream)">
            <summary>
            Validates the specified XML stream.
            </summary>
            <param name="xmlStream">The XML stream.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Common.XmlValidatorBase.Validate(System.String)">
            <summary>
            Validates the specified filename.
            </summary>
            <param name="filename">The filename.</param>
            <returns></returns>
        </member>
        <member name="T:DotNetNuke.Common.Guard">
            <summary>Specifies that a certain condition is an error</summary>
        </member>
        <member name="M:DotNetNuke.Common.Guard.Against(System.Boolean,System.String,System.Object[])">
            <summary>
                Indicates that the given <paramref name="condition" /> must not be <c>true</c>, throwing an
                <see cref="T:System.InvalidOperationException" /> if it is.
            </summary>
            <param name="condition">if set to <c>true</c>, throws an <see cref="T:System.InvalidOperationException" />.</param>
            <param name="message">
                A message that describes the error condition, as a composite format string (i.e. with <c>{0}</c>
                placeholders, like <see cref="M:System.String.Format(System.String,System.Object[])" />).
            </param>
            <param name="args">An array of objects to fill in the placeholders in <paramref name="message" />.</param>
            <exception cref="T:System.InvalidOperationException">When <paramref name="condition" /> is <c>true</c></exception>
        </member>
        <member name="M:DotNetNuke.Common.Guard.Against(System.Boolean,System.String)">
            <summary>
                Indicates that the given <paramref name="condition" /> must not be <c>true</c>, throwing an
                <see cref="T:System.InvalidOperationException" /> if it is.
            </summary>
            <param name="condition">if set to <c>true</c>, throws an <see cref="T:System.InvalidOperationException" />.</param>
            <param name="message">A message that describes the error condition.</param>
            <exception cref="T:System.InvalidOperationException">When <paramref name="condition" /> is <c>true</c></exception>
        </member>
        <member name="T:DotNetNuke.Common.Requires">
            <summary>
            Assert Class.
            </summary>
        </member>
        <member name="M:DotNetNuke.Common.Requires.IsTypeOf``1(System.String,System.Object)">
            <summary>
            Determines whether argValue is type of T.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="argName">Name of the arg.</param>
            <param name="argValue">The arg value.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:DotNetNuke.Common.Requires.NotNegative(System.String,System.Int32)">
            <summary>
            Determines whether argValue is less than zero.
            </summary>
            <param name="argName">Name of the arg.</param>
            <param name="argValue">The arg value.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:DotNetNuke.Common.Requires.NotNull``1(``0)">
            <summary>
            Determines whether the argument is null.
            </summary>
            <param name="item">The object to test.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:DotNetNuke.Common.Requires.NotNull(System.String,System.Object)">
            <summary>
            Determines whether the argValue is null.
            </summary>
            <param name="argName">Name of the arg.</param>
            <param name="argValue">The arg value.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:DotNetNuke.Common.Requires.NotNullOrEmpty(System.String,System.String)">
            <summary>
            Determines whether the argValue is null or empty.
            </summary>
            <param name="argName">Name of the arg.</param>
            <param name="argValue">The arg value.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:DotNetNuke.Common.Requires.NotNullOrHasNoWhiteSpace(System.String,System.String)">
            <summary>
            Determines whether the argValue is null, empty, or has whitespace only.
            </summary>
            <param name="argName">Name of the arg.</param>
            <param name="argValue">The arg value.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:DotNetNuke.Common.Requires.PropertyNotNegative``1(``0,System.String)">
            <summary>
            Determines whether a property is negative.
            </summary>
            <param name="item">The object to test.</param>
            <param name="propertyName">Name of the property.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:DotNetNuke.Common.Requires.PropertyNotNegative(System.String,System.String,System.Int32)">
            <summary>
            Determines whether propertyValue is less than zero.
            </summary>
            <param name="argName">Name of the arg.</param>
            <param name="argProperty">The arg property.</param>
            <param name="propertyValue">The property value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:DotNetNuke.Common.Requires.PropertyNotNull(System.String,System.String)">
            <summary>
            Determines whether the argValue is null.
            </summary>
            <param name="argName">Name of the arg.</param>
            <param name="argValue">The arg value.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:DotNetNuke.Common.Requires.PropertyNotNull``1(``0,System.String)">
            <summary>
            Determines whether a property is null.
            </summary>
            <param name="item">The object to test.</param>
            <param name="propertyName">Name of the property.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:DotNetNuke.Common.Requires.PropertyNotNullOrEmpty``1(``0,System.String)">
            <summary>
            Determines whether a property is null or empty.
            </summary>
            <param name="item">The object to test.</param>
            <param name="propertyName">Name of the property.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:DotNetNuke.Common.Requires.PropertyNotNullOrEmpty(System.String,System.String,System.String)">
            <summary>
            Determins whether propertyValye is not null or empty.
            </summary>
            <param name="argName">Name of the arg.</param>
            <param name="argProperty">The arg property.</param>
            <param name="propertyValue">The property value.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:DotNetNuke.Common.Requires.PropertyNotEqualTo``1(System.String,System.String,``0,``0)">
            <summary>
            Determines whether propertyValue equal to testValue.
            </summary>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="argName">Name of the arg.</param>
            <param name="argProperty">The arg property.</param>
            <param name="propertyValue">The property value.</param>
            <param name="testValue">The test value.</param>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:DotNetNuke.Data.IRepository`1.Delete(`0)">
            <summary>
            Delete an Item from the repository
            </summary>
            <param name="item">The item to be deleted</param>
        </member>
        <member name="M:DotNetNuke.Data.IRepository`1.Delete(System.String,System.Object[])">
            <summary>
            Delete items from the repository based on a sql Condition
            </summary>
            <param name="sqlCondition">The sql condition e.g. "WHERE ArticleId = {0}"</param>
            <param name="args">A collection of arguments to be mapped to the tokens in the sqlCondition</param>
        </member>
        <member name="M:DotNetNuke.Data.IRepository`1.Find(System.String,System.Object[])">
            <summary>
            Find items from the repository based on a sql condition
            </summary>
            <remarks>Find supports both full SQL statements such as "SELECT * FROM table WHERE ..." 
            as well as a SQL condition like "WHERE ..."</remarks>
            <param name="sqlCondition">The sql condition e.g. "WHERE ArticleId = @0"</param>
            <param name="args">A collection of arguments to be mapped to the tokens in the sqlCondition</param>
            <example>Find("where ArticleId = @0 and UserId = @1", articleId, userId)</example>
            <returns>A list of items</returns>
        </member>
        <member name="M:DotNetNuke.Data.IRepository`1.Find(System.Int32,System.Int32,System.String,System.Object[])">
            <summary>
            Find a GetPage of items from the repository based on a sql condition
            </summary>
            <remarks>Find supports both full SQL statements such as "SELECT * FROM table WHERE ..." 
            as well as a SQL condition like "WHERE ..."</remarks>
            <param name="pageIndex">The page Index to fetch</param>
            <param name="pageSize">The size of the page to fetch</param>
            <param name="sqlCondition">The sql condition e.g. "WHERE ArticleId = @0"</param>
            <param name="args">A collection of arguments to be mapped to the tokens in the sqlCondition</param>
            <returns>A list of items</returns>
        </member>
        <member name="M:DotNetNuke.Data.IRepository`1.Get">
            <summary>
            Returns all the items in the repository as an enumerable list
            </summary>
            <returns>The list of items</returns>
        </member>
        <member name="M:DotNetNuke.Data.IRepository`1.Get``1(``0)">
            <summary>
            Returns an enumerable list of items filtered by scope
            </summary>
            <remarks>
            This overload should be used to get a list of items for a specific module 
            instance or for a specific portal dependening on how the items in the repository 
            are scoped.
            </remarks>
            <typeparam name="TScopeType">The type of the scope field</typeparam>
            <param name="scopeValue">The value of the scope to filter by</param>
            <returns>The list of items</returns>
        </member>
        <member name="M:DotNetNuke.Data.IRepository`1.GetById``1(``0)">
            <summary>
            Get an individual item based on the items Id field
            </summary>
            <typeparam name="TProperty">The type of the Id field</typeparam>
            <param name="id">The value of the Id field</param>
            <returns>An item</returns>
        </member>
        <member name="M:DotNetNuke.Data.IRepository`1.GetById``2(``0,``1)">
            <summary>
            Get an individual item based on the items Id field
            </summary>
            <remarks>
            This overload should be used to get an item for a specific module
            instance or for a specific portal dependening on how the items in the repository 
            are scoped. This will allow the relevant cache to be searched first.
            </remarks>
            <typeparam name="TProperty">The type of the Id field</typeparam>
            <param name="id">The value of the Id field</param>
            <typeparam name="TScopeType">The type of the scope field</typeparam>
            <param name="scopeValue">The value of the scope to filter by</param>
            <returns>An item</returns>
        </member>
        <member name="M:DotNetNuke.Data.IRepository`1.GetPage(System.Int32,System.Int32)">
            <summary>
            Returns a page of items in the repository as a paged list
            </summary>
            <param name="pageIndex">The page Index to fetch</param>
            <param name="pageSize">The size of the page to fetch</param>
            <returns>The list of items</returns>
        </member>
        <member name="M:DotNetNuke.Data.IRepository`1.GetPage``1(``0,System.Int32,System.Int32)">
            <summary>
            Returns a page of items in the repository as a paged list filtered by scope
            </summary>
            <remarks>
            This overload should be used to get a list of items for a specific module 
            instance or for a specific portal dependening on how the items in the repository 
            are scoped.
            </remarks>
            <typeparam name="TScopeType">The type of the scope field</typeparam>
            <param name="scopeValue">The value of the scope to filter by</param>
            <param name="pageIndex">The page Index to fetch</param>
            <param name="pageSize">The size of the page to fetch</param>
            <returns>The list of items</returns>
        </member>
        <member name="M:DotNetNuke.Data.IRepository`1.Insert(`0)">
            <summary>
            Inserts an Item into the repository
            </summary>
            <param name="item">The item to be inserted</param>
        </member>
        <member name="M:DotNetNuke.Data.IRepository`1.Update(`0)">
            <summary>
            Updates an Item in the repository
            </summary>
            <param name="item">The item to be updated</param>
        </member>
        <member name="M:DotNetNuke.Data.IRepository`1.Update(System.String,System.Object[])">
            <summary>
            Update items in the repository based on a sql Condition
            </summary>
            <param name="sqlCondition">The sql condition e.g. "SET ArticelName = @1 WHERE ArticleId = @0"</param>
            <param name="args">A collection of arguments to be mapped to the tokens in the sqlCondition</param>
            <example>Update("SET Age=@1, Name=@2 WHERE ID=@0", 1, 21, "scooby");</example>
        </member>
        <member name="M:DotNetNuke.Data.DataProvider.UpdatePortalInfo(System.Int32,System.Int32,System.String,System.String,System.String,System.DateTime,System.Int32,System.Int32,System.String,System.Int32,System.Double,System.Double,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int32,System.String)">
            <summary>
            Updates the portal information.Saving basic portal settings at Admin - Site settings / Host - Portals - Edit Portal.
            </summary>
            <param name="portalId">The portal identifier.</param>
            <param name="portalGroupId">The portal group identifier.</param>
            <param name="portalName">Name of the portal.</param>
            <param name="logoFile">The logo file.</param>
            <param name="footerText">The footer text.</param>
            <param name="expiryDate">The expiry date.</param>
            <param name="userRegistration">The user registration.</param>
            <param name="bannerAdvertising">The banner advertising.</param>
            <param name="currency">The currency.</param>
            <param name="administratorId">The administrator identifier.</param>
            <param name="hostFee">The host fee.</param>
            <param name="hostSpace">The host space.</param>
            <param name="pageQuota">The page quota.</param>
            <param name="userQuota">The user quota.</param>
            <param name="paymentProcessor">The payment processor.</param>
            <param name="processorUserId">The processor user identifier.</param>
            <param name="processorPassword">The processor password.</param>
            <param name="description">The description.</param>
            <param name="keyWords">The key words.</param>
            <param name="backgroundFile">The background file.</param>
            <param name="siteLogHistory">The site log history.</param>
            <param name="splashTabId">The splash tab identifier.</param>
            <param name="homeTabId">The home tab identifier.</param>
            <param name="loginTabId">The login tab identifier.</param>
            <param name="registerTabId">The register tab identifier.</param>
            <param name="userTabId">The user tab identifier.</param>
            <param name="searchTabId">The search tab identifier.</param>
            <param name="custom404TabId">The custom404 tab identifier.</param>
            <param name="custom500TabId">The custom500 tab identifier.</param>
            <param name="defaultLanguage">The default language.</param>
            <param name="homeDirectory">The home directory.</param>
            <param name="lastModifiedByUserID">The last modified by user identifier.</param>
            <param name="cultureCode">The culture code.</param>
        </member>
        <member name="M:DotNetNuke.Data.DataProvider.UpdateFile(System.Int32,System.Guid,System.String,System.String,System.Int64,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.String,System.DateTime,System.String,System.String,System.DateTime,System.DateTime,System.Boolean,System.Int32)">
            <summary>
            This is an internal method for communication between DNN business layer and SQL database.
            Do not use in custom modules, please use API (DotNetNuke.Services.FileSystem.FileManager.UpdateFile)
            
            Stores information about a specific file, stored in DNN filesystem
            calling petapoco method to call the underlying stored procedure "UpdateFile"
            </summary>
            <param name="fileId">ID of the (already existing) file</param>
            <param name="versionGuid">GUID of this file version  (should usually not be modified)</param>
            <param name="fileName">Name of the file in the file system (including extension)</param>
            <param name="extension">File type - should meet extension in FileName</param>
            <param name="size">Size of file (bytes)</param>
            <param name="width">Width of images/video (lazy load: pass Null, might be retrieved by DNN platform on db file sync)</param>
            <param name="height">Height of images/video (lazy load: pass Null, might be retrieved by DNN platform on db file snyc)</param>
            <param name="contentType">MIME type of the file</param>
            <param name="folderId">ID of the folder, the file resides in</param>
            <param name="lastModifiedByUserID">ID of the user, who performed last update of file or file info</param>
            <param name="hash">SHa1 hash of the file content, used for file versioning (lazy load: pass Null, will be generated by DNN platform on db file sync)</param>
            <param name="lastModificationTime">timestamp, when last update of file or file info happened</param>
            <param name="title">Display title of the file - optional (pass Null if not provided)</param>
            <param name="description">Description of the file.</param>
            <param name="startDate">date and time (server TZ), from which the file should be displayed/accessible (according to folder permission)</param>
            <param name="endDate">date and time (server TZ), until which the file should be displayed/accessible (according to folder permission)</param>
            <param name="enablePublishPeriod">shall startdate/end date be used?</param>
            <param name="contentItemId">ID of the associated contentitem with description etc. (optional)</param>
        </member>
        <member name="M:DotNetNuke.Data.DataProvider.GetUserAuthentication(System.Int32)">
            <summary>
            Get a User Authentication record from slq database. DNN-4016
            </summary>
            <param name="userID"></param>
            <returns>UserAuthentication record</returns>
        </member>
        <member name="T:DotNetNuke.Entities.Modules.Settings.ISettingsSerializer`1">
            <summary>
            Implement this interface to control how property values are serialized and deserialized.
            </summary>
            <typeparam name="T">The type that will be serialized or deserialized.</typeparam>
            <remarks>
            The <see cref="T:DotNetNuke.Entities.Modules.Settings.ParameterAttributeBase"/> serialize property will identify a serialization
            class to be used for serializing and deserializing a property to be stored in the settings table.
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Settings.ISettingsSerializer`1.Serialize(`0)">
            <summary>
            Serialize the property value into a string.
            </summary>
            <param name="value">The value of the associated settings property.</param>
            <returns>String</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Settings.ISettingsSerializer`1.Deserialize(System.String)">
            <summary>
            Deserialize the property value from a string into the defined type.
            </summary>
            <param name="value">The serialized value of the associated settings property.</param>
            <returns>An object of the specified type.</returns>
        </member>
        <member name="T:DotNetNuke.Entities.Modules.Settings.ModuleSettingAttribute">
            <summary>
            When applied to a property this attribute persists the value of the property in the DNN ModuleSettings referenced by the ModuleId within the context.
            </summary>
        </member>
        <member name="T:DotNetNuke.Entities.Modules.Settings.ParameterAttributeBase">
            <summary>
            Base class for attributes that are used to decorate properties (parameters) related to 
            application settings (storage) or parameters (control) like query string parameters.
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Modules.Settings.ParameterAttributeBase.Prefix">
            <summary>
            The prefix to use when naming the setting in the settings table.
            </summary>
            <remarks>
            The settings tables are shared by the core platform and the extensions. Extensions
            should use a unique prefix to ensure that name clashes do not occur with settings 
            defined by the core or other extensions.
            </remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Modules.Settings.ParameterAttributeBase.ParameterName">
            <summary>
            The name of the setting that will be stored in the settings table.
            </summary>
            <remarks>
            If parametername is not defined, then the name of the property will be used.  If
            a prefix is defined, then that will be concatenated with the parametername (or the
            property name if no parametername is provided)
            </remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Modules.Settings.ParameterAttributeBase.Serializer">
            <summary>
            The serializer to use when saving or retrieving the setting value.
            </summary>
            <remarks>
            The serializer must implement the <see cref="T:DotNetNuke.Entities.Modules.Settings.ISettingsSerializer`1" /> interface.
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Settings.ParameterMapping.#ctor(DotNetNuke.Entities.Modules.Settings.ParameterAttributeBase,System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetNuke.Entities.Modules.Settings.ParameterMapping"/> class.
            </summary>
            <param name="attribute">The attribute.</param>
            <param name="property">The property.</param>
        </member>
        <member name="T:DotNetNuke.Entities.Modules.Settings.PortalSettingAttribute">
            <summary>
            When applied to a property this attribute persists the value of the property in the DNN PortalSettings referenced by the PortalId within the context.
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Settings.SettingsRepository`1.DeserializeProperty(`0,System.Reflection.PropertyInfo,DotNetNuke.Entities.Modules.Settings.ParameterAttributeBase,System.String)">
            <summary>
            Deserializes the property.
            </summary>
            <param name="settings">The settings.</param>
            <param name="property">The property.</param>
            <param name="propertyValue">The property value.</param>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="T:DotNetNuke.Entities.Modules.Settings.TabModuleSettingAttribute">
            <summary>
            When applied to a property this attribute persists the value of the property in the DNN TabModuleSettings referenced by the TabModuleId within the context.
            </summary>
        </member>
        <member name="T:DotNetNuke.Entities.Modules.Actions.ActionEventArgs">
            -----------------------------------------------------------------------------
             Project		: DotNetNuke
             Namespace   : DotNetNuke.Entities.Modules.Actions
             Class		: ActionEventArgs
            -----------------------------------------------------------------------------
             <summary>
             ActionEventArgs provides a custom EventARgs class for Action Events
             </summary>
             <remarks></remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Actions.ActionEventArgs.#ctor(DotNetNuke.Entities.Modules.Actions.ModuleAction,DotNetNuke.Entities.Modules.ModuleInfo)">
            -----------------------------------------------------------------------------
             <summary>
             </summary>
             <param name="Action"></param>
             <param name="ModuleConfiguration"></param>
             <remarks></remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.Actions.ActionEventArgs.Action">
            -----------------------------------------------------------------------------
             <summary>
             
             </summary>
             <value></value>
             <remarks></remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.Actions.ActionEventArgs.ModuleConfiguration">
            -----------------------------------------------------------------------------
             <summary>
             
             </summary>
             <value></value>
             <remarks></remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Modules.Actions.ActionEventHandler">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Entities.Modules.Actions
            Class:      ActionEventHandler
            -----------------------------------------------------------------------------
            <summary>
            The ActionEventHandler delegate defines a custom event handler for an Action
            Event.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Modules.Actions.ModuleAction">
            -----------------------------------------------------------------------------
             Project		: DotNetNuke
             Class		: ModuleAction
            -----------------------------------------------------------------------------
             <summary>
             Each Module Action represents a separate functional action as defined by the
             associated module.
             </summary>
             <remarks>A module action is used to define a specific function for a given module.
             Each module can define one or more actions which the portal will present to the
             user.  These actions may be presented as a menu, a dropdown list or even a group
             of linkbuttons.
             <seealso cref="T:DotNetNuke.ModuleActionCollection" /></remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Actions.ModuleAction.#ctor(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,DotNetNuke.Security.SecurityAccessLevel,System.Boolean,System.Boolean)">
            -----------------------------------------------------------------------------
             <summary>
             Initializes a new instance of the <see cref="T:DotNetNuke.ModuleAction"/> class
             using the specified parameters
             </summary>
             <param name="id">This is the identifier to use for this action.</param>
             <param name="title">This is the title that will be displayed for this action</param>
             <param name="cmdName">The command name passed to the client when this action is 
             clicked.</param>
             <param name="cmdArg">The command argument passed to the client when this action is 
             clicked.</param>
             <param name="icon">The URL of the Icon to place next to this action</param>
             <param name="url">The destination URL to redirect the client browser when this action is clicked.</param>
             <param name="clientScript"></param>
             <param name="useActionEvent">Determines whether client will receive an event notification</param>
             <param name="secure">The security access level required for access to this action</param>
             <param name="visible">Whether this action will be displayed</param>
             <param name="newWindow"></param>
             <remarks>The moduleaction constructor is used to set the various properties of 
             the <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleAction" /> class at the time the instance is created.
             </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.Actions.ModuleAction.Actions">
            -----------------------------------------------------------------------------
             <summary>
             The Actions property allows the user to create a hierarchy of actions, with
             each action having sub-actions.
             </summary>
             <value>Returns a collection of ModuleActions.</value>
             <remarks>Each action may contain one or more child actions.  When displayed via
             the <see cref="T:DotNetNuke.Containers.Actions"/> control, these subactions are
             shown as sub-menus.  If other Action controls are implemented, then
             sub-actions may or may not be supported for that control type.</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.Actions.ModuleAction.ID">
            -----------------------------------------------------------------------------
             <summary>
             A Module Action ID is a identifier that can be used in a Module Action Collection
             to find a specific Action. 
             </summary>
             <value>The integer ID of the current <see cref="T:DotNetNuke.ModuleAction"/>.</value>
             <remarks>When building a hierarchy of <see cref="T:DotNetNuke.ModuleAction">ModuleActions</see>, 
             the ID is used to link the child and parent actions.</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.Actions.ModuleAction.Visible">
            -----------------------------------------------------------------------------
             <summary>
             Gets or sets whether the current action should be displayed.
             </summary>
             <value>A boolean value that determines if the current action should be displayed</value>
             <remarks>If Visible is false, then the action is always hidden.  If Visible
             is true then the action may be visible depending on the security access rights
             specified by the <see cref="P:DotNetNuke.ModuleAction.Secure"/> property.  By
             utilizing a custom method in your module, you can encapsulate specific business
             rules to determine if the Action should be visible.</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.Actions.ModuleAction.Secure">
            -----------------------------------------------------------------------------
             <summary>
             Gets or sets the value indicating the <see cref="T:DotnetNuke.SecurityAccessLevel" /> that is required
             to access this <see cref="T:DotNetNuke.ModuleAction" />.
             </summary>
             <value>The value indicating the <see cref="T:DotnetNuke.SecurityAccessLevel" /> that is required
             to access this <see cref="T:DotNetNuke.ModuleAction" /></value>
             <remarks>The security access level determines the roles required by the current user in
             order to access this module action.</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.Actions.ModuleAction.CommandName">
            -----------------------------------------------------------------------------
             <summary>
             A Module Action CommandName represents a string used by the ModuleTitle to notify
             the parent module that a given Module Action was selected in the Module Menu.
             </summary>
             <value>The name of the command to perform.</value>
             <remarks>
             Use the CommandName property to determine the command to perform. The CommandName 
             property can contain any string set by the programmer. The programmer can then 
             identify the command name in code and perform the appropriate tasks.
             </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.Actions.ModuleAction.CommandArgument">
            -----------------------------------------------------------------------------
             <summary>
             A Module Action CommandArgument provides additional information and 
             complements the CommandName.
             </summary>
             <value>A string that contains the argument for the command.</value>
             <remarks>
             The CommandArgument can contain any string set by the programmer. The 
             CommandArgument property complements the <see cref="P:DotNetNuke.ModuleAction.CommandName" /> 
              property by allowing you to provide any additional information for the command. 
             For example, you can set the CommandName property to "Sort" and set the 
             CommandArgument property to "Ascending" to specify a command to sort in ascending 
             order.
             </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.Actions.ModuleAction.Title">
            -----------------------------------------------------------------------------
             <summary>
             Gets or sets the string that is displayed in the Module Menu
             that represents a given menu action.
             </summary>
             <value>The string value that is displayed to represent the module action.</value>
             <remarks>The title property is displayed by the Actions control for each module
             action.</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.Actions.ModuleAction.Icon">
            -----------------------------------------------------------------------------
             <summary>
             Gets or sets the URL for the icon file that is displayed for the given 
             <see cref="T:DotNetNuke.ModuleAction" />.
             </summary>
             <value>The URL for the icon that is displayed with the module action.</value>
             <remarks>The URL for the icon is a simple string and is not checked for formatting.</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.Actions.ModuleAction.Url">
            -----------------------------------------------------------------------------
             <summary>
             Gets or sets the URL to which the user is redirected when the 
             associated Module Menu Action is selected.  
             </summary>
             <value>The URL to which the user is redirected when the 
             associated Module Menu Action is selected.</value>
             <remarks>If the URL is present then the Module Action Event is not fired.  
             If the URL is empty then the Action Event is fired and is passed the value 
             of the associated Command property.</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.Actions.ModuleAction.ClientScript">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets javascript which will be run in the clients browser
            when the associated Module menu Action is selected. prior to a postback.
            </summary>
            <value>The Javascript which will be run during the menuClick event</value>
            <remarks>If the ClientScript property is present then it is called prior
            to the postback occuring. If the ClientScript returns false then the postback
            is canceled.  If the ClientScript is empty then the Action Event is fired and 
            is passed the value of the associated Command property.</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.Actions.ModuleAction.UseActionEvent">
             <summary>
             Gets or sets a value that determines if a local ActionEvent is fired when the 
             <see cref="T:DotNetNuke.ModuleAction" /> contains a URL. 
             </summary>
             <value>A boolean indicating whether to fire the ActionEvent.</value>
             <remarks>When a MenuAction is clicked, an event is fired within the Actions 
             control.  If the UseActionEvent is true then the Actions control will forward
             the event to the parent skin which will then attempt to raise the event to
             the appropriate module.  If the UseActionEvent is false, and the URL property
             is set, then the Actions control will redirect the response to the URL.  In
             all cases, an ActionEvent is raised if the URL is not set.</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.Actions.ModuleAction.NewWindow">
            -----------------------------------------------------------------------------
             <summary>
             Gets or sets a value that determines if a new window is opened when the 
             DoAction() method is called. 
             </summary>
             <value>A boolean indicating whether to open a new window.</value>
             <remarks></remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Actions.ModuleAction.HasChildren">
            -----------------------------------------------------------------------------
             <summary>
             Determines whether the action node contains any child actions.
             </summary>
             <returns>True if child actions exist, false if child actions do not exist.</returns>
             <remarks>Each action may contain one or more child actions in the
             <see cref="P:DotNetNuke.ModuleAction.Actions"/> property.  When displayed via
             the <see cref="T:DotNetNuke.Containers.Actions"/> control, these subactions are
             shown as sub-menus.</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection">
            -----------------------------------------------------------------------------
             Project		: DotNetNuke
             Class		: ModuleActionCollection
            -----------------------------------------------------------------------------
             <summary>
             Represents a collection of <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleAction" /> objects.
             </summary>
             <remarks>The ModuleActionCollection is a custom collection of ModuleActions.
             Each ModuleAction in the collection has it's own <see cref="P:DotNetNuke.ModuleAction.Actions" />
              collection which provides the ability to create a hierarchy of ModuleActions.</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection.#ctor">
            -----------------------------------------------------------------------------
             <summary>
             Initializes a new, empty instance of the <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection" /> class.
             </summary>
             <remarks>The default constructor creates an empty collection of <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleAction" />
              objects.</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection.#ctor(DotNetNuke.Entities.Modules.Actions.ModuleActionCollection)">
            -----------------------------------------------------------------------------
             <summary>
             Initializes a new instance of the <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection" />
              class containing the elements of the specified source collection.
             </summary>
             <param name="value">A <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection" /> with which to initialize the collection.</param>
             <remarks>This overloaded constructor copies the <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleAction" />s
              from the indicated collection.</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection.#ctor(DotNetNuke.Entities.Modules.Actions.ModuleAction[])">
             -----------------------------------------------------------------------------
             <summary>
             Initializes a new instance of the <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection" />
              class containing the specified array of <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleAction" /> objects.
             </summary>
             <param name="value">An array of <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleAction" /> objects 
             with which to initialize the collection. </param>
             <remarks>This overloaded constructor copies the <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleAction" />s
              from the indicated array.</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection.Item(System.Int32)">
            -----------------------------------------------------------------------------
             <summary>
             Gets or sets the <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection" /> at the 
             specified index in the collection.
             <para>
             In VB.Net, this property is the indexer for the <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection" /> class.
             </para>
             </summary>
             <param name="index">The index of the collection to access.</param>
             <value>A <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleAction" /> at each valid index.</value>
             <remarks>This method is an indexer that can be used to access the collection.</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection.Add(DotNetNuke.Entities.Modules.Actions.ModuleAction)">
            -----------------------------------------------------------------------------
             <summary>
             Add an element of the specified <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleAction" /> to the end of the collection.
             </summary>
             <param name="value">An object of type <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleAction" /> to add to the collection.</param>
             <returns>The index of the newly added <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleAction" /></returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection.Add(System.Int32,System.String,System.String)">
            -----------------------------------------------------------------------------
             <summary>
             Add an element of the specified <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleAction" /> to the end of the collection.
             </summary>
             <param name="ID">This is the identifier to use for this action.</param>
             <param name="Title">This is the title that will be displayed for this action</param>
             <param name="CmdName">The command name passed to the client when this action is 
             clicked.</param>
             <returns>The index of the newly added <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleAction" /></returns>
             <remarks>This method creates a new <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleAction" /> with the specified
             values, adds it to the collection and returns the index of the newly created ModuleAction.</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection.Add(System.Int32,System.String,System.String,System.String,System.String,System.String,System.Boolean,DotNetNuke.Security.SecurityAccessLevel,System.Boolean,System.Boolean)">
            -----------------------------------------------------------------------------
             <summary>
             Add an element of the specified <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleAction" /> to the end of the collection.
             </summary>
             <param name="ID">This is the identifier to use for this action.</param>
             <param name="Title">This is the title that will be displayed for this action</param>
             <param name="CmdName">The command name passed to the client when this action is 
             clicked.</param>
             <param name="CmdArg">The command argument passed to the client when this action is 
             clicked.</param>
             <param name="Icon">The URL of the Icon to place next to this action</param>
             <param name="Url">The destination URL to redirect the client browser when this 
             action is clicked.</param>
             <param name="UseActionEvent">Determines whether client will receive an event
             notification</param>
             <param name="Secure">The security access level required for access to this action</param>
             <param name="Visible">Whether this action will be displayed</param>
             <param name="NewWindow">Whether open in new window.</param>
             <returns>The index of the newly added <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleAction" /></returns>
             <remarks>This method creates a new <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleAction" /> with the specified
             values, adds it to the collection and returns the index of the newly created ModuleAction.</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection.Add(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,DotNetNuke.Security.SecurityAccessLevel,System.Boolean,System.Boolean)">
             -----------------------------------------------------------------------------
             <summary>
             Add an element of the specified <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleAction" /> to the end of the collection.
             </summary>
             <param name="ID">This is the identifier to use for this action.</param>
             <param name="Title">This is the title that will be displayed for this action</param>
             <param name="CmdName">The command name passed to the client when this action is 
             clicked.</param>
             <param name="CmdArg">The command argument passed to the client when this action is 
             clicked.</param>
             <param name="Icon">The URL of the Icon to place next to this action</param>
             <param name="Url">The destination URL to redirect the client browser when this 
             action is clicked.</param>
             <param name="ClientScript">Client side script to be run when the this action is 
             clicked.</param>
             <param name="UseActionEvent">Determines whether client will receive an event
             notification</param>
             <param name="Secure">The security access level required for access to this action</param>
             <param name="Visible">Whether this action will be displayed</param>
             <param name="NewWindow">Whether open in new window.</param>
             <returns>The index of the newly added <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleAction" /></returns>
             <remarks>This method creates a new <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleAction" /> with the specified
             values, adds it to the collection and returns the index of the newly created ModuleAction.</remarks>
            
             -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection.AddRange(DotNetNuke.Entities.Modules.Actions.ModuleAction[])">
            -----------------------------------------------------------------------------
             <summary>
             Copies the elements of the specified <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleAction" />
              array to the end of the collection.
             </summary>
             <param name="value">An array of type <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleAction" />
              containing the objects to add to the collection.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection.AddRange(DotNetNuke.Entities.Modules.Actions.ModuleActionCollection)">
            -----------------------------------------------------------------------------
             <summary>
             Adds the contents of another <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection" />
              to the end of the collection.
             </summary>
             <param name="value">A <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection" /> containing 
             the objects to add to the collection. </param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection.Contains(DotNetNuke.Entities.Modules.Actions.ModuleAction)">
            -----------------------------------------------------------------------------
             <summary>
             Gets a value indicating whether the collection contains the specified <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleAction" />.
             </summary>
             <param name="value">The <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleAction" /> to search for in the collection.</param>
             <returns><b>true</b> if the collection contains the specified object; otherwise, <b>false</b>.</returns>
             <example>
             <code>
             ' Tests for the presence of a ModuleAction in the 
             ' collection, and retrieves its index if it is found.
             Dim testModuleAction = New ModuleAction(5, "Edit Action", "Edit")
             Dim itemIndex As Integer = -1
             If collection.Contains(testModuleAction) Then
                itemIndex = collection.IndexOf(testModuleAction)
             End If
             </code>
             </example>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection.IndexOf(DotNetNuke.Entities.Modules.Actions.ModuleAction)">
            -----------------------------------------------------------------------------
             <summary>
             Gets the index in the collection of the specified <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection" />, 
             if it exists in the collection.
             </summary>
             <param name="value">The <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleAction" /> to locate in the collection.</param>
             <returns>The index in the collection of the specified object, if found; otherwise, -1.</returns>
             <example> This example tests for the presense of a ModuleAction in the
             collection, and retrieves its index if it is found.
             <code>
               Dim testModuleAction = New ModuleAction(5, "Edit Action", "Edit")
               Dim itemIndex As Integer = -1
               If collection.Contains(testModuleAction) Then
                 itemIndex = collection.IndexOf(testModuleAction)
               End If
             </code>
             </example>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection.Insert(System.Int32,DotNetNuke.Entities.Modules.Actions.ModuleAction)">
            -----------------------------------------------------------------------------
             <summary>
             Add an element of the specified <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleAction" /> to the 
             collection at the designated index.
             </summary>
             <param name="index">An <see cref="T:system.int32">Integer</see> to indicate the location to add the object to the collection.</param>
             <param name="value">An object of type <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleAction" /> to add to the collection.</param>
             <example>
             <code>
             ' Inserts a ModuleAction at index 0 of the collection. 
             collection.Insert(0, New ModuleAction(5, "Edit Action", "Edit"))
             </code>
             </example>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Actions.ModuleActionCollection.Remove(DotNetNuke.Entities.Modules.Actions.ModuleAction)">
            ----------------------------------------------------------------------------- 
             <summary>
             Remove the specified object of type <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleAction" /> from the collection.
             </summary>
             <param name="value">An object of type <see cref="T:DotNetNuke.Entities.Modules.Actions.ModuleAction" /> to remove from the collection.</param>
             <example>
             <code>
             ' Removes the specified ModuleAction from the collection. 
             Dim testModuleAction = New ModuleAction(5, "Edit Action", "Edit")
             collection.Remove(testModuleAction)
             </code>
             </example>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Modules.Actions.ModuleActionEventListener">
            -----------------------------------------------------------------------------
             Project		: DotNetNuke
             Class		: ModuleActionEventListener
            
            -----------------------------------------------------------------------------
             <summary>
            
             </summary>
             <remarks></remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Actions.ModuleActionEventListener.#ctor(System.Int32,DotNetNuke.Entities.Modules.Actions.ActionEventHandler)">
            -----------------------------------------------------------------------------
             <summary>
             
             </summary>
             <param name="ModID"></param>
             <param name="e"></param>
             <remarks></remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.Actions.ModuleActionEventListener.ModuleID">
            -----------------------------------------------------------------------------
             <summary>
             
             </summary>
             <value></value>
             <remarks></remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.Actions.ModuleActionEventListener.ActionEvent">
            -----------------------------------------------------------------------------
             <summary>
             
             </summary>
             <value></value>
             <remarks></remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Modules.Actions.ModuleActionType">
            -----------------------------------------------------------------------------
             Project		: DotNetNuke
             Class		: ModuleActionType
            -----------------------------------------------------------------------------
             <summary>
             Identifies common module action types
             </summary>
             <remarks>
             Common action types can be specified in the CommandName attribute of the
             ModuleAction class
             </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="F:DotNetNuke.Entities.Modules.Actions.ModuleActionType.AddContent">
            <summary>An action to create new content</summary>
        </member>
        <member name="F:DotNetNuke.Entities.Modules.Actions.ModuleActionType.EditContent">
            <summary>An action to edit existing content</summary>
        </member>
        <member name="F:DotNetNuke.Entities.Modules.Actions.ModuleActionType.ContentOptions">
            <summary>An action to configure the module</summary>
        </member>
        <member name="F:DotNetNuke.Entities.Modules.Actions.ModuleActionType.SyndicateModule">
            <summary>An action to access the RSS feed of a module</summary>
        </member>
        <member name="F:DotNetNuke.Entities.Modules.Actions.ModuleActionType.ImportModule">
            <summary>An action to import content into a module</summary>
        </member>
        <member name="F:DotNetNuke.Entities.Modules.Actions.ModuleActionType.ExportModule">
            <summary>An action to export the content of a module</summary>
        </member>
        <member name="F:DotNetNuke.Entities.Modules.Actions.ModuleActionType.ModuleHelp">
            <summary>An action to view the help for a module</summary>
        </member>
        <member name="F:DotNetNuke.Entities.Modules.Actions.ModuleActionType.PrintModule">
            <summary>An action to print a module's content</summary>
        </member>
        <member name="F:DotNetNuke.Entities.Modules.Actions.ModuleActionType.ModuleSettings">
            <summary>An action to access the module's settings</summary>
        </member>
        <member name="F:DotNetNuke.Entities.Modules.Actions.ModuleActionType.DeleteModule">
            <summary>An action to delete the module</summary>
        </member>
        <member name="F:DotNetNuke.Entities.Modules.Actions.ModuleActionType.ClearCache">
            <summary>An action to clear the module's cache</summary>
        </member>
        <member name="F:DotNetNuke.Entities.Modules.Actions.ModuleActionType.MoveTop">
            <summary>An action to move the module to the top of its pane</summary>
        </member>
        <member name="F:DotNetNuke.Entities.Modules.Actions.ModuleActionType.MoveUp">
            <summary>An action to move the module up in its pane</summary>
        </member>
        <member name="F:DotNetNuke.Entities.Modules.Actions.ModuleActionType.MoveDown">
            <summary>An action to move the module down in its pane</summary>
        </member>
        <member name="F:DotNetNuke.Entities.Modules.Actions.ModuleActionType.MoveBottom">
            <summary>An action to move the module to the bottom of its pane</summary>
        </member>
        <member name="F:DotNetNuke.Entities.Modules.Actions.ModuleActionType.MovePane">
            <summary>An action to move the module to a different pane</summary>
        </member>
        <member name="F:DotNetNuke.Entities.Modules.Actions.ModuleActionType.MoveRoot">
            <summary>An action that contains move actions</summary>
        </member>
        <member name="F:DotNetNuke.Entities.Modules.Actions.ModuleActionType.ViewSource">
            <summary>An action to view the source code of a module</summary>
        </member>
        <member name="F:DotNetNuke.Entities.Modules.Actions.ModuleActionType.LocalizeModule">
            <summary>An action to create a localized version of a module</summary>
        </member>
        <member name="F:DotNetNuke.Entities.Modules.Actions.ModuleActionType.DeLocalizeModule">
            <summary>An action to remove localization for a module</summary>
        </member>
        <member name="F:DotNetNuke.Entities.Modules.Actions.ModuleActionType.TranslateModule">
            <summary>An action to create a translated version of a module</summary>
        </member>
        <member name="F:DotNetNuke.Entities.Modules.Actions.ModuleActionType.UnTranslateModule">
            <summary>An action to remove a translation of a module</summary>
        </member>
        <member name="T:DotNetNuke.Entities.Modules.IVersionable">
            <summary>
            This interface allow the page to interact with his modules to delete/rollback or publish a specific version. 
            The module that wants support page versioning need to implement it in the Bussiness controller.
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IVersionable.DeleteVersion(System.Int32,System.Int32)">
            <summary>
            This method deletes a concrete version of the module
            </summary>
            <param name="moduleId">ModuleId</param>
            <param name="version">Version number</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IVersionable.RollBackVersion(System.Int32,System.Int32)">
            <summary>
            This method performs a rollback of a concrete version of the module
            </summary>
            <param name="moduleId">Module Id</param>
            <param name="version">Version number that need to be rollback</param>
            <returns>New version number created after the rollback process</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IVersionable.PublishVersion(System.Int32,System.Int32)">
            <summary>
            This method publishes a version of the module
            </summary>
            <param name="moduleId">Module Id</param>
            <param name="version">Version number</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IVersionable.GetPublishedVersion(System.Int32)">
            <summary>
            This method returns the version number of the current published module version
            </summary>
            <param name="moduleId">Module Id</param>
            <returns>Version number of the current published content version</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IVersionable.GetLatestVersion(System.Int32)">
            <summary>
            This method returns the latest version number of the current module
            </summary>
            <param name="moduleId">Module Id</param>
            <returns>Version number of the current published content version</returns>
        </member>
        <member name="T:DotNetNuke.Entities.Modules.IVersionableControl">
            <summary>
            This interface is implemented by module control to let the page tell to the control what
            content version it should be render
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IVersionableControl.SetModuleVersion(System.Int32)">
            <summary>
            Indicate to the module control what content version need to be shown on rendering
            </summary>
            <param name="version">Version number</param>
        </member>
        <member name="P:DotNetNuke.Entities.Modules.IShareable.SharingSupport">
            <summary>Does this module support Module Sharing (i.e., sharing modules between sites within a SiteGroup)?</summary>
        </member>
        <member name="T:DotNetNuke.Entities.Modules.ModuleSearchBase">
            <summary>
            Modules participating in Search should inherit from this class. A scheduled job will call the methods from this class. 
            </summary>
            <remarks>Since the methods will be called through a Scheduled job, there will be no Portal Context available by the module to take advantage of</remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleSearchBase.GetModifiedSearchDocuments(DotNetNuke.Entities.Modules.ModuleInfo,System.DateTime)">
            <summary>
            Return a list of Modified Search Documents based on date. The documents will be stored in Search Index.
            </summary>
            <param name="moduleInfo">Module Info</param>
            <param name="beginDateUtc">Provide modified content from this time in Utc</param>
            <returns>Collection of SearchDocument</returns>
            <remarks>Module must return New, Updated and Deleted Search Documents. 
            It is important to include all the relevant Properties for Updated content (sames as supplied for New document), as partial SearchDocument cannot be Updated in Search Index. 
            This is different from standard SQL Update where selective columns can updated. In this case, entire Document must be supplied during Update or else information will be lost.
            For Deleted content, set IsActive = false property.
            When IsActive = true, an attempt is made to delete any existing document with same UniqueKey, PortalId, SearchTypeId=Module, ModuleDefitionId and ModuleId(if specified).
            System calls the module based on Scheduler Frequency. This call is performed for modules that have indicated supportedFeature type="Searchable" in manifest.
            Call is performed for every Module Definition defined by the Module. If a module has more than one Module Defition, module must return data for the main Module Defition, 
            or else duplicate content may get stored.
            Module must include ModuleDefition Id in the SearchDocument. In addition ModuleId and / or TabId can also be specified if module has TabId / ModuleId specific content.</remarks>
        </member>
        <member name="T:DotNetNuke.Entities.Modules.ModuleController">
            <summary>
            ModuleController provides the Business Layer for Modules
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.IsModuleViewPermissionInherited(DotNetNuke.Entities.Modules.ModuleInfo,DotNetNuke.Security.Permissions.ModulePermissionInfo)">
            <summary>
            Checks whether module VIEW permission is inherited from its tab
            </summary> 
            <param name="module">The module</param>
            <param name="permission">The module permission.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.IsTranslatorRolePermission(DotNetNuke.Security.Permissions.ModulePermissionInfo,System.Int32,System.String)">
            <summary>
            Checks whether given permission is granted for translator role
            </summary>
            <param name="permission">The module permission.</param>
            <param name="portalId">The portal ID.</param>
            <param name="culture">The culture code.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.CopyModulePermisions(DotNetNuke.Entities.Modules.ModuleInfo,DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            Copies permissions from source to new tab
            </summary>
            <param name="sourceModule">Source module.</param>
            <param name="newModule">New module.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.UpdateContentItem(DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            Update content item when the module title changed.
            </summary>
            <param name="module"></param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.IsSharedModule(DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            Check if a ModuleInfo belongs to the referenced Tab or not
            </summary>
            <param name="module">A ModuleInfo object to be checked</param>
            <returns>True is TabId points to a different tab from initial Tab where the module was added. Otherwise, False</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.GetMasterTabId(DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            Get the Tab ID corresponding to the initial Tab where the module was added
            </summary>
            <param name="module">A ModuleInfo object to be checked</param>
            <returns>The Tab Id from initial Tab where the module was added</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.AddModule(DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            add a module to a page
            </summary>
            <param name="module">moduleInfo for the module to create</param>
            <returns>ID of the created module</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.ClearCache(System.Int32)">
            <summary>
            Clears the cache.
            </summary>
            <param name="tabId">The tab id.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.CopyModule(DotNetNuke.Entities.Modules.ModuleInfo,DotNetNuke.Entities.Tabs.TabInfo,System.String,System.Boolean)">
            <summary>
            Copies the module to a new page.
            </summary>
            <param name="sourceModule">The source module.</param>
            <param name="destinationTab">The destination tab.</param>
            <param name="toPaneName">Name of to pane.</param>
            <param name="includeSettings">if set to <c>true</c> include settings.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.CopyModules(DotNetNuke.Entities.Tabs.TabInfo,DotNetNuke.Entities.Tabs.TabInfo,System.Boolean)">
            <summary>
            Copies all modules in source page to a new page.
            </summary>
            <param name="sourceTab">The source tab.</param>
            <param name="destinationTab">The destination tab.</param>
            <param name="asReference">if set to <c>true</c> will use source module directly, else will create new module info by source module.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.CopyModules(DotNetNuke.Entities.Tabs.TabInfo,DotNetNuke.Entities.Tabs.TabInfo,System.Boolean,System.Boolean)">
            <summary>
            Copies all modules in source page to a new page.
            </summary>
            <param name="sourceTab">The source tab.</param>
            <param name="destinationTab">The destination tab.</param>
            <param name="asReference">if set to <c>true</c> will use source module directly, else will create new module info by source module.</param>
            <param name="includeAllTabsMobules">if set to <c>true</c> will include modules which shown on all pages, this is used when create localized copy.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.CreateContentItem(DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            </summary>
            <param name = "module"></param>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.DeleteAllModules(System.Int32,System.Int32,System.Collections.Generic.List{DotNetNuke.Entities.Tabs.TabInfo},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            DeleteAllModules deletes all instances of a Module (from a collection), optionally excluding the
            current instance, and optionally including deleting the Module itself.
            </summary>
            <remarks>
            Note - the base module is not removed unless both the flags are set, indicating
            to delete all instances AND to delete the Base Module
            </remarks>
            <param name="moduleId">The Id of the module to copy</param>
            <param name="tabId">The Id of the current tab</param>
            <param name="softDelete">A flag that determines whether the instance should be soft-deleted</param>
            <param name="fromTabs">An ArrayList of TabItem objects</param>
            <param name="includeCurrent">A flag to indicate whether to delete from the current tab
            	as identified ny tabId</param>
            <param name="deleteBaseModule">A flag to indicate whether to delete the Module itself</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.DeleteModule(System.Int32)">
            <summary>
            Delete a module instance permanently from the database
            </summary>
            <param name="moduleId">ID of the module instance</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.DeleteModuleSetting(System.Int32,System.String)">
            <summary>
            Delete a Setting of a module instance
            </summary>
            <param name="moduleId">ID of the affected module</param>
            <param name="settingName">Name of the setting to be deleted</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.DeleteTabModule(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Delete a module reference permanently from the database.
            if there are no other references, the module instance is deleted as well
            </summary>
            <param name="tabId">ID of the page</param>
            <param name="moduleId">ID of the module instance</param>
            <param name="softDelete">A flag that determines whether the instance should be soft-deleted</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.DeleteTabModuleSetting(System.Int32,System.String)">
            <summary>
            Delete a specific setting of a tabmodule reference
            </summary>
            <param name="tabModuleId">ID of the affected tabmodule</param>
            <param name="settingName">Name of the setting to remove</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.DeLocalizeModule(DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            Des the localize module.
            </summary>
            <param name="sourceModule">The source module.</param>
            <returns>new module id</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.GetAllModules">
            <summary>
            get info of all modules in any portal of the installation
            </summary>
            <returns>moduleInfo of all modules</returns>
            <remarks>created for upgrade purposes</remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.GetAllTabsModules(System.Int32,System.Boolean)">
            <summary>
            get Module objects of a portal, either only those, to be placed on all tabs or not
            </summary>
            <param name="portalID">ID of the portal</param>
            <param name="allTabs">specify, whether to return modules to be shown on all tabs or those to be shown on specified tabs</param>
            <returns>ArrayList of TabModuleInfo objects</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.GetAllTabsModulesByModuleID(System.Int32)">
            <summary>
              get TabModule objects that are linked to a particular ModuleID
            </summary>
            <param name = "moduleID">ID of the module</param>
            <returns>ArrayList of TabModuleInfo objects</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.GetModule(System.Int32)">
            <summary>
            get a Module object
            </summary>
            <param name="moduleID">ID of the module</param>
            <returns>ModuleInfo object</returns>
            <remarks>This overload ignores any cached values and always retrieves the latest data
            from the database.</remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.GetModule(System.Int32,System.Int32)">
            <summary>
            get a Module object
            </summary>
            <param name="moduleID">ID of the module</param>
            <param name="tabID">ID of the page</param>
            <returns>ModuleInfo object</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.GetModule(System.Int32,System.Int32,System.Boolean)">
            <summary>
            get a Module object
            </summary>
            <param name="moduleID">ID of the module</param>
            <param name="tabID">ID of the page</param>
            <param name="ignoreCache">flag, if data shall not be taken from cache</param>
            <returns>ModuleInfo object</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.GetModuleByCulture(System.Int32,System.Int32,System.Int32,DotNetNuke.Services.Localization.Locale)">
            <summary>
              get Module by specific locale
            </summary>
            <param name = "ModuleId">ID of the module</param>
            <param name = "tabid">ID of the tab</param>
            <param name = "portalId">ID of the portal</param>
            <param name = "locale">The wanted locale</param>
            <returns>ModuleInfo associated to submitted locale</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.GetModuleByDefinition(System.Int32,System.String)">
            <summary>
            Get ModuleInfo object of first module instance with a given name of the module definition
            </summary>
            <param name="portalId">ID of the portal, where to look for the module</param>
            <param name="definitionName">The name of module definition (NOTE: this looks at <see cref="P:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo.DefinitionName"/>, not <see cref="P:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo.FriendlyName"/>)</param>
            <returns>ModuleInfo of first module instance</returns>
            <remarks>preferably used for admin and host modules</remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.GetModuleByUniqueID(System.Guid)">
            <summary>
              get a Module object
            </summary>
            <param name = "uniqueID"></param>
            <returns></returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.GetModules(System.Int32)">
            <summary>
            get all Module objects of a portal
            </summary>
            <param name="portalID">ID of the portal</param>
            <returns>ArrayList of ModuleInfo objects</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.GetModulesByDefinition(System.Int32,System.String)">
            <summary>
            Gets the modules by definition.
            </summary>
            <param name="portalID">The portal ID.</param>
            <param name="definitionName">The name of the module definition.</param>
            <returns>module collection</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.GetModulesByDesktopModuleId(System.Int32)">
            <summary>
            Gets the modules by DesktopModuleId.
            </summary>
            <param name="desktopModuleId">The Desktop Module Id.</param>
            <returns>module collection</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.GetSearchModules(System.Int32)">
            <summary>
            For a portal get a list of all active module and tabmodule references that are Searchable
            either by inheriting from ModuleSearchBase or implementing the older ISearchable interface.
            </summary>
            <param name="portalID">ID of the portal to be searched</param>
            <returns>Arraylist of ModuleInfo for modules supporting search.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.GetTabModule(System.Int32)">
            <summary>
              get a Module object
            </summary>
            <param name = "tabModuleID">ID of the tabmodule</param>
            <returns>An ModuleInfo object</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.GetTabModules(System.Int32)">
            <summary>
            Get all Module references on a tab
            </summary>
            <param name="tabId"></param>
            <returns>Dictionary of ModuleID and ModuleInfo</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.GetTabModulesByModule(System.Int32)">
            <summary>
              Get a list of all TabModule references of a module instance
            </summary>
            <param name = "moduleID">ID of the Module</param>
            <returns>ArrayList of ModuleInfo</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.MoveModule(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            MoveModule moes a Module from one Tab to another including all the
            TabModule settings
            </summary>
            <param name="moduleId">The Id of the module to move</param>
            <param name="fromTabId">The Id of the source tab</param>
            <param name="toTabId">The Id of the destination tab</param>
            <param name="toPaneName">The name of the Pane on the destination tab where the module will end up</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.RestoreModule(DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            Restores the module.
            </summary>
            <param name="objModule">The module.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.UpdateModule(DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            Update module settings and permissions in database from ModuleInfo
            </summary>
            <param name="module">ModuleInfo of the module to update</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.UpdateModuleOrder(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            set/change the module position within a pane on a page
            </summary>
            <param name="tabId">ID of the page</param>
            <param name="moduleId">ID of the module on the page</param>
            <param name="moduleOrder">position within the controls list on page, -1 if to be added at the end</param>
            <param name="paneName">name of the pane, the module is placed in on the page</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.UpdateModuleSetting(System.Int32,System.String,System.String)">
            <summary>
            Adds or updates a module's setting value
            </summary>
            <param name="moduleId">ID of the module, the setting belongs to</param>
            <param name="settingName">name of the setting property</param>
            <param name="settingValue">value of the setting (String).</param>
            <remarks>empty SettingValue will remove the setting, if not preserveIfEmpty is true</remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.UpdateTabModuleOrder(System.Int32)">
            <summary>
            set/change all module's positions within a page
            </summary>
            <param name="tabId">ID of the page</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.UpdateTabModuleSetting(System.Int32,System.String,System.String)">
            <summary>
            Adds or updates a module's setting value
            </summary>
            <param name="tabModuleId">ID of the tabmodule, the setting belongs to</param>
            <param name="settingName">name of the setting property</param>
            <param name="settingValue">value of the setting (String).</param>
            <remarks>empty SettingValue will relove the setting</remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.UpdateTranslationStatus(DotNetNuke.Entities.Modules.ModuleInfo,System.Boolean)">
            <summary>
            Updates the translation status.
            </summary>
            <param name="localizedModule">The localized module.</param>
            <param name="isTranslated">if set to <c>true</c> will mark the module as translated].</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.DeserializeModule(System.Xml.XmlNode,DotNetNuke.Entities.Modules.ModuleInfo,System.Int32,System.Int32)">
            <summary>
            Deserializes the module.
            </summary>
            <param name="nodeModule">The node module.</param>
            <param name="module">ModuleInfo of current module</param>
            <param name="portalId">The portal id.</param>
            <param name="tabId">The tab id.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.DeserializeModule(System.Xml.XmlNode,System.Xml.XmlNode,System.Int32,System.Int32,DotNetNuke.Entities.Portals.PortalTemplateModuleAction,System.Collections.Hashtable)">
            <summary>
            Deserializes the module.
            </summary>
            <param name="nodeModule">The node module.</param>
            <param name="nodePane">The node pane.</param>
            <param name="portalId">The portal id.</param>
            <param name="tabId">The tab id.</param>
            <param name="mergeTabs">The merge tabs.</param>
            <param name="hModules">The modules.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.SerializeModule(System.Xml.XmlDocument,DotNetNuke.Entities.Modules.ModuleInfo,System.Boolean)">
            <summary>
            SerializeModule
            </summary>
            <param name="xmlModule">The Xml Document to use for the Module</param>
            <param name="module">The ModuleInfo object to serialize</param>
            <param name="includeContent">A flak that determines whether the content of the module is serialised.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleController.SynchronizeModule(System.Int32)">
            <summary>
            Synchronizes the module content between cache and database.
            </summary>
            <param name="moduleID">The module ID.</param>
        </member>
        <member name="T:DotNetNuke.Entities.Modules.IModuleController">
            <summary>
            Do not implement.  This interface is only implemented by the DotNetNuke core framework. Outside the framework it should used as a type and for unit test purposes only.
            There is no guarantee that this interface will not change.
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.AddModule(DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            add a module to a page
            </summary>
            <param name="module">moduleInfo for the module to create</param>
            <returns>ID of the created module</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.ClearCache(System.Int32)">
            <summary>
            Clears the module cache based on the page (tabid)
            </summary>
            <param name="TabId">The tab id.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.CopyModule(DotNetNuke.Entities.Modules.ModuleInfo,DotNetNuke.Entities.Tabs.TabInfo,System.String,System.Boolean)">
            <summary>
            Copies the module to a new page.
            </summary>
            <param name="sourceModule">The source module.</param>
            <param name="destinationTab">The destination tab.</param>
            <param name="toPaneName">Name of to pane.</param>
            <param name="includeSettings">if set to <c>true</c> include settings.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.CopyModules(DotNetNuke.Entities.Tabs.TabInfo,DotNetNuke.Entities.Tabs.TabInfo,System.Boolean)">
            <summary>
            Copies all modules in source page to a new page.
            </summary>
            <param name="sourceTab">The source tab.</param>
            <param name="destinationTab">The destination tab.</param>
            <param name="asReference">if set to <c>true</c> will use source module directly, else will create new module info by source module.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.CopyModules(DotNetNuke.Entities.Tabs.TabInfo,DotNetNuke.Entities.Tabs.TabInfo,System.Boolean,System.Boolean)">
            <summary>
            Copies all modules in source page to a new page.
            </summary>
            <param name="sourceTab">The source tab.</param>
            <param name="destinationTab">The destination tab.</param>
            <param name="asReference">if set to <c>true</c> will use source module directly, else will create new module info by source module.</param>
            <param name="includeAllTabsMobules">if set to <c>true</c> will include modules which shown on all pages, this is used when create localized copy.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.CreateContentItem(DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            This method provides two functions:
            1. Check and ensure that the "Module" content item type exists - if not create it
            2. add a content item
            </summary>
            <param name = "module">the module to add a content item for</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.DeleteAllModules(System.Int32,System.Int32,System.Collections.Generic.List{DotNetNuke.Entities.Tabs.TabInfo},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            DeleteAllModules deletes all instances of a Module (from a collection).  This overload
            soft deletes the instances
            </summary>
            <param name="moduleId">The Id of the module to copy</param>
            <param name="tabId">The Id of the current tab</param>
            <param name="fromTabs">An ArrayList of TabItem objects</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.DeleteModule(System.Int32)">
            <summary>
            Delete a module instance permanently from the database
            </summary>
            <param name="moduleId">ID of the module instance</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.DeleteModuleSetting(System.Int32,System.String)">
            <summary>
            Delete a Setting of a module instance
            </summary>
            <param name="moduleId">ID of the affected module</param>
            <param name="settingName">Name of the setting to be deleted</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.DeleteTabModule(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Delete a module reference permanently from the database.
            if there are no other references, the module instance is deleted as well
            </summary>
            <param name="tabId">ID of the page</param>
            <param name="moduleId">ID of the module instance</param>
            <param name="softDelete">A flag that determines whether the instance should be soft-deleted</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.DeleteTabModuleSetting(System.Int32,System.String)">
            <summary>
            Delete a specific setting of a tabmodule reference
            </summary>
            <param name="tabModuleId">ID of the affected tabmodule</param>
            <param name="settingName">Name of the setting to remove</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.DeLocalizeModule(DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            Des the localize module.
            </summary>
            <param name="sourceModule">The source module.</param>
            <returns>new module id</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.GetAllModules">
            <summary>
            get info of all modules in any portal of the installation
            </summary>
            <returns>moduleInfo of all modules</returns>
            <remarks>created for upgrade purposes</remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.GetAllTabsModules(System.Int32,System.Boolean)">
            <summary>
            get Module objects of a portal, either only those, to be placed on all tabs or not
            </summary>
            <param name="portalID">ID of the portal</param>
            <param name="allTabs">specify, whether to return modules to be shown on all tabs or those to be shown on specified tabs</param>
            <returns>ArrayList of TabModuleInfo objects</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.GetAllTabsModulesByModuleID(System.Int32)">
            <summary>
              get TabModule objects that are linked to a particular ModuleID
            </summary>
            <param name = "moduleID">ID of the module</param>
            <returns>ArrayList of TabModuleInfo objects</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.GetModule(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the module.
            </summary>
            <param name="moduleId">The module ID.</param>
            <param name="tabId">The tab ID.</param>
            <param name="ignoreCache">Optionally bypass the cache</param>
            <returns>module info</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.GetModuleByCulture(System.Int32,System.Int32,System.Int32,DotNetNuke.Services.Localization.Locale)">
            <summary>
              get Module by specific locale
            </summary>
            <param name = "ModuleId">ID of the module</param>
            <param name = "tabid">ID of the tab</param>
            <param name = "portalId">ID of the portal</param>
            <param name = "locale">The wanted locale</param>
            <returns>ModuleInfo associated to submitted locale</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.GetModuleByDefinition(System.Int32,System.String)">
            <summary>
            Get ModuleInfo object of first module instance with a given name of the module definition
            </summary>
            <param name="portalId">ID of the portal, where to look for the module</param>
            <param name="definitionName">The name of module definition (NOTE: this looks at <see cref="P:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo.DefinitionName"/>, not <see cref="P:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo.FriendlyName"/>)</param>
            <returns>ModuleInfo of first module instance</returns>
            <remarks>preferably used for admin and host modules</remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.GetModuleByUniqueID(System.Guid)">
            <summary>
              get a Module object
            </summary>
            <param name = "uniqueID"></param>
            <returns></returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.GetModules(System.Int32)">
            <summary>
            get all Module objects of a portal
            </summary>
            <param name="portalID">ID of the portal</param>
            <returns>ArrayList of ModuleInfo objects</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.GetModulesByDefinition(System.Int32,System.String)">
            <summary>
            Gets the modules by definition.
            </summary>
            <param name="portalID">The portal ID.</param>
            <param name="definitionName">The name of the module definition.</param>
            <returns>module collection</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.GetModulesByDesktopModuleId(System.Int32)">
            <summary>
            Gets the modules by DesktopModuleId.
            </summary>
            <param name="desktopModuleId">The Desktop Module Id.</param>
            <returns>module collection</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.GetSearchModules(System.Int32)">
            <summary>
            For a portal get a list of all active module and tabmodule references that are Searchable
            either by inheriting from ModuleSearchBase or implementing the older ISearchable interface.
            </summary>
            <param name="portalID">ID of the portal to be searched</param>
            <returns>Arraylist of ModuleInfo for modules supporting search.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.GetTabModule(System.Int32)">
            <summary>
              get a Module object
            </summary>
            <param name = "tabModuleID">ID of the tabmodule</param>
            <returns>An ModuleInfo object</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.GetTabModules(System.Int32)">
            <summary>
            Get all Module references on a tab
            </summary>
            <param name="tabId"></param>
            <returns>Dictionary of ModuleID and ModuleInfo</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.GetTabModulesByModule(System.Int32)">
            <summary>
              Get a list of all TabModule references of a module instance
            </summary>
            <param name = "moduleID">ID of the Module</param>
            <returns>ArrayList of ModuleInfo</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.MoveModule(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            MoveModule moes a Module from one Tab to another including all the
            TabModule settings
            </summary>
            <param name="moduleId">The Id of the module to move</param>
            <param name="fromTabId">The Id of the source tab</param>
            <param name="toTabId">The Id of the destination tab</param>
            <param name="toPaneName">The name of the Pane on the destination tab where the module will end up</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.RestoreModule(DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            Restores the module.
            </summary>
            <param name="objModule">The module.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.UpdateModule(DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            Update module settings and permissions in database from ModuleInfo
            </summary>
            <param name="module">ModuleInfo of the module to update</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.UpdateModuleOrder(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            set/change the module position within a pane on a page
            </summary>
            <param name="TabId">ID of the page</param>
            <param name="ModuleId">ID of the module on the page</param>
            <param name="ModuleOrder">position within the controls list on page, -1 if to be added at the end</param>
            <param name="PaneName">name of the pane, the module is placed in on the page</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.UpdateModuleSetting(System.Int32,System.String,System.String)">
            <summary>
            Adds or updates a module's setting value
            </summary>
            <param name="moduleId">ID of the tabmodule, the setting belongs to</param>
            <param name="settingName">name of the setting property</param>
            <param name="settingValue">value of the setting (String).</param>
            <remarks>Empty SettingValue will remove the setting</remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.UpdateTabModuleOrder(System.Int32)">
            <summary>
            set/change all module's positions within a page
            </summary>
            <param name="TabId">ID of the page</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.UpdateTabModuleSetting(System.Int32,System.String,System.String)">
            <summary>
            Adds or updates a tab module's setting value
            </summary>
            <param name="tabModuleId">ID of the tabmodule, the setting belongs to</param>
            <param name="settingName">name of the setting property</param>
            <param name="settingValue">value of the setting (String).</param>
            <remarks>Empty SettingValue will remove the setting</remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.UpdateTranslationStatus(DotNetNuke.Entities.Modules.ModuleInfo,System.Boolean)">
            <summary>
            Updates the translation status.
            </summary>
            <param name="localizedModule">The localized module.</param>
            <param name="isTranslated">if set to <c>true</c> will mark the module as translated].</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.IsSharedModule(DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            Check if a ModuleInfo belongs to the referenced Tab or not
            </summary>
            <param name="module">A ModuleInfo object to be checked</param>
            <returns>True is TabId points to a different tab from initial Tab where the module was added. Otherwise, False</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IModuleController.GetMasterTabId(DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            Get the Tab ID corresponding to the initial Tab where the module was added
            </summary>
            <param name="module">A ModuleInfo object to be checked</param>
            <returns>The Tab Id from initial Tab where the module was added</returns>
        </member>
        <member name="T:DotNetNuke.Entities.Modules.ControlInfo">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.Entities.Modules
            Class	 : ControlInfo
            -----------------------------------------------------------------------------
            <summary>
            ControlInfo provides a base class for Module Controls and SkinControls
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.ControlInfo.ControlKey">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Control Key
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.ControlInfo.ControlSrc">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Control Source
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.ControlInfo.SupportsPartialRendering">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets a flag that determines whether the control support the AJAX
            Update Panel
            </summary>
            <returns>A Boolean</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ControlInfo.FillInternal(System.Data.IDataReader)">
            -----------------------------------------------------------------------------
            <summary>
            Fills a ControlInfo from a Data Reader
            </summary>
            <param name="dr">The Data Reader to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionController">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.Entities.Modules.Definitions
            Class	 : ModuleDefinitionController
            -----------------------------------------------------------------------------
            <summary>
            ModuleDefinitionController provides the Business Layer for Module Definitions
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionController.GetModuleDefinitionsCallBack(DotNetNuke.Common.Utilities.CacheItemArgs)">
            -----------------------------------------------------------------------------
            <summary>
            GetModuleDefinitionsCallBack gets a Dictionary of Module Definitions from
            the Database.
            </summary>
            <param name="cacheItemArgs">The CacheItemArgs object that contains the parameters
            needed for the database call</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionController.DeleteModuleDefinition(DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo)">
            -----------------------------------------------------------------------------
            <summary>
            GetModuleDefinitionByID gets a Module Definition by its ID
            </summary>
            <param name="objModuleDefinition">The object of the Module Definition</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionController.DeleteModuleDefinition(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            DeleteModuleDefinition deletes a Module Definition By ID
            </summary>
            <param name="moduleDefinitionId">The ID of the Module Definition to delete</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionController.GetModuleDefinitionByID(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetModuleDefinitionByID gets a Module Definition by its ID
            </summary>
            <param name="moduleDefID">The ID of the Module Definition</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionController.GetModuleDefinitionByFriendlyName(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            GetModuleDefinitionByFriendlyName gets a Module Definition by its Friendly
            Name (and DesktopModuleID)
            </summary>
            <param name="friendlyName">The friendly name</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionController.GetModuleDefinitionByFriendlyName(System.String,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetModuleDefinitionByFriendlyName gets a Module Definition by its Friendly
            Name (and DesktopModuleID)
            </summary>
            <param name="friendlyName">The friendly name</param>
            <param name="desktopModuleID">The ID of the Dekstop Module</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionController.GetModuleDefinitions">
            -----------------------------------------------------------------------------
            <summary>
            GetModuleDefinitions gets a Dictionary of Module Definitions.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionController.GetModuleDefinitionsByDesktopModuleID(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetModuleDefinitionsByDesktopModuleID gets a Dictionary of Module Definitions
            with a particular DesktopModuleID, keyed by the FriendlyName.
            </summary>
            <param name="desktopModuleID">The ID of the Desktop Module</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionController.GetModuleDefinitionByDefinitionName(System.String,System.Int32)">
            <summary>
            Get ModuleDefinition by DefinitionName
            </summary>
            <param name="definitionName">The defintion name</param>
            <param name="desktopModuleID">The ID of the Dekstop Module</param>
            <returns>A ModuleDefinition or null if not found</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionController.SaveModuleDefinition(DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo,System.Boolean,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            SaveModuleDefinition saves the Module Definition to the database
            </summary>
            <param name="moduleDefinition">The Module Definition to save</param>
            <param name="saveChildren">A flag that determines whether the child objects are also saved</param>
            <param name="clearCache">A flag that determines whether to clear the host cache</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.Entities.Modules.Definitions
            Class	 : ModuleDefinitionInfo
            -----------------------------------------------------------------------------
            <summary>
            ModuleDefinitionInfo provides the Entity Layer for Module Definitions
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo.ModuleDefID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Module Definition ID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo.DefaultCacheTime">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Default Cache Time
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo.DesktopModuleID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the associated Desktop Module ID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo.FriendlyName">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Friendly Name
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo.DefinitionName">
            <summary>
            Gets the DefinitionName
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo.ModuleControls">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Dictionary of ModuleControls that are part of this definition
            </summary>
            <returns>A Dictionary(Of String, ModuleControlInfo)</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo.Permissions">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Dictionary of Permissions that are part of this definition
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo.Fill(System.Data.IDataReader)">
            -----------------------------------------------------------------------------
            <summary>
            Fills a ModuleDefinitionInfo from a Data Reader
            </summary>
            <param name="dr">The Data Reader to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo.KeyID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Key ID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo.GetSchema">
            -----------------------------------------------------------------------------
            <summary>
            Gets an XmlSchema for the ModuleDefinitionInfo
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo.ReadXml(System.Xml.XmlReader)">
            -----------------------------------------------------------------------------
            <summary>
            Reads a ModuleDefinitionInfo from an XmlReader
            </summary>
            <param name="reader">The XmlReader to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo.WriteXml(System.Xml.XmlWriter)">
            -----------------------------------------------------------------------------
            <summary>
            Writes a ModuleDefinitionInfo to an XmlWriter
            </summary>
            <param name="writer">The XmlWriter to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Definitions.ModuleDefinitionInfo.ReadModuleControls(System.Xml.XmlReader)">
            -----------------------------------------------------------------------------
            <summary>
            Reads the ModuleControls from an XmlReader
            </summary>
            <param name="reader">The XmlReader to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Modules.DesktopModuleController">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.Entities.Modules
            Class	 : DesktopModuleController
            -----------------------------------------------------------------------------
            <summary>
            DesktopModuleController provides the Busines Layer for Desktop Modules
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.DesktopModuleController.GetDesktopModulesByPortalCallBack(DotNetNuke.Common.Utilities.CacheItemArgs)">
            -----------------------------------------------------------------------------
            <summary>
            GetDesktopModulesByPortalCallBack gets a Dictionary of Desktop Modules by
            Portal from the the Database.
            </summary>
            <param name="cacheItemArgs">The CacheItemArgs object that contains the parameters
            needed for the database call</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.DesktopModuleController.DeleteDesktopModule(DotNetNuke.Entities.Modules.DesktopModuleInfo)">
            -----------------------------------------------------------------------------
            <summary>
            DeleteDesktopModule deletes a Desktop Module
            </summary>
            <param name="objDesktopModule">Desktop Module Info</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.DesktopModuleController.DeleteDesktopModule(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            DeleteDesktopModule deletes a Desktop Module By ID
            </summary>
            <param name="desktopModuleID">The ID of the Desktop Module to delete</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.DesktopModuleController.DeleteDesktopModule(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            DeleteDesktopModule deletes a Desktop Module
            </summary>
            <param name="moduleName">The Name of the Desktop Module to delete</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.DesktopModuleController.GetDesktopModule(System.Int32,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetDesktopModule gets a Desktop Module by its ID
            </summary>
            <remarks>This method uses the cached Dictionary of DesktopModules.  It first checks
            if the DesktopModule is in the cache.  If it is not in the cache it then makes a call
            to the Dataprovider.</remarks>
            <param name="desktopModuleID">The ID of the Desktop Module to get</param>
            <param name="portalID">The ID of the portal</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.DesktopModuleController.GetDesktopModuleByPackageID(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetDesktopModuleByPackageID gets a Desktop Module by its Package ID
            </summary>
            <param name="packageID">The ID of the Package</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.DesktopModuleController.GetDesktopModuleByModuleName(System.String,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetDesktopModuleByModuleName gets a Desktop Module by its Name
            </summary>
            <remarks>This method uses the cached Dictionary of DesktopModules.  It first checks
            if the DesktopModule is in the cache.  If it is not in the cache it then makes a call
            to the Dataprovider.</remarks>
            <param name="moduleName">The name of the Desktop Module to get</param>
            <param name="portalID">The ID of the portal</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.DesktopModuleController.GetDesktopModules(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetDesktopModules gets a Dictionary of Desktop Modules
            </summary>
            <param name="portalID">The ID of the Portal (Use PortalID = Null.NullInteger (-1) to get
            all the DesktopModules including Modules not allowed for the current portal</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.DesktopModuleController.SaveDesktopModule(DotNetNuke.Entities.Modules.DesktopModuleInfo,System.Boolean,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            SaveDesktopModule saves the Desktop Module to the database
            </summary>
            <param name="desktopModule">The Desktop Module to save</param>
            <param name="saveChildren">A flag that determines whether the child objects are also saved</param>
            <param name="clearCache">A flag that determines whether to clear the host cache</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Modules.DesktopModuleInfo">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.Entities.Modules
            Class	 : DesktopModuleInfo
            -----------------------------------------------------------------------------
            <summary>
            DesktopModuleInfo provides the Entity Layer for Desktop Modules
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.DesktopModuleID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the ID of the Desktop Module
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.PackageID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the ID of the Package for this Desktop Module
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.AdminPage">
            <summary>
            returns whether this has an associated Admin page
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.BusinessControllerClass">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the BusinessControllerClass of the Desktop Module
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.CodeSubDirectory">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the AppCode Folder Name of the Desktop Module
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.CompatibleVersions">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets a Regular Expression that matches the versions of the core
            that this module is compatible with
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.Dependencies">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets a list of Dependencies for the module
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.Description">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the  Description of the Desktop Module
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.FolderName">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Folder Name of the Desktop Module
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.FriendlyName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Friendly Name of the Desktop Module
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.HostPage">
            <summary>
            returns whether this has an associated hostpage
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.IsAdmin">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the Module is an Admin Module
            </summary>
            <returns>A Boolean</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.IsPortable">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the Module is Portable
            </summary>
            <returns>A Boolean</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.IsPremium">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the Module is a Premium Module
            </summary>
            <returns>A Boolean</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.IsSearchable">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the Module is Searchable
            </summary>
            <returns>A Boolean</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.IsUpgradeable">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the Module is Upgradable
            </summary>
            <returns>A Boolean</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.Shareable">
            <summary>
            Is the module allowed to be shared across sites?
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.ModuleDefinitions">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Module Definitions for this Desktop Module
            </summary>
            <returns>A Boolean</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.ModuleName">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the  Name of the Desktop Module
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.Permissions">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets a list of Permissions for the module
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.SupportedFeatures">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Supported Features of the Module
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.DesktopModuleInfo.Version">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Version of the Desktop Module
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.DesktopModuleInfo.Fill(System.Data.IDataReader)">
            -----------------------------------------------------------------------------
            <summary>
            Fills a DesktopModuleInfo from a Data Reader
            </summary>
            <param name="dr">The Data Reader to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.DesktopModuleInfo.GetSchema">
            -----------------------------------------------------------------------------
            <summary>
            Gets an XmlSchema for the DesktopModule
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.DesktopModuleInfo.ReadXml(System.Xml.XmlReader)">
            -----------------------------------------------------------------------------
            <summary>
            Reads a DesktopModuleInfo from an XmlReader
            </summary>
            <param name="reader">The XmlReader to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.DesktopModuleInfo.WriteXml(System.Xml.XmlWriter)">
            -----------------------------------------------------------------------------
            <summary>
            Writes a DesktopModuleInfo to an XmlWriter
            </summary>
            <param name="writer">The XmlWriter to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.DesktopModuleInfo.ClearFeature(DotNetNuke.Entities.Modules.DesktopModuleSupportedFeature)">
            -----------------------------------------------------------------------------
            <summary>
            Clears a Feature from the Features
            </summary>
            <param name="feature">The feature to Clear</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.DesktopModuleInfo.GetFeature(DotNetNuke.Entities.Modules.DesktopModuleSupportedFeature)">
            -----------------------------------------------------------------------------
            <summary>
            Gets a Feature from the Features
            </summary>
            <param name="feature">The feature to Get</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.DesktopModuleInfo.SetFeature(DotNetNuke.Entities.Modules.DesktopModuleSupportedFeature)">
            -----------------------------------------------------------------------------
            <summary>
            Sets a Feature in the Features
            </summary>
            <param name="feature">The feature to Set</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.DesktopModuleInfo.UpdateFeature(DotNetNuke.Entities.Modules.DesktopModuleSupportedFeature,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            Updates a Feature in the Features
            </summary>
            <param name="feature">The feature to Set</param>
            <param name="isSet">A Boolean indicating whether to set or clear the feature</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.DesktopModuleInfo.ReadSupportedFeatures(System.Xml.XmlReader)">
            -----------------------------------------------------------------------------
            <summary>
            Reads a Supported Features from an XmlReader
            </summary>
            <param name="reader">The XmlReader to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.DesktopModuleInfo.ReadModuleDefinitions(System.Xml.XmlReader)">
            -----------------------------------------------------------------------------
            <summary>
            Reads a Module Definitions from an XmlReader
            </summary>
            <param name="reader">The XmlReader to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Modules.DesktopModuleSupportedFeature">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.Entities.Modules
            Class	 : DesktopModuleSupportedFeature
            -----------------------------------------------------------------------------
            <summary>
            The DesktopModuleSupportedFeature enum provides an enumeration of Supported
            Features
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Modules.IPortable">
            <summary>A contract specifying the ability to import and export the content of a module</summary>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IPortable.ExportModule(System.Int32)">
            <summary>Exports the content of this module</summary>
            <param name="ModuleID">The ID of the module to export</param>
            <returns>The module's content serialized as a <see cref="T:System.String"/></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.IPortable.ImportModule(System.Int32,System.String,System.String,System.Int32)">
            <summary>Imports the content of a module</summary>
            <param name="ModuleID">The ID of the module into which the content is being imported</param>
            <param name="Content">The content to import</param>
            <param name="Version">The version of the module from which the content is coming</param>
            <param name="UserID">The ID of the user performing the import</param>
        </member>
        <member name="T:DotNetNuke.Entities.Modules.ModuleControlController">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.Entities.Modules
            Class	 : ModuleControlController
            -----------------------------------------------------------------------------
            <summary>
            ModuleControlController provides the Business Layer for Module Controls
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleControlController.GetModuleControls">
            -----------------------------------------------------------------------------
            <summary>
            GetModuleControls gets a Dictionary of Module Controls from
            the Cache.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleControlController.GetModuleControlsCallBack(DotNetNuke.Common.Utilities.CacheItemArgs)">
            -----------------------------------------------------------------------------
            <summary>
            GetModuleControlsCallBack gets a Dictionary of Module Controls from
            the Database.
            </summary>
            <param name="cacheItemArgs">The CacheItemArgs object that contains the parameters
            needed for the database call</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleControlController.AddModuleControl(DotNetNuke.Entities.Modules.ModuleControlInfo)">
            -----------------------------------------------------------------------------
            <summary>
            AddModuleControl adds a new Module Control to the database
            </summary>
            <param name="objModuleControl">The Module Control to save</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleControlController.DeleteModuleControl(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            DeleteModuleControl deletes a Module Control in the database
            </summary>
            <param name="moduleControlID">The ID of the Module Control to delete</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleControlController.GetModuleControl(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetModuleControl gets a single Module Control from the database
            </summary>
            <param name="moduleControlID">The ID of the Module Control to fetch</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleControlController.GetModuleControlsByModuleDefinitionID(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetModuleControl gets a Dictionary of Module Controls by Module Definition
            </summary>
            <param name="moduleDefID">The ID of the Module Definition</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleControlController.GetModuleControlByControlKey(System.String,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetModuleControlByControlKey gets a single Module Control from the database
            </summary>
            <param name="controlKey">The key for the control</param>
            <param name="moduleDefID">The ID of the Module Definition</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleControlController.SaveModuleControl(DotNetNuke.Entities.Modules.ModuleControlInfo,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            SaveModuleControl updates a Module Control in the database
            </summary>
            <param name="moduleControl">The Module Control to save</param>
            <param name="clearCache">A flag that determines whether to clear the host cache</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleControlController.UpdateModuleControl(DotNetNuke.Entities.Modules.ModuleControlInfo)">
            -----------------------------------------------------------------------------
            <summary>
            UpdateModuleControl updates a Module Control in the database
            </summary>
            <param name="objModuleControl">The Module Control to save</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Modules.ModuleControlInfo">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.Entities.Modules
            Class	 : ModuleControlInfo
            -----------------------------------------------------------------------------
            <summary>
            ModuleControlInfo provides the Entity Layer for Module Controls
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.ModuleControlInfo.ControlTitle">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Control Title
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.ModuleControlInfo.ControlType">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Control Type
            </summary>
            <returns>A SecurityAccessLevel</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.ModuleControlInfo.HelpURL">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Help URL
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.ModuleControlInfo.IconFile">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Icon  Source
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.ModuleControlInfo.ModuleControlID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Module Control ID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.ModuleControlInfo.ModuleDefID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Module Definition ID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.ModuleControlInfo.SupportsPopUps">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether to support popup.
            </summary>
            <returns>A Boolean value</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.ModuleControlInfo.ViewOrder">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the View Order
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleControlInfo.Fill(System.Data.IDataReader)">
            -----------------------------------------------------------------------------
            <summary>
            Fills a ModuleControlInfo from a Data Reader
            </summary>
            <param name="dr">The Data Reader to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.ModuleControlInfo.KeyID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Key ID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleControlInfo.GetSchema">
            -----------------------------------------------------------------------------
            <summary>
            Gets an XmlSchema for the ModuleControlInfo
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleControlInfo.ReadXml(System.Xml.XmlReader)">
            -----------------------------------------------------------------------------
            <summary>
            Reads a ModuleControlInfo from an XmlReader
            </summary>
            <param name="reader">The XmlReader to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleControlInfo.WriteXml(System.Xml.XmlWriter)">
            -----------------------------------------------------------------------------
            <summary>
            Writes a ModuleControlInfo to an XmlWriter
            </summary>
            <param name="writer">The XmlWriter to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Modules.ModuleInfo">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.Entities.Modules
            Class	 : ModuleInfo
            -----------------------------------------------------------------------------
            <summary>
            ModuleInfo provides the Entity Layer for Modules
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.ModuleInfo.DesktopModule">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Associated Desktop Module
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.ModuleInfo.DesktopModuleID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the ID of the Associated Desktop Module
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.ModuleInfo.ModuleDefID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the ID of the Associated Module Definition
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.ModuleInfo.ModuleDefinition">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Associated Module Definition
            </summary>
            <returns>A ModuleDefinitionInfo</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.ModuleInfo.ModulePermissions">
            <summary>
            Get the ModulePermissions for the Module DO NOT USE THE SETTTER
            <remarks>
            Since 5.0 the setter has been obsolete, directly setting the ModulePermissionCollection is likely an error, change the contenst of the collection instead.
            The setter still exists to preserve binary compatibility without the obsolete attribute since c# will not allow only a setter to be obsolete.
            </remarks>
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ModuleInfo.Fill(System.Data.IDataReader)">
            -----------------------------------------------------------------------------
            <summary>
            Fills a ModuleInfo from a Data Reader
            </summary>
            <param name="dr">The Data Reader to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.ModuleInfo.KeyID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Key ID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Modules.PortalModuleBase">
             -----------------------------------------------------------------------------
             Project	 : DotNetNuke
             Class	 : PortalModuleBase
            
             -----------------------------------------------------------------------------
             <summary>
             The PortalModuleBase class defines a custom base class inherited by all
             desktop portal modules within the Portal.
            
             The PortalModuleBase class defines portal specific properties
             that are used by the portal framework to correctly display portal modules
             </summary>
             <remarks>
             </remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Modules.PortalModuleBase.DependencyProvider">
            <summary>
            Gets or sets the Dependency Provider to resolve registered 
            services with the container.
            </summary>
            <value>
            The Dependency Service.
            </value>
        </member>
        <member name="P:DotNetNuke.Entities.Modules.PortalModuleBase.EditMode">
            -----------------------------------------------------------------------------
            <summary>
            The EditMode property is used to determine whether the user is in the 
            Administrator role
            Cache
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.PortalModuleBase.Control">
            -----------------------------------------------------------------------------
            <summary>
            Gets the underlying base control for this ModuleControl
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.PortalModuleBase.ControlPath">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Path for this control (used primarily for UserControls)
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.PortalModuleBase.ControlName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Name for this control
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.PortalModuleBase.LocalResourceFile">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the local resource file for this control
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.PortalModuleBase.ModuleContext">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Module Context for this control
            </summary>
            <returns>A ModuleInstanceContext</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.PortalModuleBase.AddActionHandler(DotNetNuke.Entities.Modules.Actions.ActionEventHandler)">
            -----------------------------------------------------------------------------
            <summary>
            Helper method that can be used to add an ActionEventHandler to the Skin for this 
            Module Control
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.PortalModuleBase.CacheDirectory">
            -----------------------------------------------------------------------------
            <summary>
              The CacheDirectory property is used to return the location of the "Cache"
              Directory for the Module
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.PortalModuleBase.CacheFileName">
            -----------------------------------------------------------------------------
            <summary>
              The CacheFileName property is used to store the FileName for this Module's
              Cache
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Modules.ProfileUserControlBase">
            -----------------------------------------------------------------------------
            Project	 :  DotNetNuke
            Namespace:  DotNetNuke.Entities.Modules
            Class	 :  ProfileUserControlBase
            -----------------------------------------------------------------------------
            <summary>
            The ProfileUserControlBase class defines a custom base class for the profile Control.
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ProfileUserControlBase.OnProfileUpdateCompleted(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Raises the OnProfileUpdateCompleted Event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.ProfileUserControlBase.OnProfileUpdated(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Raises the ProfileUpdated Event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Modules.SkinControlController">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.Entities.Modules
            Class	 : ModuleControlController
            -----------------------------------------------------------------------------
            <summary>
            ModuleControlController provides the Business Layer for Module Controls
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.SkinControlController.DeleteSkinControl(DotNetNuke.Entities.Modules.SkinControlInfo)">
            -----------------------------------------------------------------------------
            <summary>
            DeleteSkinControl deletes a Skin Control in the database
            </summary>
            <param name="skinControl">The Skin Control to delete</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.SkinControlController.GetSkinControl(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetSkinControl gets a single Skin Control from the database
            </summary>
            <param name="skinControlID">The ID of the SkinControl</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.SkinControlController.GetSkinControlByPackageID(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetSkinControlByPackageID gets a single Skin Control from the database
            </summary>
            <param name="packageID">The ID of the Package</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.SkinControlController.GetSkinControlByKey(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            GetSkinControlByKey gets a single Skin Control from the database
            </summary>
            <param name="key">The key of the Control</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.SkinControlController.GetSkinControls">
            -----------------------------------------------------------------------------
            <summary>
            GetSkinControls gets all the Skin Controls from the database
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.SkinControlController.SaveSkinControl(DotNetNuke.Entities.Modules.SkinControlInfo)">
            -----------------------------------------------------------------------------
            <summary>
            SaveSkinControl updates a Skin Control in the database
            </summary>
            <param name="skinControl">The Skin Control to save</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Modules.SkinControlInfo">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.Entities.Modules
            Class	 : SkinControlInfo
            -----------------------------------------------------------------------------
            <summary>
            SkinControlInfo provides the Entity Layer for Skin Controls (SkinObjects)
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.SkinControlInfo.SkinControlID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the SkinControl ID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.SkinControlInfo.PackageID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the ID of the Package for this Desktop Module
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.SkinControlInfo.Fill(System.Data.IDataReader)">
            -----------------------------------------------------------------------------
            <summary>
            Fills a SkinControlInfo from a Data Reader
            </summary>
            <param name="dr">The Data Reader to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.SkinControlInfo.KeyID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Key ID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.SkinControlInfo.GetSchema">
            -----------------------------------------------------------------------------
            <summary>
            Gets an XmlSchema for the SkinControlInfo
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.SkinControlInfo.ReadXml(System.Xml.XmlReader)">
            -----------------------------------------------------------------------------
            <summary>
            Reads a SkinControlInfo from an XmlReader
            </summary>
            <param name="reader">The XmlReader to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.SkinControlInfo.WriteXml(System.Xml.XmlWriter)">
            -----------------------------------------------------------------------------
            <summary>
            Writes a SkinControlInfo to an XmlWriter
            </summary>
            <param name="writer">The XmlWriter to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Modules.UserModuleBase">
            <summary>
            The UserModuleBase class defines a custom base class inherited by all
            desktop portal modules within the Portal that manage Users.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Modules.UserModuleBase.AddUser">
            <summary>
            Gets whether we are in Add User mode
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Modules.UserModuleBase.IsAdmin">
            <summary>
            Gets whether the current user is an Administrator (or SuperUser)
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Modules.UserModuleBase.IsUserOrAdmin">
            <summary>
            gets whether this is the current user or admin
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Modules.UserModuleBase.IsHostTab">
            <summary>
            Gets whether this control is in the Host menu
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Modules.UserModuleBase.IsEdit">
            <summary>
            Gets whether the control is being called form the User Accounts module
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Modules.UserModuleBase.IsProfile">
            <summary>
            Gets whether the current user is modifying their profile
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Modules.UserModuleBase.IsRegister">
            <summary>
            Gets whether an anonymous user is trying to register
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Modules.UserModuleBase.IsUser">
            <summary>
            Gets whether the User is editing their own information
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Modules.UserModuleBase.UserPortalID">
            <summary>
            Gets the PortalId to use for this control
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Modules.UserModuleBase.User">
            <summary>
            Gets and sets the User associated with this control
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Modules.UserModuleBase.UserId">
            <summary>
            Gets and sets the UserId associated with this control
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.UserModuleBase.GetSetting(System.Int32,System.String)">
            <summary>
            Gets a Setting for the Module
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.UserModuleBase.UpdateSettings(System.Int32,System.Collections.Hashtable)">
            <summary>
            Updates the Settings for the Module
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.UserModuleBase.InitialiseUser">
            <summary>
            InitialiseUser initialises a "new" user
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.UserModuleBase.AddLocalizedModuleMessage(System.String,DotNetNuke.UI.Skins.Controls.ModuleMessage.ModuleMessageType,System.Boolean)">
            <summary>
            AddLocalizedModuleMessage adds a localized module message
            </summary>
            <param name="message">The localized message</param>
            <param name="type">The type of message</param>
            <param name="display">A flag that determines whether the message should be displayed</param>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.UserModuleBase.AddModuleMessage(System.String,DotNetNuke.UI.Skins.Controls.ModuleMessage.ModuleMessageType,System.Boolean)">
            <summary>
            AddModuleMessage adds a module message
            </summary>
            <param name="message">The message</param>
            <param name="type">The type of message</param>
            <param name="display">A flag that determines whether the message should be displayed</param>
        </member>
        <member name="T:DotNetNuke.Entities.Modules.UserUserControlBase">
            -----------------------------------------------------------------------------
            Project	 :  DotNetNuke
            Namespace:  DotNetNuke.Entities.Modules
            Class	 :  UserUserControlBase
            -----------------------------------------------------------------------------
            <summary>
            The UserUserControlBase class defines a custom base class for the User Control.
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.UserUserControlBase.OnUserCreateCompleted(DotNetNuke.Entities.Modules.UserUserControlBase.UserCreatedEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Raises the UserCreateCompleted Event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.UserUserControlBase.OnUserCreated(DotNetNuke.Entities.Modules.UserUserControlBase.UserCreatedEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Raises the UserCreated Event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.UserUserControlBase.OnUserDeleted(DotNetNuke.Entities.Modules.UserUserControlBase.UserDeletedEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Raises the UserDeleted Event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.UserUserControlBase.OnUserDeleteError(DotNetNuke.Entities.Modules.UserUserControlBase.UserUpdateErrorArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Raises the UserDeleteError Event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.UserUserControlBase.OnUserUpdated(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Raises the UserUpdated Event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.UserUserControlBase.OnUserUpdateCompleted(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Raises the UserUpdated Event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.UserUserControlBase.OnUserUpdateError(DotNetNuke.Entities.Modules.UserUserControlBase.UserUpdateErrorArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Raises the UserUpdateError Event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Modules.UserUserControlBase.BaseUserEventArgs">
            -----------------------------------------------------------------------------
            <summary>
            The BaseUserEventArgs class provides a base for User EventArgs classes
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.UserUserControlBase.BaseUserEventArgs.UserId">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Id of the User
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.UserUserControlBase.BaseUserEventArgs.UserName">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Id of the User
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Modules.UserUserControlBase.UserCreatedEventArgs">
            -----------------------------------------------------------------------------
            <summary>
            The UserCreatedEventArgs class provides a customised EventArgs class for
            the UserCreated Event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.UserUserControlBase.UserCreatedEventArgs.#ctor(DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a new UserCreatedEventArgs
            </summary>
            <param name="newUser">The newly Created User</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.UserUserControlBase.UserCreatedEventArgs.CreateStatus">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Create Status
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.UserUserControlBase.UserCreatedEventArgs.NewUser">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the New User
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.UserUserControlBase.UserCreatedEventArgs.Notify">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets a flag whether to Notify the new User of the Creation
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Modules.UserUserControlBase.UserDeletedEventArgs">
            -----------------------------------------------------------------------------
            <summary>
            The UserDeletedEventArgs class provides a customised EventArgs class for
            the UserDeleted Event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.UserUserControlBase.UserDeletedEventArgs.#ctor(System.Int32,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a new UserDeletedEventArgs
            </summary>
            <param name="id">The Id of the User</param>
            <param name="name">The user name of the User</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Modules.UserUserControlBase.UserRestoredEventArgs">
            -----------------------------------------------------------------------------
            <summary>
            The UserRestoredEventArgs class provides a customised EventArgs class for
            the UserRestored Event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.UserUserControlBase.UserRestoredEventArgs.#ctor(System.Int32,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a new UserRestoredEventArgs
            </summary>
            <param name="id">The Id of the User</param>
            <param name="name">The user name of the User</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Modules.UserUserControlBase.UserRemovedEventArgs">
            -----------------------------------------------------------------------------
            <summary>
            The UserRemovedEventArgs class provides a customised EventArgs class for
            the UserRemoved Event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.UserUserControlBase.UserRemovedEventArgs.#ctor(System.Int32,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a new UserRemovedEventArgs
            </summary>
            <param name="id">The Id of the User</param>
            <param name="name">The user name of the User</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Modules.UserUserControlBase.UserUpdateErrorArgs">
            -----------------------------------------------------------------------------
            <summary>
            The UserUpdateErrorArgs class provides a customised EventArgs class for
            the UserUpdateError Event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Modules.UserUserControlBase.UserUpdateErrorArgs.#ctor(System.Int32,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a new UserUpdateErrorArgs
            </summary>
            <param name="id">The Id of the User</param>
            <param name="name">The user name of the User</param>
            <param name="message">The error message</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Modules.UserUserControlBase.UserUpdateErrorArgs.Message">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the error message
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Modules.VisibilityState">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.Entities.Modules
            Class	 : VisibilityState
            -----------------------------------------------------------------------------
            <summary>
            The VisibilityState enum provides an enumeration of the Visibility options
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Modules.Communications.ModuleCommunicate">
            <summary>
            Specifies communications between modules. 
            There are listeners and communicators
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Modules.Communications.ModuleCommunicate.ModuleCommunicators">
            <summary>
            Gets the module communicators.
            </summary>
            <value>
            The module communicators.
            </value>
        </member>
        <member name="P:DotNetNuke.Entities.Modules.Communications.ModuleCommunicate.ModuleListeners">
            <summary>
            Gets the module listeners.
            </summary>
            <value>
            The module listeners.
            </value>
        </member>
        <member name="M:DotNetNuke.Entities.Modules.Communications.ModuleCommunicate.LoadCommunicator(System.Web.UI.Control)">
            <summary>
            Loads the communicator.
            </summary>
            <param name="ctrl">The control.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalAliasExtensions.GetAliasByPortalIdAndSettings(System.Collections.Generic.IEnumerable{DotNetNuke.Entities.Portals.PortalAliasInfo},System.Int32,DotNetNuke.Entities.Urls.UrlAction,System.String,DotNetNuke.Entities.Urls.FriendlyUrlSettings)">
            <summary>
            Returns the chosen portal alias for a specific portal Id and culture Code
            </summary>
            <param name="aliases"></param>
            <param name="portalId"></param>
            <param name="cultureCode"></param>
            <remarks>Detects the current browser type if possible.  If can't be deteced 'normal' is used. If a specific browser type is required, use overload with browser type.</remarks>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalAliasExtensions.GetAliasByPortalIdAndSettings(System.Collections.Generic.IEnumerable{DotNetNuke.Entities.Portals.PortalAliasInfo},System.Int32,DotNetNuke.Entities.Urls.UrlAction,System.String,DotNetNuke.Entities.Urls.BrowserTypes)">
            <summary>
            Returns a ChosenPortalAlias object where the portalId, culture code and isMobile matches
            </summary>
            <param name="aliases"></param>
            <param name="portalId"></param>
            <param name="result"></param>
            <param name="cultureCode"></param>
            <param name="browserType"></param>
            <returns>A ChosenPOrtalAlias</returns>
            <remarks>Note will return a best-match by portal if no specific culture Code match found</remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalSettingsController.GetActiveTab(System.Int32,DotNetNuke.Entities.Portals.PortalSettings)">
            -----------------------------------------------------------------------------
            <summary>
            The GetActiveTab method gets the active Tab for the current request
            </summary>
            <returns></returns>
            <param name="tabId">The current tab's id</param>
            <param name="portalSettings">The current PortalSettings</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalSettingsController.GetTabModules(DotNetNuke.Entities.Portals.PortalSettings)">
            -----------------------------------------------------------------------------
            <summary>
            The GetTabModules method gets the list of modules for the active Tab
            </summary>
            <returns></returns>
            <param name="portalSettings">The current PortalSettings</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalSettingsController.LoadPortal(DotNetNuke.Entities.Portals.PortalInfo,DotNetNuke.Entities.Portals.PortalSettings)">
             -----------------------------------------------------------------------------
             <summary>
             The LoadPortal method loads the properties of the portal object into the Portal Settings
             </summary>
            <param name="portal">The Portal object</param>
            <param name="portalSettings">The Portal Settings object</param>
             -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalSettingsController.LoadPortalSettings(DotNetNuke.Entities.Portals.PortalSettings)">
             -----------------------------------------------------------------------------
             <summary>
             The LoadPortalSettings method loads the settings into the Portal Settings
             </summary>
            <param name="portalSettings">The Portal Settings object</param>
             -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Portals.IPortalAliasController">
            <summary>
            Do not implement.  This interface is only implemented by the DotNetNuke core framework. Outside the framework it should used as a type and for unit test purposes only.
            There is no guarantee that this interface will not change.
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalAliasController.AddPortalAlias(DotNetNuke.Entities.Portals.PortalAliasInfo)">
            <summary>
            Add a new Portal Alias
            </summary>
            <param name="portalAlias">The portal alias to add</param>
            <returns>The Id of the newly added portal alias</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalAliasController.DeletePortalAlias(DotNetNuke.Entities.Portals.PortalAliasInfo)">
            <summary>
            Delete a Portal Alias
            </summary>
            <param name="portalAlias">The portal alias to remove</param>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalAliasController.GetPortalAlias(System.String)">
            <summary>
            Gets the portal alias info.
            </summary>
            <param name="alias">The portal alias.</param>
            <returns>Portal alias info</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalAliasController.GetPortalAlias(System.String,System.Int32)">
            <summary>
            Gets the portal alias info.
            </summary>
            <param name="alias">The portal alias.</param>
            <param name="portalId">The Id of the portal in question</param>
            <returns>Portal alias info</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalAliasController.GetPortalAliases">
            <summary>
            Gets all the portal aliases defined
            </summary>
            <returns>A dictionary keyed by the HTTP Alias</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalAliasController.GetPortalAliasesByPortalId(System.Int32)">
            <summary>
            Gets the portal alias by portal ID.
            </summary>
            <param name="portalId">The portal ID.</param>
            <returns>Portal alias collection.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalAliasController.UpdatePortalAlias(DotNetNuke.Entities.Portals.PortalAliasInfo)">
            <summary>
            Updates the portal alias info.
            </summary>
            <param name="portalAlias">The obj portal alias info.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalSettingsExtensions.InErrorPageRequest(DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>
            Detect whether current page is custom error page.
            </summary>
            <param name="portalSettings"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.Data.IDataService.GetSharedModulesWithPortal(DotNetNuke.Entities.Portals.PortalInfo)">
            <summary>
            Gets all shared modules with the specified Portal  by another owner portals
            </summary>
            <param name="portal">The Portal</param>
            <returns>A list of ModuleInfo objects</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.Data.IDataService.GetSharedModulesByPortal(DotNetNuke.Entities.Portals.PortalInfo)">
            <summary>
            Gets all shared modules by the specified Portal with another portals
            </summary>
            <param name="portal">The owner Portal</param>
            <returns>A list of ModuleInfo objects</returns>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalAliasCollection.Item(System.String)">
            <summary>
            Gets or sets the value associated with the specified key.
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalAliasCollection.HasKeys">
            <summary>
            Gets a value indicating if the collection contains keys that are not null.
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalAliasCollection.Add(System.String,DotNetNuke.Entities.Portals.PortalAliasInfo)">
            <summary>
            Adds an entry to the collection.
            </summary>
        </member>
        <member name="T:DotNetNuke.Entities.Portals.PortalAliasController">
            <summary>
            PortalAliasController provides method to manage portal alias.
            </summary>
            <remarks>
            For DotNetNuke to know what site a request should load, it uses a system of portal aliases. 
            When a request is recieved by DotNetNuke from IIS, it extracts the domain name portion and does a comparison against 
            the list of portal aliases and then redirects to the relevant portal to load the approriate page. 
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalAliasController.GetPortalAlias(System.String,System.Int32)">
            <summary>
            Gets the portal alias.
            </summary>
            <param name="alias">The portal alias.</param>
            <param name="portalId">The portal ID.</param>
            <returns>Portal Alias Info.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalAliasController.GetPortalAliasByPortalAliasID(System.Int32)">
            <summary>
            Gets the portal alias by portal alias ID.
            </summary>
            <param name="portalAliasId">The portal alias ID.</param>
            <returns>Portal alias info.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalAliasController.GetPortalByPortalAliasID(System.Int32)">
            <summary>
            Gets the portal by portal alias ID.
            </summary>
            <param name="PortalAliasId">The portal alias id.</param>
            <returns>Portal info.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalAliasController.GetPortalAliasByPortal(System.Int32,System.String)">
            <summary>
            Gets the portal alias by portal.
            </summary>
            <param name="portalId">The portal id.</param>
            <param name="portalAlias">The portal alias.</param>
            <returns>Portal alias.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalAliasController.GetPortalAliasByTab(System.Int32,System.String)">
            <summary>
            Gets the portal alias by tab.
            </summary>
            <param name="tabId">The tab ID.</param>
            <param name="portalAlias">The portal alias.</param>
            <returns>Portal alias.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalAliasController.ValidateAlias(System.String,System.Boolean)">
            <summary>
            Validates the alias.
            </summary>
            <param name="portalAlias">The portal alias.</param>
            <param name="ischild">if set to <c>true</c> [ischild].</param>
            <returns><c>true</c> if the alias is a valid url format; otherwise return <c>false</c>.</returns>
        </member>
        <member name="T:DotNetNuke.Entities.Portals.PortalController">
            <summary>
            PoralController provides business layer of poatal.
            </summary>
            <remarks>
            DotNetNuke supports the concept of virtualised sites in a single install. This means that multiple sites, 
            each potentially with multiple unique URL's, can exist in one instance of DotNetNuke i.e. one set of files and one database.
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.AddPortalAlias(System.Int32,System.String)">
            <summary>
            Creates a new portal alias
            </summary>
            <param name="portalId">Id of the portal</param>
            <param name="portalAlias">Portal Alias to be created</param>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.CopyPageTemplate(System.String,System.String)">
            <summary>
            Copies the page template.
            </summary>
            <param name="templateFile">The template file.</param>
            <param name="mappedHomeDirectory">The mapped home directory.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.CreatePortal(System.String,System.Int32,System.String,System.String,DotNetNuke.Entities.Portals.PortalController.PortalTemplateInfo,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates the portal.
            </summary>
            <param name="portalName">Name of the portal.</param>
            <param name="adminUserId">The obj admin user.</param>
            <param name="description">The description.</param>
            <param name="keyWords">The key words.</param>
            <param name="template"> </param>
            <param name="homeDirectory">The home directory.</param>
            <param name="portalAlias">The portal alias.</param>
            <param name="serverPath">The server path.</param>
            <param name="childPath">The child path.</param>
            <param name="isChildPortal">if set to <c>true</c> means the portal is child portal.</param>
            <returns>Portal id.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.CreatePortal(System.String,DotNetNuke.Entities.Users.UserInfo,System.String,System.String,DotNetNuke.Entities.Portals.PortalController.PortalTemplateInfo,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates the portal.
            </summary>
            <param name="portalName">Name of the portal.</param>
            <param name="adminUser">The obj admin user.</param>
            <param name="description">The description.</param>
            <param name="keyWords">The key words.</param>
            <param name="template"> </param>
            <param name="homeDirectory">The home directory.</param>
            <param name="portalAlias">The portal alias.</param>
            <param name="serverPath">The server path.</param>
            <param name="childPath">The child path.</param>
            <param name="isChildPortal">if set to <c>true</c> means the portal is child portal.</param>
            <returns>Portal id.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.GetAvailablePortalTemplates">
            <summary>
            Get all the available portal templates grouped by culture
            </summary>
            <returns>List of PortalTemplateInfo objects</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.DotNetNuke#Entities#Portals#IPortalController#GetCurrentPortalSettings">
            <summary>
            Gets the current portal settings.
            </summary>
            <returns>portal settings.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.GetPortal(System.Int32)">
            <summary>
              Gets information of a portal
            </summary>
            <param name = "portalId">Id of the portal</param>
            <returns>PortalInfo object with portal definition</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.GetPortal(System.Int32,System.String)">
            <summary>
              Gets information of a portal
            </summary>
            <param name = "portalId">Id of the portal</param>
            <param name="cultureCode">The culture code.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.GetPortal(System.Guid)">
            <summary>
            Gets the portal.
            </summary>
            <param name="uniqueId">The unique id.</param>
            <returns>Portal info.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.GetPortals">
            <summary>
            Gets information from all portals
            </summary>
            <returns>ArrayList of PortalInfo objects</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.GetPortalList(System.String)">
            <summary>
            Get portals in specific culture.
            </summary>
            <param name="cultureCode">The culture code.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.GetPortalSettings(System.Int32)">
            <summary>
            Gets the portal settings dictionary.
            </summary>
            <param name="portalId">The portal ID.</param>
            <returns>portal settings.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.GetPortalSettings(System.Int32,System.String)">
            <summary>
            Gets the portal settings dictionary.
            </summary>
            <param name="portalId">The portal ID.</param>
            <param name="cultureCode">The culture code</param>
            <returns>portal settings.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.GetPortalTemplate(System.String,System.String)">
            <summary>
            Load info for a portal template
            </summary>
            <param name="templatePath">Full path to the portal template</param>
            <param name="cultureCode">the culture code if any for the localization of the portal template</param>
            <returns>A portal template</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.GetPortalSpaceUsedBytes(System.Int32)">
            <summary>
            Gets the portal space used bytes.
            </summary>
            <param name="portalId">The portal id.</param>
            <returns>Space used in bytes</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.HasSpaceAvailable(System.Int32,System.Int64)">
            <summary>
            Verifies if there's enough space to upload a new file on the given portal
            </summary>
            <param name="portalId">Id of the portal</param>
            <param name="fileSizeBytes">Size of the file being uploaded</param>
            <returns>True if there's enough space available to upload the file</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.MapLocalizedSpecialPages(System.Int32,System.String)">
            <summary>
              Remaps the Special Pages such as Home, Profile, Search
              to their localized versions
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.RemovePortalLocalization(System.Int32,System.String,System.Boolean)">
            <summary>
            Removes the related PortalLocalization record from the database, adds optional clear cache
            </summary>
            <param name="portalId"></param>
            <param name="cultureCode"></param>
            <param name="clearCache"></param>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.ParseTemplate(System.Int32,DotNetNuke.Entities.Portals.PortalController.PortalTemplateInfo,System.Int32,DotNetNuke.Entities.Portals.PortalTemplateModuleAction,System.Boolean)">
            <summary>
            Processess a template file for the new portal.
            </summary>
            <param name="portalId">PortalId of the new portal</param>
            <param name="template">The template</param>
            <param name="administratorId">UserId for the portal administrator. This is used to assign roles to this user</param>
            <param name="mergeTabs">Flag to determine whether Module content is merged.</param>
            <param name="isNewPortal">Flag to determine is the template is applied to an existing portal or a new one.</param>
            <remarks>
            The roles and settings nodes will only be processed on the portal template file.
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.ProcessResourceFileExplicit(System.String,System.String)">
            <summary>
            Processes the resource file for the template file selected
            </summary>
            <param name="portalPath">New portal's folder</param>
            <param name="resoureceFile">full path to the resource file</param>
            <remarks>
            The resource file is a zip file with the same name as the selected template file and with
            an extension of .resources (to disable this file being downloaded).
            For example: for template file "portal.template" a resource file "portal.template.resources" can be defined.
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.UpdatePortalExpiry(System.Int32,System.String)">
            <summary>
            Updates the portal expiry.
            </summary>
            <param name="portalId">The portal id.</param>
            <param name="cultureCode">The culture code.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.UpdatePortalInfo(DotNetNuke.Entities.Portals.PortalInfo)">
            <summary>
            Updates basic portal information
            </summary>
            <param name="portal"></param>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.DotNetNuke#Entities#Portals#IPortalController#UpdatePortalSetting(System.Int32,System.String,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Adds or Updates or Deletes a portal setting value.
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.AddPortalDictionary(System.Int32,System.Int32)">
            <summary>
            Adds the portal dictionary.
            </summary>
            <param name="portalId">The portal id.</param>
            <param name="tabId">The tab id.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.CreateChildPortalFolder(System.String)">
            <summary>
            Creates the root folder for a child portal.
            </summary>
            <remarks>
            If call this method, it will create the specific folder if the folder doesn't exist;
            and will copy subhost.aspx to the folder if there is no 'Default.aspx';
            </remarks>
            <param name="ChildPath">The child path.</param>
            <returns>
            If the method executed successful, it will return NullString, otherwise return error message.
            </returns>
            <example>
            <code lang="C#">
            string childPhysicalPath = Server.MapPath(childPath);
            message = PortalController.CreateChildPortalFolder(childPhysicalPath);
            </code>
            </example>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.DeleteExpiredPortals(System.String)">
            <summary>
            Deletes all expired portals.
            </summary>
            <param name="serverPath">The server path.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.DeletePortal(DotNetNuke.Entities.Portals.PortalInfo,System.String)">
            <summary>
            Deletes the portal.
            </summary>
            <param name="portal">The portal.</param>
            <param name="serverPath">The server path.</param>
            <returns>If the method executed successful, it will return NullString, otherwise return error message.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.GetPortalFolder(System.String)">
            <summary>
            Get the portal folder froma child portal alias.
            </summary>
            <param name="alias">portal alias.</param>
            <returns>folder path of the child portal.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.DeletePortalFolder(System.String,System.String)">
            <summary>Delete the child portal folder and try to remove its parent when parent folder is empty.</summary>
            <param name="serverPath">the server path.</param>
            <param name="portalFolder">the child folder path.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.GetPortalDictionary">
            <summary>
            Gets the portal dictionary.
            </summary>
            <returns>portal dictionary. the dictionary's Key -> Value is: TabId -> PortalId.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.GetPortalsByName(System.String,System.Int32,System.Int32,System.Int32@)">
            -----------------------------------------------------------------------------
            <summary>
            GetPortalsByName gets all the portals whose name matches a provided filter expression
            </summary>
            <remarks>
            </remarks>
            <param name="nameToMatch">The email address to use to find a match.</param>
            <param name="pageIndex">The page of records to return.</param>
            <param name="pageSize">The size of the page</param>
            <param name="totalRecords">The total no of records that satisfy the criteria.</param>
            <returns>An ArrayList of PortalInfo objects.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.GetExpiredPortals">
            <summary>
            Gets all expired portals.
            </summary>
            <returns>all expired portals as array list.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.IsChildPortal(DotNetNuke.Entities.Portals.PortalInfo,System.String)">
            <summary>
            Determines whether the portal is child portal.
            </summary>
            <param name="portal">The portal.</param>
            <param name="serverPath">The server path.</param>
            <returns>
              <c>true</c> if the portal is child portal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.DeletePortalSetting(System.Int32,System.String)">
            <summary>
            Deletes the portal setting (neutral and for all languages).
            </summary>
            <param name="portalID">The portal ID.</param>
            <param name="settingName">Name of the setting.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.DeletePortalSetting(System.Int32,System.String,System.String)">
            <summary>
            Deletes the portal setting in this language.
            </summary>
            <param name="portalID">The portal ID.</param>
            <param name="settingName">Name of the setting.</param>
            <param name="cultureCode">The culture code.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.DeletePortalSettings(System.Int32)">
            <summary>
            Deletes all portal settings by portal id.
            </summary>
            <param name="portalID">The portal ID.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.DeletePortalSettings(System.Int32,System.String)">
            <summary>
            Deletes all portal settings by portal id and for a given language (Null: all languages and neutral settings).
            </summary>
            <param name="portalID">The portal ID.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.GetEncryptedString(System.String,System.Int32,System.String)">
            <summary>
            takes in a text value, decrypts it with a FIPS compliant algorithm and returns the value
            </summary>
            <param name="settingName">the setting to read</param>
            <param name="passPhrase">the pass phrase used for encryption/decryption</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.GetPortalSetting(System.String,System.Int32,System.String)">
            <summary>
            Gets the portal setting.
            </summary>
            <param name="settingName">Name of the setting.</param>
            <param name="portalID">The portal ID.</param>
            <param name="defaultValue">The default value.</param>
            <returns>Returns setting's value if portal contains the specific setting, otherwise return defaultValue.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.GetPortalSetting(System.String,System.Int32,System.String,System.String)">
            <summary>
            Gets the portal setting for a specific language (or neutral).
            </summary>
            <param name="settingName">Name of the setting.</param>
            <param name="portalID">The portal ID.</param>
            <param name="defaultValue">The default value.</param>
            <param name="cultureCode">culture code of the language to retrieve (not empty)</param>
            <returns>Returns setting's value if portal contains the specific setting in specified language or neutral, otherwise return defaultValue.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.GetPortalSettingAsBoolean(System.String,System.Int32,System.Boolean)">
            <summary>
            Gets the portal setting as boolean.
            </summary>
            <param name="key">The key.</param>
            <param name="portalID">The portal ID.</param>
            <param name="defaultValue">default value.</param>
            <returns>Returns setting's value if portal contains the specific setting, otherwise return defaultValue.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.GetPortalSettingAsBoolean(System.String,System.Int32,System.Boolean,System.String)">
            <summary>
            Gets the portal setting as boolean for a specific language (or neutral).
            </summary>
            <param name="key">The key.</param>
            <param name="portalID">The portal ID.</param>
            <param name="defaultValue">default value.</param>
            <param name="cultureCode">culture code of the language to retrieve (not empty)</param>
            <returns>Returns setting's value if portal contains the specific setting in specified language or neutral, otherwise return defaultValue.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.GetPortalSettingAsInteger(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the portal setting as integer.
            </summary>
            <param name="key">The key.</param>
            <param name="portalID">The portal ID.</param>
            <param name="defaultValue">The default value.</param>
            <returns>Returns setting's value if portal contains the specific setting, otherwise return defaultValue.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.GetPortalSettingAsDouble(System.String,System.Int32,System.Double)">
            <summary>
            Gets the portal setting as double.
            </summary>
            <param name="key">The key.</param>
            <param name="portalId">The portal Id.</param>
            <param name="defaultValue">The default value.</param>
            <returns>Returns setting's value if portal contains the specific setting, otherwise return defaultValue.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.GetPortalSettingAsInteger(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Gets the portal setting as integer for a specific language (or neutral).
            </summary>
            <param name="key">The key.</param>
            <param name="portalID">The portal ID.</param>
            <param name="defaultValue">The default value.</param>
            <param name="cultureCode">culture code of the language to retrieve (not empty)</param>
            <returns>Returns setting's value if portal contains the specific setting (for specified lang, otherwise return defaultValue.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.UpdateEncryptedString(System.Int32,System.String,System.String,System.String)">
            <summary>
            takes in a text value, encrypts it with a FIPS compliant algorithm and stores
            </summary>
            <param name="portalID">The portal ID.</param>
            <param name="settingName">host settings key</param>
            <param name="settingValue">host settings value</param>
            <param name="passPhrase">pass phrase to allow encryption/decryption</param>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.UpdatePortalSetting(System.Int32,System.String,System.String)">
            <summary>
            Updates a single neutral (not language specific) portal setting and clears it from the cache.
            </summary>
            <param name="portalID">The portal ID.</param>
            <param name="settingName">Name of the setting.</param>
            <param name="settingValue">The setting value.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.UpdatePortalSetting(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Updates a single neutral (not language specific) portal setting, optionally without clearing the cache.
            </summary>
            <param name="portalID">The portal ID.</param>
            <param name="settingName">Name of the setting.</param>
            <param name="settingValue">The setting value.</param>
            <param name="clearCache">if set to <c>true</c> [clear cache].</param>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.UpdatePortalSetting(System.Int32,System.String,System.String,System.String)">
            <summary>
            Updates a language specific or neutral portal setting and clears it from the cache.
            </summary>
            <param name="portalID">The portal ID.</param>
            <param name="settingName">Name of the setting.</param>
            <param name="settingValue">The setting value.</param>
            <param name="cultureCode">culture code for language specific settings, null string ontherwise.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.UpdatePortalSetting(System.Int32,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Updates a language specific or neutral portal setting and optionally clears it from the cache.
            </summary>
            <param name="portalID">The portal ID.</param>
            <param name="settingName">Name of the setting.</param>
            <param name="settingValue">The setting value.</param>
            <param name="clearCache">if set to <c>true</c> [clear cache].</param>
            <param name="cultureCode">culture code for language specific settings, null string ontherwise.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.UpdatePortalSetting(System.Int32,System.String,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Updates a language specific or neutral portal setting and optionally clears it from the cache.
            All overloaded methors will not encrypt the setting value. Therefore, call this method whenever
            there is a need to encrypt the setting value before storing it in the datanbase.
            </summary>
            <param name="portalID">The portal ID.</param>
            <param name="settingName">Name of the setting.</param>
            <param name="settingValue">The setting value.</param>
            <param name="clearCache">if set to <c>true</c> [clear cache].</param>
            <param name="cultureCode">culture code for language specific settings, null string ontherwise.</param>
            <param name="isSecure">When true it encrypt the value before storing it in the database</param>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.CheckDesktopModulesInstalled(System.Xml.XPath.XPathNavigator)">
            <summary>
            Checks the desktop modules whether is installed.
            </summary>
            <param name="nav">The nav.</param>
            <returns>Empty string if the module hasn't been installed, otherwise return the frind name.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.GetActivePortalLanguage(System.Int32)">
            <summary>
              function provides the language for portalinfo requests
              in case where language has not been installed yet, will return the core install default of en-us
            </summary>
            <param name = "portalID"></param>
            <returns></returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.GetPortalDefaultLanguage(System.Int32)">
            <summary>
              return the current DefaultLanguage value from the Portals table for the requested Portalid
            </summary>
            <param name = "portalID"></param>
            <returns></returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalController.UpdatePortalDefaultLanguage(System.Int32,System.String)">
            <summary>
              set the required DefaultLanguage in the Portals table for a particular portal
              saves having to update an entire PortalInfo object
            </summary>
            <param name = "portalID"></param>
            <param name = "CultureCode"></param>
            <remarks>
            </remarks>
        </member>
        <member name="T:DotNetNuke.Entities.Portals.IPortalController">
            <summary>
            Do not implement.  This interface is meant for reference and unit test purposes only.
            There is no guarantee that this interface will not change.
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalController.AddPortalAlias(System.Int32,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Creates a new portal alias
            </summary>
            <param name="portalId">Id of the portal</param>
            <param name="portalAlias">Portal Alias to be created</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalController.CopyPageTemplate(System.String,System.String)">
            <summary>
            Copies the page template.
            </summary>
            <param name="templateFile">The template file.</param>
            <param name="mappedHomeDirectory">The mapped home directory.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalController.CreatePortal(System.String,System.Int32,System.String,System.String,DotNetNuke.Entities.Portals.PortalController.PortalTemplateInfo,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates the portal.
            </summary>
            <param name="portalName">Name of the portal.</param>
            <param name="adminUserId">The obj admin user.</param>
            <param name="description">The description.</param>
            <param name="keyWords">The key words.</param>
            <param name="template"> </param>
            <param name="homeDirectory">The home directory.</param>
            <param name="portalAlias">The portal alias.</param>
            <param name="serverPath">The server path.</param>
            <param name="childPath">The child path.</param>
            <param name="isChildPortal">if set to <c>true</c> means the portal is child portal.</param>
            <returns>Portal id.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalController.CreatePortal(System.String,DotNetNuke.Entities.Users.UserInfo,System.String,System.String,DotNetNuke.Entities.Portals.PortalController.PortalTemplateInfo,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates the portal.
            </summary>
            <param name="portalName">Name of the portal.</param>
            <param name="adminUser">The obj admin user.</param>
            <param name="description">The description.</param>
            <param name="keyWords">The key words.</param>
            <param name="template"> </param>
            <param name="homeDirectory">The home directory.</param>
            <param name="portalAlias">The portal alias.</param>
            <param name="serverPath">The server path.</param>
            <param name="childPath">The child path.</param>
            <param name="isChildPortal">if set to <c>true</c> means the portal is child portal.</param>
            <returns>Portal id.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalController.GetAvailablePortalTemplates">
            <summary>
            Get all the available portal templates grouped by culture
            </summary>
            <returns>List of PortalTemplateInfo objects</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalController.GetCurrentPortalSettings">
            <summary>
            Gets the current portal settings.
            </summary>
            <returns>portal settings.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalController.GetPortal(System.Int32)">
            <summary>
              Gets information of a portal
            </summary>
            <param name = "portalId">Id of the portal</param>
            <returns>PortalInfo object with portal definition</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalController.GetPortal(System.Int32,System.String)">
            <summary>
              Gets information of a portal
            </summary>
            <param name = "portalId">Id of the portal</param>
            <param name="cultureCode">The culture code.</param>
            <returns>PortalInfo object with portal definition</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalController.GetPortal(System.Guid)">
            <summary>
            Gets the portal.
            </summary>
            <param name="uniqueId">The unique id.</param>
            <returns>Portal info.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalController.GetPortalList(System.String)">
            <summary>
            Get portals in specific culture.
            </summary>
            <param name="cultureCode">The culture code.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalController.GetPortals">
            <summary>
            Gets information from all portals
            </summary>
            <returns>ArrayList of PortalInfo objects</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalController.GetPortalSettings(System.Int32)">
            <summary>
            Gets the portal settings dictionary.
            </summary>
            <param name="portalId">The portal ID.</param>
            <returns>portal settings.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalController.GetPortalSettings(System.Int32,System.String)">
            <summary>
            Gets the portal settings dictionary.
            </summary>
            <param name="portalId">The portal ID.</param>
            <param name="cultureCode">The culture code</param>
            <returns>portal settings.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalController.GetPortalSpaceUsedBytes(System.Int32)">
            <summary>
            Gets the portal space used bytes.
            </summary>
            <param name="portalId">The portal id.</param>
            <returns>Space used in bytes</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalController.GetPortalTemplate(System.String,System.String)">
            <summary>
            Load info for a portal template
            </summary>
            <param name="templateFileName">The file name of the portal template</param>
            <param name="cultureCode">the culture code if any for the localization of the portal template</param>
            <returns>A portal template</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalController.HasSpaceAvailable(System.Int32,System.Int64)">
            <summary>
            Verifies if there's enough space to upload a new file on the given portal
            </summary>
            <param name="portalId">Id of the portal</param>
            <param name="fileSizeBytes">Size of the file being uploaded</param>
            <returns>True if there's enough space available to upload the file</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalController.MapLocalizedSpecialPages(System.Int32,System.String)">
            <summary>
              Remaps the Special Pages such as Home, Profile, Search
              to their localized versions
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalController.RemovePortalLocalization(System.Int32,System.String,System.Boolean)">
            <summary>
            Removes the related PortalLocalization record from the database, adds optional clear cache
            </summary>
            <param name="portalId"></param>
            <param name="cultureCode"></param>
            <param name="clearCache"></param>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalController.ParseTemplate(System.Int32,DotNetNuke.Entities.Portals.PortalController.PortalTemplateInfo,System.Int32,DotNetNuke.Entities.Portals.PortalTemplateModuleAction,System.Boolean)">
            <summary>
            Processess a template file for the new portal.
            </summary>
            <param name="portalId">PortalId of the new portal</param>
            <param name="template">The template</param>
            <param name="administratorId">UserId for the portal administrator. This is used to assign roles to this user</param>
            <param name="mergeTabs">Flag to determine whether Module content is merged.</param>
            <param name="isNewPortal">Flag to determine is the template is applied to an existing portal or a new one.</param>
            <remarks>
            The roles and settings nodes will only be processed on the portal template file.
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalController.ProcessResourceFileExplicit(System.String,System.String)">
            <summary>
            Processes the resource file for the template file selected
            </summary>
            <param name="portalPath">New portal's folder</param>
            <param name="resoureceFile">full path to the resource file</param>
            <remarks>
            The resource file is a zip file with the same name as the selected template file and with
            an extension of .resources (to disable this file being downloaded).
            For example: for template file "portal.template" a resource file "portal.template.resources" can be defined.
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalController.UpdatePortalExpiry(System.Int32,System.String)">
            <summary>
            Updates the portal expiry.
            </summary>
            <param name="portalId">The portal id.</param>
            <param name="cultureCode">The culture code.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalController.UpdatePortalInfo(DotNetNuke.Entities.Portals.PortalInfo)">
            <summary>
            Updates basic portal information
            </summary>
            <param name="portal"></param>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.IPortalController.UpdatePortalSetting(System.Int32,System.String,System.String,System.Boolean,System.String,System.Boolean)">
            <summary>
            Adds or Updates or Deletes a portal setting value.
            </summary>
        </member>
        <member name="T:DotNetNuke.Entities.Portals.PortalInfo">
            <summary>
            PortalInfo provides a base class for Portal information
            This class inherites from the <c>BaseEntityInfo</c> and is <c>Hydratable</c>
            </summary>
            <remarks><seealso cref="T:DotNetNuke.Entities.Modules.IHydratable"/>
            <example>This example shows how the <c>PortalInfo</c> class is used to get physical file names
             <code lang="vbnet">
            Public ReadOnly Property PhysicalPath() As String
                   Get
                       Dim _PhysicalPath As String
                       Dim PortalSettings As PortalSettings = Nothing
                       If Not HttpContext.Current Is Nothing Then
                           PortalSettings = PortalController.Instance.GetCurrentPortalSettings()
                       End If
                       If PortalId = Null.NullInteger Then
                           _PhysicalPath = DotNetNuke.Common.Globals.HostMapPath + RelativePath
                       Else
                           If PortalSettings Is Nothing OrElse PortalSettings.PortalId &lt;&gt; PortalId Then
                               ' Get the PortalInfo  based on the Portalid
                               Dim objPortals As New PortalController()
                               Dim objPortal As PortalInfo = objPortals.GetPortal(PortalId)
                               _PhysicalPath = objPortal.HomeDirectoryMapPath + RelativePath
                           Else
                               _PhysicalPath = PortalSettings.HomeDirectoryMapPath + RelativePath
                           End If
                       End If
                       Return _PhysicalPath.Replace("/", "\")
                   End Get
            End Property 
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalInfo.#ctor">
            <summary>
            Create new Portalinfo instance
            </summary>
            <remarks>
            <example>This example illustrates the creation of a new <c>PortalInfo</c> object
            <code lang="vbnet">
            For Each portal As PortalInfo In New PortalController().GetPortals
                Dim portalID As Integer = portal.PortalID
                ...
            Next
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.AdministratorId">
             <summary>
             UserID of the user who is the admininistrator of the portal
             </summary>
             <value>UserId of the user who is the portal admin</value>
             <returns>UserId of the user who is the portal admin</returns>
             <remarks><example>This show the usage of the <c>AdministratorId</c>
             <code lang="vbnet">
             Dim Arr As ArrayList = objRoleController.GetUserRolesByRoleName(intPortalId, objPortal.AdministratorRoleName)
             Dim i As Integer
                   For i = 0 To Arr.Count - 1
                         Dim objUser As UserRoleInfo = CType(Arr(i), UserRoleInfo)
                         cboAdministratorId.Items.Add(New ListItem(objUser.FullName, objUser.UserID.ToString))
                  Next
                  If Not cboAdministratorId.Items.FindByValue(objPortal.AdministratorId.ToString) Is Nothing Then
                      cboAdministratorId.Items.FindByValue(objPortal.AdministratorId.ToString).Selected = True
                  End If
            </code></example></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.AdministratorRoleId">
            <summary>
            The RoleId of the Security Role of the Administrators group of the portal
            </summary>
            <value>RoleId of de Administrators Security Role</value>
            <returns>RoleId of de Administrators Security Role</returns>
            <remarks><example>This shows the usage of the AdministratoprRoleId
            <code lang="vbnet">
            Dim objPortal As PortalInfo = New PortalController().GetPortal(PortalID)
                If RoleID = objPortal.AdministratorRoleId Then
                    _RoleType = Roles.RoleType.Administrator
                ElseIf RoleID = objPortal.RegisteredRoleId Then
                    _RoleType = Roles.RoleType.RegisteredUser
                ElseIf RoleName = "Subscribers" Then
                    _RoleType = Roles.RoleType.Subscriber
                End If
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.AdminTabId">
            <summary>
            TabId at which admin tasks start
            </summary>
            <value>TabID of admin tasks</value>
            <returns>TabID of admin tasks</returns>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.BackgroundFile">
            <summary>
            Image (bitmap) file that is used as background for the portal
            </summary>
            <value>Name of the file that is used as background</value>
            <returns>Name of the file that is used as background</returns>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.CrmVersion">
            <summary>
            Current host version 
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.BannerAdvertising">
            <summary>
            Setting for the type of banner advertising in the portal
            </summary>
            <value>Type of banner advertising</value>
            <returns>Type of banner advertising</returns>
            <remarks><example>This show the usage of BannerAdvertising setting
            <code lang="vbnet">
            optBanners.SelectedIndex = objPortal.BannerAdvertising
            </code></example></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.Currency">
            <summary>
            Curreny format that is used in the portal
            </summary>
            <value>Currency of the portal</value>
            <returns>Currency of the portal</returns>
            <remarks><example>This exampels show the usage of the Currentcy property
            <code lang="vbnet">
            cboCurrency.DataSource = colList
            cboCurrency.DataBind()
            If Null.IsNull(objPortal.Currency) Or cboCurrency.Items.FindByValue(objPortal.Currency) Is Nothing Then
                cboCurrency.Items.FindByValue("USD").Selected = True
            Else
                cboCurrency.Items.FindByValue(objPortal.Currency).Selected = True
            End If
            </code></example></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.DefaultLanguage">
            <summary>
            Default language for the portal
            </summary>
            <value>Default language of the portal</value>
            <returns>Default language of the portal</returns>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.Description">
            <summary>
            Description of the portal
            </summary>
            <value>Description of the portal</value>
            <returns>Description of the portal</returns>
            <remarks><example>This show the usage of the <c>Description</c> property
            <code lang="vbnet">
            Dim objPortalController As New PortalController
            Dim objPortal As PortalInfo = objPortalController.GetPortal(PortalID)
                 txtPortalName.Text = objPortal.PortalName
                 txtDescription.Text = objPortal.Description
                 txtKeyWords.Text = objPortal.KeyWords
             </code></example></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.Email">
            <summary>
            The default e-mail to be used in the porta;
            </summary>
            <value>E-mail of the portal</value>
            <returns>E-mail of the portal</returns>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.ExpiryDate">
            <summary>
            Date at which the portal expires
            </summary>
            <value>Date of expiration of the portal</value>
            <returns>Date of expiration of the portal</returns>
            <remarks><example>This show the Portal expiration date usage
            <code lang="vbnet">
            If Not Null.IsNull(objPortal.ExpiryDate) Then
                txtExpiryDate.Text = objPortal.ExpiryDate.ToShortDateString
            End If
            txtHostFee.Text = objPortal.HostFee.ToString
            txtHostSpace.Text = objPortal.HostSpace.ToString
            txtPageQuota.Text = objPortal.PageQuota.ToString
            txtUserQuota.Text = objPortal.UserQuota.ToString
            </code></example></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.FooterText">
            <summary>
            The footer text as specified in the Portal settings
            </summary>
            <value>Footer text of the portal</value>
            <returns>Returns the the footer text of the portal</returns>
            <remarks>
            <example>This show the usage of the <c>FooterText</c> property
            <code lang="vbnet">
            txtFooterText.Text = objPortal.FooterText
            </code>
            </example>
            </remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.GUID">
            <summary>
            GUID of the portal info object
            </summary>
            <value>Portal info Object GUID</value>
            <returns>GUD of the portal info object</returns>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.HomeDirectory">
            <summary>
            Home directory of the portal (logical path)
            </summary>
            <value>Portal home directory</value>
            <returns>Portal home directory</returns>
            <remarks><seealso cref="P:DotNetNuke.Entities.Portals.PortalInfo.HomeDirectoryMapPath"></seealso></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.HomeSystemDirectory">
            <summary>
            Home System (local) directory of the portal (logical path)
            </summary>
            <value>Portal home system directory</value>
            <returns>Portal home system directory in local filesystem</returns>
            <remarks><seealso cref="P:DotNetNuke.Entities.Portals.PortalInfo.HomeSystemDirectoryMapPath"></seealso></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.HomeTabId">
            <summary>
            TabdId of the Home page
            </summary>
            <value>TabId of the Home page</value>
            <returns>TabId of the Home page</returns>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.HostFee">
            <summary>
            Amount of currency that is used as a hosting fee of the portal
            </summary>
            <value>Currency amount hosting fee</value>
            <returns>Currency amount hosting fee</returns>
            <remarks><example>This show the Portal <c>HostFee</c>usage
            <code lang="vbnet">
            If Not Null.IsNull(objPortal.ExpiryDate) Then
                txtExpiryDate.Text = objPortal.ExpiryDate.ToShortDateString
            End If
            txtHostFee.Text = objPortal.HostFee.ToString
            txtHostSpace.Text = objPortal.HostSpace.ToString
            txtPageQuota.Text = objPortal.PageQuota.ToString
            txtUserQuota.Text = objPortal.UserQuota.ToString
            </code></example></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.HostSpace">
            <summary>
            Total disk space allowed for the portal (Mb). 0 means not limited
            </summary>
            <value>Diskspace allowed for the portal</value>
            <returns>Diskspace allowed for the portal</returns>
            <remarks><example>This show the Portal <c>HostSpace</c>usage
            <code lang="vbnet">
            If Not Null.IsNull(objPortal.ExpiryDate) Then
                txtExpiryDate.Text = objPortal.ExpiryDate.ToShortDateString
            End If
            txtHostFee.Text = objPortal.HostFee.ToString
            txtHostSpace.Text = objPortal.HostSpace.ToString
            txtPageQuota.Text = objPortal.PageQuota.ToString
            txtUserQuota.Text = objPortal.UserQuota.ToString
            </code></example></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.KeyWords">
            <summary>
            Keywords (separated by ,) for this portal
            </summary>
            <value>Keywords seperated by ,</value>
            <returns>Keywords for this portal</returns>
            <remarks><example>This show the usage of the <c>KeyWords</c> property
            <code lang="vbnet">
            Dim objPortalController As New PortalController
            Dim objPortal As PortalInfo = objPortalController.GetPortal(PortalID)
                 txtPortalName.Text = objPortal.PortalName
                 txtDescription.Text = objPortal.Description
                 txtKeyWords.Text = objPortal.KeyWords
             </code></example></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.LoginTabId">
            <summary>
            TabId with the login control, page to login
            </summary>
            <value>TabId of the Login page</value>
            <returns>TabId of the Login page</returns>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.LogoFile">
             <summary>
             The portal has a logo (bitmap) associated with the portal. Teh admin can set the logo in the portal settings
             </summary>
             <value>URL of the logo</value>
             <returns>URL of the Portal logo</returns>
             <remarks><example><code lang="vbnet">
              urlLogo.Url = objPortal.LogoFile
              urlLogo.FileFilter = glbImageFileTypes
            </code></example></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.PageQuota">
            <summary>
            Number of portal pages allowed in the portal. 0 means not limited
            </summary>
            <value>Number of portal pages allowed</value>
            <returns>Number of portal pages allowed</returns>
            <remarks><example>This show the Portal <c>PageQuota</c>usage
            <code lang="vbnet">
            If Not Null.IsNull(objPortal.ExpiryDate) Then
                txtExpiryDate.Text = objPortal.ExpiryDate.ToShortDateString
            End If
            txtHostFee.Text = objPortal.HostFee.ToString
            txtHostSpace.Text = objPortal.HostSpace.ToString
            txtPageQuota.Text = objPortal.PageQuota.ToString
            txtUserQuota.Text = objPortal.UserQuota.ToString
            </code></example></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.PaymentProcessor">
            <summary>
            Name of the Payment processor that is used for portal payments, e.g. PayPal
            </summary>
            <value>Name of the portal payment processor</value>
            <returns>Name of the portal payment processor</returns>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.PortalID">
            <summary>
            Unique idenitifier of the Portal within the site
            </summary>
            <value>Portal identifier</value>
            <returns>Portal Identifier</returns>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.PortalGroupID">
            <summary>
            Contains the id of the portal group that the portal belongs to
            Will be null or -1 (null.nullinteger) if the portal does not belong to a portal group
            </summary>
            <value>Portal Group identifier</value>
            <returns>Portal Group Identifier</returns>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.PortalName">
            <summary>
            Name of the portal. Can be set at creation time, Admin can change the name in the portal settings
            </summary>
            <value>Name of the portal</value>
            <returns>Name of the portal</returns>
            <remarks><example>This show the usage of the <c>PortalName</c> property
            <code lang="vbnet">
            Dim objPortalController As New PortalController
            Dim objPortal As PortalInfo = objPortalController.GetPortal(PortalID)
                 txtPortalName.Text = objPortal.PortalName
                 txtDescription.Text = objPortal.Description
                 txtKeyWords.Text = objPortal.KeyWords
             </code></example></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.ProcessorPassword">
            <summary>
            Password to use in the payment processor
            </summary>
            <value>Payment Processor password</value>
            <returns></returns>
            <remarks><example>This shows the usage of the payment processing
            <code lang="vbnet">
            If objPortal.PaymentProcessor &lt;&gt; "" Then
                If Not cboProcessor.Items.FindByText(objPortal.PaymentProcessor) Is Nothing Then
                    cboProcessor.Items.FindByText(objPortal.PaymentProcessor).Selected = True
                Else       ' default
                     If Not cboProcessor.Items.FindByText("PayPal") Is Nothing Then
                           cboProcessor.Items.FindByText("PayPal").Selected = True
                      End If
                 End If
                 Else
                 cboProcessor.Items.FindByValue("").Selected = True
            End If
            txtUserId.Text = objPortal.ProcessorUserId
            txtPassword.Attributes.Add("value", objPortal.ProcessorPassword)
            </code></example></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.ProcessorUserId">
            <summary>
            Payment Processor userId
            </summary>
            <value></value>
            <returns></returns>
            <remarks> <seealso cref="P:DotNetNuke.Entities.Portals.PortalInfo.PaymentProcessor"></seealso>
            <example>This shows the usage of the payment processing
            <code lang="vbnet">
            If objPortal.PaymentProcessor &lt;&gt; "" Then
                If Not cboProcessor.Items.FindByText(objPortal.PaymentProcessor) Is Nothing Then
                    cboProcessor.Items.FindByText(objPortal.PaymentProcessor).Selected = True
                Else       ' default
                     If Not cboProcessor.Items.FindByText("PayPal") Is Nothing Then
                           cboProcessor.Items.FindByText("PayPal").Selected = True
                      End If
                 End If
                 Else
                 cboProcessor.Items.FindByValue("").Selected = True
            End If
            txtUserId.Text = objPortal.ProcessorUserId
            txtPassword.Attributes.Add("value", objPortal.ProcessorPassword)
            </code></example></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.RegisteredRoleId">
            <summary>
            The RoleId of the Registered users group of the portal.
            </summary>
            <value>RoleId of the Registered users </value>
            <returns>RoleId of the Registered users </returns>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.RegisterTabId">
            <summary>
              Tabid of the Registration page
            </summary>
            <value>TabId of the Registration page</value>
            <returns>TabId of the Registration page</returns>
            <remarks>
            </remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.SearchTabId">
            <summary>
              Tabid of the Search profile page
            </summary>
            <value>TabdId of the Search Results page</value>
            <returns>TabdId of the Search Results page</returns>
            <remarks>
            </remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.Custom404TabId">
            <summary>
              Tabid of the Custom 404 page
            </summary>
            <value>Tabid of the Custom 404 page</value>
            <returns>Tabid of the Custom 404 page</returns>
            <remarks>
            </remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.Custom500TabId">
            <summary>
              Tabid of the Custom 500 error page
            </summary>
            <value>Tabid of the Custom 500 error page</value>
            <returns>Tabid of the Custom 500 error page</returns>
            <remarks>
            </remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.TermsTabId">
            <summary>
              Tabid of the Terms of Use page
            </summary>
            <value>Tabid of the Terms of Use page</value>
            <returns>Tabid of the Terms of Use page</returns>
            <remarks>
            </remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.PrivacyTabId">
            <summary>
              Tabid of the Privacy Statement page
            </summary>
            <value>Tabid of the Privacy Statement page</value>
            <returns>Tabid of the Privacy Statement page</returns>
            <remarks>
            </remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.SiteLogHistory">
            <summary>
            # of days that Site log history should be kept. 0 means unlimited
            </summary>
            <value># of days sitelog history</value>
            <returns># of days sitelog history</returns>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.SplashTabId">
            <summary>
            TabdId of the splash page. If 0, there is no splash page
            </summary>
            <value>TabdId of the Splash page</value>
            <returns>TabdId of the Splash page</returns>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.SuperTabId">
            <summary>
            TabId at which Host tasks start
            </summary>
            <value>TabId of Host tasks</value>
            <returns>TabId of Host tasks</returns>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.UserQuota">
            <summary>
            Number of registered users allowed in the portal. 0 means not limited
            </summary>
            <value>Number of registered users allowed </value>
            <returns>Number of registered users allowed </returns>
            <remarks><example>This show the Portal userQuota usage
            <code lang="vbnet">
            If Not Null.IsNull(objPortal.ExpiryDate) Then
                txtExpiryDate.Text = objPortal.ExpiryDate.ToShortDateString
            End If
            txtHostFee.Text = objPortal.HostFee.ToString
            txtHostSpace.Text = objPortal.HostSpace.ToString
            txtPageQuota.Text = objPortal.PageQuota.ToString
            txtUserQuota.Text = objPortal.UserQuota.ToString
            </code></example></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.UserRegistration">
            <summary>
            Type of registration that the portal supports
            </summary>
            <value>Type of registration</value>
            <returns>Type of registration</returns>
            <remarks><example>Registration type
            <code lang="vbnet">
            optUserRegistration.SelectedIndex = objPortal.UserRegistration
            </code></example></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.UserTabId">
            <summary>
            Tabid of the User profile page
            </summary>
            <value>TabdId of the User profile page</value>
            <returns>TabdId of the User profile page</returns>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.Users">
            <summary>
            Actual number of actual users for this portal
            </summary>
            <value>Number of users for the portal</value>
            <returns>Number of users for the portal</returns>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.Version">
            <summary>
            DNN Version # of the portal installation
            </summary>
            <value>Version # of the portal installation</value>
            <returns>Version # of the portal installation</returns>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.AdministratorRoleName">
            <summary>
            The actual name of the Administrators group of the portal.
            This name is retrieved from the RoleController object
            </summary>
            <value>The name of the Administrators group</value>
            <returns>The name of the Administrators group</returns>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.HomeDirectoryMapPath">
            <summary>
            Fysical path on disk of the home directory of the portal
            </summary>
            <value></value>
            <returns>Fully qualified path of the home directory</returns>
            <remarks><seealso cref="P:DotNetNuke.Entities.Portals.PortalInfo.HomeDirectory"></seealso></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.HomeSystemDirectoryMapPath">
            <summary>
            Fysical path on disk of the home directory of the portal
            </summary>
            <value></value>
            <returns>Fully qualified path of the home system (local) directory</returns>
            <remarks><seealso cref="P:DotNetNuke.Entities.Portals.PortalInfo.HomeDirectory"></seealso></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.Pages">
            <summary>
            Actual number of pages of the portal
            </summary>
            <value>Number of pages of the portal</value>
            <returns>Number of pages of the portal</returns>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.RegisteredRoleName">
            <summary>
            The actual name of the Registerd Users group of the portal.
            This name is retrieved from the RoleController object
            </summary>
            <value>The name of the Registerd Users group</value>
            <returns>The name of the Registerd Users group</returns>
            <remarks></remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalInfo.Fill(System.Data.IDataReader)">
            <summary>
            Fills a PortalInfo from a Data Reader
            </summary>
            <param name="dr">The Data Reader to use</param>
            <remarks>Standard IHydratable.Fill implementation
            <seealso cref="P:DotNetNuke.Entities.Portals.PortalInfo.KeyID"></seealso></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalInfo.KeyID">
            <summary>
            Gets and sets the Key ID
            </summary>
            <returns>KeyId of the IHydratable.Key</returns>
            <remarks><seealso cref="M:DotNetNuke.Entities.Portals.PortalInfo.Fill(System.Data.IDataReader)"></seealso></remarks>
        </member>
        <member name="T:DotNetNuke.Entities.Portals.PortalSettings">
            -----------------------------------------------------------------------------
            <summary>
            The PortalSettings class encapsulates all of the settings for the Portal, 
            as well as the configuration settings required to execute the current tab
            view within the portal.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Portals.PortalSettings.#ctor(System.Int32,DotNetNuke.Entities.Portals.PortalAliasInfo)">
            -----------------------------------------------------------------------------
            <summary>
            The PortalSettings Constructor encapsulates all of the logic
            necessary to obtain configuration settings necessary to render
            a Portal Tab view for a given request.
            </summary>
            <remarks>
            </remarks>
            <param name="tabId">The current tab</param>
            <param name="portalAliasInfo">The current portal</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalSettings.AllowUserUICulture">
            -----------------------------------------------------------------------------
            <summary>
            Allows users to select their own UI culture.
            When set to false (default) framework will allways same culture for both
            CurrentCulture (content) and CurrentUICulture (interface)
            </summary>
            <remarks>Defaults to False</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalSettings.DefaultModuleId">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Default Module Id
            </summary>
            <remarks>Defaults to Null.NullInteger</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalSettings.DefaultTabId">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Default Tab Id
            </summary>
            <remarks>Defaults to Null.NullInteger</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalSettings.EnableBrowserLanguage">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether Browser Language Detection is Enabled
            </summary>
            <remarks>Defaults to True</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalSettings.EnablePopUps">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether to use the popup.
            </summary>
            <remarks>Defaults to True</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalSettings.EnableRegisterNotification">
            <summary>
            Website Administrator whether receive the notification email when new user register.
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalSettings.EnableSkinWidgets">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether the Skin Widgets are enabled/supported
            </summary>
            <remarks>Defaults to True</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalSettings.ShowCookieConsent">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether a cookie consent popup should be shown
            </summary>
            <remarks>Defaults to False</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalSettings.CookieMoreLink">
            <summary>
            Link for the user to find out more about cookies. If not specified the link
            shown will point to cookiesandyou.com
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalSettings.EnableUrlLanguage">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether enable url language.
            </summary>
            <remarks>Defaults to True</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalSettings.HideFoldersEnabled">
            -----------------------------------------------------------------------------
            <summary>
              Gets whether folders which are hidden or whose name begins with underscore
              are included in folder synchronization.
            </summary>
            <remarks>
              Defaults to True
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalSettings.HideLoginControl">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether hide the login link.
            </summary>
            <remarks>Defaults to False.</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalSettings.InlineEditorEnabled">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether the Inline Editor is enabled
            </summary>
            <remarks>Defaults to True</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalSettings.SearchIncludeCommon">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether to inlcude Common Words in the Search Index
            </summary>
            <remarks>Defaults to False</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalSettings.SearchIncludeNumeric">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether to inlcude Numbers in the Search Index
            </summary>
            <remarks>Defaults to False</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalSettings.SearchIncludedTagInfoFilter">
            -----------------------------------------------------------------------------
            <summary>
              Gets the filter used for inclusion of tag info
            </summary>
            <remarks>
              Defaults to ""
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalSettings.SearchMaxWordlLength">
            -----------------------------------------------------------------------------
            <summary>
            Gets the maximum Search Word length to index
            </summary>
            <remarks>Defaults to 3</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalSettings.SearchMinWordlLength">
            -----------------------------------------------------------------------------
            <summary>
            Gets the minum Search Word length to index
            </summary>
            <remarks>Defaults to 3</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalSettings.UserId">
            <summary>Gets the currently logged in user identifier.</summary>
            <value>The user identifier.</value>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalSettings.UserInfo">
            <summary>Gets the currently logged in user.</summary>
            <value>The current user information.</value>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalSettings.IsLocked">
            <summary>
            Get a value indicating whether the current portal is in maintenance mode (if either this specific portal or the entire instance is locked). If locked, any actions which update the database should be disabled.
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalSettings.IsThisPortalLocked">
            <summary>
            Get a value indicating whether the current portal is in maintenance mode (note, the entire instance may still be locked, this only indicates whether this portal is specifically locked). If locked, any actions which update the database should be disabled.
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Portals.PortalSettings.DisablePrivateMessage">
            <summary>
            If this is true, then regular users can't send message to specific user/group.
            </summary>
        </member>
        <member name="T:DotNetNuke.Entities.Portals.PortalTemplateValidator">
            -----------------------------------------------------------------------------
            <summary>
            The PortalTemplateValidator Class is used to validate the Portal Template
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Users.IUserController.GetUserByDisplayname(System.Int32,System.String)">
            <summary>
            Get a user based on their display name and portal
            </summary>
            <param name="portalId">the portalid</param>
            <param name="displayName">the displayname</param>
            <returns>The User as a UserInfo object</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Users.IUserController.GetUserById(System.Int32,System.Int32)">
            <summary>
            GetUser retrieves a User from the DataStore
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="userId">The Id of the user being retrieved from the Data Store.</param>
            <returns>The User as a UserInfo object</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Users.IUserController.GetUsersAdvancedSearch(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Get a filtered list of users based on a number of criteria and filters - utilised for advanced searches
            </summary>
            <param name="portalId">the portalid of the user(s)</param>
            <param name="userId">the userid accessing - for determining correct visibility permissions</param>
            <param name="filterUserId">for filtering relationships on</param>
            <param name="filterRoleId">for filtering by roles</param>
            <param name="relationTypeId">for filtering by relationships</param>
            <param name="isAdmin">determines visibility</param>
            <param name="pageIndex">0 based page index</param>
            <param name="pageSize">page size</param>
            <param name="sortColumn">sort field</param>
            <param name="sortAscending">sort flag indicating whether sort is asc or desc</param>
            <param name="propertyNames">list of property names to filter</param>
            <param name="propertyValues">list of property values to filter</param>
            <returns>Users as a list of UserInfo objects</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Users.IUserController.GetUsersBasicSearch(System.Int32,System.Int32,System.Int32,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Get a filtered list of users based on a set of simple filters - utilised for basic searches
            </summary>
            <param name="portalId">the portalid of the user(s)</param>
            <param name="pageIndex">0 based page index</param>
            <param name="pageSize">page size</param>
            <param name="sortColumn">sort field</param>
            <param name="sortAscending">sort flag indicating whether sort is asc or desc</param>
            <param name="propertyName">list of property names to filter</param>
            <param name="propertyValue">list of property values to filter</param>
            <returns>Users as a list of UserInfo objects</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Users.IUserController.GetUserProfilePictureUrl(System.Int32,System.Int32,System.Int32)">
            <summary>
            Return User Profile Picture relative Url
            </summary>
            <param name="userId">User Id</param>
            <param name="width">Width in pixel</param>
            <param name="height">Height in pixel</param>
            <returns>Relative url,  e.g. /DnnImageHandler.ashx?userid=1&amp;h=32&amp;w=32 considering child portal</returns>
            <remarks>Usage: ascx - &lt;asp:Image ID="avatar" runat="server" CssClass="SkinObject" /&gt;
            code behind - avatar.ImageUrl = UserController.Instance.GetUserProfilePictureUrl(userInfo.UserID, 32, 32)
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Users.IUserController.GetUserProfilePictureUrl(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Return User Profile Picture relative Url
            </summary>
            <param name="portalId">Portal Id</param>
            <param name="userId">User Id</param>
            <param name="width">Width in pixel</param>
            <param name="height">Height in pixel</param>
            <returns>Relative url, e.g. /DnnImageHandler.ashx?userid=1&amp;h=32&amp;w=32 considering child portal</returns>
            <remarks>IMPORTANT NOTE: this overloaded method does not depend on the current portal setting so it can be used
            in background threads or scheduler jobs. 
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Users.IUserController.IsValidUserName(System.String)">
            <summary>
            Check username parameter against :
            Invalid charaters, 
            length check for 5 chars, 
            for space between username
            </summary>
            <param name="userName">UserName as string</param>
            <returns>true/false</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Users.Membership.MembershipPasswordController.GetPasswordHistory(System.Int32)">
            <summary>
            returns the password history of the supplied user
            </summary>
            <returns>list of PasswordHistory objects</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Users.Membership.MembershipPasswordController.GetPasswordHistory(System.Int32,System.Int32)">
            <summary>
            returns the password history of the supplied user
            </summary>
            <param name="portalId">portalid - futureproofing against any setting become site level</param>
            <returns>list of PasswordHistory objects</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Users.Membership.MembershipPasswordController.IsPasswordInHistory(System.Int32,System.Int32,System.String)">
            <summary>
            checks to see if the password is in history and adds it if it is not
            </summary>
            <param name="portalId">portalid - futureproofing against any setting become site level</param>
            <param name="newPassword">users new password suggestion</param>
            <returns>true if password has not been used in users history, false otherwise</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Users.Membership.MembershipPasswordController.IsPasswordInHistory(System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            checks to see if the password is in history and adds it if it is not
            </summary>
            <param name="portalId">portalid - futureproofing against any setting become site level</param>
            <param name="newPassword">users new password suggestion</param>
            <param name="autoAdd">If set true then add the password into history if its not used yet.</param>
            <returns>true if password has not been used in users history, false otherwise</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Users.Membership.MembershipPasswordController.IsPasswordPreviouslyUsed(System.Int32,System.String)">
            <summary>
            checks if the new password matches a previously used password when hashed with the same salt
            </summary>
            <param name="password">users entered new password</param>
            <returns>true if previously used, false otherwise</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Users.Membership.MembershipPasswordController.IsValidToken(System.Int32,System.Guid)">
            <summary>
            checks if the password reset token being used is valid i.e. has not been used before and is within the the expiration period
            </summary>
            <param name="userId">user attempting to reset their password</param>
            <param name="resetToken">reset token supplied via email link</param>
            <returns>true if value matches (so has not been used before) and is within expiration window</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Users.Membership.MembershipPasswordController.FoundBannedPassword(System.String)">
            <summary>
            Checks if user entered password is on the list of banned passwords
            combines host level list with current site level list
            </summary>
            <param name="inputString">user entered password</param>
            <returns>true if password found, false otherwise</returns>
        </member>
        <member name="P:DotNetNuke.Entities.Users.Membership.MembershipPasswordSettings.MinNonAlphanumericCharacters">
            <summary>
            minimum number of non-alphanumeric characters setting for password strength indicator
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.Membership.MembershipPasswordSettings.MinPasswordLength">
            <summary>
            minimum length of password setting for password strength indicator
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.Membership.MembershipPasswordSettings.PasswordFormat">
            <summary>
            currently configured password format for installation
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.Membership.MembershipPasswordSettings.ValidationExpression">
            <summary>
            Regular Expression to validate password strength.
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Users.Membership.MembershipPasswordSettings.#ctor(System.Int32)">
            <summary>
            Initialiser for MembershipPasswordSettings provider object.  
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Users.Membership.PasswordHistory.Fill(System.Data.IDataReader)">
            <summary>
            Fill the object with data from database.
            </summary>
            <param name="dr">the data reader.</param>
        </member>
        <member name="T:DotNetNuke.Entities.Users.UserMembership">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Entities.Users
            Class:      UserMembership
            -----------------------------------------------------------------------------
            <summary>
            The UserMembership class provides Business Layer model for the Users Membership
            related properties
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserMembership.Approved">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the User is Approved
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserMembership.CreatedDate">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the User's Creation Date
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserMembership.IsDeleted">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the User Whether is deleted.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserMembership.IsOnLine">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the User Is Online
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserMembership.LastActivityDate">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Last Activity Date of the User
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserMembership.LastLockoutDate">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Last Lock Out Date of the User
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserMembership.LastLoginDate">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Last Login Date of the User
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserMembership.LastPasswordChangeDate">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Last Password Change Date of the User
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserMembership.LockedOut">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the user is locked out
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserMembership.Password">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the User's Password
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserMembership.PasswordAnswer">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the User's Password Answer
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserMembership.PasswordConfirm">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the User's Password Confirm value
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserMembership.PasswordQuestion">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the User's Password Question
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserMembership.UpdatePassword">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets a flag that determines whether the password should be updated
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.ProfilePropertyAccess.CheckAccessLevel(DotNetNuke.Entities.Portals.PortalSettings,DotNetNuke.Entities.Profile.ProfilePropertyDefinition,DotNetNuke.Entities.Users.UserInfo,DotNetNuke.Entities.Users.UserInfo)">
            <summary>
            Checks whether profile property is accessible.
            </summary>
            <param name="portalSettings">The portal settings.</param>
            <param name="property">The property.</param>
            <param name="accessingUser">The accessing user.</param>
            <param name="targetUser">The target user.</param>
            <returns><c>true</c> if property accessible, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:DotNetNuke.Entities.Users.UserProfile">
            <summary>
            The UserProfile class provides a Business Layer entity for the Users Profile
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserProfile.Cell">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Cell/Mobile Phone
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserProfile.City">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the City part of the Address
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserProfile.Country">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Country part of the Address
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserProfile.Fax">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Fax Phone
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserProfile.FirstName">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the First Name
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserProfile.FullName">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Full Name
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserProfile.IM">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Instant Messenger Handle
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserProfile.IsDirty">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets whether the property has been changed
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserProfile.LastName">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Last Name
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserProfile.PhotoURL">
            <summary>
            property will return a URL for the photourl - if the path contains invalid url characters it will return a fileticket
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserProfile.PostalCode">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the PostalCode part of the Address
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserProfile.PreferredLocale">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Preferred Locale
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserProfile.ProfileProperties">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Collection of Profile Properties
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserProfile.Region">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Region part of the Address
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserProfile.Street">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Street part of the Address
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserProfile.Telephone">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Telephone
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserProfile.Title">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Title
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserProfile.Unit">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Unit part of the Address
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserProfile.Website">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Website
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserProfile.ClearIsDirty">
            -----------------------------------------------------------------------------
            <summary>
            Clears the IsDirty Flag
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserProfile.GetProperty(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Gets a Profile Property from the Profile
            </summary>
            <remarks></remarks>
            <param name="propName">The name of the property to retrieve.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserProfile.GetPropertyValue(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Gets a Profile Property Value from the Profile
            </summary>
            <remarks></remarks>
            <param name="propName">The name of the propoerty to retrieve.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserProfile.InitialiseProfile(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Initialises the Profile with an empty collection of profile properties
            </summary>
            <remarks></remarks>
            <param name="portalId">The name of the property to retrieve.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserProfile.InitialiseProfile(System.Int32,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            Initialises the Profile with an empty collection of profile properties
            </summary>
            <remarks></remarks>
            <param name="portalId">The name of the property to retrieve.</param>
            <param name="useDefaults">A flag that indicates whether the profile default values should be
            copied to the Profile.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserProfile.SetProfileProperty(System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Sets a Profile Property Value in the Profile
            </summary>
            <remarks></remarks>
            <param name="propName">The name of the propoerty to set.</param>
            <param name="propValue">The value of the propoerty to set.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.Internal.FollowersControllerImpl.FollowUser(DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            FollowUser - Current User initiates a Follow Request to the Target User
            </summary>        
            <param name="targetUser">UserInfo for Target User</param>        
            <returns>UserRelationship object</returns>
            <remarks>If the Follow Relationship is setup for auto-acceptance (default) at the Portal level, the UserRelationship
            status is set as Accepted, otherwise it is set as Initiated.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.Internal.FollowersControllerImpl.FollowUser(DotNetNuke.Entities.Users.UserInfo,DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            FollowUser - Initiating User initiates a Follow Request to the Target User
            </summary>        
            <param name="initiatingUser">UserInfo for Initiating User</param>        
            <param name="targetUser">UserInfo for Target User</param>        
            <returns>UserRelationship object</returns>
            <remarks>If the Follow Relationship is setup for auto-acceptance (default) at the Portal level, the UserRelationship
            status is set as Accepted, otherwise it is set as Initiated.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.Internal.FollowersControllerImpl.UnFollowUser(DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            UnFollowUser - Current User initiates an UnFollow Request to the Target User
            </summary>        
            <param name="targetUser">UserInfo for Target User</param>        
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.Internal.FriendsControllerImpl.AcceptFriend(DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            AcceptFriend - Current User accepts a Friend Request to the Target User
            </summary>                
            <param name="targetUser">UserInfo for Target User</param>        
            <returns>UserRelationship object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.Internal.FriendsControllerImpl.AddFriend(DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            AddFriend - Current User initiates a Friend Request to the Target User
            </summary>                
            <param name="targetUser">UserInfo for Target User</param>        
            <returns>UserRelationship object</returns>
            <remarks>If the Friend Relationship is setup for auto-acceptance at the Portal level, the UserRelationship
            status is set as Accepted, otherwise it is set as Initiated.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.Internal.FriendsControllerImpl.AddFriend(DotNetNuke.Entities.Users.UserInfo,DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            AddFriend - Initiating User initiates a Friend Request to the Target User
            </summary>        
            <param name="initiatingUser">UserInfo for Initiating User</param>        
            <param name="targetUser">UserInfo for Target User</param>        
            <returns>UserRelationship object</returns>
            <remarks>If the Friend Relationship is setup for auto-acceptance at the Portal level, the UserRelationship
            status is set as Accepted, otherwise it is set as Initiated.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.Internal.FriendsControllerImpl.DeleteFriend(DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            DeleteFriend - Current User deletes a friend relationship with the target User
            </summary>
            <param name="targetUser">UserInfo for Target User</param>        
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.Internal.FriendsControllerImpl.DeleteFriend(DotNetNuke.Entities.Users.UserInfo,DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            DeleteFriend - Initiating User deletes a friend relationship with the target User
            </summary>
            <param name="initiatingUser">UserInfo for Initiating User</param>        
            <param name="targetUser">UserInfo for Target User</param>        
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.IRelationshipController.DeleteRelationshipType(DotNetNuke.Entities.Users.RelationshipType)">
            -----------------------------------------------------------------------------
            <summary>
            Delete RelationshipType
            </summary>
            <param name="relationshipType">RelationshipType</param>        
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.IRelationshipController.GetAllRelationshipTypes">
            -----------------------------------------------------------------------------
            <summary>
            Get list of All RelationshipTypes defined in system
            </summary>        
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.IRelationshipController.GetRelationshipType(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Get RelationshipType By RelationshipTypeId
            </summary>        
            <param name="relationshipTypeId">RelationshipTypeId</param>        
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.IRelationshipController.SaveRelationshipType(DotNetNuke.Entities.Users.RelationshipType)">
            -----------------------------------------------------------------------------
            <summary>
            Save RelationshipType
            </summary>
            <param name="relationshipType">RelationshipType object</param>        
            <remarks>
            If RelationshipTypeId is -1 (Null.NullIntger), then a new RelationshipType is created, 
            else existing RelationshipType is updated
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.IRelationshipController.DeleteRelationship(DotNetNuke.Entities.Users.Social.Relationship)">
            -----------------------------------------------------------------------------
            <summary>
            Delete Relationship
            </summary>
            <param name="relationship">Relationship</param>        
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.IRelationshipController.GetRelationship(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Get Relationship By RelationshipId
            </summary>        
            <param name="relationshipId">RelationshipId</param>        
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.IRelationshipController.GetRelationshipsByUserId(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Get Relationships By UserId
            </summary>        
            <param name="userId">UserId</param>        
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.IRelationshipController.GetRelationshipsByPortalId(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Get Relationships By PortalId
            </summary>        
            <param name="portalId">PortalId</param>        
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.IRelationshipController.SaveRelationship(DotNetNuke.Entities.Users.Social.Relationship)">
            -----------------------------------------------------------------------------
            <summary>
            Save Relationship
            </summary>
            <param name="relationship">Relationship object</param>        
            <remarks>
            If RelationshipId is -1 (Null.NullIntger), then a new Relationship is created, 
            else existing Relationship is updated
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.IRelationshipController.DeleteUserRelationship(DotNetNuke.Entities.Users.Social.UserRelationship)">
            -----------------------------------------------------------------------------
            <summary>
            Delete UserRelationship
            </summary>
            <param name="userRelationship">UserRelationship to delete</param>        
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.IRelationshipController.GetUserRelationship(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Get UserRelationship By UserRelationshipId
            </summary>        
            <param name="userRelationshipId">UserRelationshipId</param>        
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.IRelationshipController.GetUserRelationship(DotNetNuke.Entities.Users.UserInfo,DotNetNuke.Entities.Users.UserInfo,DotNetNuke.Entities.Users.Social.Relationship)">
            -----------------------------------------------------------------------------
            <summary>
            Get UserRelationship by its members
            </summary>        
            <param name="user">User</param>        
            <param name="relatedUser">Related User</param>   
            <param name="relationship">Relationship Object</param>             
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.IRelationshipController.GetUserRelationships(DotNetNuke.Entities.Users.UserInfo)">
            <summary>
            This method gets a Dictionary of all the relationships that a User belongs to and the members of thase relationships.
            </summary>
            <param name="user">The user</param>
            <returns>A Dictionary of Lists of UserRelationship, keyed by the Relationship</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.IRelationshipController.SaveUserRelationship(DotNetNuke.Entities.Users.Social.UserRelationship)">
            -----------------------------------------------------------------------------
            <summary>
            Save UserRelationship
            </summary>
            <param name="userRelationship">UserRelationship object</param>        
            <remarks>
            If UserRelationshipId is -1 (Null.NullIntger), then a new UserRelationship is created, 
            else existing UserRelationship is updated
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.IRelationshipController.DeleteUserRelationshipPreference(DotNetNuke.Entities.Users.Social.UserRelationshipPreference)">
            -----------------------------------------------------------------------------
            <summary>
            Delete UserRelationshipPreference
            </summary>
            <param name="userRelationshipPreference">UserRelationshipPreference to delete</param>        
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.IRelationshipController.GetUserRelationshipPreference(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Get UserRelationshipPreference By RelationshipTypeId
            </summary>        
            <param name="preferenceId">PreferenceId</param>        
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.IRelationshipController.GetUserRelationshipPreference(System.Int32,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Get UserRelationshipPreference By UserId and RelationshipId
            </summary>        
            <param name="userId">UserId</param>        
            <param name="relationshipId">RelationshipId</param>        
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.IRelationshipController.SaveUserRelationshipPreference(DotNetNuke.Entities.Users.Social.UserRelationshipPreference)">
            -----------------------------------------------------------------------------
            <summary>
            Save UserRelationshipPreference
            </summary>
            <param name="userRelationshipPreference">UserRelationshipPreference object</param>        
            <remarks>
            If PreferenceId is -1 (Null.NullIntger), then a new UserRelationshipPreference is created, 
            else existing UserRelationshipPreference is updated
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Users.Social.Relationship">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Entities.Users
            Class:      Relationship
            -----------------------------------------------------------------------------
            <summary>
            The Relationship class describes the relationships that a user or portal owns.  
            A handful of default Portal-Level Relationships will be be present for every portal (e.g. Friends, Followers, Family).  
            Portal-Level Relationship will have a -1 in UserId field.
            Any custom User-Level Relationship created by user will also be defined by this class (e.g. My InLaws, Engineering Group).
            User-Relationship will always have an associcated PortalId. User-Level Relationship will always be tied to a specific Portal.    
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.Social.Relationship.RelationshipId">
            <summary>
            RelationshipId - The primary key
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.Social.Relationship.Name">
            <summary>
            Relationship Name.
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.Social.Relationship.Description">
            <summary>
            Relationship Description.
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.Social.Relationship.UserId">
            <summary>
            UserId of the User that owns the Relationship. A value of -1 indicates that it's a Portal-Level Relationship
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.Social.Relationship.PortalId">
            <summary>
            PortalId of the User that owns the Relationship. A value of -1 in UserID field indicates that it's a Portal-Level Relationship
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.Social.Relationship.RelationshipTypeId">
            <summary>
            The ID of the Relationship to which this Relation belongs to (e.g. Friend List or Coworkers)
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.Social.Relationship.DefaultResponse">
            <summary>
            Default Relationship Status to be provided to any new Relationship Request
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.Social.Relationship.IsPortalList">
            <summary>
            Is this a Portal-Level Relationship
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.Social.Relationship.IsHostList">
            <summary>
            Is this a Host-Level Relationship (very uncommon)
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.Social.Relationship.IsUserList">
            <summary>
            Is this a USer-Level Relationship 
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.Social.Relationship.KeyID">
            <summary>
            IHydratable.KeyID.
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.Relationship.Fill(System.Data.IDataReader)">
            <summary>
            Fill the object with data from database.
            </summary>
            <param name="dr">the data reader.</param>
        </member>
        <member name="T:DotNetNuke.Entities.Users.Social.RelationshipController">
            <summary>
            Business Layer to manage Relationships. Also contains CRUD methods.
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.RelationshipControllerImpl.InitiateUserRelationship(DotNetNuke.Entities.Users.UserInfo,DotNetNuke.Entities.Users.UserInfo,DotNetNuke.Entities.Users.Social.Relationship)">
            -----------------------------------------------------------------------------
            <summary>
            Initiate an UserRelationship Request
            </summary>
            <param name="initiatingUser">UserInfo of the user initiating the request</param>        
            <param name="targetUser">UserInfo of the user being solicited for initiating the request</param>        
            <param name="relationship">Relationship to associate this request to (Portal-Level Relationship or User-Level Relationship)</param>        
            <remarks>
            If all conditions are met UserRelationship object belonging to Initiating User is returned.
            </remarks>
            <returns>
            Relationship object belonging to the initiating user
            </returns>
            <exception cref="T:DotNetNuke.Entities.Users.UserRelationshipBlockedException">Target user has Blocked any relationship request from Initiating user</exception>
            <exception cref="T:DotNetNuke.Entities.Users.InvalidRelationshipTypeException">Relationship type does not exist</exception>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.RelationshipControllerImpl.AcceptUserRelationship(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Accept an existing UserRelationship Request
            </summary>
            <param name="userRelationshipId">UserRelationshipId of the UserRelationship</param>        
            <remarks>
            Method updates the status of the UserRelationship to Accepted.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.RelationshipControllerImpl.RemoveUserRelationship(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Remove an existing UserRelationship Request
            </summary>
            <param name="userRelationshipId">UserRelationshipId of the UserRelationship</param>        
            <remarks>
            UserRelationship record is physically removed.
            </remarks>
            -----------------------------------------------------------------------------  
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.RelationshipControllerImpl.GetFollowerRelationship(DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            GetFollowerRelationship - Get the UserRelationship between Current User and the Target Users in Follower Relationship
            </summary>        
            <param name="targetUser">UserInfo for Target User</param>        
            <returns>UserRelationship</returns>
            <remarks>UserRelationship object is returned if a Follower Relationship exists between the two Users. 
            The relation status can be Any (Initiated / Accepted / Blocked). Follower Relationship can be initited by either of the Users.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.RelationshipControllerImpl.GetFollowerRelationship(DotNetNuke.Entities.Users.UserInfo,DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            GetFollowerRelationship - Get the UserRelationship between InitiatingUser User and the Target Users in Follower Relationship
            </summary>        
            <param name="initiatingUser">UserInfo for Initiating User</param>        
            <param name="targetUser">UserInfo for Target User</param>        
            <returns>UserRelationship</returns>
            <remarks>UserRelationship object is returned if a Follower Relationship exists between the two Users. 
            The relation status can be Any (Initiated / Accepted / Blocked). Follower Relationship can be initited by either of the Users.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.RelationshipControllerImpl.GetFollowingRelationship(DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            GetFollowingRelationship - Get the UserRelationship between Current User and the Target Users in Following Relationship
            </summary>        
            <param name="targetUser">UserInfo for Target User</param>        
            <returns>UserRelationship</returns>
            <remarks>UserRelationship object is returned if a Following Relationship exists between the two Users. 
            The relation status can be Any (Initiated / Accepted / Blocked).
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.RelationshipControllerImpl.GetFollowingRelationship(DotNetNuke.Entities.Users.UserInfo,DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            GetFollowingRelationship - Get the UserRelationship between InitiatingUser User and the Target Users in Following Relationship
            </summary>        
            <param name="initiatingUser">UserInfo for Initiating User</param>        
            <param name="targetUser">UserInfo for Target User</param>        
            <returns>UserRelationship</returns>
            <remarks>UserRelationship object is returned if a Following Relationship exists between the two Users. 
            The relation status can be Any (Initiated / Accepted / Blocked).
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.RelationshipControllerImpl.GetFriendRelationship(DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            GetFriendRelationship - Get the UserRelationship between Current User and the Target Users in Friend Relationship
            </summary>        
            <param name="targetUser">UserInfo for Target User</param>        
            <returns>UserRelationship</returns>
            <remarks>UserRelationship object is returned if a Friend Relationship exists between the two Users. 
            The relation status can be Any (Initiated / Accepted / Blocked). Friend Relationship can be initited by either of the Users.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.RelationshipControllerImpl.GetFriendRelationship(DotNetNuke.Entities.Users.UserInfo,DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            GetFriendRelationship - Get the UserRelationship between InitiatingUser User and the Target Users in Friend Relationship
            </summary>        
            <param name="initiatingUser">UserInfo for Initiating User</param>        
            <param name="targetUser">UserInfo for Target User</param>        
            <returns>UserRelationship</returns>
            <remarks>UserRelationship object is returned if a Friend Relationship exists between the two Users. 
            The relation status can be Any (Initiated / Accepted / Blocked). Friend Relationship can be initited by either of the Users.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Users.Social.RelationshipStatus">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Entities.Users
            Enum:      RelationshipStatus
            -----------------------------------------------------------------------------
            <summary>
            The RelationshipStatus enum describes various UserRelationship statuses. E.g. Accepted, Pending.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="F:DotNetNuke.Entities.Users.Social.RelationshipStatus.None">
            <summary>
            Relationship Request is not present (lack of any other status)
            </summary>
        </member>
        <member name="F:DotNetNuke.Entities.Users.Social.RelationshipStatus.Pending">
            <summary>
            Relationship Request is Initiated. E.g. User 1 sent a friend request to User 2.
            </summary>
        </member>
        <member name="F:DotNetNuke.Entities.Users.Social.RelationshipStatus.Accepted">
            <summary>
            Relationship Request is Accepted. E.g. User 2 has accepted User 1's friend request.
            </summary>
        </member>
        <member name="T:DotNetNuke.Entities.Users.Social.UserRelationship">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Entities.Users
            Class:      UserRelationship
            -----------------------------------------------------------------------------
            <summary>
            The UserRelationship class defines the membership of the relationship. 
            The user initiating the relationship is UserId. 
            The target of the relationship is RelatedUserId.  
            Status tracks relationship status as Initiated, Approved, Rejected etc.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.Social.UserRelationship.UserRelationshipId">
            <summary>
            UserRelationshipId - The primary key
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.Social.UserRelationship.UserId">
            <summary>
            UserId of the User that owns the relationship
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.Social.UserRelationship.RelatedUserId">
            <summary>
            The UserId of the Related User 
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.Social.UserRelationship.RelationshipId">
            <summary>
            The ID of the Relationship to which this Relation belongs to (e.g. Friend List or Coworkers)
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.Social.UserRelationship.Status">
            <summary>
            The Status of the Relationship (e.g. Initiated, Accepted, Rejected)
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.Social.UserRelationship.KeyID">
            <summary>
            IHydratable.KeyID.
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.UserRelationship.Fill(System.Data.IDataReader)">
            <summary>
            Fill the object with data from database.
            </summary>
            <param name="dr">the data reader.</param>
        </member>
        <member name="T:DotNetNuke.Entities.Users.Social.UserRelationshipPreference">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Entities.Users
            Class:      UserRelationshipPreference
            -----------------------------------------------------------------------------
            <summary>
            The UserRelationshipPreference class defines the relationship preference per user
            The user initiating the relationship is UserId. 
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.Social.UserRelationshipPreference.PreferenceId">
            <summary>
            PreferenceId - The primary key
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.Social.UserRelationshipPreference.UserId">
            <summary>
            UserId of the User that owns the relationship
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.Social.UserRelationshipPreference.RelationshipId">
            <summary>
            The ID of the Relationship to which this Relation belongs to (e.g. Friend List or Coworkers)
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.Social.UserRelationshipPreference.DefaultResponse">
            <summary>
            Default Relationship Status to be provided to any new Relationship Request
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.Social.UserRelationshipPreference.KeyID">
            <summary>
            IHydratable.KeyID.
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Users.Social.UserRelationshipPreference.Fill(System.Data.IDataReader)">
            <summary>
            Fill the object with data from database.
            </summary>
            <param name="dr">the data reader.</param>
        </member>
        <member name="T:DotNetNuke.Entities.Users.Social.UserSocial">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Entities.Users
            Class:      UserSocial
            -----------------------------------------------------------------------------
            <summary>
            The UserSocial is a high-level class describing social details of a user. 
            As an example, this class contains Friends, Followers, Follows lists.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.Social.UserSocial.Friend">
            <summary>
            Returns the Friend Relationship (if it exists with the current User)
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.Social.UserSocial.Follower">
            <summary>
            Returns the Follower Relationship. Does the user in object Follow the current User (with any status)
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.Social.UserSocial.Following">
            <summary>
            Returns the Following Relationship (if it exists with the current User)
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.Social.UserSocial.UserRelationships">
            <summary>
            A collection of all the relationships the user is a member of.
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.Social.UserSocial.Relationships">
            <summary>
            List of Relationships for the User
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.Social.UserSocial.Roles">
            <summary>
            List of Roles/Groups for the User
            </summary>
        </member>
        <member name="T:DotNetNuke.Entities.Users.DefaultRelationshipTypes">
            <summary>
            DefaultRelationshipType defined in system
            </summary>
        </member>
        <member name="F:DotNetNuke.Entities.Users.DefaultRelationshipTypes.Friends">
            <summary>
            Friends Relationship Type
            </summary>
        </member>
        <member name="F:DotNetNuke.Entities.Users.DefaultRelationshipTypes.Followers">
            <summary>
            Followers Relationship Type
            </summary>
        </member>
        <member name="F:DotNetNuke.Entities.Users.DefaultRelationshipTypes.CustomList">
            <summary>
            A user-owned custom-list, e.g. my best friends
            </summary>
        </member>
        <member name="F:DotNetNuke.Entities.Users.RelationshipDirection.OneWay">
            <summary>
            One way relationship, e.g. Follower, where user 1 is following user 2, but user 2 is not following user 1.
            </summary>
        </member>
        <member name="F:DotNetNuke.Entities.Users.RelationshipDirection.TwoWay">
            <summary>
            Two way relationship, e.g. Friend, where user 1 and user 2 are both friends and mutually following each other.
            </summary>
        </member>
        <member name="T:DotNetNuke.Entities.Users.RelationshipType">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Entities.Users
            Class:      RelationshipType
            -----------------------------------------------------------------------------
            <summary>
            The RelationshipType defines the core relationship types (Friend (2-way), Follower (1-way))
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.RelationshipType.RelationshipTypeId">
            <summary>
            RelationshipId - The primary key
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.RelationshipType.Name">
            <summary>
            Relationship Type Name.
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.RelationshipType.Description">
            <summary>
            Relationship Description.
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.RelationshipType.Direction">
            <summary>
            Relationship Direction.
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.RelationshipType.KeyID">
            <summary>
            IHydratable.KeyID.
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Users.RelationshipType.Fill(System.Data.IDataReader)">
            <summary>
            Fill the object with data from database.
            </summary>
            <param name="dr">the data reader.</param>
        </member>
        <member name="T:DotNetNuke.Entities.Users.UserController">
            <summary>
            The UserController class provides Business Layer methods for Users
            </summary>
            <remarks>
            DotNetNuke user management is base on asp.net membership provider, but  the default implementation of these providers 
            do not satisfy the broad set of use cases which we need to support in DotNetNuke. so The dependency of DotNetNuke on the 
            MemberRole (ASP.NET 2 Membership) components will be abstracted into a DotNetNuke Membership Provider, in order to allow 
            developers complete flexibility in implementing alternate Membership approaches.
            <list type="bullet">
            <item>This will allow for a number of enhancements to be added</item>
            <item>Removal of dependence on the HttpContext</item>
            <item>Support for Hashed Passwords</item>
            <item>Support for Password Question and Answer</item>
            <item>Enforce Password Complexity</item>
            <item>Password Aging (Expiry)</item>
            <item>Force Password Update</item>
            <item>Enable/Disable Password Retrieval/Reset</item>
            <item>CAPTCHA Support</item>
            <item>Redirect after registration/login/logout</item>
            </list>
            </remarks>
            <seealso cref="T:DotNetNuke.Security.Membership.MembershipProvider"/>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.GetUser(System.Int32,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetUser retrieves a User from the DataStore
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="userId">The Id of the user being retrieved from the Data Store.</param>
            <returns>The User as a UserInfo object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.GetUserProfilePictureUrl(System.Int32,System.Int32,System.Int32)">
            <summary>
            Return User Profile Picture relative Url
            </summary>
            <param name="userId">User Id</param>
            <param name="width">Width in pixel</param>
            <param name="height">Height in pixel</param>
            <returns>Relative url,  e.g. /DnnImageHandler.ashx?userid=1&amp;h=32&amp;w=32 considering child portal</returns>
            <remarks>Usage: ascx - &lt;asp:Image ID="avatar" runat="server" CssClass="SkinObject" /&gt;
            code behind - avatar.ImageUrl = UserController.Instance.GetUserProfilePictureUrl(userInfo.UserID, 32, 32)
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.UpdateDisplayNames">
            -----------------------------------------------------------------------------
            <summary>
            Update all the Users Display Names
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.GetDuplicateEmailCount">
            -----------------------------------------------------------------------------
            <summary>
            Gets the number count for all duplicate e-mail adresses in the database
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.AddUserPortal(System.Int32,System.Int32)">
            <summary>
            add new userportal record (used for creating sites with existing user)
            </summary>
            <param name="portalId">portalid</param>
            <param name="userId">userid</param>
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.ApproveUser(DotNetNuke.Entities.Users.UserInfo)">
            <summary>
            ApproveUser removes the Unverified Users role from the user and adds the auto assigned roles.
            </summary>
            <param name="user">The user to update.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.UserAgreedToTerms(DotNetNuke.Entities.Users.UserInfo)">
            <summary>
            User has agreed to terms and conditions. The time is recorded at the same time in SQL.
            </summary>
            <param name="user">The user that agreed.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.ResetTermsAgreement(System.Int32)">
            <summary>
            When called all users in the portal will need to agree to terms and conditions again.
            </summary>
            <param name="portalId">The portal for which to reset.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.UserRequestsRemoval(DotNetNuke.Entities.Users.UserInfo,System.Boolean)">
            <summary>
            A user may request that their account be removed. This sets a flag on the user portal
            so further processing may occur manually by the site admins
            </summary>
            <param name="user">The user that desires to be removed.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.ChangePassword(DotNetNuke.Entities.Users.UserInfo,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            ChangePassword attempts to change the users password
            </summary>
            <remarks>
            </remarks>
            <param name="user">The user to update.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <returns>A Boolean indicating success or failure.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.ChangePasswordByToken(System.Int32,System.String,System.String,System.String)">
            <summary>
            overload will validate the token and if valid change the password
            it does not require an old password as it supports hashed passwords
            </summary>
            <param name="newPassword">The new password.</param>
            /// <param name="resetToken">The reset token, typically supplied through a password reset email.</param>
            <returns>A Boolean indicating success or failure.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.ChangePasswordByToken(System.Int32,System.String,System.String,System.String,System.String,System.String@)">
            <summary>
            overload will validate the token and if valid change the password
            it does not require an old password as it supports hashed passwords
            errorMessage will define why reset failed
            </summary>
            <param name="newPassword">The new password.</param>
            <param name="resetToken">The reset token, typically supplied through a password reset email.</param>
            <returns>A Boolean indicating success or failure.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.ChangePasswordQuestionAndAnswer(DotNetNuke.Entities.Users.UserInfo,System.String,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            ChangePasswordQuestionAndAnswer attempts to change the users password Question
            and PasswordAnswer
            </summary>
            <remarks>
            </remarks>
            <param name="user">The user to update.</param>
            <param name="password">The password.</param>
            <param name="passwordQuestion">The new password question.</param>
            <param name="passwordAnswer">The new password answer.</param>
            <returns>A Boolean indicating success or failure.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.ChangeUsername(System.Int32,System.String)">
            <summary>
            update username in the system
            works around membershipprovider limitation
            </summary>
            <param name="userId">user id</param>
            <param name="newUsername">new one</param>
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.CopyUserToPortal(DotNetNuke.Entities.Users.UserInfo,DotNetNuke.Entities.Portals.PortalInfo,System.Boolean)">
            <summary>
            Copys a user to a different portal.
            </summary>
            <param name="user">The user to copy</param>
            <param name="destinationPortal">The destination portal</param>
            <param name="mergeUser">A flag that indicates whether to merge the original user</param>
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.CreateUser(DotNetNuke.Entities.Users.UserInfo@)">
            -----------------------------------------------------------------------------
            <summary>
            Creates a new User in the Data Store
            </summary>
            <remarks></remarks>
            <param name="user">The userInfo object to persist to the Database</param>
            <returns>The Created status ot the User</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.CreateUser(DotNetNuke.Entities.Users.UserInfo@,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            Creates a new User in the Data Store
            </summary>
            <remarks></remarks>
            <param name="user">The userInfo object to persist to the Database</param>
            <param name="sendEmailNotification">The sendEmailNotification flag defines whether registration email will be sent to user</param>
            <returns>The Created status ot the User</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.DeleteUnauthorizedUsers(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Deletes all Unauthorized Users for a Portal
            </summary>
            <remarks></remarks>
            <param name="portalId">The Id of the Portal</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.DeleteUser(DotNetNuke.Entities.Users.UserInfo@,System.Boolean,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            Deletes an existing User from the Data Store
            </summary>
            <remarks></remarks>
            <param name="user">The userInfo object to delete from the Database</param>
            <param name="notify">A flag that indicates whether an email notification should be sent</param>
            <param name="deleteAdmin">A flag that indicates whether the Portal Administrator should be deleted</param>
            <returns>A Boolean value that indicates whether the User was successfully deleted</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.DeleteUsers(System.Int32,System.Boolean,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            Deletes all Users for a Portal
            </summary>
            <remarks></remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="notify">A flag that indicates whether an email notification should be sent</param>
            <param name="deleteAdmin">A flag that indicates whether the Portal Administrator should be deleted</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.GeneratePassword">
            -----------------------------------------------------------------------------
            <summary>
            Generates a new random password (Length = Minimum Length + 4)
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.GeneratePassword(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Generates a new random password
            </summary>
            <param name="length">The length of password to generate.</param>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.GetCachedUser(System.Int32,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            GetCachedUser retrieves the User from the Cache, or fetches a fresh copy if 
            not in cache or if Cache settings not set to HeavyCaching
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="username">The username of the user being retrieved.</param>
            <returns>The User as a UserInfo object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.GetOnlineUsers(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Gets a collection of Online Users
            </summary>
            <param name="portalId">The Id of the Portal</param>
            <returns>An ArrayList of UserInfo objects</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.GetPassword(DotNetNuke.Entities.Users.UserInfo@,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Current Password Information for the User 
            </summary>
            <remarks>This method will only return the password if the memberProvider supports
            and is using a password encryption method that supports decryption.</remarks>
            <param name="user">The user whose Password information we are retrieving.</param>
            <param name="passwordAnswer">The answer to the "user's" password Question.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.GetUnAuthorizedUsers(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetUnAuthorizedUsers gets all the users of the portal, that are not authorized
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">The Id of the Portal</param>
            <returns>An ArrayList of UserInfo objects.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.GetUserById(System.Int32,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetUser retrieves a User from the DataStore
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="userId">The Id of the user being retrieved from the Data Store.</param>
            <returns>The User as a UserInfo object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.GetUserByName(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            GetUserByUserName retrieves a User from the DataStore
            </summary>
            <remarks>
            </remarks>
            <param name="username">The username of the user being retrieved from the Data Store.</param>
            <returns>The User as a UserInfo object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.GetUserByName(System.Int32,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            GetUserByUserName retrieves a User from the DataStore
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="username">The username of the user being retrieved from the Data Store.</param>
            <returns>The User as a UserInfo object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.GetUserCountByPortal(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetUserCountByPortal gets the number of users in the portal
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">The Id of the Portal</param>
            <returns>The no of users</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.GetUserCreateStatus(DotNetNuke.Security.Membership.UserCreateStatus)">
            -----------------------------------------------------------------------------
            <summary>
            Retruns a String corresponding to the Registration Status of the User
            </summary>
            <param name="userRegistrationStatus">The AUserCreateStatus</param>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.GetUserMembership(DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Membership Information for the User
            </summary>
            <remarks></remarks>
            <param name="user">The user whose Membership information we are retrieving.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.GetDefaultUserSettings">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Default Settings for the Module
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.GetUserSettings(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetUserSettings retrieves the UserSettings from the User
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">The Id of the Portal</param>
            <returns>The Settings Hashtable</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.GetUsers(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetUsers gets all the users of the portal
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">The Id of the Portal</param>
            <returns>An ArrayList of UserInfo objects.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.GetUsers(System.Boolean,System.Boolean,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetUsers gets all the users of the portal
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="includeDeleted">Include Deleted Users.</param>
            <param name="superUsersOnly">Only get super users.</param>
            <returns>An ArrayList of UserInfo objects.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.GetUsers(System.Int32,System.Int32,System.Int32,System.Int32@)">
            -----------------------------------------------------------------------------
            <summary>
            GetUsers gets all the users of the portal, by page
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="pageIndex">The page of records to return.</param>
            <param name="pageSize">The size of the page</param>
            <param name="totalRecords">The total no of records that satisfy the criteria.</param>
            <returns>An ArrayList of UserInfo objects.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.GetUsers(System.Int32,System.Int32,System.Int32,System.Int32@,System.Boolean,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            GetUsers gets all the users of the portal, by page
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="pageIndex">The page of records to return.</param>
            <param name="pageSize">The size of the page</param>
            <param name="totalRecords">The total no of records that satisfy the criteria.</param>
            <param name="includeDeleted">Include Deleted Users.</param>
            <param name="superUsersOnly">Only get super users.</param>
            <returns>An ArrayList of UserInfo objects.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.GetUsersByEmail(System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            -----------------------------------------------------------------------------
            <summary>
            GetUsersByEmail gets all the users of the portal whose email matches a provided
            filter expression
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="emailToMatch">The email address to use to find a match.</param>
            <param name="pageIndex">The page of records to return.</param>
            <param name="pageSize">The size of the page</param>
            <param name="totalRecords">The total no of records that satisfy the criteria.</param>
            <returns>An ArrayList of UserInfo objects.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.GetUserByEmail(System.Int32,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            GetUserByEmail gets one single user matching the email address provided
            This will only be useful in portals without duplicate email addresses
            filter expression
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="emailToMatch">The email address to use to find a match.</param>
            <returns>A single user object or null if no user found</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.GetUsersByEmail(System.Int32,System.String,System.Int32,System.Int32,System.Int32@,System.Boolean,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            GetUsersByEmail gets all the users of the portal whose email matches a provided
            filter expression
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="emailToMatch">The email address to use to find a match.</param>
            <param name="pageIndex">The page of records to return.</param>
            <param name="pageSize">The size of the page</param>
            <param name="totalRecords">The total no of records that satisfy the criteria.</param>
            <param name="includeDeleted">Include Deleted Users.</param>
            <param name="superUsersOnly">Only get super users.</param>
            <returns>An ArrayList of UserInfo objects.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.GetUsersByProfileProperty(System.Int32,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            -----------------------------------------------------------------------------
            <summary>
            GetUsersByProfileProperty gets all the users of the portal whose profile matches
            the profile property pased as a parameter
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="propertyName">The name of the property being matched.</param>
            <param name="propertyValue">The value of the property being matched.</param>
            <param name="pageIndex">The page of records to return.</param>
            <param name="pageSize">The size of the page</param>
            <param name="totalRecords">The total no of records that satisfy the criteria.</param>
            <returns>An ArrayList of UserInfo objects.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.GetUsersByProfileProperty(System.Int32,System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Boolean,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            GetUsersByProfileProperty gets all the users of the portal whose profile matches
            the profile property pased as a parameter
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="propertyName">The name of the property being matched.</param>
            <param name="propertyValue">The value of the property being matched.</param>
            <param name="pageIndex">The page of records to return.</param>
            <param name="pageSize">The size of the page</param>
            <param name="totalRecords">The total no of records that satisfy the criteria.</param>
            <param name="includeDeleted">Include Deleted Users.</param>
            <param name="superUsersOnly">Only get super users.</param>
            <returns>An ArrayList of UserInfo objects.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.GetUsersByUserName(System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            -----------------------------------------------------------------------------
            <summary>
            GetUsersByUserName gets all the users of the portal whose username matches a provided
            filter expression
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="userNameToMatch">The username to use to find a match.</param>
            <param name="pageIndex">The page of records to return.</param>
            <param name="pageSize">The size of the page</param>
            <param name="totalRecords">The total no of records that satisfy the criteria.</param>
            <returns>An ArrayList of UserInfo objects.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.GetUsersByUserName(System.Int32,System.String,System.Int32,System.Int32,System.Int32@,System.Boolean,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            GetUsersByUserName gets all the users of the portal whose username matches a provided
            filter expression
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="userNameToMatch">The username to use to find a match.</param>
            <param name="pageIndex">The page of records to return.</param>
            <param name="pageSize">The size of the page</param>
            <param name="totalRecords">The total no of records that satisfy the criteria.</param>
            <param name="includeDeleted">Include Deleted Users.</param>
            <param name="superUsersOnly">Only get super users.</param>
            <returns>An ArrayList of UserInfo objects.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.GetUsersByDisplayName(System.Int32,System.String,System.Int32,System.Int32,System.Int32@,System.Boolean,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            GetUsersByDisplayName gets all the users of the portal whose display name matches a provided
            filter expression
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="nameToMatch">The display name to use to find a match.</param>
            <param name="pageIndex">The page of records to return.</param>
            <param name="pageSize">The size of the page</param>
            <param name="totalRecords">The total no of records that satisfy the criteria.</param>
            <param name="includeDeleted">Include Deleted Users.</param>
            <param name="superUsersOnly">Only get super users.</param>
            <returns>An ArrayList of UserInfo objects.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.MoveUserToPortal(DotNetNuke.Entities.Users.UserInfo,DotNetNuke.Entities.Portals.PortalInfo,System.Boolean)">
            <summary>
            Move a user to a different portal.
            </summary>
            <param name="user">The user to move</param>
            <param name="portal">The destination portal</param>
            <param name="mergeUser">A flag that indicates whether to merge the original user</param>
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.RemoveDeletedUsers(System.Int32)">
            <summary>
            Permanently deletes all users marked as deleted from a portal. It will delete the membership
            user as well if the user has no other portals
            </summary>
            <param name="portalId">Portal ID to get the deleted users for</param>
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.RemoveUser(DotNetNuke.Entities.Users.UserInfo)">
            <summary>
            Permanently delete a user and the associated user folder on disk. 
            This also deletes the membership user if the user is
            not a member of any other portal.
            </summary>
            <param name="user">The user to delete</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.DeleteUserFolder(DotNetNuke.Entities.Users.UserInfo)">
            <summary>
            Delete the contents and folder that belongs to a user in a specific portal
            </summary>
            <param name="user">The user for whom to delete the folder. 
            Note the PortalID is taken to specify which portal to delete the folder from.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.ResetAndChangePassword(DotNetNuke.Entities.Users.UserInfo,System.String)">
            <summary>
            reset and change password
            used by admin/host users who do not need to supply an "old" password
            </summary>
            <param name="user">user being changed</param>
            <param name="newPassword">new password</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.ResetPassword(DotNetNuke.Entities.Users.UserInfo,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Resets the password for the specified user
            </summary>
            <remarks>Resets the user's password</remarks>
            <param name="user">The user whose Password information we are resetting.</param>
            <param name="passwordAnswer">The answer to the "user's" password Question.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.UnLockUser(DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Unlocks the User's Account
            </summary>
            <remarks></remarks>
            <param name="user">The user whose account is being Unlocked.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.UpdateUser(System.Int32,DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Updates a User
            </summary>
            <param name="portalId">The Id of the Portal</param>
            <param name="user">The use to update</param>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.UpdateUser(System.Int32,DotNetNuke.Entities.Users.UserInfo,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
              updates a user
            </summary>
            <param name = "portalId">the portalid of the user</param>
            <param name = "user">the user object</param>
            <param name = "loggedAction">whether or not the update calls the eventlog - the eventlogtype must still be enabled for logging to occur</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.UpdateUser(System.Int32,DotNetNuke.Entities.Users.UserInfo,System.Boolean,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
              updates a user
            </summary>
            <param name = "portalId">the portalid of the user</param>
            <param name = "user">the user object</param>
            <param name = "loggedAction">whether or not the update calls the eventlog - the eventlogtype must still be enabled for logging to occur</param>
            <param name="sendNotification">Whether to send notification to the user about the update (i.e. a notification if the user was approved).</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.UpdateUser(System.Int32,DotNetNuke.Entities.Users.UserInfo,System.Boolean,System.Boolean,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
              updates a user
            </summary>
            <param name = "portalId">the portalid of the user</param>
            <param name = "user">the user object</param>
            <param name = "loggedAction">whether or not the update calls the eventlog - the eventlogtype must still be enabled for logging to occur</param>
            <param name="sendNotification">Whether to send notification to the user about the update (i.e. a notification if the user was approved).</param>
            <param name="clearCache">Whether clear cache after update user.</param>
            <remarks>
            This method is used internal because it should be use carefully, or it will caught cache doesn't clear correctly.
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.UserLogin(System.Int32,System.String,System.String,System.String,System.String,System.String,DotNetNuke.Security.Membership.UserLoginStatus@,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            Validates a User's credentials against the Data Store, and sets the Forms Authentication
            Ticket
            </summary>
            <param name="portalId">The Id of the Portal the user belongs to</param>
            <param name="username">The user name of the User attempting to log in</param>
            <param name="password">The password of the User attempting to log in</param>
            <param name="verificationCode">The verification code of the User attempting to log in</param>
            <param name="portalName">The name of the Portal</param>
            <param name="ip">The IP Address of the user attempting to log in</param>
            <param name="loginStatus">A UserLoginStatus enumeration that indicates the status of the 
            Login attempt.  This value is returned by reference.</param>
            <param name="createPersistentCookie">A flag that indicates whether the login credentials 
            should be persisted.</param>
            <returns>The UserInfo object representing a successful login</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.UserLogin(System.Int32,DotNetNuke.Entities.Users.UserInfo,System.String,System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            Logs a Validated User in
            </summary>
            <param name="portalId">The Id of the Portal the user belongs to</param>
            <param name="user">The validated User</param>
            <param name="portalName">The name of the Portal</param>
            <param name="ip">The IP Address of the user attempting to log in</param>
            <param name="createPersistentCookie">A flag that indicates whether the login credentials should be persisted.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.ValidatePassword(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Validates a Password
            </summary>
            <param name="password">The password to Validate</param>
            <returns>A boolean</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.ValidateUser(System.Int32,System.String,System.String,System.String,System.String,System.String,DotNetNuke.Security.Membership.UserLoginStatus@)">
            -----------------------------------------------------------------------------
            <summary>
            Validates a User's credentials against the Data Store
            </summary>
            <param name="portalId">The Id of the Portal the user belongs to</param>
            <param name="username">The user name of the User attempting to log in</param>
            <param name="password">The password of the User attempting to log in</param>
            <param name="verificationCode">The verification code of the User attempting to log in</param>
            <param name="portalName">The name of the Portal</param>
            <param name="ip">The IP Address of the user attempting to log in</param>
            <param name="loginStatus">A UserLoginStatus enumeration that indicates the status of the 
            Login attempt.  This value is returned by reference.</param>
            <returns>The UserInfo object representing a valid user</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.ValidateUser(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,DotNetNuke.Security.Membership.UserLoginStatus@)">
            -----------------------------------------------------------------------------
            <summary>
            Validates a User's credentials against the Data Store
            </summary>
            <param name="portalId">The Id of the Portal the user belongs to</param>
            <param name="username">The user name of the User attempting to log in</param>
            <param name="password">The password of the User attempting to log in</param>
            <param name="authType">The type of Authentication Used</param>
            <param name="verificationCode">The verification code of the User attempting to log in</param>
            <param name="portalName">The name of the Portal</param>
            <param name="ip">The IP Address of the user attempting to log in</param>
            <param name="loginStatus">A UserLoginStatus enumeration that indicates the status of the 
            Login attempt.  This value is returned by reference.</param>
            <returns>The UserInfo object representing a valid user</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.ValidateUser(DotNetNuke.Entities.Users.UserInfo,System.Int32,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            Validates a User's Password and Profile
            </summary>
            <remarks>This overload takes a valid User (Credentials check out) and check whether the Password and Profile need updating</remarks>
            <param name="portalId">The Id of the Portal the user belongs to</param>
            <param name="objUser">The user attempting to log in</param>
            <param name="ignoreExpiring">Ingore expired user.</param>
            <returns>The UserLoginStatus</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.VerifyUser(System.String)">
            <summary>
            Tries to validate a verification code sent after a user is registered in a portal configured to use a verified registration.
            </summary>
            <param name="verificationCode">The verification code.</param>
            <returns>An null string if the verification code has been validated and the user has been approved. An error message otherwise.</returns>
            <exception cref="T:DotNetNuke.Entities.Users.UserAlreadyVerifiedException">Thrown when provided verification code has been already used.</exception>
            <exception cref="T:DotNetNuke.Entities.Users.InvalidVerificationCodeException">Thrown when the provided verification code is invalid.</exception>
            <exception cref="T:DotNetNuke.Entities.Users.UserDoesNotExistException">Thrown when the user does not exist.</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.GetProfileAvatarAbsoluteUrl(System.Int32,DotNetNuke.Entities.Users.UserInfo,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Returns a absolute URL for the user profile image while removing that of the deleted and super users
            </summary>
            <param name="portalId">Portal Id</param>
            <param name="user">user info</param>
            <param name="width">width in pixel</param>
            <param name="height">height in pixel</param>
            <param name="showSuperUsers">true if want show super users user profile picture, false otherwise</param>
            <returns>absolute user profile picture url</returns>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserController.GetAbsoluteUrl(System.Int32,System.String)">
            <summary>
            Returns an absolute url given a relative url
            </summary>
            <param name="portalId">portal Id</param>
            <param name="relativeUrl">relative url</param>
            <returns>absolute url</returns>
        </member>
        <member name="T:DotNetNuke.Entities.Users.UserInfo">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Entities.Users
            Class:      UserInfo
            -----------------------------------------------------------------------------
            <summary>
            The UserInfo class provides Business Layer model for Users
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserInfo.AffiliateID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the AffiliateId for this user
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserInfo.DisplayName">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Display Name
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserInfo.Email">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Email Address
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserInfo.FirstName">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the First Name
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserInfo.IsDeleted">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the User is deleted
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserInfo.IsSuperUser">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the User is a SuperUser
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserInfo.LastIPAddress">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Last IP address used by user
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserInfo.LastName">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Last Name
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserInfo.Membership">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Membership object
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserInfo.PasswordResetToken">
            <summary>
            gets and sets the token created for resetting passwords
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserInfo.PasswordResetExpiration">
            <summary>
            gets and sets the datetime that the PasswordResetToken is valid
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserInfo.PortalID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the PortalId
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserInfo.HasAgreedToTerms">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the user has agreed to the terms and conditions
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserInfo.HasAgreedToTermsOn">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets when the user last agreed to the terms and conditions
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserInfo.RequestsRemoval">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the user has requested they be removed from the site
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserInfo.Profile">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Profile Object
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserInfo.Social">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Social property
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserInfo.UserID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the User Id
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.UserInfo.Username">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the User Name
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserInfo.GetProperty(System.String,System.String,System.Globalization.CultureInfo,DotNetNuke.Entities.Users.UserInfo,DotNetNuke.Services.Tokens.Scope,System.Boolean@)">
            <summary>
            Property access, initially provided for TokenReplace
            </summary>
            <param name="propertyName">Name of the Property</param>
            <param name="format">format string</param>
            <param name="formatProvider">format provider for numbers, dates, currencies</param>
            <param name="accessingUser">userinfo of the user, who queries the data (used to determine permissions)</param>
            <param name="currentScope">requested maximum access level, might be restricted due to user level</param>
            <param name="propertyNotFound">out: flag, if property could be retrieved.</param>
            <returns>current value of the property for this userinfo object</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserInfo.isAdminUser(DotNetNuke.Entities.Users.UserInfo@)">
            <summary>
            Determine, if accessing user is Administrator
            </summary>
            <param name="accessingUser">userinfo of the user to query</param>
            <returns>true, if user is portal administrator or superuser</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserInfo.IsInRole(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            IsInRole determines whether the user is in the role passed
            </summary>
            <param name="role">The role to check</param>
            <returns>A Boolean indicating success or failure.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserInfo.LocalTime">
            -----------------------------------------------------------------------------
            <summary>
            Gets current time in User's timezone
            </summary>
            -----------------------------------------------------------------------------        
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserInfo.LocalTime(System.DateTime)">
            -----------------------------------------------------------------------------
            <summary>
            Convert utc time in User's timezone
            </summary>
            <param name="utcTime">Utc time to convert</param>
            -----------------------------------------------------------------------------       
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserInfo.UpdateDisplayName(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            UpdateDisplayName updates the displayname to the format provided
            </summary>
            <param name="format">The format to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Users.UserRoleInfo">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Entities.Users
            Class:      UserRoleInfo
            -----------------------------------------------------------------------------
            <summary>
            The UserRoleInfo class provides Business Layer model for a User/Role
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Users.AnonymousUserInfo">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Entities.Users
            -----------------------------------------------------------------------------
            <summary>
            The AnonymousUserInfo class provides an Entity for an anonymous user
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.AnonymousUserInfo.UserID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the User Id for this online user
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Users.BaseUserInfo">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Entities.Users
            Class:      BaseUserInfo
            -----------------------------------------------------------------------------
            <summary>
            The BaseUserInfo class provides a base Entity for an online user
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.BaseUserInfo.PortalID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the PortalId for this online user
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.BaseUserInfo.TabID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the TabId for this online user
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.BaseUserInfo.CreationDate">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the CreationDate for this online user
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.BaseUserInfo.LastActiveDate">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the LastActiveDate for this online user
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Users.OnlineUserInfo">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Entities.Users
            Class:      OnlineUserInfo
            -----------------------------------------------------------------------------
            <summary>
            The OnlineUserInfo class provides an Entity for an online user
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Users.OnlineUserInfo.UserID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the User Id for this online user
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Users.PurgeUsersOnline">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Entities.Users
            Class:      PurgeUsersOnline
            -----------------------------------------------------------------------------
            <summary>
            The PurgeUsersOnline class provides a Scheduler for purging the Users Online
            data
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.PurgeUsersOnline.#ctor(DotNetNuke.Services.Scheduling.ScheduleHistoryItem)">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a PurgeUsesOnline SchedulerClient
            </summary>
            <remarks>
            </remarks>
            <param name="objScheduleHistoryItem">A SchedulerHistiryItem</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.PurgeUsersOnline.UpdateUsersOnline">
            -----------------------------------------------------------------------------
            <summary>
            UpdateUsersOnline updates the Users Online information
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.PurgeUsersOnline.DoWork">
            -----------------------------------------------------------------------------
            <summary>
            DoWork does th4 Scheduler work
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Users.UserOnlineController">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Entities.Users
            Class:      UserOnlineController
            -----------------------------------------------------------------------------
            <summary>
            The UserOnlineController class provides Business Layer methods for Users Online
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserOnlineController.ClearUserList">
            -----------------------------------------------------------------------------
            <summary>
            Clears the cached Users Online Information
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserOnlineController.GetOnlineTimeWindow">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Online time window
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserOnlineController.GetUserList">
            -----------------------------------------------------------------------------
            <summary>
            Gets the cached Users Online Information
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserOnlineController.IsEnabled">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether the Users Online functionality is enabled
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserOnlineController.IsUserOnline(DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Determines whether a User is online
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserOnlineController.SetUserList(System.Collections.Hashtable)">
            -----------------------------------------------------------------------------
            <summary>
            Sets the cached Users Online Information
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserOnlineController.TrackAnonymousUser(System.Web.HttpContext)">
            -----------------------------------------------------------------------------
            <summary>
            Tracks an Anonymous User
            </summary>
            <param name="context">An HttpContext Object</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserOnlineController.TrackAuthenticatedUser(System.Web.HttpContext)">
            -----------------------------------------------------------------------------
            <summary>
            Tracks an Authenticated User
            </summary>
            <param name="context">An HttpContext Object</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserOnlineController.TrackUsers">
            -----------------------------------------------------------------------------
            <summary>
            Tracks an online User
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Users.UserOnlineController.UpdateUsersOnline">
            -----------------------------------------------------------------------------
            <summary>
            Update the Users Online information
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Content.ContentTypeMemberNameFixer">
            <summary>
            This class exists solely to maintain compatibility between the original VB version
            which supported ContentType.ContentType and the c# version which doesn't allow members with
            the same naem as their parent type
            </summary>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Workflow.Entities.WorkflowUsageItem">
            <summary>
            This entity represents an item which is using a Workflow
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Entities.WorkflowUsageItem.WorkflowID">
            <summary>
            Workflow Id
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Entities.WorkflowUsageItem.ContentName">
            <summary>
            Name of the item
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Entities.WorkflowUsageItem.ContentType">
            <summary>
            Type of the item
            </summary>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Workflow.Entities.Workflow">
            <summary>
            This entity represents a Workflow
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Entities.Workflow.WorkflowID">
            <summary>
            Workflow Id
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Entities.Workflow.PortalID">
            <summary>
            Portal Id
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Entities.Workflow.WorkflowName">
            <summary>
            Workflow Name
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Entities.Workflow.WorkflowKey">
            <summary>
            Workflow Key. This property can be used to 
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Entities.Workflow.Description">
            <summary>
            Workflow Description
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Entities.Workflow.IsSystem">
            <summary>
            System workflow have a special behavior. It cannot be deleted and new states cannot be added
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Entities.Workflow.States">
            <summary>
            Workflow states
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Entities.Workflow.FirstState">
            <summary>
            First workflow state
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Entities.Workflow.LastState">
            <summary>
            Last workflow state
            </summary>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Workflow.Entities.WorkflowLog">
            <summary>
            This entity represents a Workflow Log
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Entities.WorkflowLog.WorkflowLogID">
            <summary>
            Workflow log Id
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Entities.WorkflowLog.WorkflowID">
            <summary>
            Workflow associated to the log entry
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Entities.WorkflowLog.ContentItemID">
            <summary>
            Content Item associated to the log entry
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Entities.WorkflowLog.Type">
            <summary>
            Type (<see cref="T:DotNetNuke.Entities.Content.Workflow.Entities.WorkflowLogType"/> enum)
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Entities.WorkflowLog.Action">
            <summary>
            Action name (usually is a localized representation of the ContentWorkflowLogType)
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Entities.WorkflowLog.Comment">
            <summary>
            Comment
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Entities.WorkflowLog.Date">
            <summary>
            Log date
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Entities.WorkflowLog.User">
            <summary>
            User Id associated to the log
            </summary>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Workflow.Entities.WorkflowLogType">
            <summary>
            This enum represents the possible list of WorkflowLogType
            </summary>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Workflow.Entities.WorkflowState">
            <summary>
            This entity represents a Workflow State
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Entities.WorkflowState.StateID">
            <summary>
            State Id
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Entities.WorkflowState.WorkflowID">
            <summary>
            Workflow associated to the state
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Entities.WorkflowState.StateName">
            <summary>
            State name
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Entities.WorkflowState.Order">
            <summary>
            State Order
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Entities.WorkflowState.IsSystem">
            <summary>
            Indicates if the state is a system state. System states (i.e.: Draft, Published) have a special behavior. They cannot be deleted or moved.
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Entities.WorkflowState.SendNotification">
            <summary>
            If set to true the Workflow Engine will send system notification to the reviewer of the state when the workflow reach it
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Entities.WorkflowState.SendNotificationToAdministrators">
            <summary>
            If set to true the Workflow Engine <see cref="T:DotNetNuke.Entities.Content.Workflow.IWorkflowEngine"/> will send system notification to administrators user when the workflow reach it
            </summary>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Workflow.Entities.WorkflowStatePermission">
            <summary>
            This entity represents a state permission
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Entities.WorkflowStatePermission.WorkflowStatePermissionID">
            <summary>
            Workflow state permission Id
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Entities.WorkflowStatePermission.StateID">
            <summary>
            State Id
            </summary>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Workflow.Actions.IWorkflowAction">
            <summary>
            This interface represents a point of extension that third party can implement to inject behavior on workflow action inside the Workflow Engine.
            i.e.: Discard State, Complete State, Discard Workflow, Complete Workflow
            Third party can implement the interface for each one of the 4 actions and then register it using the <see cref="T:DotNetNuke.Entities.Content.Workflow.Actions.IWorkflowActionManager"/>
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.Actions.IWorkflowAction.GetActionMessage(DotNetNuke.Entities.Content.Workflow.Dto.StateTransaction,DotNetNuke.Entities.Content.Workflow.Entities.WorkflowState)">
            <summary>
            The method gets the action message that will be sent to notify the users depending on the type of action
            i.e.: with action type Complete Workflow the action message represents the notification sent to the user that started the workflow
            </summary>
            <param name="stateTransaction">State transaction dto</param>
            <param name="currentState">Workflow state that represent the current state after the workflow action</param>
            <returns>Action message that the engine will use to send the notification</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.Actions.IWorkflowAction.DoActionOnStateChanged(DotNetNuke.Entities.Content.Workflow.Dto.StateTransaction)">
            <summary>
            This method implements some action on state changed.
            i.e.: on Complete Workflow user can implement clear a cache or log some info
            </summary>
            <param name="stateTransaction">State transaction dto</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.Actions.IWorkflowAction.DoActionOnStateChanging(DotNetNuke.Entities.Content.Workflow.Dto.StateTransaction)">
            <summary>
            This method implements some action on state changed.
            i.e.: on Complete Workflow user can implement the publish of a pending content version.
            </summary>
            <param name="stateTransaction">State transaction dto</param>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Workflow.Actions.IWorkflowActionManager">
            <summary>
            This class is responsible to manage Workflow Actions
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.Actions.IWorkflowActionManager.GetWorkflowActionInstance(System.Int32,DotNetNuke.Entities.Content.Workflow.Actions.WorkflowActionTypes)">
            <summary>
            This method gets an instance of the IWorkflowAction associated to the content type and action type
            </summary>
            <param name="contentTypeId">Content Item Id</param>
            <param name="actionType">Action type</param>
            <returns>IWorkflowAction instance</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.Actions.IWorkflowActionManager.RegisterWorkflowAction(DotNetNuke.Entities.Content.Workflow.Actions.WorkflowAction)">
            <summary>
            This method registers a new workflow action
            </summary>
            <remarks>This method checks that the WorkflowAction Source implements the IWorkflowAction interface before register it</remarks>
            <param name="workflowAction">Workflow action entity</param>
            <exception cref="T:System.ArgumentException">Thrown if the ActionSource does not implement the IWorkflowAction interface</exception>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Workflow.Actions.WorkflowAction">
            <summary>
            This entity represents a workflow action implementation
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Actions.WorkflowAction.ActionId">
            <summary>
            Action Id
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Actions.WorkflowAction.ContentTypeId">
            <summary>
            Content item type Id
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Actions.WorkflowAction.ActionType">
            <summary>
            Action type. This is a string representation of the enum <see cref="T:DotNetNuke.Entities.Content.Workflow.Actions.WorkflowActionTypes"/>
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Actions.WorkflowAction.ActionSource">
            <summary>
            Action Source. This property represents the path to the class that implement the IWorkflowAction interface
            i.e.: "MyProject.WorkflowActions.WorkflowDiscardction, MyProject"
            </summary>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Workflow.Actions.WorkflowActionTypes">
            <summary>
            This enum represents the workflow action types
            </summary>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Workflow.Dto.StateTransaction">
            <summary>
            This Dto class represents the workflow state transaction on complete state or discard state.
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Dto.StateTransaction.ContentItemId">
            <summary>
            The content item id that represent the element that is going to change workflow state
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Dto.StateTransaction.CurrentStateId">
            <summary>
            The current state of the element
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Dto.StateTransaction.UserId">
            <summary>
            This property represents the user that performs the state transaction
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Dto.StateTransaction.Message">
            <summary>
            This property represents the message attached to the state transaction
            </summary>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Workflow.Dto.StateTransactionMessage">
            <summary>
            This class represents the message that will be notified on workflow state transaction
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Dto.StateTransactionMessage.Params">
            <summary>
            Params of the message
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Dto.StateTransactionMessage.UserComment">
            <summary>
            User comment
            </summary>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Workflow.Dto.ActionMessage">
            <summary>
            This dto class represents the message that will be sent as notification
            of a specific action on the Workflow (Complete/Discard state, Complete/Discard workflow)
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Dto.ActionMessage.Subject">
            <summary>
            Subject of the message
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Dto.ActionMessage.Body">
            <summary>
            Body of the message
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.Workflow.Dto.ActionMessage.SendToast">
            <summary>
            Indicates if the message is going to be toasted or not. By default, it is False
            </summary>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Workflow.ISystemWorkflowManager">
            <summary>
            This class is responsible to manage the system workflows of the portal. 
            It provides creation operation methods and methods to get specifically all system workflows
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.ISystemWorkflowManager.CreateSystemWorkflows(System.Int32)">
            <summary>
            Creates predefined system workflows
            </summary>
            <param name="portalId">Portal Id where system workflows will be created</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.ISystemWorkflowManager.GetDirectPublishWorkflow(System.Int32)">
            <summary>
            Get the 'Direct Publish' system workflow of a specific portal
            </summary>
            <param name="portalId">Portal Id</param>
            <returns>The 'Direct Publish' workflow</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.ISystemWorkflowManager.GetSaveDraftWorkflow(System.Int32)">
            <summary>
            Get the 'Save Draft' system workflow of a specific portal
            </summary>
            <param name="portalId">Portal Id</param>
            <returns>The 'Save Draft' workflow</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.ISystemWorkflowManager.GetContentApprovalWorkflow(System.Int32)">
            <summary>
            Get the 'Content Approval' system workflow of a specific portal
            </summary>
            <param name="portalId">Portal Id</param>
            <returns>The 'Content Approval' workflow</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.ISystemWorkflowManager.GetDraftStateDefinition(System.Int32)">
            <summary>
            Gets a default definition of the 'Draft' system state
            </summary>
            <param name="order">Order number to be included in the state definition</param>
            <returns>A 'Draft' state definition</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.ISystemWorkflowManager.GetPublishedStateDefinition(System.Int32)">
            <summary>
            Gets a default definition of the 'Published' system state
            </summary>
            <param name="order">Order number to be included in the state definition</param>
            <returns>A 'Published' state definition</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.ISystemWorkflowManager.GetReadyForReviewStateDefinition(System.Int32)">
            <summary>
            Gets a default definition of the 'Ready for review' system state
            </summary>
            <param name="order">Order number to be included in the state definition</param>
            <returns>A 'Ready for review' state definition</returns>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Workflow.IWorkflowEngine">
            <summary>
            This class represents the Workflow Engine. 
            It allows start, complete/discard and move forward and backward the workflow associated to a ContentItem
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowEngine.StartWorkflow(System.Int32,System.Int32,System.Int32)">
            <summary>
            This method starts a workflow for a Content Item
            </summary>
            <param name="workflowId">Workflow Id</param>
            <param name="contentItemId">Content item Id</param>
            <param name="userId">User Id of the user that start the workflow</param>
            <exception cref="T:DotNetNuke.Entities.Content.Workflow.Exceptions.WorkflowInvalidOperationException">Thrown when start a workflow on a Content Item that already has a started workflow.</exception>        
            <exception cref="T:System.ArgumentOutOfRangeException">When workflowId param is negative</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowEngine.CompleteState(DotNetNuke.Entities.Content.Workflow.Dto.StateTransaction)">
            <summary>
            This method completes a state moving the workflow forward to the next state.
            If the next state is not the last one it send notifications to the reviewers of the next state, 
            otherwise send the notification to the user that submit the draft in case the workflow complete.
            </summary>
            <param name="stateTransaction">State transaction Dto</param>
            <exception cref="T:DotNetNuke.Entities.Content.Workflow.Exceptions.WorkflowConcurrencyException">Thrown when the current state of the workflow is not the same of the current state specified in the StateTransaction Dto</exception>
            <exception cref="T:DotNetNuke.Entities.Content.Workflow.Exceptions.WorkflowSecurityException">Thrown when the user does not have review permission on the current state</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowEngine.DiscardState(DotNetNuke.Entities.Content.Workflow.Dto.StateTransaction)">
            <summary>
            This method discard a state moving the workflow backward to the previous state.
            If the previous state is not the first one it send notifications to the reviewers of the previous state, 
            otherwise send the notification to the user that submit the draft in case the workflow is in the draft state.
            </summary>
            <param name="stateTransaction">State transaction Dto</param>
            <exception cref="T:DotNetNuke.Entities.Content.Workflow.Exceptions.WorkflowConcurrencyException">Thrown when the current state of the workflow is not the same of the current state specified in the StateTransaction Dto</exception>
            <exception cref="T:DotNetNuke.Entities.Content.Workflow.Exceptions.WorkflowSecurityException">Thrown when the user does not have review permission on the current state</exception>
            <exception cref="T:DotNetNuke.Entities.Content.Workflow.Exceptions.WorkflowInvalidOperationException">Thrown when trying to discard a workflow in the last state</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowEngine.IsWorkflowCompleted(System.Int32)">
            <summary>
            This method returns true if the workflow associated to the Content Item is completed (it is in the last state)
            </summary>
            <remarks>Content Item without workflow is considered as completed as well</remarks>
            <param name="contentItemId">Content item Id</param>
            <returns>True if the workflow is completed, false otherwise</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowEngine.IsWorkflowCompleted(DotNetNuke.Entities.Content.ContentItem)">
            <summary>
            This method returns true if the workflow associated to the Content Item is completed (it is in the last state)
            </summary>
            <remarks>Content Item without workflow is considered as completed as well</remarks>
            <param name="contentItem">Content item entity</param>
            <returns>True if the workflow is completed, false otherwise</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowEngine.IsWorkflowOnDraft(System.Int32)">
            <summary>
            This method returns true if the workflow associated to the Content Item is in draft (it is in the first state)
            </summary>
            <remarks>Content Item without workflow is considered as not in draft</remarks>
            <param name="contentItemId">Content item Id</param>
            <returns>True if the workflow is in draft, false otherwise</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowEngine.IsWorkflowOnDraft(DotNetNuke.Entities.Content.ContentItem)">
            <summary>
            This method returns true if the workflow associated to the Content Item is in draft (it is in the first state)
            </summary>
            <remarks>Content Item without workflow is considered as not in draft</remarks>
            <param name="contentItem">Content item entity</param>
            <returns>True if the workflow is in draft, false otherwise</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowEngine.DiscardWorkflow(DotNetNuke.Entities.Content.Workflow.Dto.StateTransaction)">
            <summary>
            This method discards the workflow no matter what is the current state.
            It also sends a system notification to the user that submit the workflow to let him know about the discard workflow action.
            </summary>
            <remarks>This method does not check review permission on the current state</remarks>
            <param name="stateTransaction">State transaction Dto</param>
            <exception cref="T:DotNetNuke.Entities.Content.Workflow.Exceptions.WorkflowConcurrencyException">Thrown when the current state of the workflow is not the same of the current state specified in the StateTransaction Dto</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowEngine.CompleteWorkflow(DotNetNuke.Entities.Content.Workflow.Dto.StateTransaction)">
            <summary>
            This method completes the workflow no matter what is the current state.
            It also sends a system notification to the user that submit the workflow to let him know about the complete workflow action.
            </summary>
            <remarks>This method does not check review permission on the current state</remarks>
            <param name="stateTransaction">State transaction Dto</param>
            <exception cref="T:DotNetNuke.Entities.Content.Workflow.Exceptions.WorkflowConcurrencyException">Thrown when the current state of the workflow is not the same of the current state specified in the StateTransaction Dto</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowEngine.GetStartedDraftStateUser(DotNetNuke.Entities.Content.ContentItem)">
            <summary>
            This method returns the user that started the workflow for the contentItem.
            </summary>
            <remarks>If Content Item has no workflow, returns null.</remarks>
            <param name="contentItem">ContentItem</param>
            <returns>User Info</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowEngine.GetSubmittedDraftStateUser(DotNetNuke.Entities.Content.ContentItem)">
            <summary>
            This method returns the user that submitted the contentItem.
            </summary>
            <remarks>If Content Item has no workflow or the content has not submitted yet, returns null.</remarks>
            <param name="contentItem">ContentItem</param>
            <returns>User Info</returns>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Workflow.IWorkflowLogger">
            <summary>
            This class is responsible to manage the workflows logs. 
            It provides addition and get operation methods
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowLogger.AddWorkflowLog(System.Int32,System.Int32,DotNetNuke.Entities.Content.Workflow.Entities.WorkflowLogType,System.String,System.Int32)">
            <summary>
            Adds a log comment regarding a specific workflow
            </summary>
            <param name="contentItemId">Content item Id related with the log</param>
            <param name="workflowId">Workflow Id owner of the log</param>
            <param name="type">Log Type</param>
            <param name="comment">Comment to be added</param>
            <param name="userId">User Id who adds the log</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowLogger.AddWorkflowLog(System.Int32,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Adds a log comment regarding a specific workflow
            </summary>
            <param name="contentItemId">Content item Id related with the log</param>
            <param name="workflowId">Workflow Id owner of the log</param>
            <param name="action">Custom action related with the log</param>
            <param name="comment">Comment to be added</param>
            <param name="userId">User Id who adds the log</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowLogger.GetWorkflowLogs(System.Int32,System.Int32)">
            <summary>
            Gets all logs regarding a specific workflow
            </summary>
            <param name="contentItemId">Content item Id related with the logs</param>
            <param name="workflowId">Workflow Id owner of logs</param>
            <returns></returns>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Workflow.IWorkflowStateManager">
            <summary>
            This class is responsible to the management of the Workflow States
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowStateManager.GetWorkflowStates(System.Int32)">
            <summary>
            This method returns the list of States of a Workflow ordered by State Order ascending
            </summary>
            <param name="workflowId">Workflow Id</param>
            <returns>List of workflow States ordered by State Order ascending</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowStateManager.GetContentWorkflowStateUsageCount(System.Int32)">
            <summary>
            This method returns the total number of Content Items that are associated with the State
            </summary>
            <param name="stateId">State Id</param>
            <returns>Total count of Content Items that are using the specified state</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowStateManager.GetWorkflowState(System.Int32)">
            <summary>
            This method returns a workflow State by Id
            </summary>
            <param name="stateId">State Id</param>
            <returns>State entity</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowStateManager.AddWorkflowState(DotNetNuke.Entities.Content.Workflow.Entities.WorkflowState)">
            <summary>
            This method adds a new State to a workflow. The new state is always added as next to last state. 
            </summary>
            <remarks>This method also takes care on state reordering.</remarks>
            <param name="state">State entity</param>
            <exception cref="T:DotNetNuke.Entities.Content.Workflow.Exceptions.WorkflowDoesNotExistException">Thrown when adding a state to a workflow that does not exist</exception>
            <exception cref="T:DotNetNuke.Entities.Content.Workflow.Exceptions.WorkflowInvalidOperationException">Thrown when adding a state to a system workflow</exception>
            <exception cref="T:DotNetNuke.Entities.Content.Workflow.Exceptions.WorkflowStateNameAlreadyExistsException">Thrown when already exist a state in the workflow with the same name</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowStateManager.UpdateWorkflowState(DotNetNuke.Entities.Content.Workflow.Entities.WorkflowState)">
            <summary>
            This method updates a State.
            </summary>
            <remarks>This method does not update the Order of the state. Use MoveWorkflowStateDown and MoveWorkflowStateUp for this operation.</remarks>
            <param name="state">State entity</param>
            <exception cref="T:DotNetNuke.Entities.Content.Workflow.Exceptions.WorkflowDoesNotExistException">Thrown when updating a state that does not exist</exception>
            <exception cref="T:DotNetNuke.Entities.Content.Workflow.Exceptions.WorkflowStateNameAlreadyExistsException">Thrown when already exist a state in the workflow with the same name</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowStateManager.DeleteWorkflowState(DotNetNuke.Entities.Content.Workflow.Entities.WorkflowState)">
            <summary>
            This method hard deletes a state
            </summary>
            <remarks>This method takes care of state reordering.</remarks>
            <param name="state">State entity</param>
            <exception cref="T:DotNetNuke.Entities.Content.Workflow.Exceptions.WorkflowInvalidOperationException">Thrown when deleting a system state workflow (i.e.: Draft, Published) or if the workflow state is beign used</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowStateManager.MoveWorkflowStateDown(System.Int32)">
            <summary>
            This method move the state down to 1 position in the workflow state order
            </summary>
            <remarks>This method takes care of state reordering.</remarks>
            <param name="stateId">State Id</param>
            <exception cref="T:DotNetNuke.Entities.Content.Workflow.Exceptions.WorkflowDoesNotExistException">Thrown when moving a state that does not exist</exception>
            <exception cref="T:DotNetNuke.Entities.Content.Workflow.Exceptions.WorkflowInvalidOperationException">Thrown when state cannot be moved (i.e.: is the first/last state, etc...)</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowStateManager.MoveWorkflowStateUp(System.Int32)">
            <summary>
            This method move the state up to 1 position in the workflow state order
            </summary>
            <remarks>This method takes care of state reordering.</remarks>
            <param name="stateId">State Id</param>
            <exception cref="T:DotNetNuke.Entities.Content.Workflow.Exceptions.WorkflowDoesNotExistException">Thrown when moving a state that does not exist</exception>
            <exception cref="T:DotNetNuke.Entities.Content.Workflow.Exceptions.WorkflowInvalidOperationException">Thrown when state cannot be moved (i.e.: is the first/last state, etc...)</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowStateManager.MoveState(System.Int32,System.Int32)">
            <summary>
            This method move the state up to index position in the workflow state order
            </summary>
            <remarks>This method takes care of state reordering.</remarks>
            <param name="stateId">State Id</param>
            <param name="index">Index where the stateId will be moved. Since first and last states can't be moved, this index has to be a number between 1 and the number of states minus 2.</param>
            <exception cref="T:DotNetNuke.Entities.Content.Workflow.Exceptions.WorkflowDoesNotExistException">Thrown when moving a state that does not exist</exception>
            <exception cref="T:DotNetNuke.Entities.Content.Workflow.Exceptions.WorkflowInvalidOperationException">Thrown when state cannot be moved (i.e.: is the first/last state, etc...)</exception>
            <exception cref="T:DotNetNuke.Entities.Content.Workflow.Exceptions.WorkflowInvalidOperationException">Thrown when index is not a valid value (index = 0 or index >= number of states - 2)</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowStateManager.GetWorkflowStatePermissionByState(System.Int32)">
            <summary>
            This method returns the list of State Permission of a specific state
            </summary>
            <param name="stateId">State Id</param>
            <returns>List of state permissions</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowStateManager.AddWorkflowStatePermission(DotNetNuke.Entities.Content.Workflow.Entities.WorkflowStatePermission,System.Int32)">
            <summary>
            This method add a new workflow state permission
            </summary>
            <param name="permission">Permission</param>
            <param name="userId">User Id of the user that perform the action</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowStateManager.DeleteWorkflowStatePermission(System.Int32)">
            <summary>
            This method deletes a workflow state permission by Id
            </summary>
            <param name="workflowStatePermissionId">Workflow state permission Id</param>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Workflow.IWorkflowManager">
            <summary>
            This class is responsible to manage the workflows of the portal. 
            It provides CRUD operation methods and methods to know the usage of the workflow 
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowManager.GetWorkflowUsage(System.Int32,System.Int32,System.Int32)">
            <summary>
            This method returns the paginated list of Items that are associated with a workflow 
            </summary>
            <param name="workflowId">Workflow Id</param>
            <param name="pageIndex">Page index (where 1 is the index of the first page)</param>
            <param name="pageSize">Page size</param>
            <returns>List of Usage Items</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowManager.GetWorkflowUsageCount(System.Int32)">
            <summary>
            This method returns the total number of Content Items that are associated with any State of a workflow (even the Published state)
            </summary>
            <param name="workflowId">Workflow Id</param>
            <returns>Total count of Content Items that are using the specified workflow</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowManager.GetWorkflows(System.Int32)">
            <summary>
            This method return the list of the Workflows defined for the portal
            </summary>
            <param name="portalId">Portal Id</param>
            <returns>List of the Workflows for the portal</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowManager.AddWorkflow(DotNetNuke.Entities.Content.Workflow.Entities.Workflow)">
            <summary>
            This method adds a new workflow. It automatically add two system states: "Draft" and "Published"
            </summary>
            <param name="workflow">Workflow Entity</param>
            <exception cref="T:DotNetNuke.Entities.Content.Workflow.Exceptions.WorkflowNameAlreadyExistsException">Thrown when a workflow with the same name already exist for the portal</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowManager.UpdateWorkflow(DotNetNuke.Entities.Content.Workflow.Entities.Workflow)">
            <summary>
            this method update a existing workflow.
            </summary>
            <param name="workflow">Workflow Entity</param>
            <exception cref="T:DotNetNuke.Entities.Content.Workflow.Exceptions.WorkflowNameAlreadyExistsException">Thrown when a workflow with the same name already exist for the portal</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowManager.DeleteWorkflow(DotNetNuke.Entities.Content.Workflow.Entities.Workflow)">
            <summary>
            This method hard deletes a workflow
            </summary>
            <param name="workflow">Workflow Entity</param>
            <exception cref="T:DotNetNuke.Entities.Content.Workflow.Exceptions.WorkflowInvalidOperationException">Thrown when a workflow is in use or is a system workflow</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowManager.GetWorkflow(System.Int32)">
            <summary>
            This method returns a workflow entity by Id
            </summary>
            <param name="workflowId">Workflow Id</param>
            <returns>Workflow Entity</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowManager.GetWorkflow(DotNetNuke.Entities.Content.ContentItem)">
            <summary>
            This method returns a workflow entity by Content Item Id. It returns null if the Content Item is not under workflow.
            </summary>
            <param name="contentItem">Content Item</param>
            <returns>Workflow Entity</returns>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Workflow.Repositories.IWorkflowActionRepository">
            <summary>
            This class is responsible to persist and retrieve workflow action entity
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.Repositories.IWorkflowActionRepository.GetWorkflowAction(System.Int32,System.String)">
            <summary>
            This method gets the workflow action of a content type Id and action type
            </summary>
            <param name="contentTypeId">Content Item Id</param>
            <param name="actionType">Action type</param>
            <returns>Workflow action entity</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.Repositories.IWorkflowActionRepository.AddWorkflowAction(DotNetNuke.Entities.Content.Workflow.Actions.WorkflowAction)">
            <summary>
            This method persists a new workflow action
            </summary>
            <param name="workflowAction">Workflow action entity</param>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Workflow.Repositories.IWorkflowLogRepository">
            <summary>
            This class is responsible to persist and retrieve workflow log entity
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.Repositories.IWorkflowLogRepository.DeleteWorkflowLogs(System.Int32,System.Int32)">
            <summary>
            This method hard delete all the workflow log of a content items
            </summary>
            <param name="contentItemId">Content item Id</param>
            <param name="workflowId">Workflow Id</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.Repositories.IWorkflowLogRepository.AddWorkflowLog(DotNetNuke.Entities.Content.Workflow.Entities.WorkflowLog)">
            <summary>
            This method persists a workflow log entity
            </summary>
            <param name="workflowLog">WorkflowLog entity</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.Repositories.IWorkflowLogRepository.GetWorkflowLogs(System.Int32,System.Int32)">
            <summary>
            This method gets all the Content workflow logs
            </summary>
            <param name="contentItemId">Content item Id</param>
            <param name="workflowId">Workflow Id</param>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Workflow.Repositories.IWorkflowRepository">
            <summary>
            This class is responsible to persist and retrieve workflow entity
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.Repositories.IWorkflowRepository.GetSystemWorkflows(System.Int32)">
            <summary>
            This method gets the list of system portal workflows
            </summary>
            <param name="portalId">Portal Id</param>
            <returns>List of system workflows of the portal</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.Repositories.IWorkflowRepository.GetWorkflows(System.Int32)">
            <summary>
            This method gets the list of portal workflows
            </summary>
            <param name="portalId">Portal Id</param>
            <returns>List of workflows of the portal</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.Repositories.IWorkflowRepository.GetWorkflow(System.Int32)">
            <summary>
            This method gets the Workflow by Id
            </summary>
            <param name="workflowId">Workflow Id</param>
            <returns>Workflow entity</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.Repositories.IWorkflowRepository.GetWorkflow(DotNetNuke.Entities.Content.ContentItem)">
            <summary>
            This method gets the Workflow by Content Item Id
            </summary>
            <param name="contentItem">Content Item entity</param>
            <returns>Workflow entity</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.Repositories.IWorkflowRepository.AddWorkflow(DotNetNuke.Entities.Content.Workflow.Entities.Workflow)">
            <summary>
            This method persists a new workflow entity
            </summary>
            <param name="workflow">Workflow entity</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.Repositories.IWorkflowRepository.UpdateWorkflow(DotNetNuke.Entities.Content.Workflow.Entities.Workflow)">
            <summary>
            This method persists changes for a workflow entity
            </summary>
            <param name="workflow">Workflow entity</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.Repositories.IWorkflowRepository.DeleteWorkflow(DotNetNuke.Entities.Content.Workflow.Entities.Workflow)">
            <summary>
            This method hard deletes a workflow
            </summary>
            <param name="workflow">Workflow entity</param>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Workflow.Repositories.IWorkflowStatePermissionsRepository">
            <summary>
            This class is responsible to manage the workflow state permission entity
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.Repositories.IWorkflowStatePermissionsRepository.GetWorkflowStatePermissionByState(System.Int32)">
            <summary>
            Gets the registered permissions set for a specific state
            </summary>
            <param name="stateId">State Id</param>
            <returns>List of Workflow State Permission entities</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.Repositories.IWorkflowStatePermissionsRepository.AddWorkflowStatePermission(DotNetNuke.Entities.Content.Workflow.Entities.WorkflowStatePermission,System.Int32)">
            <summary>
            Persists a new Workflow State Permission entity
            </summary>
            <param name="permission">Workflow State Permission entity</param>
            <param name="lastModifiedByUserId">User Id who modifies the permissions set</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.Repositories.IWorkflowStatePermissionsRepository.DeleteWorkflowStatePermission(System.Int32)">
            <summary>
            Deletes a specific Workflow State Permission entity
            </summary>
            <param name="workflowStatePermissionId">Workflow State Permission Id</param>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Workflow.Repositories.IWorkflowStateRepository">
            <summary>
            This class is responsible to persist and retrieve workflow state entity
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.Repositories.IWorkflowStateRepository.GetWorkflowStates(System.Int32)">
            <summary>
            Get all states for a specific workflow
            </summary>
            <param name="workflowId">Workflow Id</param>
            <returns>List of workflow states</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.Repositories.IWorkflowStateRepository.GetWorkflowStateByID(System.Int32)">
            <summary>
            Get a workflow state by Id
            </summary>
            <param name="stateID">State Id</param>
            <returns>Workflow State entity</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.Repositories.IWorkflowStateRepository.AddWorkflowState(DotNetNuke.Entities.Content.Workflow.Entities.WorkflowState)">
            <summary>
            Persists a new workflow state entity
            </summary>
            <param name="state">Workflow State entity</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.Repositories.IWorkflowStateRepository.UpdateWorkflowState(DotNetNuke.Entities.Content.Workflow.Entities.WorkflowState)">
            <summary>
            Persists changes for a workflow state entity
            </summary>
            <param name="state">Workflow State entity</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.Repositories.IWorkflowStateRepository.DeleteWorkflowState(DotNetNuke.Entities.Content.Workflow.Entities.WorkflowState)">
            <summary>
            This method hard deletes a workflow state entity
            </summary>
            <param name="state">Workflow State entity</param>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Workflow.IWorkflowSecurity">
            <summary>
            This class is responsible of provide information around Workflow Review permission
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowSecurity.HasStateReviewerPermission(DotNetNuke.Entities.Portals.PortalSettings,DotNetNuke.Entities.Users.UserInfo,System.Int32)">
            <summary>
            This method returns true if the user has review permission on the specified state
            </summary>
            <param name="portalSettings">Portal settings</param>
            <param name="user">User entity</param>
            <param name="stateId">State Id</param>
            <returns>True if the user has review permission, false otherwise</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowSecurity.HasStateReviewerPermission(System.Int32,System.Int32,System.Int32)">
            <summary>
            This method returns true if the user has review permission on the specified state
            </summary>
            <param name="portalId">Portal Id</param>
            <param name="userId">User Id</param>
            <param name="stateId">State Id</param>
            <returns>True if the user has review permission, false otherwise</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowSecurity.HasStateReviewerPermission(System.Int32)">
            <summary>
            This method returns true if the current user has review permission on the specified state
            </summary>
            <param name="stateId">State Id</param>
            <returns>True if the user has review permission, false otherwise</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowSecurity.IsWorkflowReviewer(System.Int32,System.Int32)">
            <summary>
            This method returns true if the user has review permission on at least one workflow state
            </summary>
            <param name="workflowId">Workflow Id</param>
            <param name="userId">User Id</param>
            <returns>True if the user has review permission on at least on workflow state, false otherwise</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Workflow.IWorkflowSecurity.GetStateReviewPermission">
            <summary>
            This method gets the PermissionInfo of the State Review permission
            </summary>
            <returns>PermissionInfo of the State Review permission</returns>
        </member>
        <member name="T:DotNetNuke.Entities.Content.AttachmentController">
            <summary>Implementation of <see cref="T:DotNetNuke.Entities.Content.IAttachmentController"/>.</summary>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Common.Util">
            <summary>
            Utility Methods for Content.
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Common.Util.GetDataService">
            <summary>
            Gets the data service.
            </summary>
            <returns>data service instance from ComponentFactory.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Common.Util.GetContentController">
            <summary>
            Gets the content controller.
            </summary>
            <returns>ContentController from ComponentFactory.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Common.Util.GetScopeTypeController">
            <summary>
            Gets the scope type controller.
            </summary>
            <returns>ScopeTypeController from ComponentFactory.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Common.Util.GetTermController">
            <summary>
            Gets the term controller.
            </summary>
            <returns>TermController from ComponentFactory.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Common.Util.GetVocabularyController">
            <summary>
            Gets the vocabulary controller.
            </summary>
            <returns>VocabularyController from ComponentFactory.</returns>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Common.ContentExtensions">
            <summary>
            Extension methods for Term, Vocabulary, ContentItem.
            </summary>
            <seealso cref="T:DotNetNuke.Entities.Content.Taxonomy.Term"/>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Common.ContentExtensions.GetChildTerms(DotNetNuke.Entities.Content.Taxonomy.Term,System.Int32,System.Int32)">
            <summary>
            Gets the child terms.
            </summary>
            <param name="Term">The term.</param>
            <param name="termId">The term id.</param>
            <param name="vocabularyId">The vocabulary id.</param>
            <returns>term collection which's parent is the specific term.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Common.ContentExtensions.GetVocabulary(DotNetNuke.Entities.Content.Taxonomy.Term,System.Int32)">
            <summary>
            Gets the vocabulary.
            </summary>
            <param name="term">The term.</param>
            <param name="vocabularyId">The vocabulary id.</param>
            <returns>Vocabulary</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Common.ContentExtensions.ToDelimittedString(System.Collections.Generic.List{DotNetNuke.Entities.Content.Taxonomy.Term},System.String)">
            <summary>
            Toes the delimitted string.
            </summary>
            <param name="terms">The terms.</param>
            <param name="delimitter">The delimitter.</param>
            <returns>terms' name as a string and split with the given delimitter order by name A-Z.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Common.ContentExtensions.ToDelimittedString(System.Collections.Generic.List{DotNetNuke.Entities.Content.Taxonomy.Term},System.String,System.String)">
            <summary>
            Toes the delimitted string.
            </summary>
            <param name="terms">The terms.</param>
            <param name="format">The format.</param>
            <param name="delimitter">The delimitter.</param>
            <returns> formatted terms' name as a string and split with the given delimitter order by name A-Z.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Common.ContentExtensions.GetScopeType(DotNetNuke.Entities.Content.Taxonomy.Vocabulary,System.Int32)">
            <summary>
            Gets the type of the scope.
            </summary>
            <param name="voc">The voc.</param>
            <param name="scopeTypeId">The scope type id.</param>
            <returns>scope type.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Common.ContentExtensions.GetTerms(DotNetNuke.Entities.Content.Taxonomy.Vocabulary,System.Int32)">
            <summary>
            Gets the terms by vocabularyId.
            </summary>
            <param name="voc">The voc.</param>
            <param name="vocabularyId">The vocabulary id.</param>
            <returns>term collection.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Common.ContentExtensions.GetMetaData(DotNetNuke.Entities.Content.ContentItem,System.Int32)">
            <summary>
            Gets the meta data.
            </summary>
            <param name="item">The item.</param>
            <param name="contentItemId">The content item id.</param>
            <returns>meta data collection</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Common.ContentExtensions.GetTerms(DotNetNuke.Entities.Content.ContentItem,System.Int32)">
            <summary>
            Gets the terms by content item id.
            </summary>
            <param name="item">The item.</param>
            <param name="contentItemId">The content item id.</param>
            <returns>term collection</returns>
        </member>
        <member name="T:DotNetNuke.Entities.Content.IAttachmentController">
            <summary>Interface of FileController</summary>
            <seealso cref="T:DotNetNuke.Entities.Content.AttachmentController"/>
        </member>
        <member name="M:DotNetNuke.Entities.Content.IAttachmentController.AddFileToContent(System.Int32,DotNetNuke.Services.FileSystem.IFileInfo)">
            <summary>
            Add a generic file to a <see cref="T:DotNetNuke.Entities.Content.ContentItem"/>.
            </summary>
            <param name="contentItemId">The content item</param>
            <param name="fileInfo">A file registered in the DotNetNuke <seealso cref="T:DotNetNuke.Services.FileSystem.FileManager"/></param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.IAttachmentController.AddVideoToContent(System.Int32,DotNetNuke.Services.FileSystem.IFileInfo)">
            <summary>
            Add a video file to a <see cref="T:DotNetNuke.Entities.Content.ContentItem"/>.
            </summary>
            <param name="contentItemId">The content item</param>
            <param name="fileInfo">A file registered in the DotNetNuke <seealso cref="T:DotNetNuke.Services.FileSystem.FileManager"/></param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.IAttachmentController.AddImageToContent(System.Int32,DotNetNuke.Services.FileSystem.IFileInfo)">
            <summary>
            Attach an image to a ContentItem.
            </summary>
            <param name="contentItemId">The content item</param>
            <param name="fileInfo">A file registered in the DotNetNuke <seealso cref="T:DotNetNuke.Services.FileSystem.FileManager"/></param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Taxonomy.TermUsage.#ctor">
            <summary>
            parameterless constructor, so that it can be used in CBO.
            </summary>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Taxonomy.IScopeTypeController">
            <summary>
            Interface of ScopeTypeController.
            </summary>
            <seealso cref="T:DotNetNuke.Entities.Content.Taxonomy.ScopeTypeController"/>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Taxonomy.ITermController">
            <summary>
            Interface of TermController.
            </summary>
            <seealso cref="T:DotNetNuke.Entities.Content.Taxonomy.TermController"/>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Taxonomy.IVocabularyController">
            <summary>
            Interface of VocabularyController.
            </summary>
            <seealso cref="T:DotNetNuke.Entities.Content.Taxonomy.VocabularyController"/>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Taxonomy.ScopeTypeMemberNameFixer">
            <summary>
            This class exists solely to maintain compatibility between the original VB version
            which supported ScopeType.ScopeType and the c# version which doesn't allow members with
            the same naem as their parent type
            </summary>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Taxonomy.ScopeType">
            <summary>
            Class of ScopeType.
            </summary>
            <seealso cref="T:DotNetNuke.Entities.Content.Taxonomy.TermController"/>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Taxonomy.ScopeTypeController">
            <summary>
            ScopeTypeController provides the business layer of ScopeType.
            </summary>
            <seealso cref="T:DotNetNuke.Entities.Content.Taxonomy.TermController"/>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Taxonomy.Term">
            <summary>
            Major class of Taxonomy.
            </summary>
            <remarks>
            <para>
            Taxonomy is defined as âthe practice and science of classificationâ â Wikipedia,
            while Folksonomy is defined as âcollaborative taggingâ â Wikipedia. 
            Usually, taxonomy refers to the practice of using hierarchical categories applied to the content by a âcontent editorâ, 
            while folksonomy refers to the practice of free-form tagging of content by users. 
            In DotNetNuke, while we expose both of these at the presentation layer, in the API and Data Layer they are implemented 
            using a common data structure.
            </para>
            <para>
            There are a number of advantages of using a special System Vocabulary for storing user entered tags.
            One is that both taxonomy terms and folksonomy tags are treated in the API and Data Layer in the same way.
            This means that we only have to manage one relationship between content and terms rather than two separate relationships.
            The second benefit of treating tags in this way is that an admin can âmanageâ the tags â ie remove any offensive or inappropriate tags, 
            or correct spellings of tags, by using the Taxonomy Manager UI.
            </para>
            </remarks>
            <example>
            <code lang="C#">
            internal static List&lt;Term&gt; GetTerms(this Vocabulary voc, int vocabularyId)
            {
                ITermController ctl = Util.GetTermController();
                return ctl.GetTermsByVocabulary(vocabularyId).ToList();
            }
            </code>
            </example>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Taxonomy.TermController">
            <summary>
            The Main Business layer of Taxonomy.
            </summary>
            <example>
            <code lang="C#">
            internal static List&lt;Term&gt; GetTerms(this Vocabulary voc, int vocabularyId)
            {
                ITermController ctl = Util.GetTermController();
                return ctl.GetTermsByVocabulary(vocabularyId).ToList();
            }
            </code>
            </example>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Taxonomy.TermController.AddTerm(DotNetNuke.Entities.Content.Taxonomy.Term)">
            <summary>
            Adds the term.
            </summary>
            <param name="term">The term.</param>
            <returns>term id.</returns>
            <exception cref="T:System.ArgumentNullException">term is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">term.VocabularyId is less than 0.</exception>
            <exception cref="T:System.ArgumentException">term.Name is empty.</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Taxonomy.TermController.AddTermToContent(DotNetNuke.Entities.Content.Taxonomy.Term,DotNetNuke.Entities.Content.ContentItem)">
            <summary>
            Adds the content of the term to.
            </summary>
            <param name="term">The term.</param>
            <param name="contentItem">The content item.</param>
            <exception cref="T:System.ArgumentNullException">term is null.</exception>
            <exception cref="T:System.ArgumentNullException">content item is null.</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Taxonomy.TermController.DeleteTerm(DotNetNuke.Entities.Content.Taxonomy.Term)">
            <summary>
            Deletes the term.
            </summary>
            <param name="term">The term.</param>
            <exception cref="T:System.ArgumentNullException">term is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">term.TermId is less than 0.</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Taxonomy.TermController.GetTerm(System.Int32)">
            <summary>
            Gets the term.
            </summary>
            <param name="termId">The term id.</param>
            <returns>specific term.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">termId is less than 0.</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Taxonomy.TermController.GetTermUsage(System.Int32)">
            <summary>
            Retrieve usage data for the specified term ID.
            </summary>
            <param name="termId">Term ID in question</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Taxonomy.TermController.GetTermsByContent(System.Int32)">
            <summary>
            Gets the content of the terms by content item id.
            </summary>
            <param name="contentItemId">The content item id.</param>
            <returns>term collection</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">ContentItemId is less than 0.</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Taxonomy.TermController.GetTermsByVocabulary(System.Int32)">
            <summary>
            Gets the terms by vocabulary id.
            </summary>
            <param name="vocabularyId">The vocabulary id.</param>
            <returns>term collection</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">vocabularyId is less than 0.</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Taxonomy.TermController.GetTermsByVocabulary(System.String)">
            <summary>
            Gets the terms by vocabulary name.
            </summary>
            <param name="vocabularyName">Name of the vocabulary.</param>
            <returns>term collection</returns>
            <exception cref="T:System.ArgumentException">vocabularyName is empty.</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Taxonomy.TermController.RemoveTermsFromContent(DotNetNuke.Entities.Content.ContentItem)">
            <summary>
            Removes all terms from content item.
            </summary>
            <param name="contentItem">The content item.</param>
            <exception cref="T:System.ArgumentNullException">content item is null.</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Taxonomy.TermController.UpdateTerm(DotNetNuke.Entities.Content.Taxonomy.Term)">
            <summary>
            Updates the term.
            </summary>
            <param name="term">The term.</param>
            <exception cref="T:System.ArgumentNullException">term is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">term.TermId is less than 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">term.VocabularyId is less than 0.</exception>
            <exception cref="T:System.ArgumentException">term.Name is empty.</exception>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Taxonomy.Vocabulary">
            <summary>
            Class of Vocabulary.
            </summary>
            <seealso cref="T:DotNetNuke.Entities.Content.Taxonomy.TermController"/>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Taxonomy.VocabularyController">
            <summary>
            VocabularyController provides the business layer of Vocabulary and VocabularyType.
            </summary>
            <seealso cref="T:DotNetNuke.Entities.Content.Taxonomy.TermController"/>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Taxonomy.VocabularyType">
            <summary>
            Enumeration of VocabularyType.
            </summary>
        </member>
        <member name="F:DotNetNuke.Entities.Content.Taxonomy.VocabularyType.Simple">
            <summary>
            Simple Vocabulary
            </summary>
        </member>
        <member name="F:DotNetNuke.Entities.Content.Taxonomy.VocabularyType.Hierarchy">
            <summary>
            The Vocabulary can have parent or child nodes.
            </summary>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Data.DataService">
            <summary>
            Persistent data of content with DataProvider instance.
            </summary>
            <remarks>
            It's better to use Util.GetDataService instead of create new instance directly.
            </remarks>
            <example>
            <code lang="C#">
            public ContentController() : this(Util.GetDataService())
            {
            }
            public ContentController(IDataService dataService)
            {
                _dataService = dataService;
            }
            </code>
            </example>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.AddContentItem(DotNetNuke.Entities.Content.ContentItem,System.Int32)">
            <summary>
            Adds the content item.
            </summary>
            <param name="contentItem">The content item.</param>
            <param name="createdByUserId">The created by user id.</param>
            <returns>content item id.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.DeleteContentItem(System.Int32)">
            <summary>
            Deletes the content item.
            </summary>
            <param name="contentItemId">The content item ID.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.GetContentItem(System.Int32)">
            <summary>
            Gets the content item.
            </summary>
            <param name="contentItemId">The content item id.</param>
            <returns>data reader.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.GetContentItems(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the content items.
            </summary>
            <param name="contentTypeId">The Id of the Content Type.</param>
            <param name="tabId">The Id of the Tab.</param>
            <param name="moduleId">The Id of the Module.</param>
            <returns>data reader.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.GetContentItemsByTerm(System.String)">
            <summary>
            Gets the content items by term.
            </summary>
            <param name="term">The term.</param>
            <returns>data reader.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.GetContentItemsByContentType(System.Int32)">
            <summary>
            Get a list of content items of the specified content type, <paramref name="contentTypeId"/>.
            </summary>
            <param name="contentTypeId">The type of content items you are searching for</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.GetContentItemsByTabId(System.Int32)">
            <summary>
            Get a list of content items based on TabID (PageID).
            </summary>
            <param name="tabId">The TabID (or "Page ID") that the content items are associated with</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.GetContentItemsByModuleId(System.Int32)">
            <summary>
            Retrieve all content items associated with a articular Module ID, <paramref name="moduleId"/>.
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.GetContentItemsByVocabularyId(System.Int32)">
            <summary>
            Retrieve a list of content items containg terms from the specified Vocabulary ID.
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.GetUnIndexedContentItems">
            <summary>
            Gets the un indexed content items.
            </summary>
            <returns>data reader.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.UpdateContentItem(DotNetNuke.Entities.Content.ContentItem,System.Int32)">
            <summary>
            Updates the content item.
            </summary>
            <param name="contentItem">The content item.</param>
            <param name="createdByUserId">The created by user id.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.AddMetaData(DotNetNuke.Entities.Content.ContentItem,System.String,System.String)">
            <summary>
            Adds the meta data.
            </summary>
            <param name="contentItem">The content item.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.DeleteMetaData(DotNetNuke.Entities.Content.ContentItem,System.String,System.String)">
            <summary>
            Deletes the meta data.
            </summary>
            <param name="contentItem">The content item.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.GetMetaData(System.Int32)">
            <summary>
            Gets the meta data.
            </summary>
            <param name="contentItemId">The content item id.</param>
            <returns>data reader.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.AddContentType(DotNetNuke.Entities.Content.ContentType)">
            <summary>
            Adds the type of the content.
            </summary>
            <param name="contentType">Type of the content.</param>
            <returns>content type id.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.GetContentTypes">
            <summary>
            Gets the content types.
            </summary>
            <returns>data reader.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.UpdateContentType(DotNetNuke.Entities.Content.ContentType)">
            <summary>
            Updates the type of the content.
            </summary>
            <param name="contentType">Type of the content.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.AddScopeType(DotNetNuke.Entities.Content.Taxonomy.ScopeType)">
            <summary>
            Adds the type of the scope.
            </summary>
            <param name="scopeType">Type of the scope.</param>
            <returns>scope type id.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.DeleteScopeType(DotNetNuke.Entities.Content.Taxonomy.ScopeType)">
            <summary>
            Deletes the type of the scope.
            </summary>
            <param name="scopeType">Type of the scope.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.GetScopeTypes">
            <summary>
            Gets the scope types.
            </summary>
            <returns>data reader.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.UpdateScopeType(DotNetNuke.Entities.Content.Taxonomy.ScopeType)">
            <summary>
            Updates the type of the scope.
            </summary>
            <param name="scopeType">Type of the scope.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.AddHeirarchicalTerm(DotNetNuke.Entities.Content.Taxonomy.Term,System.Int32)">
            <summary>
            Adds the heirarchical term.
            </summary>
            <param name="term">The term.</param>
            <param name="createdByUserId">The created by user id.</param>
            <returns>term id.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.AddSimpleTerm(DotNetNuke.Entities.Content.Taxonomy.Term,System.Int32)">
            <summary>
            Adds the simple term.
            </summary>
            <param name="term">The term.</param>
            <param name="createdByUserId">The created by user id.</param>
            <returns>term id.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.DeleteSimpleTerm(DotNetNuke.Entities.Content.Taxonomy.Term)">
            <summary>
            Deletes the simple term.
            </summary>
            <param name="term">The term.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.DeleteHeirarchicalTerm(DotNetNuke.Entities.Content.Taxonomy.Term)">
            <summary>
            Deletes the heirarchical term.
            </summary>
            <param name="term">The term.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.GetTerm(System.Int32)">
            <summary>
            Gets the term.
            </summary>
            <param name="termId">The term id.</param>
            <returns>data reader.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.GetTermUsage(System.Int32)">
            <summary>
            Retrieve term usage data for the specified Term ID, <paramref name="termId"/>.
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.GetTermsByContent(System.Int32)">
            <summary>
            Gets the content of the terms by.
            </summary>
            <param name="contentItemId">The content item id.</param>
            <returns>data reader.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.GetTermsByVocabulary(System.Int32)">
            <summary>
            Gets the terms by vocabulary.
            </summary>
            <param name="vocabularyId">The vocabulary id.</param>
            <returns>data reader.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.RemoveTermsFromContent(DotNetNuke.Entities.Content.ContentItem)">
            <summary>
            Removes the content of the terms from.
            </summary>
            <param name="contentItem">The content item.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.UpdateHeirarchicalTerm(DotNetNuke.Entities.Content.Taxonomy.Term,System.Int32)">
            <summary>
            Updates the heirarchical term.
            </summary>
            <param name="term">The term.</param>
            <param name="lastModifiedByUserId">The last modified by user id.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.UpdateSimpleTerm(DotNetNuke.Entities.Content.Taxonomy.Term,System.Int32)">
            <summary>
            Updates the simple term.
            </summary>
            <param name="term">The term.</param>
            <param name="lastModifiedByUserId">The last modified by user id.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.AddVocabulary(DotNetNuke.Entities.Content.Taxonomy.Vocabulary,System.Int32)">
            <summary>
            Adds the vocabulary.
            </summary>
            <param name="vocabulary">The vocabulary.</param>
            <param name="createdByUserId">The created by user id.</param>
            <returns>Vocabulary id.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.DeleteVocabulary(DotNetNuke.Entities.Content.Taxonomy.Vocabulary)">
            <summary>
            Deletes the vocabulary.
            </summary>
            <param name="vocabulary">The vocabulary.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.GetVocabularies">
            <summary>
            Gets the vocabularies.
            </summary>
            <returns>data reader.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.Data.DataService.UpdateVocabulary(DotNetNuke.Entities.Content.Taxonomy.Vocabulary,System.Int32)">
            <summary>
            Updates the vocabulary.
            </summary>
            <param name="vocabulary">The vocabulary.</param>
            <param name="lastModifiedByUserId">The last modified by user id.</param>
        </member>
        <member name="T:DotNetNuke.Entities.Content.Data.IDataService">
            <summary>
            Interface of DataService.
            </summary>
            <seealso cref="T:DotNetNuke.Entities.Content.Data.DataService"/>
        </member>
        <member name="M:DotNetNuke.Entities.Content.ContentController.GetContentItemsByContentType(DotNetNuke.Entities.Content.ContentType)">
            <summary>Get a list of content items by ContentType.</summary>
        </member>
        <member name="T:DotNetNuke.Entities.Content.ContentItem">
             <summary>
             The ContentItem class which itself inherits from BaseEntityInfo paves the way for easily adding support for taxonomy,
             tagging and other ContentItem dependant features to your DotNetNuke extensions.
             </summary>
             <remarks>
             <para>
             Content Items are a collection of individual pieces of content in a DotNetNuke site. Each content item is associated with a single Content Type.
             </para>
             <para>
             Only modules that implement content items (done so by the module developers) can take advantage of some of its benefits, such as Taxonomy. 
             </para>
             <para>
             Because ContentItem already implements IHydratable, you will not do so in your custom entity class. Instead, 
             you will need to create overrides of the KeyID property and the Fill method already implemented in the ContentItem class. 
             Don't forget to call ContentItem's FillInternal method in your Fill method override.
             </para>
             </remarks>
             <example>
             <code lang="C#">
             [Serializable]
             public class DesktopModuleInfo : ContentItem, IXmlSerializable
             {
            		#region IHydratable Members
            
            		public override void Fill(IDataReader dr)
            		{
            		    DesktopModuleID = Null.SetNullInteger(dr["DesktopModuleID"]);
            		    PackageID = Null.SetNullInteger(dr["PackageID"]);
            		    ModuleName = Null.SetNullString(dr["ModuleName"]);
            		    FriendlyName = Null.SetNullString(dr["FriendlyName"]);
            		    Description = Null.SetNullString(dr["Description"]);
            		    FolderName = Null.SetNullString(dr["FolderName"]);
            		    Version = Null.SetNullString(dr["Version"]);
            		    base.FillInternal(dr);
            		}
            		
            		#endregion
             }
             </code>
             </example>
        </member>
        <member name="P:DotNetNuke.Entities.Content.ContentItem.ContentItemId">
            <summary>
            Gets or sets the content item id.
            </summary>
            <value>
            The content item id.
            </value>
        </member>
        <member name="P:DotNetNuke.Entities.Content.ContentItem.Content">
            <summary>
            Gets or sets the content.
            </summary>
            <value>
            The content.
            </value>
        </member>
        <member name="P:DotNetNuke.Entities.Content.ContentItem.ContentKey">
            <summary>
            Gets or sets the content key.
            </summary>
            <value>
            The content key.
            </value>
        </member>
        <member name="P:DotNetNuke.Entities.Content.ContentItem.ContentTypeId">
            <summary>
            Gets or sets the content type id.
            </summary>
            <value>
            The content type id.
            </value>
            <see cref="T:DotNetNuke.Entities.Content.ContentType"/>
        </member>
        <member name="P:DotNetNuke.Entities.Content.ContentItem.Indexed">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:DotNetNuke.Entities.Content.ContentItem"/> is indexed.
            </summary>
            <value>
              <c>true</c> if indexed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DotNetNuke.Entities.Content.ContentItem.Metadata">
            <summary>
            Gets the metadata.
            </summary>
            <value>metadata collection</value>
        </member>
        <member name="P:DotNetNuke.Entities.Content.ContentItem.ModuleID">
            <summary>
            Gets or sets the module ID.
            </summary>
            <value>
            The module ID.
            </value>
        </member>
        <member name="P:DotNetNuke.Entities.Content.ContentItem.TabID">
            <summary>
            Gets or sets the tab ID.
            </summary>
            <value>
            The tab ID.
            </value>
        </member>
        <member name="P:DotNetNuke.Entities.Content.ContentItem.Terms">
            <summary>
            Gets the terms.
            </summary>
            <value>Terms Collection</value>
        </member>
        <member name="P:DotNetNuke.Entities.Content.ContentItem.ContentTitle">
            <summary>The title of the ContentItem.</summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.ContentItem.Files">
            <summary>
            Files that are attached to this ContentItem.
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.ContentItem.Videos">
            <summary>
            Video files attached to this ContentItem.
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.ContentItem.Images">
            <summary>
            Images associated with this ContentItem.
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Content.ContentItem.StateID">
            <summary>
            Gets or sets the Content Workflow State ID.
            </summary>
            <value>
            The Content Workflow State ID.
            </value>
        </member>
        <member name="M:DotNetNuke.Entities.Content.ContentItem.FillInternal(System.Data.IDataReader)">
            <summary>
            Fills the internal.
            </summary>
            <param name="dr">The data reader contains module information.</param>
            <remarks>
            Please remember to call base.FillInternal or base.Fill method in your Fill method.
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Content.ContentItem.Fill(System.Data.IDataReader)">
            <summary>
            Fill this content object will the information from data reader.
            </summary>
            <param name="dr">The data reader.</param>
            <seealso cref="M:DotNetNuke.Entities.Modules.IHydratable.Fill(System.Data.IDataReader)"/>
        </member>
        <member name="P:DotNetNuke.Entities.Content.ContentItem.KeyID">
            <summary>
            Gets or sets the key ID.
            </summary>
            <value>
            The key ID.
            </value>
            <remarks>
            If you derive class has its own key id, please override this property and set the value to your own key id.
            </remarks>
        </member>
        <member name="T:DotNetNuke.Entities.Content.ContentType">
            <summary>
            Content type of a content item.
            </summary>
            <remarks>
            Content Types, simply put, are a way of telling the framework what module/functionality is associated with a Content Item. 
            Each product (ie. module) that wishes to allow categorization of data (via Taxonomy or Folksonomy) for it's content items
             will likely need to create its own content type. 
            </remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Content.ContentType.ContentTypeId">
            <summary>
            Gets or sets the content type id.
            </summary>
            <value>
            The content type id.
            </value>
        </member>
        <member name="M:DotNetNuke.Entities.Content.ContentType.Fill(System.Data.IDataReader)">
            <summary>
            Fill this content object will the information from data reader.
            </summary>
            <param name="dr">The data reader.</param>
            <seealso cref="M:DotNetNuke.Entities.Modules.IHydratable.Fill(System.Data.IDataReader)"/>
        </member>
        <member name="P:DotNetNuke.Entities.Content.ContentType.KeyID">
            <summary>
            Gets or sets the key ID.
            </summary>
            <value>
            ContentTypeID
            </value>
        </member>
        <member name="M:DotNetNuke.Entities.Content.ContentType.ToString">
            <summary>
            override ToString to return content type
            </summary>
            <returns>
            property ContentType's value.
            </returns>
        </member>
        <member name="T:DotNetNuke.Entities.Content.ContentTypeController">
            <summary>
            ContentTypeController provides the business layer of ContentType.
            </summary>
            <remarks>
            </remarks>
            <example>
            <code lang="C#">
            IContentTypeController typeController = new ContentTypeController();
            ContentType contentType = (from t in typeController.GetContentTypes()
                                       where t.ContentType == "DesktopModule"
                                       select t).SingleOrDefault();
            if(contentType == null)
            {
                contentType = new ContentType {ContentType = "DesktopModule"};
                contentType.ContentTypeId = typeController.AddContentType(contentType);
            }
            </code>
            </example>
        </member>
        <member name="M:DotNetNuke.Entities.Content.ContentTypeController.AddContentType(DotNetNuke.Entities.Content.ContentType)">
            <summary>
            Adds the type of the content.
            </summary>
            <param name="contentType">Type of the content.</param>
            <returns>content type id.</returns>
            <exception cref="T:System.ArgumentNullException">content type is null.</exception>
            <exception cref="T:System.ArgumentException">contentType.ContentType is empty.</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.ContentTypeController.ClearContentTypeCache">
            <summary>
            Clears the content type cache.
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Content.ContentTypeController.DeleteContentType(DotNetNuke.Entities.Content.ContentType)">
            <summary>
            Deletes the type of the content.
            </summary>
            <param name="contentType">Type of the content.</param>
            <exception cref="T:System.ArgumentNullException">content type is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">content type id is less than 0.</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.ContentTypeController.GetContentTypes">
            <summary>
            Gets the content types.
            </summary>
            <returns>content type collection.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.ContentTypeController.UpdateContentType(DotNetNuke.Entities.Content.ContentType)">
            <summary>
            Updates the type of the content.
            </summary>
            <param name="contentType">Type of the content.</param>
            <exception cref="T:System.ArgumentNullException">content type is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">content type id is less than 0.</exception>
            <exception cref="T:System.ArgumentException">contentType.ContentType is empty.</exception>
        </member>
        <member name="T:DotNetNuke.Entities.Content.IContentController">
            <summary>
            IContentController provides the business layer of ContentItem.
            </summary>
            <seealso cref="M:DotNetNuke.Entities.Content.Common.Util.GetContentController"/>
            <example>
            <code lang="C#">
            IContentController contentController = Util.GetContentController();
            desktopModule.Content = desktopModule.FriendlyName;
            desktopModule.Indexed = false;
            desktopModule.ContentTypeId = contentType.ContentTypeId;
            desktopModule.ContentItemId = contentController.AddContentItem(desktopModule);
            </code>
            </example>
        </member>
        <member name="M:DotNetNuke.Entities.Content.IContentController.AddContentItem(DotNetNuke.Entities.Content.ContentItem)">
            <summary>
            Adds the content item.
            </summary>
            <param name="contentItem">The content item.</param>
            <returns>content item id.</returns>
            <exception cref="T:System.ArgumentNullException">content item is null.</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.IContentController.DeleteContentItem(DotNetNuke.Entities.Content.ContentItem)">
            <summary>
            Deletes the content item.
            </summary>
            <param name="contentItem">The content item.</param>
            <exception cref="T:System.ArgumentNullException">content item is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">content item's id less than 0.</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.IContentController.DeleteContentItem(System.Int32)">
            <summary>Delete a ContentItem object by ID.</summary>
            <param name="contentItemId">The ID of the ContentItem object (ContentItemId)</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.IContentController.GetContentItem(System.Int32)">
            <summary>
            Gets the content item.
            </summary>
            <param name="contentItemId">The content item id.</param>
            <returns>content item.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Content item id is less than 0.</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.IContentController.GetContentItemsByTerm(System.String)">
            <summary>Return ContentItems that have the specified term attached.</summary>
            <exception cref="T:System.ArgumentException">Term name is empty.</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.IContentController.GetContentItemsByTerm(DotNetNuke.Entities.Content.Taxonomy.Term)">
            <summary>Return ContentItems that have the specified term attached.</summary>
            <exception cref="T:System.ArgumentException">Term name is empty.</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.IContentController.GetContentItemsByContentType(System.Int32)">
            <summary>
            Get a list of content items by ContentType ID.
            </summary>
            <param name="contentTypeId">The Content Type ID of the content items we want to query</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.IContentController.GetContentItemsByContentType(DotNetNuke.Entities.Content.ContentType)">
            <summary>
            Get a list of content items by ContentType.
            </summary>
            <param name="contentType">The Content Type of the content items we want to query</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.IContentController.GetContentItemsByTerms(System.Collections.Generic.IList{DotNetNuke.Entities.Content.Taxonomy.Term})">
            <summary>
            Return a list of ContentItems that have all of the specified terms attached.
            </summary>
            <param name="terms">A list of terms that should be attached to the ContentItems returned</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.IContentController.GetContentItemsByTerms(System.String[])">
            <summary>Return a list of ContentItems that have all of the specified terms attached.</summary>
        </member>
        <member name="M:DotNetNuke.Entities.Content.IContentController.GetUnIndexedContentItems">
            <summary>
            Gets the un indexed content items.
            </summary>
            <returns>content item collection.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.IContentController.GetContentItemsByModuleId(System.Int32)">
            <summary>
            Retrieve all content items associated with the specified module ID, <paramref name="moduleId"/>.
            </summary>
            <param name="moduleId">The module ID to use in the content item lookup</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.IContentController.GetContentItemsByTabId(System.Int32)">
            <summary>
            Retrieve all content items on the specified page (tab).
            </summary>
            <param name="tabId">The page ID to use in the lookup of content items</param>
        </member>
        <member name="M:DotNetNuke.Entities.Content.IContentController.GetContentItemsByVocabularyId(System.Int32)">
            <summary>
            Get a list of content items tagged with terms from the specified Vocabulary ID.
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Content.IContentController.UpdateContentItem(DotNetNuke.Entities.Content.ContentItem)">
            <summary>
            Updates the content item.
            </summary>
            <param name="contentItem">The content item.</param>
            <exception cref="T:System.ArgumentNullException">content item is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">content item's id less than 0.</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.IContentController.AddMetaData(DotNetNuke.Entities.Content.ContentItem,System.String,System.String)">
            <summary>
            Adds the meta data.
            </summary>
            <param name="contentItem">The content item.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">content item is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">content item's id less than 0.</exception>
            <exception cref="T:System.ArgumentException">Meta name is empty.</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.IContentController.DeleteMetaData(DotNetNuke.Entities.Content.ContentItem,System.String,System.String)">
            <summary>
            Deletes the meta data.
            </summary>
            <param name="contentItem">The content item.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <exception cref="T:System.ArgumentNullException">content item is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">content item's id less than 0.</exception>
            <exception cref="T:System.ArgumentException">Meta name is empty.</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.IContentController.DeleteMetaData(DotNetNuke.Entities.Content.ContentItem,System.String)">
            <summary>
            Similar to DeleteMetaData that requires a value, but this one looks it up for you.
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Content.IContentController.GetMetaData(System.Int32)">
            <summary>
            Gets the meta data.
            </summary>
            <param name="contentItemId">The content item id.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">content item's id less than 0.</exception>
        </member>
        <member name="T:DotNetNuke.Entities.Content.IContentTypeController">
            <summary>
            Interface of ContentTypeController.
            </summary>
            <seealso cref="T:DotNetNuke.Entities.Content.ContentTypeController"/>
        </member>
        <member name="M:DotNetNuke.Entities.Content.IContentTypeController.AddContentType(DotNetNuke.Entities.Content.ContentType)">
            <summary>
            Adds the type of the content.
            </summary>
            <param name="contentType">Type of the content.</param>
            <returns>content type id.</returns>
            <exception cref="T:System.ArgumentNullException">content type is null.</exception>
            <exception cref="T:System.ArgumentException">contentType.ContentType is empty.</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.IContentTypeController.DeleteContentType(DotNetNuke.Entities.Content.ContentType)">
            <summary>
            Deletes the type of the content.
            </summary>
            <param name="contentType">Type of the content.</param>
            <exception cref="T:System.ArgumentNullException">content type is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">content type id is less than 0.</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Content.IContentTypeController.GetContentTypes">
            <summary>
            Gets the content types.
            </summary>
            <returns>content type collection.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Content.IContentTypeController.UpdateContentType(DotNetNuke.Entities.Content.ContentType)">
            <summary>
            Updates the type of the content.
            </summary>
            <param name="contentType">Type of the content.</param>
            <exception cref="T:System.ArgumentNullException">content type is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">content type id is less than 0.</exception>
            <exception cref="T:System.ArgumentException">contentType.ContentType is empty.</exception>
        </member>
        <member name="T:DotNetNuke.Entities.Tabs.Dto.ChangeControlState">
            <summary>
            Class that represents the full state of a tab regarding if versioning and workflow are enabled.
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Tabs.Dto.ChangeControlState.PortalId">
            <summary>
            Gets or sets the portal id.
            </summary>
            <value>
            The portal id.
            </value>
        </member>
        <member name="P:DotNetNuke.Entities.Tabs.Dto.ChangeControlState.TabId">
            <summary>
            Gets or sets the tab id.
            </summary>
            <value>
            The tab id.
            </value>
        </member>
        <member name="P:DotNetNuke.Entities.Tabs.Dto.ChangeControlState.IsChangeControlEnabledForTab">
            <summary>
            Gets if change control is enabled for the tab.
            </summary>
            <value>
            True if versioning or workflow are enabled, false otherwise.
            </value>
        </member>
        <member name="P:DotNetNuke.Entities.Tabs.Dto.ChangeControlState.IsVersioningEnabledForTab">
            <summary>
            Gets if versioning is enabled for the tab.
            </summary>
            <value>
            True if versioning is enabled, false otherwise.
            </value>
        </member>
        <member name="P:DotNetNuke.Entities.Tabs.Dto.ChangeControlState.IsWorkflowEnabledForTab">
            <summary>
            Gets if workflow is enabled for the tab.
            </summary>
            <value>
            True if workflow is enabled, false otherwise.
            </value>
        </member>
        <member name="T:DotNetNuke.Entities.Tabs.ITabChangeSettings">
            <summary>
            Class responsible to provide settings for Tab Changes
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabChangeSettings.IsChangeControlEnabled(System.Int32,System.Int32)">
            <summary>
            Get the status of the tab changes control in a specific tab and its master portal
            </summary>
            <param name="portalId">Portal Id</param>
            <param name="tabId">Tab Id</param>
            <returns>Returns true if changes control is available for both Portal and Tab, false otherwise</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabChangeSettings.GetChangeControlState(System.Int32,System.Int32)">
            <summary>
            Get the full state of the tab changes control in a specific tab and its master portal
            </summary>
            <param name="portalId">Portal Id</param>
            <param name="tabId">Tab Id</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabModulesController.GetTabModules(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Returns an array of Modules well configured to be used into a Skin
            </summary>
            <param name="tab">TabInfo object</param>       
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabModulesController.GetTabModuleSettingsByName(System.String)">
            <summary>
            Gets a collection of all setting values of <see cref="T:DotNetNuke.Entities.Modules.ModuleInfo"/> that contains the
            setting name in its collection of settings.
            </summary>
            <param name="settingName">Name of the setting to look for</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabModulesController.GetTabModuleIdsBySetting(System.String,System.String)">
            <summary>
            Gets a collection of all ID's of <see cref="T:DotNetNuke.Entities.Modules.ModuleInfo"/> that contains the setting name and
            specific value in its collection of settings.
            </summary>
            <param name="settingName">Name of the setting to look for</param>
            <param name="expectedValue">Value of the setting to look for</param>
        </member>
        <member name="T:DotNetNuke.Entities.Tabs.ITabWorkflowSettings">
            <summary>
            This interface is responsible to provide the tab workflow settings
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabWorkflowSettings.GetDefaultTabWorkflowId(System.Int32)">
            <summary>
            This method returns the default tab workflow of the portal
            </summary>
            <param name="portalId">Portal Id</param>
            <remarks>If no default workflow is defined for a portal the method returns the Direct Publish system workflow</remarks>
            <returns>The workflow Id of the portal default workflow</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabWorkflowSettings.SetDefaultTabWorkflowId(System.Int32,System.Int32)">
            <summary>
            This method sets the default workflow for a portal
            </summary>
            <param name="portalId">Portal Id</param>
            <param name="workflowId">Workflow Id</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabWorkflowSettings.SetWorkflowEnabled(System.Int32,System.Boolean)">
            <summary>
            This method enables or disables the tab workflow for the entire portal
            </summary>
            <param name="portalId">Portal Id</param>
            <param name="enabled">true for enable it, false for disable it</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabWorkflowSettings.SetWorkflowEnabled(System.Int32,System.Int32,System.Boolean)">
            <summary>
            This method enables or disables the tab workflow for a specific tab
            </summary>
            <param name="portalId">Portal Id</param>
            <param name="tabId">Tab Id</param>
            <param name="enabled">true for enable it, false for disable it</param>
            <remarks>this won't enable workflow of a tab if the tab workflow is disabled at portal level</remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabWorkflowSettings.IsWorkflowEnabled(System.Int32,System.Int32)">
            <summary>
            The method returns true if the workflow is enabled for a tab
            </summary>
            <param name="portalId">Portal Id</param>
            <param name="tabId">Tab Id</param>
            <returns>True if the workflow is enabled, false otherwise</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabWorkflowSettings.IsWorkflowEnabled(System.Int32)">
            <summary>
            The method returns true is the workflow is enabled at portal level
            </summary>
            <param name="portalId">Portal Id</param>
            <returns>True if the workflow is enabled, false otherwise</returns>
        </member>
        <member name="T:DotNetNuke.Entities.Tabs.TabVersions.Exceptions.DnnTabVersionException">
            <summary>
            Exception to notify error about managing tab versions
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.Exceptions.DnnTabVersionException.#ctor(System.String)">
            <summary>
              Constructs an instance of <see cref = "T:System.ApplicationException" /> class with the specified message.
            </summary>
            <param name = "message">The message to associate with the exception</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.Exceptions.DnnTabVersionException.#ctor(System.String,System.Exception)">
            <summary>
              Constructs an instance of <see cref = "T:System.ApplicationException" /> class with the specified message and
              inner exception.
            </summary>
            <param name = "message">The message to associate with the exception</param>
            <param name = "innerException">The exception which caused this error</param>
        </member>
        <member name="T:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionController">
            <summary>
            Controller interface responsible to manage tab versions
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionController.GetTabVersion(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets a Tab Version object of an existing Tab
            </summary>     
            <param name="tabVersionId">The Tab Version Id to be get</param>        
            <param name="tabId">The Tab Id to be queried</param>        
            <param name="ignoreCache">If true, the method will not use the Caching Storage</param>     
            <returns>TabVersion filled with the specific version data</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionController.GetTabVersions(System.Int32,System.Boolean)">
            <summary>
            Gets all Tab Versions of an existing Tab
            </summary>        
            <param name="tabId">Tha Tab ID to be quiered</param>                
            <param name="ignoreCache">If true, the method will not use the Caching Storage</param>        
            <returns>List of TabVersion objects</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionController.SaveTabVersion(DotNetNuke.Entities.Tabs.TabVersions.TabVersion,System.Int32)">
            <summary>
            Saves a Tab Version object. Adds or updates an existing one
            </summary>        
            <param name="tabVersion">TabVersion object to be saved</param>        
            <param name="createdByUserId">User Id who creates the TabVersion</param>   
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionController.SaveTabVersion(DotNetNuke.Entities.Tabs.TabVersions.TabVersion,System.Int32,System.Int32)">
            <summary>
            Saves a Tab Version object. Adds or updates an existing one
            </summary>        
            <param name="tabVersion">TabVersion object to be saved</param>        
            <param name="createdByUserId">User Id who creates the TabVersion</param>   
            <param name="modifiedByUserId">User Id who modifies the TabVersion</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionController.SaveTabVersion(DotNetNuke.Entities.Tabs.TabVersions.TabVersion)">
            <summary>
            Saves a Tab Version object. Adds or updates an existing one
            </summary>        
            <param name="tabVersion">TabVersion object to be saved</param>        
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionController.CreateTabVersion(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new version for a existing Tab
            </summary>
            <param name="tabId">The Tab Id to be queried</param>
            <param name="createdByUserId">User Id who creates the version</param>
            <param name="isPublished">If true, the version is automatically published</param>
            <returns>TabVersion filled with the new version data</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionController.DeleteTabVersion(System.Int32,System.Int32)">
            <summary>
            Deletes a Tab Version
            </summary>
            <param name="tabId">The Tab Id to be queried</param>
            <param name="tabVersionId">The TabVersion Id to be deleted</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionController.DeleteTabVersionDetailByModule(System.Int32)">
            <summary>
            Deletes a Tab Version details for a module
            </summary>
            <param name="moduleId">The Module Id to be queried</param>
        </member>
        <member name="T:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionDetailController">
            <summary>
            Interface controller responsible to manage the tab version details
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionDetailController.GetTabVersionDetail(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets a Tab Version Detail object of an existing Tab Version
            </summary>     
            <param name="tabVersionDetailId">The Tab Version Detail Id to be get</param>        
            <param name="tabVersionId">The Tab Version Id to be queried</param>        
            <param name="ignoreCache">If true, the method will not use the Caching Storage</param>        
            <returns>TabVersionDetail object filled with specific data</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionDetailController.GetVersionHistory(System.Int32,System.Int32)">
            <summary>
            Get all Tab Version Details of a existing version and earlier
            </summary>
            <param name="tabId">The Tab Id to be queried</param>
            <param name="version">The Tab Id to be queried</param>        
            <returns>List of TabVersionDetail objects</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionDetailController.GetTabVersionDetails(System.Int32,System.Boolean)">
            <summary>
            Gets all TabVersionDetail objects of an existing TabVersion
            </summary>        
            <param name="tabVersionId">Tha TabVersion Id to be quiered</param>                
            <param name="ignoreCache">If true, the method will not use the Caching Storage</param>        
            <returns>List of TabVersionDetail objects</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionDetailController.SaveTabVersionDetail(DotNetNuke.Entities.Tabs.TabVersions.TabVersionDetail)">
            <summary>
            Saves a Tab Version Detail object. Adds or updates an existing one
            </summary>      
            <param name="tabVersionDetail">TabVersionDetail object to be saved</param>        
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionDetailController.SaveTabVersionDetail(DotNetNuke.Entities.Tabs.TabVersions.TabVersionDetail,System.Int32)">
            <summary>
            Saves a TabVersionDetail object. Adds or updates an existing one
            </summary>        
            <param name="tabVersionDetail">TabVersionDetail object to be saved</param>        
            <param name="createdByUserId">User Id who creates the TabVersionDetail</param>        
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionDetailController.SaveTabVersionDetail(DotNetNuke.Entities.Tabs.TabVersions.TabVersionDetail,System.Int32,System.Int32)">
            <summary>
            Saves a TabVersionDetail object. Adds or updates an existing one
            </summary>        
            <param name="tabVersionDetail">TabVersionDetail object to be saved</param>        
            <param name="createdByUserId">User Id who created the TabVersionDetail</param>        
            <param name="modifiedByUserId">User Id who modifies the TabVersionDetail</param>        
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionDetailController.DeleteTabVersionDetail(System.Int32,System.Int32)">
            <summary>
            Deletes a TabVersionDetail
            </summary>
            <param name="tabVersionId">The TabVersion Id to be queried</param>
            <param name="tabVersionDetailId">The TabVersionDetail Id to be deleted</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionDetailController.ClearCache(System.Int32)">
            <summary>
            Clears the tab version cache based on the tab version identifier.
            </summary>
            <param name="tabVersionId">The tab version identifier.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionBuilder.CreateNewVersion(System.Int32,System.Int32)">
            <summary>
            Creates a new Tab Version checking current portal settings
            </summary>        
            <remarks>This method will need the Portal Id from the current context</remarks>
            <param name="tabId">Tab Id whose version will be added</param>
            <param name="createdByUserId">User Id which creates the version</param>
            <returns>TabVersion filled with the new version data</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionBuilder.CreateNewVersion(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new Tab Version 
            </summary>
            <param name="tabId">Tab Id whose version will be added</param>
            <param name="createdByUserId">User Id which creates the version</param>
            <returns>TabVersion filled with the new version data</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionBuilder.Publish(System.Int32,System.Int32,System.Int32)">
            <summary>
            Publish a Tab Version
            </summary>
            <param name="portalId">Portal Id where the version is </param>
            <param name="tabId">Tab Id whose version will be published</param>
            <param name="createdByUserId">User Id which publishes the version</param>        
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionBuilder.Discard(System.Int32,System.Int32)">
            <summary>
            Discards a Tab Version. If the tab only has an unpublished version, the page will keep but with no content and not published.
            </summary>
            <param name="tabId">Tab Id whose version will be discarded </param>
            <param name="createdByUserId">User Id which discards the version</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionBuilder.GetVersionModules(System.Int32,System.Int32)">
            <summary>
            Get all Modules Info associated with an specific version
            </summary>        
            <param name="tabId">Tab Id to be checked</param>
            <param name="versionNumber">Version Number whose modules will be get</param>
            <returns>List of ModuleInfo objects</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionBuilder.GetCurrentVersion(System.Int32,System.Boolean)">
            <summary>
            Get the current pusblished version of the page
            </summary>
            <param name="tabId">The Tab Id to be queried</param>  
            <param name="ignoreCache">If true, the method will not use the Caching Storage</param>  
            <returns>TabVersion filled with the current version data</returns>
            <remarks>If Tab has not a published version yet, it will return null</remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionBuilder.GetUnPublishedVersion(System.Int32)">
            <summary>
            Get the unpublished version or Null if Tab has not any unpublished version
            </summary>
            <param name="tabId"></param>
            <returns>TabVersion filled with the unpublished version data</returns>
            <remarks>If Tab has not an unpublished version yet, it will return null</remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionBuilder.GetUnPublishedVersionModules(System.Int32)">
            <summary>
            Get all ModuleInfo objects associated with the unpublished version of a page.
            </summary>        
            <param name="tabId"></param>
            <returns>List of ModuleInfo objects</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionBuilder.GetCurrentModules(System.Int32)">
            <summary>
            Get all Modules Info associated with the last published version of the page
            </summary>        
            <param name="tabId">Tab Id w</param>
            <returns>List of ModuleInfo objects</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionBuilder.RollBackVesion(System.Int32,System.Int32,System.Int32)">
            <summary>
            Rolls back an existing version
            </summary>
            <param name="tabId">The Tab Id to be queried</param>  
            <param name="createdByUserId">User Id which rolls back the version</param>
            <param name="versionNumber">Version Number of the version to be rolled back</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionBuilder.DeleteVersion(System.Int32,System.Int32,System.Int32)">
            <summary>
            Deletes an existing Tab Version
            </summary>
            <param name="tabId">The Tab Id to be queried</param>  
            <param name="createdByUserId">User Id which deletes the version</param>
            <param name="version">Version Number of the version to be deleted</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionBuilder.SetupFirstVersionForExistingTab(System.Int32,System.Int32)">
            <summary>
            Setup a first version for existing tab with modules. This method is used to create version 1 for pages created when versioning was not enabled
            </summary>
            <param name="portalId">portalId</param>
            <param name="tabId">tabId</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionBuilder.GetModuleContentLatestVersion(DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            Get the latest version or 1 if module is not versionable
            </summary>
            <param name="module">The ModuleInfo to be queried</param>  
            <returns>The latest version of the module</returns>
        </member>
        <member name="T:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionSettings">
            <summary>
            Class responsible to provide settings for Tab Versioning
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionSettings.GetMaxNumberOfVersions(System.Int32)">
            <summary>
            Get the maximum number of version that the portal will kept for a tab
            </summary>
            <param name="portalId">Portal Id</param>
            <returns>Max number of version</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionSettings.SetMaxNumberOfVersions(System.Int32,System.Int32)">
            <summary>
            Set the maximum number of version that the portal will kept for a tab
            </summary>
            <param name="portalId">Portal Id</param>
            <param name="maxNumberOfVersions">Max number of version</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionSettings.SetEnabledVersioningForPortal(System.Int32,System.Boolean)">
            <summary>
            Set the status of the tab versioning for the portal
            </summary>
            <param name="portalId">Portal Id</param>
            <param name="enabled">true for enable it, false otherwise</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionSettings.SetEnabledVersioningForTab(System.Int32,System.Boolean)">
            <summary>
            Set the status of the tab versioning for a tab
            </summary>
            <param name="tabId">Tab Id</param>
            <param name="enabled">true for enable it, false otherwise</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionSettings.IsVersioningEnabled(System.Int32)">
            <summary>
            Get the status of the tab versioning for the portal
            </summary>
            <param name="portalId">Portal Id</param>
            <returns>Returns true if tab versioning is enabled for the portal, false otherwise</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionSettings.IsVersioningEnabled(System.Int32,System.Int32)">
            <summary>
            Get the status of the tab versioning for an specific tab of the portal.
            </summary>
            <remarks>
            If versioning is disabled at portal level, the versioning for tabs will be disabled too.
            </remarks>
            <param name="portalId">Portal Id</param>
            <param name="tabId">Tab Id to be checked</param>
            <returns>Returns true if tab versioning is enabled for the portal and for the tab, false otherwise</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.ITabVersionSettings.GetTabVersionQueryStringParameter(System.Int32)">
            <summary>
            Get the query string parameter name to especify a Tab Version using the version number (i.e.: ?version=1)
            </summary>
            <param name="portalId">Portal Id</param>
            <returns>Query string parameter name</returns>
        </member>
        <member name="T:DotNetNuke.Entities.Tabs.TabVersions.TabVersion">
            <summary>
            Class to represent a Tab Version object
            </summary>    
        </member>
        <member name="P:DotNetNuke.Entities.Tabs.TabVersions.TabVersion.TabVersionId">
            <summary>
            Id of the TabVersion object
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Tabs.TabVersions.TabVersion.TabId">
            <summary>
            Id of the related Tab
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Tabs.TabVersions.TabVersion.Version">
            <summary>
            Version number of the TabVersion
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Tabs.TabVersions.TabVersion.TimeStamp">
            <summary>
            Timestamp of the version
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Tabs.TabVersions.TabVersion.IsPublished">
            <summary>
            True if the version is published. False if it is not published yet
            </summary>
        </member>
        <member name="T:DotNetNuke.Entities.Tabs.TabVersions.TabVersionDetail">
            <summary>
            Class to represent a Tab Version Detail object. Each detail is related with a TabVersion and also with a ModuleInfo
            </summary>    
        </member>
        <member name="P:DotNetNuke.Entities.Tabs.TabVersions.TabVersionDetail.TabVersionDetailId">
            <summary>
            Id of TabVersionDetail
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Tabs.TabVersions.TabVersionDetail.TabVersionId">
            <summary>
            Id of the related TabVersion master of the detail
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Tabs.TabVersions.TabVersionDetail.ModuleId">
            <summary>
            Id of the Module which tracks the detail
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Tabs.TabVersions.TabVersionDetail.ModuleVersion">
            <summary>
            Version number of the module when the detail was tracked
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Tabs.TabVersions.TabVersionDetail.PaneName">
            <summary>
            Pane name where the Module was when the detail was tracked
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Tabs.TabVersions.TabVersionDetail.ModuleOrder">
            <summary>
            Order into the pane where the Module was when the detail was tracked
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Tabs.TabVersions.TabVersionDetail.Action">
            <summary>
            Action which provoked the detail
            </summary>
        </member>
        <member name="T:DotNetNuke.Entities.Tabs.TabVersions.TabVersionDetailAction">
            <summary>
            This enum represents the possible list of action that can be done in a Tab Version (i.e.: add module, modified module, deleted module, reset (restore version))
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.TabVersionTracker.TrackModuleAddition(DotNetNuke.Entities.Modules.ModuleInfo,System.Int32,System.Int32)">
            <summary>
            Tracks a version detail when a module is added to a page
            </summary>
            <param name="module">Module which tracks the version detail</param>
            <param name="moduleVersion">Version number corresponding to the version detail</param>
            <param name="userId">User Id who provokes the version detail</param>  
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.TabVersionTracker.TrackModuleModification(DotNetNuke.Entities.Modules.ModuleInfo,System.Int32,System.Int32)">
            <summary>
            Tracks a version detail when a module is modified on a page
            </summary>
            <param name="module">Module which tracks the version detail</param>
            <param name="moduleVersion">Version number corresponding to the version detail</param>
            <param name="userId">User Id who provokes the version detail</param>  
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.TabVersionTracker.TrackModuleDeletion(DotNetNuke.Entities.Modules.ModuleInfo,System.Int32,System.Int32)">
            <summary>
            Tracks a version detail when a module is deleted from a page
            </summary>
            <param name="module">Module which tracks the version detail</param>
            <param name="moduleVersion">Version number corresponding to the version detail</param>
            <param name="userId">User Id who provokes the version detail</param>  
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.TabVersionTracker.TrackModuleCopy(DotNetNuke.Entities.Modules.ModuleInfo,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tracks a version detail when a module is copied from an exisitng page
            </summary>
            <param name="module">Module which tracks the version detail</param>
            <param name="moduleVersion">Version number corresponding to the version detail</param>
            <param name="originalTabId">Tab Id where the module originally is</param>
            /// <param name="userId">User Id who provokes the version detail</param>  
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.TabVersionTracker.TrackModuleUncopy(DotNetNuke.Entities.Modules.ModuleInfo,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tracks a version detail when a copied module is deleted from an exisitng page
            </summary>
            <param name="module">Module which tracks the version detail</param>
            <param name="moduleVersion">Version number corresponding to the version detail</param>
            <param name="originalTabId">Tab Id where the module originally is</param>
            <param name="userId">User Id who provokes the version detail</param>  
        </member>
        <member name="T:DotNetNuke.Entities.Tabs.TabVersions.TabVersionUtils">
            <summary>
            This Class ofers a set of methods useful and reusable along the Tab Version API
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.TabVersionUtils.TryGetUrlVersion(System.Int32@)">
            <summary>
            Try to get the version number from the current URL
            </summary>
            <param name="versionInt">Version number obtained. Null Integer if it is not available</param>
            <returns>True if version number is available and valid from URL. Otherwise, False</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.TabVersionUtils.CanSeeVersionedPages">
            <summary>
            Check if current user can see the current page
            </summary>
            <returns>True if current user can see the current page. Otherwise, False</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabVersions.TabVersionUtils.CanSeeVersionedPages(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Check if current user can see a specific page
            </summary>
            <param name="tab"> The TabInfo to be checked</param>
            <returns>True if current user can see the specific page. Otherwise, False</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabChangeTracker.TrackModuleAddition(DotNetNuke.Entities.Modules.ModuleInfo,System.Int32,System.Int32)">
            <summary>
            Tracks a change when a module is added to a page
            </summary>
            <param name="module">Module which tracks the change</param>
            <param name="moduleVersion">Version number corresponding to the change</param>
            <param name="userId">User Id who provokes the change</param>        
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabChangeTracker.TrackModuleModification(DotNetNuke.Entities.Modules.ModuleInfo,System.Int32,System.Int32)">
            <summary>
            Tracks a change when a module is modified on a page
            </summary>
            <param name="module">Module which tracks the change</param>
            <param name="moduleVersion">Version number corresponding to the change</param>
            <param name="userId">User Id who provokes the change</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabChangeTracker.TrackModuleDeletion(DotNetNuke.Entities.Modules.ModuleInfo,System.Int32,System.Int32)">
            <summary>
            Tracks a change when a module is deleted from a page
            </summary>
            <param name="module">Module which tracks the change</param>
            <param name="moduleVersion">Version number corresponding to the change</param>
            <param name="userId">User Id who provokes the change</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabChangeTracker.TrackModuleCopy(DotNetNuke.Entities.Modules.ModuleInfo,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tracks a change when a module is copied from an exisitng page
            </summary>
            <param name="module">Module which tracks the change</param>
            <param name="moduleVersion">Version number corresponding to the change</param>
            <param name="originalTabId">Tab Id where the module originally is</param>
            <param name="userId">User Id who provokes the change</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabChangeTracker.TrackModuleUncopy(DotNetNuke.Entities.Modules.ModuleInfo,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tracks a change when a copied module is deleted from an exisitng page
            </summary>
            <param name="module">Module which tracks the change</param>
            <param name="moduleVersion">Version number corresponding to the change</param>
            <param name="originalTabId">Tab Id where the module originally is</param>       
            <param name="userId">User Id who provokes the change</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabWorkflowTracker.TrackModuleAddition(DotNetNuke.Entities.Modules.ModuleInfo,System.Int32,System.Int32)">
            <summary>
            Tracks a workflow instance when a module is added to a page
            </summary>
            <param name="module">Module which tracks the workflow instance</param>
            <param name="moduleVersion">Version number corresponding to the module</param>
            <param name="userId">User Id related with the workflow instance</param>  
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabWorkflowTracker.TrackModuleModification(DotNetNuke.Entities.Modules.ModuleInfo,System.Int32,System.Int32)">
            <summary>
            Tracks a workflow instance when a module is modified on a page
            </summary>
            <param name="module">Module which tracks the workflow instance</param>
            <param name="moduleVersion">Version number corresponding to the module</param>
            <param name="userId">User Id related with the workflow instance</param>  
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabWorkflowTracker.TrackModuleDeletion(DotNetNuke.Entities.Modules.ModuleInfo,System.Int32,System.Int32)">
            <summary>
            Tracks a workflow instance when a module is deleted from a page
            </summary>
            <param name="module">Module which tracks the workflow instance</param>
            <param name="moduleVersion">Version number corresponding to the module</param>
            <param name="userId">User Id related with the workflow instance</param>  
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabWorkflowTracker.TrackModuleCopy(DotNetNuke.Entities.Modules.ModuleInfo,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tracks a workflow instance when a module is copied from an exisitng page
            </summary>
            <param name="module">Module which tracks the workflow instance</param>
            <param name="moduleVersion">Version number corresponding to the module</param>
            <param name="originalTabId">Tab Id where the module originally is</param>
            <param name="userId">User Id related with the workflow instance</param>  
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabWorkflowTracker.TrackModuleUncopy(DotNetNuke.Entities.Modules.ModuleInfo,System.Int32,System.Int32,System.Int32)">
            <summary>
            Tracks a workflow instance when a copied module is deleted from an exisitng page
            </summary>
            <param name="module">Module which tracks the workflow instance</param>
            <param name="moduleVersion">Version number corresponding to the module</param>
            <param name="originalTabId">Tab Id where the module originally is</param>
            <param name="userId">User Id related with the workflow instance</param> 
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabPublishingController.IsTabPublished(System.Int32,System.Int32)">
            <summary>
            Check if a page is published or not.
            </summary>
            <param name="tabID">Tha tab Id</param>
            <param name="portalID">The portal ID where the tab is</param>        
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabPublishingController.SetTabPublishing(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Set a page as published or unpublished
            </summary>
            <param name="tabID">The tab ID</param>
            <param name="portalID">The portal ID where the tab is</param>
            <param name="publish">A boolean value where True means the page is going to be published and otherwise unpublished</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabPublishingController.CanPublishingBePerformed(System.Int32,System.Int32)">
            <summary>
            Check if Publish/Unpublish page actions can be performed
            </summary>
            <param name="tabID">The tab ID</param>
            <param name="portalID">The portal ID where the tab is</param>
        </member>
        <member name="T:DotNetNuke.Entities.Tabs.TabAliasSkinInfo">
            <summary>
            Class to represent a TabAliasSkinInfo object
            </summary>
        </member>
        <member name="T:DotNetNuke.Entities.Tabs.TabUrlInfo">
            <summary>
            Class to represent a TabUrl object
            </summary>
        </member>
        <member name="T:DotNetNuke.Entities.Tabs.ITabController">
            <summary>
            Do not implement.  This interface is only implemented by the DotNetNuke core framework. Outside the framework it should used as a type and for unit test purposes only.
            There is no guarantee that this interface will not change.
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.AddMissingLanguages(System.Int32,System.Int32)">
            <summary>
            Adds localized copies of the page in all missing languages
            </summary>
            <param name="portalId"></param>
            <param name="tabId"></param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.AddTab(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Adds a tab
            </summary>
            <param name="tab">The tab to be added</param>
            <remarks>The tab is added to the end of the current Level.</remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.AddTab(DotNetNuke.Entities.Tabs.TabInfo,System.Boolean)">
            <summary>
            Adds a tab
            </summary>
            <param name="tab">The tab to be added</param>
            <param name="includeAllTabsModules">Flag that indicates whether to add the "AllTabs"
            Modules</param>
            <remarks>The tab is added to the end of the current Level.</remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.AddTabAfter(DotNetNuke.Entities.Tabs.TabInfo,System.Int32)">
            <summary>
            Adds a tab after the specified tab
            </summary>
            <param name="tab">The tab to be added</param>
            <param name="afterTabId">Id of the tab after which this tab is added</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.AddTabBefore(DotNetNuke.Entities.Tabs.TabInfo,System.Int32)">
            <summary>
            Adds a tab before the specified tab
            </summary>
            <param name="objTab">The tab to be added</param>
            <param name="beforeTabId">Id of the tab before which this tab is added</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.ClearCache(System.Int32)">
            <summary>
            Clears tabs and portal cache for the specific portal.
            </summary>
            <param name="portalId">The portal id.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.ConvertTabToNeutralLanguage(System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Converts one single tab to a neutral culture
            clears the tab cache optionally
            </summary>
            <param name="portalId"></param>
            <param name="tabId"></param>
            <param name="cultureCode"></param>
            <param name="clearCache"></param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.CreateContentItem(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Creates content item for the tab..
            </summary>
            <param name="tab">The updated tab.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.CreateLocalizedCopies(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Creates the localized copies.
            </summary>
            <param name="originalTab">The original tab.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.CreateLocalizedCopy(DotNetNuke.Entities.Tabs.TabInfo,DotNetNuke.Services.Localization.Locale,System.Boolean)">
            <summary>
            Creates the localized copy.
            </summary>
            <param name="originalTab">The original tab.</param>
            <param name="locale">The locale.</param>
            <param name="clearCache">Clear the cache?</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.DeleteTab(System.Int32,System.Int32)">
            <summary>
            Deletes a tab permanently from the database
            </summary>
            <param name="tabId">TabId of the tab to be deleted</param>
            <param name="portalId">PortalId of the portal</param>
            <remarks>
            The tab will not delete if it has child tab(s).
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.DeleteTab(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Deletes a tab permanently from the database
            </summary>
            <param name="tabId">The tab id.</param>
            <param name="portalId">The portal id.</param>
            <param name="deleteDescendants">if set to <c>true</c> will delete all child tabs.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.DeleteTabSetting(System.Int32,System.String)">
            <summary>
            Delete a Setting of a tab instance
            </summary>
            <param name="tabId">ID of the affected tab</param>
            <param name="settingName">Name of the setting to be deleted</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.DeleteTabSettings(System.Int32)">
            <summary>
            Delete all Settings of a tab instance
            </summary>
            <param name="tabId">ID of the affected tab</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.DeleteTabUrl(DotNetNuke.Entities.Tabs.TabUrlInfo,System.Int32,System.Boolean)">
            <summary>
            Delete a taburl 
            </summary>
            <param name="tabUrl">the taburl</param>
            <param name="portalId">the portal</param>
            <param name="clearCache">whether to clear the cache</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.DeleteTranslatedTabs(System.Int32,System.String,System.Boolean)">
            <summary>
            Deletes all tabs for a specific language. Double checks if we are not deleting pages for the default language
            Clears the tab cache optionally
            </summary>
            <param name="portalId"></param>
            <param name="cultureCode"></param>
            <param name="clearCache"></param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.EnsureNeutralLanguage(System.Int32,System.String,System.Boolean)">
            <summary>
            Reverts page culture back to Neutral (Null), to ensure a non localized site
            clears the tab cache optionally
            </summary>
            <param name="portalId"></param>
            <param name="cultureCode"></param>
            <param name="clearCache"></param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.GetAliasSkins(System.Int32,System.Int32)">
            <summary>
            Get the list of skins per alias at tab level
            </summary>
            <param name="tabId">the tab id</param>
            <param name="portalId">the portal id</param>
            <returns>list of TabAliasSkinInfo</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.GetCustomAliases(System.Int32,System.Int32)">
            <summary>
            Get the list of custom aliases associated with a page (tab)
            </summary>
            <param name="tabId">the tab id</param>
            <param name="portalId">the portal id</param>
            <returns>dictionary of tabid and aliases</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.GetTab(System.Int32,System.Int32)">
            <summary>
            Gets the tab.
            </summary>
            <param name="tabId">The tab id.</param>
            <param name="portalId">The portal id.</param>
            <returns>tab info.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.GetTab(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the tab.
            </summary>
            <param name="tabId">The tab id.</param>
            <param name="portalId">The portal id.</param>
            <param name="ignoreCache">if set to <c>true</c> will get tab info directly from database.</param>
            <returns>tab info.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.GetTabByCulture(System.Int32,System.Int32,DotNetNuke.Services.Localization.Locale)">
            <summary>
            Gets the tab by culture.
            </summary>
            <param name="tabId">The tab id.</param>
            <param name="portalId">The portal id.</param>
            <param name="locale">The locale.</param>
            <returns>tab info.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.GetTabByName(System.String,System.Int32)">
            <summary>
            Gets the name of the tab by name.
            </summary>
            <param name="tabName">Name of the tab.</param>
            <param name="portalId">The portal id.</param>
            <returns>tab info.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.GetTabByName(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the name of the tab by name and parent id.
            </summary>
            <param name="tabName">Name of the tab.</param>
            <param name="portalId">The portal id.</param>
            <param name="parentId">The parent id.</param>
            <returns>tab info</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.GetTabsByModuleID(System.Int32)">
            <summary>
            Gets the tabs which use the module.
            </summary>
            <param name="moduleID">The module ID.</param>
            <returns>tab collection</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.GetTabsByPackageID(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the tabs which use the package.
            </summary>
            <param name="portalID">The portal ID.</param>
            <param name="packageID">The package ID.</param>
            <param name="forHost">if set to <c>true</c> [for host].</param>
            <returns>tab collection</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.GetUserTabsByPortal(System.Int32)">
            <summary>
            Gets the tabs by portal.
            </summary>
            <param name="portalId">The portal id.</param>
            <returns>tab collection</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.GetTabsByPortal(System.Int32)">
            <summary>
            Get the actual visible tabs for a given portal id. 
            System Tabs and Admin Tabs are excluded from the result set.
            </summary>
            <param name="portalId"></param>
            
            <returns>tab collection</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.GetTabsByTabModuleID(System.Int32)">
            <summary>
            Gets the tabs which use the module.
            </summary>
            <param name="tabModuleId">The tabmodule ID.</param>
            <returns>tab collection</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.GetTabSettings(System.Int32)">
            <summary>
            read all settings for a tab from TabSettings table
            </summary>
            <param name="tabId">ID of the Tab to query</param>
            <returns>
            (cached) hashtable containing all settings
            </returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.GetTabUrls(System.Int32,System.Int32)">
            <summary>
            Get the list of url's associated with a page (tab)
            </summary>
            <param name="tabId">the tab id</param>
            <param name="portalId">the portal id</param>
            <returns>list of urls associated with a tab</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.GiveTranslatorRoleEditRights(DotNetNuke.Entities.Tabs.TabInfo,System.Collections.Generic.Dictionary{System.Int32,DotNetNuke.Entities.Users.UserInfo})">
            <summary>
            Gives the translator role edit rights.
            </summary>
            <param name="localizedTab">The localized tab.</param>
            <param name="users">The users.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.HasMissingLanguages(System.Int32,System.Int32)">
            <summary>
            Returns True if a page is missing a translated version in at least one other language
            </summary>
            <param name="portalId"></param>
            <param name="tabId"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.IsTabPublished(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Checks whether the tab is published. Published means: view permissions of tab are identical to the DefaultLanguageTab
            </summary>
            <param name="publishTab">The tab that is checked</param>
            <returns>true if tab is published</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.IsHostOrAdminPage(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Determines whether is host or admin tab.
            </summary>
            <param name="tab">The tab info.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.LocalizeTab(DotNetNuke.Entities.Tabs.TabInfo,DotNetNuke.Services.Localization.Locale)">
            <summary>
            Localizes the tab.
            </summary>
            <param name="originalTab">The original tab.</param>
            <param name="locale">The locale.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.LocalizeTab(DotNetNuke.Entities.Tabs.TabInfo,DotNetNuke.Services.Localization.Locale,System.Boolean)">
            <summary>
            Localizes the tab, with optional clear cache
            </summary>
            <param name="originalTab"></param>
            <param name="locale"></param>
            <param name="clearCache"></param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.MoveTabAfter(DotNetNuke.Entities.Tabs.TabInfo,System.Int32)">
            <summary>
            Moves the tab after a specific tab.
            </summary>
            <param name="tab">The tab want to move.</param>
            <param name="afterTabId">will move objTab after this tab.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.MoveTabBefore(DotNetNuke.Entities.Tabs.TabInfo,System.Int32)">
            <summary>
            Moves the tab before a specific tab.
            </summary>
            <param name="tab">The tab want to move.</param>
            <param name="beforeTabId">will move objTab before this tab.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.MoveTabToParent(DotNetNuke.Entities.Tabs.TabInfo,System.Int32)">
            <summary>
            Moves the tab to a new parent
            </summary>
            <param name="tab">The tab want to move.</param>
            <param name="parentId">will move tab to this parent.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.PopulateBreadCrumbs(DotNetNuke.Entities.Tabs.TabInfo@)">
            <summary>
            Populates the bread crumbs.
            </summary>
            <param name="tab">The tab.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.PopulateBreadCrumbs(System.Int32,System.Collections.ArrayList@,System.Int32)">
            <summary>
            Populates the bread crumbs.
            </summary>
            <param name="portalID">The portal ID.</param>
            <param name="breadCrumbs">The bread crumbs.</param>
            <param name="tabID">The tab ID.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.PublishTab(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Publishes the tab. Set the VIEW permissions to All Users
            </summary>
            <param name="publishTab">The publish tab.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.PublishTabs(System.Collections.Generic.List{DotNetNuke.Entities.Tabs.TabInfo})">
            <summary>
            Publishes the tab. Set the VIEW permissions to All Users
            </summary>
            <param name="tabs">The tabs.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.MarkAsPublished(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            It marks a page as published at least once
            </summary>
            <param name="tab">The Tab to be marked</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.RestoreTab(DotNetNuke.Entities.Tabs.TabInfo,DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>
            Restores the tab.
            </summary>
            <param name="tab">The obj tab.</param>
            <param name="portalSettings">The portal settings.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.SaveTabUrl(DotNetNuke.Entities.Tabs.TabUrlInfo,System.Int32,System.Boolean)">
            <summary>
            Save url information for a page (tab)
            </summary>
            <param name="tabUrl">the tab url</param>
            <param name="portalId">the portal id</param>
            <param name="clearCache">whether to clear the cache</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.SoftDeleteTab(System.Int32,DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>
            Soft Deletes the tab by setting the IsDeleted property to true.
            </summary>
            <param name="tabId">The tab id.</param>
            <param name="portalSettings">The portal settings.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.UpdateTab(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Updates the tab to databse.
            </summary>
            <param name="updatedTab">The updated tab.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.UpdateTabSetting(System.Int32,System.String,System.String)">
            <summary>
            Adds or updates a tab's setting value
            </summary>
            <param name="tabId">ID of the tab to update</param>
            <param name="settingName">name of the setting property</param>
            <param name="settingValue">value of the setting (String).</param>
            <remarks>empty SettingValue will remove the setting, if not preserveIfEmpty is true</remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.UpdateTranslationStatus(DotNetNuke.Entities.Tabs.TabInfo,System.Boolean)">
            <summary>
            Updates the translation status.
            </summary>
            <param name="localizedTab">The localized tab.</param>
            <param name="isTranslated">if set to <c>true</c> means the tab has already been translated.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.ITabController.RefreshCache(System.Int32,System.Int32)">
            <summary>
            Refresh the tabinfo in cache object of portal tabs collection, use this instead of clear the whole cache to improve performance.
            </summary>
            <param name="portalId"></param>
            <param name="tabId"></param>
        </member>
        <member name="T:DotNetNuke.Entities.Tabs.TabCollection">
            <summary>
            Represents the collection of Tabs for a portal
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:DotNetNuke.Entities.Tabs.TabController">
            <summary>
            TabController provides all operation to tabinfo.
            </summary>
            <remarks>
            Tab is equal to page in DotNetNuke.
            Tabs will be a sitemap for a poatal, and every request at first need to check whether there is valid tab information
            include in the url, if not it will use default tab to display information.
            </remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Tabs.TabController.CurrentPage">
            <summary>
            Gets the current page in current http request.
            </summary>
            <value>Current Page Info.</value>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.UpdateContentItem(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            update content item for the tab when tab name changed.
            </summary>
            <param name="tab">The updated tab.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.AddMissingLanguages(System.Int32,System.Int32)">
            <summary>
            Adds localized copies of the page in all missing languages
            </summary>
            <param name="portalId"></param>
            <param name="tabId"></param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.AddTab(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Adds a tab
            </summary>
            <param name="tab">The tab to be added</param>
            <remarks>The tab is added to the end of the current Level.</remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.AddTab(DotNetNuke.Entities.Tabs.TabInfo,System.Boolean)">
            <summary>
            Adds a tab
            </summary>
            <param name="tab">The tab to be added</param>
            <param name="includeAllTabsModules">Flag that indicates whether to add the "AllTabs"
            Modules</param>
            <remarks>The tab is added to the end of the current Level.</remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.AddTabAfter(DotNetNuke.Entities.Tabs.TabInfo,System.Int32)">
            <summary>
            Adds a tab after the specified tab
            </summary>
            <param name="tab">The tab to be added</param>
            <param name="afterTabId">Id of the tab after which this tab is added</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.AddTabBefore(DotNetNuke.Entities.Tabs.TabInfo,System.Int32)">
            <summary>
            Adds a tab before the specified tab
            </summary>
            <param name="objTab">The tab to be added</param>
            <param name="beforeTabId">Id of the tab before which this tab is added</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.ClearCache(System.Int32)">
            <summary>
            Clears tabs and portal cache for the specific portal.
            </summary>
            <param name="portalId">The portal id.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.ConvertTabToNeutralLanguage(System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>
            Converts one single tab to a neutral culture
            clears the tab cache optionally
            </summary>
            <param name="portalId"></param>
            <param name="tabId"></param>
            <param name="cultureCode"></param>
            <param name="clearCache"></param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.CreateContentItem(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Creates content item for the tab..
            </summary>
            <param name="tab">The updated tab.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.CreateLocalizedCopies(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Creates the localized copies.
            </summary>
            <param name="originalTab">The original tab.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.CreateLocalizedCopy(DotNetNuke.Entities.Tabs.TabInfo,DotNetNuke.Services.Localization.Locale,System.Boolean)">
            <summary>
            Creates the localized copy.
            </summary>
            <param name="originalTab">The original tab.</param>
            <param name="locale">The locale.</param>
            <param name="clearCache">Clear the cache?</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.DeleteTab(System.Int32,System.Int32)">
            <summary>
            Deletes a tab permanently from the database
            </summary>
            <param name="tabId">TabId of the tab to be deleted</param>
            <param name="portalId">PortalId of the portal</param>
            <remarks>
            The tab will not delete if it has child tab(s).
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.DeleteTab(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Deletes a tab permanently from the database
            </summary>
            <param name="tabId">The tab id.</param>
            <param name="portalId">The portal id.</param>
            <param name="deleteDescendants">if set to <c>true</c> will delete all child tabs.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.DeleteTabSetting(System.Int32,System.String)">
            <summary>
            Delete a Setting of a tab instance
            </summary>
            <param name="tabId">ID of the affected tab</param>
            <param name="settingName">Name of the setting to be deleted</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.DeleteTabSettings(System.Int32)">
            <summary>
            Delete all Settings of a tab instance
            </summary>
            <param name="tabId">ID of the affected tab</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.DeleteTabUrl(DotNetNuke.Entities.Tabs.TabUrlInfo,System.Int32,System.Boolean)">
            <summary>
            Delete a taburl 
            </summary>
            <param name="tabUrl">the taburl</param>
            <param name="portalId">the portal</param>
            <param name="clearCache">whether to clear the cache</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.DeleteTranslatedTabs(System.Int32,System.String,System.Boolean)">
            <summary>
            Deletes all tabs for a specific language. Double checks if we are not deleting pages for the default language
            Clears the tab cache optionally
            </summary>
            <param name="portalId"></param>
            <param name="cultureCode"></param>
            <param name="clearCache"></param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.EnsureNeutralLanguage(System.Int32,System.String,System.Boolean)">
            <summary>
            Reverts page culture back to Neutral (Null), to ensure a non localized site
            clears the tab cache optionally
            </summary>
            <param name="portalId"></param>
            <param name="cultureCode"></param>
            <param name="clearCache"></param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.GetAliasSkins(System.Int32,System.Int32)">
            <summary>
            Get the list of skins per alias at tab level
            </summary>
            <param name="tabId">the tab id</param>
            <param name="portalId">the portal id</param>
            <returns>list of TabAliasSkinInfo</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.GetCustomAliases(System.Int32,System.Int32)">
            <summary>
            Get the list of custom aliases associated with a page (tab)
            </summary>
            <param name="tabId">the tab id</param>
            <param name="portalId">the portal id</param>
            <returns>dictionary of tabid and aliases</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.GetTab(System.Int32,System.Int32)">
            <summary>
            Gets the tab.
            </summary>
            <param name="tabId">The tab id.</param>
            <param name="portalId">The portal id or <see cref="P:DotNetNuke.Common.Utilities.Null.NullInteger" />.</param>
            <returns>tab info.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.GetTab(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the tab.
            </summary>
            <param name="tabId">The tab id.</param>
            <param name="portalId">The portal id or <see cref="P:DotNetNuke.Common.Utilities.Null.NullInteger" />.</param>
            <param name="ignoreCache">if set to <c>true</c> will get tab info directly from database.</param>
            <returns>tab info.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.GetTabByCulture(System.Int32,System.Int32,DotNetNuke.Services.Localization.Locale)">
            <summary>
            Gets the tab by culture.
            </summary>
            <param name="tabId">The tab id.</param>
            <param name="portalId">The portal id.</param>
            <param name="locale">The locale.</param>
            <returns>tab info.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.GetTabByName(System.String,System.Int32)">
            <summary>
            Gets the name of the tab by name.
            </summary>
            <param name="tabName">Name of the tab.</param>
            <param name="portalId">The portal id.</param>
            <returns>tab info.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.GetTabByName(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the name of the tab by name and parent id.
            </summary>
            <param name="tabName">Name of the tab.</param>
            <param name="portalId">The portal id.</param>
            <param name="parentId">The parent id.</param>
            <returns>tab info</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.GetTabsByModuleID(System.Int32)">
            <summary>
            Gets the tabs which use the module.
            </summary>
            <param name="moduleID">The module ID.</param>
            <returns>tab collection</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.GetTabsByTabModuleID(System.Int32)">
            <summary>
            Gets the tabs which use the module.
            </summary>
            <param name="tabModuleId">The tabmodule ID.</param>
            <returns>tab collection</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.GetTabsByPackageID(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the tabs which use the package.
            </summary>
            <param name="portalID">The portal ID.</param>
            <param name="packageID">The package ID.</param>
            <param name="forHost">if set to <c>true</c> [for host].</param>
            <returns>tab collection</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.GetTabsByPortal(System.Int32)">
            <summary>
            Gets the tabs by portal.
            </summary>
            <param name="portalId">The portal id.</param>
            <returns>tab collection</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.GetUserTabsByPortal(System.Int32)">
            <summary>
            Get the actual visible tabs for a given portal id. 
            System Tabs and Admin Tabs are excluded from the result set.
            </summary>
            <param name="portalId"></param>
            
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.GetTabSettings(System.Int32)">
            <summary>
            read all settings for a tab from TabSettings table
            </summary>
            <param name="tabId">ID of the Tab to query</param>
            <returns>
            (cached) hashtable containing all settings
            </returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.GetTabUrls(System.Int32,System.Int32)">
            <summary>
            Get the list of url's associated with a page (tab)
            </summary>
            <param name="tabId">the tab id</param>
            <param name="portalId">the portal id</param>
            <returns>list of urls associated with a tab</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.GiveTranslatorRoleEditRights(DotNetNuke.Entities.Tabs.TabInfo,System.Collections.Generic.Dictionary{System.Int32,DotNetNuke.Entities.Users.UserInfo})">
            <summary>
            Gives the translator role edit rights.
            </summary>
            <param name="localizedTab">The localized tab.</param>
            <param name="users">The users.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.HasMissingLanguages(System.Int32,System.Int32)">
            <summary>
            Returns True if a page is missing a translated version in at least one other language
            </summary>
            <param name="portalId"></param>
            <param name="tabId"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.IsTabPublished(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Checks whether the tab is published. Published means: view permissions of tab are identical to the DefaultLanguageTab
            </summary>
            <param name="publishTab">The tab that is checked</param>
            <returns>true if tab is published</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.LocalizeTab(DotNetNuke.Entities.Tabs.TabInfo,DotNetNuke.Services.Localization.Locale)">
            <summary>
            Localizes the tab.
            </summary>
            <param name="originalTab">The original tab.</param>
            <param name="locale">The locale.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.LocalizeTab(DotNetNuke.Entities.Tabs.TabInfo,DotNetNuke.Services.Localization.Locale,System.Boolean)">
            <summary>
            Localizes the tab, with optional clear cache
            </summary>
            <param name="originalTab"></param>
            <param name="locale"></param>
            <param name="clearCache"></param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.MoveTabAfter(DotNetNuke.Entities.Tabs.TabInfo,System.Int32)">
            <summary>
            Moves the tab after a specific tab.
            </summary>
            <param name="tab">The tab want to move.</param>
            <param name="afterTabId">will move objTab after this tab.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.MoveTabBefore(DotNetNuke.Entities.Tabs.TabInfo,System.Int32)">
            <summary>
            Moves the tab before a specific tab.
            </summary>
            <param name="tab">The tab want to move.</param>
            <param name="beforeTabId">will move objTab before this tab.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.MoveTabToParent(DotNetNuke.Entities.Tabs.TabInfo,System.Int32)">
            <summary>
            Moves the tab to a new parent
            </summary>
            <param name="tab">The tab want to move.</param>
            <param name="parentId">will move tab to this parent.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.PopulateBreadCrumbs(DotNetNuke.Entities.Tabs.TabInfo@)">
            <summary>
            Populates the bread crumbs.
            </summary>
            <param name="tab">The tab.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.PopulateBreadCrumbs(System.Int32,System.Collections.ArrayList@,System.Int32)">
            <summary>
            Populates the bread crumbs.
            </summary>
            <param name="portalID">The portal ID.</param>
            <param name="breadCrumbs">The bread crumbs.</param>
            <param name="tabID">The tab ID.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.PublishTab(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Publishes the tab. Set the VIEW permission
            </summary>
            <param name="publishTab">The publish tab.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.PublishTabs(System.Collections.Generic.List{DotNetNuke.Entities.Tabs.TabInfo})">
            <summary>
            Publishes the tabs.
            </summary>
            <param name="tabs">The tabs.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.RestoreTab(DotNetNuke.Entities.Tabs.TabInfo,DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>
            Restores the tab.
            </summary>
            <param name="tab">The obj tab.</param>
            <param name="portalSettings">The portal settings.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.SaveTabUrl(DotNetNuke.Entities.Tabs.TabUrlInfo,System.Int32,System.Boolean)">
            <summary>
            Save url information for a page (tab)
            </summary>
            <param name="tabUrl">the tab url</param>
            <param name="portalId">the portal id</param>
            <param name="clearCache">whether to clear the cache</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.SoftDeleteTab(System.Int32,DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>
            Soft Deletes the tab by setting the IsDeleted property to true.
            </summary>
            <param name="tabId">The tab id.</param>
            <param name="portalSettings">The portal settings.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.UpdateTab(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Updates the tab to databse.
            </summary>
            <param name="updatedTab">The updated tab.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.UpdateTabSetting(System.Int32,System.String,System.String)">
            <summary>
            Adds or updates a tab's setting value
            </summary>
            <param name="tabId">ID of the tab to update</param>
            <param name="settingName">name of the setting property</param>
            <param name="settingValue">value of the setting (String).</param>
            <remarks>empty SettingValue will remove the setting, if not preserveIfEmpty is true</remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.UpdateTranslationStatus(DotNetNuke.Entities.Tabs.TabInfo,System.Boolean)">
            <summary>
            Updates the translation status.
            </summary>
            <param name="localizedTab">The localized tab.</param>
            <param name="isTranslated">if set to <c>true</c> means the tab has already been translated.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.MarkAsPublished(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            It marks a page as published at least once
            </summary>
            <param name="tab">The Tab to be marked</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.CopyDesignToChildren(DotNetNuke.Entities.Tabs.TabInfo,System.String,System.String)">
            <summary>
            Copies the design to children.
            </summary>
            <param name="parentTab">The parent tab.</param>
            <param name="skinSrc">The skin SRC.</param>
            <param name="containerSrc">The container SRC.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.CopyDesignToChildren(DotNetNuke.Entities.Tabs.TabInfo,System.String,System.String,System.String)">
            <summary>
            Copies the design to children.
            </summary>
            <param name="parentTab">The parent tab.</param>
            <param name="skinSrc">The skin SRC.</param>
            <param name="containerSrc">The container SRC.</param>
            <param name="cultureCode">The culture code.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.CopyPermissionsToChildren(DotNetNuke.Entities.Tabs.TabInfo,DotNetNuke.Security.Permissions.TabPermissionCollection)">
            <summary>
            Copies the permissions to children.
            </summary>
            <param name="parentTab">The parent tab.</param>
            <param name="newPermissions">The new permissions.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.DeserializePanes(System.Xml.XmlNode,System.Int32,System.Int32,DotNetNuke.Entities.Portals.PortalTemplateModuleAction,System.Collections.Hashtable)">
            -----------------------------------------------------------------------------
            <summary>
            Processes all panes and modules in the template file
            </summary>
            <param name="nodePanes">Template file node for the panes is current tab</param>
            <param name="portalId">PortalId of the new portal</param>
            <param name="tabId">Tab being processed</param>
            <param name="mergeTabs">Tabs need to merge.</param>
            <param name="hModules">Modules Hashtable.</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.DeserializeTab(System.Xml.XmlNode,DotNetNuke.Entities.Tabs.TabInfo,System.Int32,DotNetNuke.Entities.Portals.PortalTemplateModuleAction)">
            <summary>
            Deserializes the tab.
            </summary>
            <param name="tabNode">The node tab.</param>
            <param name="tab">The obj tab.</param>
            <param name="portalId">The portal id.</param>
            <param name="mergeTabs">The merge tabs.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.DeserializeTab(System.Xml.XmlNode,DotNetNuke.Entities.Tabs.TabInfo,System.Collections.Hashtable,System.Int32,System.Boolean,DotNetNuke.Entities.Portals.PortalTemplateModuleAction,System.Collections.Hashtable)">
            <summary>
            Deserializes the tab.
            </summary>
            <param name="tabNode">The node tab.</param>
            <param name="tab">The obj tab.</param>
            <param name="tabs">The h tabs.</param>
            <param name="portalId">The portal id.</param>
            <param name="isAdminTemplate">if set to <c>true</c> [is admin template].</param>
            <param name="mergeTabs">The merge tabs.</param>
            <param name="modules">The h modules.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.GetPortalTabs(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets the portal tabs.
            </summary>
            <param name="portalId">The portal id.</param>
            <param name="excludeTabId">The exclude tab id.</param>
            <param name="includeNoneSpecified">if set to <c>true</c> [include none specified].</param>
            <param name="includeHidden">if set to <c>true</c> [include hidden].</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.GetPortalTabs(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the portal tabs.
            </summary>
            <param name="portalId">The portal id.</param>
            <param name="excludeTabId">The exclude tab id.</param>
            <param name="includeNoneSpecified">if set to <c>true</c> [include none specified].</param>
            <param name="includeHidden">if set to <c>true</c> [include hidden].</param>
            <param name="includeDeleted">if set to <c>true</c> [include deleted].</param>
            <param name="includeURL">if set to <c>true</c> [include URL].</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.GetPortalTabs(System.Int32,System.Int32,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the portal tabs.
            </summary>
            <param name="portalId">The portal id.</param>
            <param name="excludeTabId">The exclude tab id.</param>
            <param name="includeNoneSpecified">if set to <c>true</c> [include none specified].</param>
            <param name="noneSpecifiedText">The none specified text.</param>
            <param name="includeHidden">if set to <c>true</c> [include hidden].</param>
            <param name="includeDeleted">if set to <c>true</c> [include deleted].</param>
            <param name="includeURL">if set to <c>true</c> [include URL].</param>
            <param name="checkViewPermisison">if set to <c>true</c> [check view permisison].</param>
            <param name="checkEditPermission">if set to <c>true</c> [check edit permission].</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.GetPortalTabs(System.Collections.Generic.List{DotNetNuke.Entities.Tabs.TabInfo},System.Int32,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the portal tabs.
            </summary>
            <param name="tabs">The tabs.</param>
            <param name="excludeTabId">The exclude tab id.</param>
            <param name="includeNoneSpecified">if set to <c>true</c> [include none specified].</param>
            <param name="noneSpecifiedText">The none specified text.</param>
            <param name="includeHidden">if set to <c>true</c> [include hidden].</param>
            <param name="includeDeleted">if set to <c>true</c> [include deleted].</param>
            <param name="includeURL">if set to <c>true</c> [include URL].</param>
            <param name="checkViewPermisison">if set to <c>true</c> [check view permisison].</param>
            <param name="checkEditPermission">if set to <c>true</c> [check edit permission].</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.GetPortalTabs(System.Collections.Generic.List{DotNetNuke.Entities.Tabs.TabInfo},System.Int32,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the portal tabs.
            </summary>
            <param name="tabs">The tabs.</param>
            <param name="excludeTabId">The exclude tab id.</param>
            <param name="includeNoneSpecified">if set to <c>true</c> [include none specified].</param>
            <param name="noneSpecifiedText">The none specified text.</param>
            <param name="includeHidden">if set to <c>true</c> [include hidden].</param>
            <param name="includeDeleted">if set to <c>true</c> [include deleted].</param>
            <param name="includeURL">if set to <c>true</c> [include URL].</param>
            <param name="checkViewPermisison">if set to <c>true</c> [check view permisison].</param>
            <param name="checkEditPermission">if set to <c>true</c> [check edit permission].</param>
            <param name="includeDeletedChildren">The value of this parameter affects <see cref="P:DotNetNuke.Entities.Tabs.TabInfo.HasChildren"></see> property.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.GetTabByTabPath(System.Int32,System.String,System.String)">
            <summary>
            Gets the tab by tab path.
            </summary>
            <param name="portalId">The portal id.</param>
            <param name="tabPath">The tab path.</param>
            <param name="cultureCode">The culture code.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.GetTabPathDictionary(System.Int32,System.String)">
            <summary>
            Gets the tab path dictionary.
            </summary>
            <param name="portalId">The portal id.</param>
            <param name="cultureCode">The culture code.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.GetTabsByParent(System.Int32,System.Int32)">
            <summary>
            Gets the tabs by parent.
            </summary>
            <param name="parentId">The parent id.</param>
            <param name="portalId">The portal id.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.GetTabsBySortOrder(System.Int32,System.String,System.Boolean)">
            <summary>
            Gets the tabs by sort order.
            </summary>
            <param name="portalId">The portal id.</param>
            <param name="cultureCode">The culture code.</param>
            <param name="includeNeutral">if set to <c>true</c> [include neutral].</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.GetTabsBySortOrder(System.Int32)">
            <summary>
            Get all TabInfo for the current culture in SortOrder
            </summary>
            <param name="portalId">The portalid to load tabs for</param>
            <returns>
            List of TabInfo oredered by default SortOrder
            </returns>
            <remarks>
            This method uses the Active culture.  There is an overload <seealso cref="M:DotNetNuke.Entities.Tabs.TabController.GetTabsBySortOrder(System.Int32,System.String,System.Boolean)"/>
            which allows the culture information to be specified.
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.IsSpecialTab(System.Int32,System.Int32)">
            <summary>
            Determines whether is special tab.
            </summary>
            <param name="tabId">The tab id.</param>
            <param name="portalId">The portal id.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.IsHostOrAdminPage(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Determines whether is host or admin tab.
            </summary>
            <param name="tab">The tab info.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.IsSpecialTab(System.Int32,DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>
            Determines whether is special tab.
            </summary>
            <param name="tabId">The tab id.</param>
            <param name="portalSettings">The portal settings.</param>
            <returns>
              <c>true</c> if is special tab; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.SerializeTab(System.Xml.XmlDocument,DotNetNuke.Entities.Tabs.TabInfo,System.Boolean)">
            <summary>
            SerializeTab
            </summary>
            <param name="tabXml">The Xml Document to use for the Tab</param>
            <param name="objTab">The TabInfo object to serialize</param>
            <param name="includeContent">A flag used to determine if the Module content is included</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.SerializeTab(System.Xml.XmlDocument,System.Collections.Hashtable,DotNetNuke.Entities.Tabs.TabInfo,DotNetNuke.Entities.Portals.PortalInfo,System.Boolean)">
            <summary>
            SerializeTab
            </summary>
            <param name="tabXml">The Xml Document to use for the Tab</param>
            <param name="tabs">A Hashtable used to store the names of the tabs</param>
            <param name="tab">The TabInfo object to serialize</param>
            <param name="portal">The Portal object to which the tab belongs</param>
            <param name="includeContent">A flag used to determine if the Module content is included</param>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabController.IsDuplicateWithPortalAlias(System.Int32,System.String)">
            <summary>
            check whether have conflict between tab path and portal alias.
            </summary>
            <param name="portalId">portal id.</param>
            <param name="tabPath">tab path.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabInfo.CheckIfDoctypeConfigExists">
            <summary>
            Look for skin level doctype configuration file, and inject the value into the top of default.aspx
            when no configuration if found, the doctype for versions prior to 4.4 is used to maintain backwards compatibility with existing skins.
            Adds xmlns and lang parameters when appropiate.
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Tabs.TabInfo.Fill(System.Data.IDataReader)">
            -----------------------------------------------------------------------------
            <summary>
            Fills a TabInfo from a Data Reader
            </summary>
            <param name="dr">The Data Reader to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Tabs.TabMoveType">
            -----------------------------------------------------------------------------
             Project		: DotNetNuke
             Class		: TabMoveType
            -----------------------------------------------------------------------------
             <summary>
             Identifies common tab move types
             </summary>
             <remarks>
             </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Host.IServerWebRequestAdapter">
            <summary>
            IServerWebRequestAdapter used to get server's info when new server added into server collections.
            Also it can process the request when send to a server, like sync cache, detect server etc.
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Host.IServerWebRequestAdapter.GetServerUrl">
            <summary>
            Get the server's endpoint which can access the server directly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Host.IServerWebRequestAdapter.GetServerUniqueId">
            <summary>
            Get the server's unique id when server is behind affinity tool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Host.IServerWebRequestAdapter.ProcessRequest(System.Net.HttpWebRequest,DotNetNuke.Entities.Host.ServerInfo)">
            <summary>
            Process Request before the request send to server.
            </summary>
            <param name="request">The Http Request Object.</param>
            <param name="server">The Server Info Object.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Host.IServerWebRequestAdapter.CheckResponse(System.Net.HttpWebResponse,DotNetNuke.Entities.Host.ServerInfo,System.Net.HttpStatusCode@)">
            <summary>
            Check whether response is return from correct server.
            </summary>
            <param name="response">The Http Response Object.</param>
            <param name="statusCode">Out status code if you think the status need change.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Host.ServerWebRequestAdapter.GetServerUrl">
            <summary>
            Get the server's endpoint which can access the server directly.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Host.ServerWebRequestAdapter.GetServerUniqueId">
            <summary>
            Get the server's unique id when server is behind affinity tool.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Host.ServerWebRequestAdapter.ProcessRequest(System.Net.HttpWebRequest,DotNetNuke.Entities.Host.ServerInfo)">
            <summary>
            Process Request before the request send to server.
            </summary>
            <param name="request">The Http Request Object.</param>
            <param name="server">The Server Info Object.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Host.ServerWebRequestAdapter.CheckResponse(System.Net.HttpWebResponse,DotNetNuke.Entities.Host.ServerInfo,System.Net.HttpStatusCode@)">
            <summary>
            Check whether response is return from correct server.
            </summary>
            <param name="response">The Http Response Object.</param>
            <param name="statusCode">Out status code if you think the status need change.</param>
        </member>
        <member name="T:DotNetNuke.Entities.Host.IIPFilterController">
            <summary>
            Do not implement.  This interface is meant for reference and unit test purposes only.
            There is no guarantee that this interface will not change.
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Host.IPFilterController.AddIPFilter(DotNetNuke.Entities.Host.IPFilterInfo)">
            <summary>
            add a new IP filter
            </summary>
            <param name="ipFilter">filter details</param>
            <returns>filter id</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Host.IPFilterController.UpdateIPFilter(DotNetNuke.Entities.Host.IPFilterInfo)">
            <summary>
            update an existing IP filter
            </summary>
            <param name="ipFilter">filter details</param>
        </member>
        <member name="M:DotNetNuke.Entities.Host.IPFilterController.GetIPFilter(System.Int32)">
            <summary>
            get an IP filter 
            </summary>
            <param name="ipFilter">filter details</param>
            <returns>the selected IP filter</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Host.IPFilterController.DotNetNuke#Entities#Host#IIPFilterController#GetIPFilters">
            <summary>
            get the list of IP filters
            </summary>
            <returns>list of IP filters</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Host.IPFilterController.IsIPBanned(System.String)">
            <summary>
            Check the set of rules to see if an IP address is banned (used on login)
            </summary>
            <param name="ipAddress">IP address</param>
            <returns>true if banned</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Host.IPFilterController.CanIPStillAccess(System.String,System.Collections.Generic.IList{DotNetNuke.Entities.Host.IPFilterInfo})">
            <summary>
            Check if an IP address range can still access based on a set of rules
            note: this set is typically the list of IP filter rules minus a proposed delete
            </summary>
            <param name="myip">IP address</param>
            <param name="filterList">list of IP filters</param>
            <returns>true if IP can access, false otherwise</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Host.IPFilterController.IsAllowableDeny(System.String,DotNetNuke.Entities.Host.IPFilterInfo)">
            <summary>
            Check if a new rule would block the existing IP address
            </summary>
            <param name="currentIP">current IP address</param>
            <param name="ipFilter">new propose rule</param>
            <returns>true if rule would not block current IP, false otherwise</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Host.IPFilterInfo.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Create new IPFilterInfo instance
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Host.IPFilterInfo.Fill(System.Data.IDataReader)">
            <summary>
            Fills an IPFilterInfo from a Data Reader
            </summary>
            <param name="dr">The Data Reader to use</param>
            <remarks>Standard IHydratable.Fill implementation
            <seealso cref="P:DotNetNuke.Entities.Host.IPFilterInfo.KeyID"></seealso></remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Host.IPFilterInfo.KeyID">
            <summary>
            Gets and sets the Key ID
            </summary>
            <returns>KeyId of the IHydratable.Key</returns>
            <remarks><seealso cref="M:DotNetNuke.Entities.Host.IPFilterInfo.Fill(System.Data.IDataReader)"></seealso></remarks>
        </member>
        <member name="T:DotNetNuke.Entities.Host.Host">
            <summary>
            Contains most of the host settings.
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.AutoAccountUnlockDuration">
            -----------------------------------------------------------------------------
            <summary>
              Gets the AutoAccountUnlockDuration
            </summary>
            <remarks>
              Defaults to 10
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.AuthenticatedCacheability">
            -----------------------------------------------------------------------------
            <summary>
              Gets the AuthenticatedCacheability
            </summary>
            <remarks>
              Defaults to HttpCacheability.ServerAndNoCache
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.CdnEnabled">
            <summary>
            gets whether or not CDN has been enabled for all registered javascript libraries
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.CheckUpgrade">
            -----------------------------------------------------------------------------
            <summary>
              Gets whether the Upgrade Indicator is enabled
            </summary>
            <remarks>
              Defaults to True
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.ControlPanel">
            -----------------------------------------------------------------------------
            <summary>
              Gets the Control Panel
            </summary>
            <remarks>
              Defaults to glbDefaultControlPanel constant
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.AllowControlPanelToDetermineVisibility">
            <summary>
            setting to control where the control panel is loaded by the core and allowed to control it's own visibility.
            this is useful when the control panel needs to be visible for all users regardless of edit page/module permissions.
            it's also for backwards compatibility, prior to 7.2 the control panel was always loaded. 
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.CrmEnableCompositeFiles">
            -----------------------------------------------------------------------------
            <summary>
              Indicates whether Composite Files are enabled at the host level.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.CrmMinifyCss">
            -----------------------------------------------------------------------------
            <summary>
            Indicates whether CSS Minification is enabled at the host level.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.CrmMinifyJs">
            -----------------------------------------------------------------------------
            <summary>
              Indicates whether JS Minification is enabled at the host level.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.CrmVersion">
            -----------------------------------------------------------------------------
            <summary>
              Returns the Client Resource Management version number.
            </summary>
            <remarks>
              Defaults to 1
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.DefaultAdminContainer">
            -----------------------------------------------------------------------------
            <summary>
              Gets the Default Admin Container
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.DefaultAdminSkin">
            -----------------------------------------------------------------------------
            <summary>
              Gets the Default Admin Skin
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.DefaultDocType">
            -----------------------------------------------------------------------------
            <summary>
              Gets the Default Doc Type
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.DefaultPortalContainer">
            -----------------------------------------------------------------------------
            <summary>
              Gets the Default Portal Container
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.DefaultPortalSkin">
            -----------------------------------------------------------------------------
            <summary>
              Gets the Default Portal Skin
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.DemoPeriod">
            -----------------------------------------------------------------------------
            <summary>
              Gets the Demo Period for new portals
            </summary>
            <remarks>
              Defaults to -1
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.DemoSignup">
            -----------------------------------------------------------------------------
            <summary>
              Gets whether demo signups are enabled
            </summary>
            <remarks>
              Defaults to False
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.DisplayBetaNotice">
            -----------------------------------------------------------------------------
            <summary>
              Gets whether to dislpay the beta notice
            </summary>
            <remarks>
              Defaults to True
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.DisplayCopyright">
            -----------------------------------------------------------------------------
            <summary>
              Gets whether to dislpay the copyright
            </summary>
            <remarks>
              Defaults to True
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.EnableBannedList">
            <summary>
            Enable checking for banned words when setting password during registration
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.EnableBrowserLanguage">
            -----------------------------------------------------------------------------
            <summary>
              Gets whether Browser Language Detection is Enabled
            </summary>
            <remarks>
              Defaults to True
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.DebugMode">
            -----------------------------------------------------------------------------
            <summary>
              Gets whether the installation runs in debug mode. This property can be used
              by the framework and extensions alike to write more verbose logs/onscreen
              information, etc. It is set in the host settings page.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.ParticipateInImprovementProg">
            -----------------------------------------------------------------------------
            <summary>
              Gets whether the installation participates in the improvements program.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.EnableCustomModuleCssClass">
            -----------------------------------------------------------------------------
            <summary>
              Gets whether a css class based on the Module Name is automatically rendered
            </summary>
            <remarks>
              Defaults to True
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.UpgradeForceSsl">
            <summary>
            Whether force upgrade wizard open in ssl channel.
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.SslDomain">
            <summary>
            The domain used when upgrade wizard forced to shown in ssl channel.
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.EnableFileAutoSync">
            -----------------------------------------------------------------------------
            <summary>
              Gets whether File AutoSync is Enabled
            </summary>
            <remarks>
              Defaults to False
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.EnableIPChecking">
            <summary>
            enable whether the IP address of the user is checked against a list during login
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.EnableModuleOnLineHelp">
            -----------------------------------------------------------------------------
            <summary>
              Gets whether Module Online Help is Enabled
            </summary>
            <remarks>
              Defaults to False
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.EnableRequestFilters">
            -----------------------------------------------------------------------------
            <summary>
              Gets whether the Request Filters are Enabled
            </summary>
            <remarks>
              Defaults to False
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.EnableStrengthMeter">
            <summary>
            enable whether a client-side password strength meter is shown on registration screen
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.EnablePasswordHistory">
            <summary>
            enable whether a previous passwords are stored to check if user is reusing them
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.EnableUrlLanguage">
            -----------------------------------------------------------------------------
            <summary>
              Gets whether to use the Language in the Url
            </summary>
            <remarks>
              Defaults to True
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.EnableUsersOnline">
            -----------------------------------------------------------------------------
            <summary>
              Gets whether Users Online are Enabled
            </summary>
            <remarks>
              Defaults to False
            </remarks>
            ----------------------------------------------------------------------------- 
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.EnableSMTPSSL">
            -----------------------------------------------------------------------------
            <summary>
              Gets whether SSL is Enabled for SMTP
            </summary>
            <remarks>
              Defaults to False
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.EventLogBuffer">
            -----------------------------------------------------------------------------
            <summary>
              Gets whether the Event Log Buffer is Enabled
            </summary>
            <remarks>
              Defaults to False
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.AllowedExtensionWhitelist">
            <summary>
              Gets the allowed file extensions.
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.GUID">
            -----------------------------------------------------------------------------
            <summary>
              Gets the GUID
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.HelpURL">
            -----------------------------------------------------------------------------
            <summary>
              Gets the Help URL
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.HostCurrency">
            -----------------------------------------------------------------------------
            <summary>
              Gets the Host Currency
            </summary>
            <remarks>
              Defaults to USD
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.HostEmail">
            -----------------------------------------------------------------------------
            <summary>
              Gets the Host Email
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.HostFee">
            -----------------------------------------------------------------------------
            <summary>
              Gets the Host Fee
            </summary>
            <remarks>
              Defaults to 0
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.HostPortalID">
            -----------------------------------------------------------------------------
            <summary>
              Gets the Host Portal's PortalId
            </summary>
            <remarks>
              Defaults to Null.NullInteger
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.HostSpace">
            -----------------------------------------------------------------------------
            <summary>
              Gets the Host Space
            </summary>
            <remarks>
              Defaults to 0
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.HostTitle">
            -----------------------------------------------------------------------------
            <summary>
              Gets the Host Title
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.HostURL">
            -----------------------------------------------------------------------------
            <summary>
              Gets the Host URL
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.HttpCompressionAlgorithm">
            -----------------------------------------------------------------------------
            <summary>
              Gets the HttpCompression Algorithm
            </summary>
            <remarks>
              Defaults to Null.NullInteger(None)
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.MessageSchedulerBatchSize">
            -----------------------------------------------------------------------------
            <summary>
              Returns size of the batch used to determine how many emails are sent per CoreMessaging Scheduler run
            </summary>
            <remarks>
              Defaults to 50
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.MembershipResetLinkValidity">
            <summary>
            set length of time (in minutes) that reset links are valid for - default is 60
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.AdminMembershipResetLinkValidity">
            <summary>
            set length of time (in minutes) that reset links are valid for - default is 24 hours (1440 min)
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.MembershipNumberPasswords">
            <summary>
            set number of passwords stored for password change comparison operations - default is 5
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.MembershipDaysBeforePasswordReuse">
            <summary>
            Gets the number of days that must pass before a password can be reused - default is 0 (i.e. password reuse is only governed by <see cref="P:DotNetNuke.Entities.Host.Host.EnablePasswordHistory"/> and <see cref="P:DotNetNuke.Entities.Host.Host.MembershipNumberPasswords"/>)
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.MembershipFailedIPException">
            <summary>
            sets the HTTP Status code returned if IP address filtering is enabled on login
            and the users IP does not meet criteria -default is 403
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.ModuleCachingMethod">
            -----------------------------------------------------------------------------
            <summary>
              Gets the Module Caching method
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.PageCachingMethod">
            -----------------------------------------------------------------------------
            <summary>
              Gets the Page Caching method
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.PageQuota">
            -----------------------------------------------------------------------------
            <summary>
              Gets the Page Quota
            </summary>
            <remarks>
              Defaults to 0
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.PageStatePersister">
            -----------------------------------------------------------------------------
            <summary>
              Gets the PageState Persister
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.PasswordExpiry">
            -----------------------------------------------------------------------------
            <summary>
              Gets the Password Expiry
            </summary>
            <remarks>
              Defaults to 0
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.PasswordExpiryReminder">
            -----------------------------------------------------------------------------
            <summary>
              Gets the Password Expiry Reminder window
            </summary>
            <remarks>
              Defaults to 7 (1 week)
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.PaymentProcessor">
            -----------------------------------------------------------------------------
            <summary>
              Gets the Payment Processor
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.PerformanceSetting">
            -----------------------------------------------------------------------------
            <summary>
              Gets the PerformanceSettings
            </summary>
            <remarks>
              Defaults to PerformanceSettings.ModerateCaching
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.ProcessorPassword">
            -----------------------------------------------------------------------------
            <summary>
              Gets the Payment Processor Password
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.ProcessorUserId">
            -----------------------------------------------------------------------------
            <summary>
              Gets the Payment Processor User Id
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.ProxyPassword">
            -----------------------------------------------------------------------------
            <summary>
              Gets the Proxy Server Password
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.ProxyPort">
            -----------------------------------------------------------------------------
            <summary>
              Gets the Proxy Server Port
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.ProxyServer">
            -----------------------------------------------------------------------------
            <summary>
              Gets the Proxy Server
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.ProxyUsername">
            -----------------------------------------------------------------------------
            <summary>
              Gets the Proxy Server UserName
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.RememberCheckbox">
            -----------------------------------------------------------------------------
            <summary>
              Gets whether to use the remember me checkbox
            </summary>
            <remarks>
              Defaults to False
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.SchedulerMode">
            -----------------------------------------------------------------------------
            <summary>
              Gets the Scheduler Mode
            </summary>
            <remarks>
              Defaults to SchedulerMode.TIMER_METHOD
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.SchedulerdelayAtAppStart">
            -----------------------------------------------------------------------------
            <summary>
              Gets the delayAtAppStart value
            </summary>
            <remarks>
              Defaults is 1 min(60 sec)
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.SearchIncludeCommon">
            -----------------------------------------------------------------------------
            <summary>
              Gets whether to inlcude Common Words in the Search Index
            </summary>
            <remarks>
              Defaults to False
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.SearchIncludeNumeric">
            -----------------------------------------------------------------------------
            <summary>
              Gets whether to inlcude Numbers in the Search Index
            </summary>
            <remarks>
              Defaults to False
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.SearchMaxWordlLength">
            -----------------------------------------------------------------------------
            <summary>
              Gets the maximum Search Word length to index
            </summary>
            <remarks>
              Defaults to 25
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.SearchMinWordlLength">
            -----------------------------------------------------------------------------
            <summary>
              Gets the maximum Search Word length to index
            </summary>
            <remarks>
              Defaults to 3
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.SearchIncludedTagInfoFilter">
            -----------------------------------------------------------------------------
            <summary>
              Gets the filter used for inclusion of tag info
            </summary>
            <remarks>
              Defaults to ""
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.ShowCriticalErrors">
            <summary>
            display the text of errors injected via the error querystring parameter
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.SiteLogBuffer">
            -----------------------------------------------------------------------------
            <summary>
              Gets the Site Log Buffer size
            </summary>
            <remarks>
              Defaults to 1
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.SiteLogHistory">
            -----------------------------------------------------------------------------
            <summary>
              Gets the Site Log History
            </summary>
            <remarks>
              Defaults to -1
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.SiteLogStorage">
            -----------------------------------------------------------------------------
            <summary>
              Gets the Site Log Storage location
            </summary>
            <remarks>
              Defaults to "D"
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.SMTPAuthentication">
            -----------------------------------------------------------------------------
            <summary>
              Gets the SMTP Authentication
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.SMTPPortalEnabled">
            -----------------------------------------------------------------------------
            <summary>
            Gets the SMTP mode (portal|host)
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Host.Host.GetSmtpSetting(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Get's the SMTP setting, if portal smtp is configured, it will return items from the portal settings collection.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.SMTPPassword">
            -----------------------------------------------------------------------------
            <summary>
              Gets the SMTP Password
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.SMTPServer">
            -----------------------------------------------------------------------------
            <summary>
              Gets the SMTP Server
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.SMTPUsername">
            -----------------------------------------------------------------------------
            <summary>
              Gets the SMTP Username
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.SMTPConnectionLimit">
            -----------------------------------------------------------------------------
            <summary>
              Gets the SMTP Connection Limit
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.SMTPMaxIdleTime">
            -----------------------------------------------------------------------------
            <summary>
              Gets the SMTP MaxIdleTime
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.ThrowCBOExceptions">
            -----------------------------------------------------------------------------
            <summary>
              Gets whether Exceptions are rethrown
            </summary>
            <remarks>
              Defaults to False
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.UseFriendlyUrls">
            -----------------------------------------------------------------------------
            <summary>
              Gets whether Friendly Urls is Enabled
            </summary>
            <remarks>
              Defaults to False
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.UseCustomErrorMessages">
            -----------------------------------------------------------------------------
            <summary>
              Gets whether Custom Error Messages is Enabled
            </summary>
            <remarks>
              Defaults to False
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.UserQuota">
            -----------------------------------------------------------------------------
            <summary>
              Gets the User Quota
            </summary>
            <remarks>
              Defaults to 0
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.UsersOnlineTimeWindow">
            -----------------------------------------------------------------------------
            <summary>
              Gets the window to use in minutes when determining if the user is online
            </summary>
            <remarks>
              Defaults to 15
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.WebRequestTimeout">
            -----------------------------------------------------------------------------
            <summary>
              Gets the WebRequest Timeout value
            </summary>
            <remarks>
              Defaults to 10000
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.EnableMsAjaxCdn">
            <summary>
              Gets whether to use a hosted version of the MS Ajax Library
            </summary>
            <remarks>
              Defaults to False
            </remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.AsyncTimeout">
            <summary>
            Get the time, in seconds, before asynchronous postbacks time out if no response is received.
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Host.Host.IsLocked">
            <summary>
            Get a value indicating whether to put the entire instance into maintenance mode
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Host.ServerInfo.Fill(System.Data.IDataReader)">
            -----------------------------------------------------------------------------
            <summary>
            Fills a ServerInfo from a Data Reader
            </summary>
            <param name="dr">The Data Reader to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Host.ServerInfo.KeyID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Key ID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Profile.ProfileEventArgs.User">
            <summary>
            The user whom's profile has been changed. This includes the Profile property with the updated profile
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Profile.ProfileEventArgs.OldProfile">
            <summary>
            The user's profile, as it was before the change
            </summary>
        </member>
        <member name="T:DotNetNuke.Entities.Profile.ProfileController">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Entities.Profile
            Class:      ProfileController
            -----------------------------------------------------------------------------
            <summary>
            The ProfileController class provides Business Layer methods for profiles and
            for profile property Definitions
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfileController.AddDefaultDefinitions(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Adds the default property definitions for a portal
            </summary>
            <param name="portalId">Id of the Portal</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfileController.AddPropertyDefinition(DotNetNuke.Entities.Profile.ProfilePropertyDefinition)">
            -----------------------------------------------------------------------------
            <summary>
            Adds a Property Defintion to the Data Store
            </summary>
            <param name="definition">An ProfilePropertyDefinition object</param>
            <returns>The Id of the definition (or if negative the errorcode of the error)</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfileController.ClearProfileDefinitionCache(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Clears the Profile Definitions Cache
            </summary>
            <param name="portalId">Id of the Portal</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfileController.DeletePropertyDefinition(DotNetNuke.Entities.Profile.ProfilePropertyDefinition)">
            -----------------------------------------------------------------------------
            <summary>
            Deletes a Property Defintion from the Data Store
            </summary>
            <param name="definition">The ProfilePropertyDefinition object to delete</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfileController.ClearAllUsersInfoProfileCacheByPortal(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Clear profiles of all users by portal Id
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfileController.GetPropertyDefinition(System.Int32,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Gets a Property Defintion from the Data Store by id
            </summary>
            <param name="definitionId">The id of the ProfilePropertyDefinition object to retrieve</param>
            <param name="portalId">Portal Id.</param>
            <returns>The ProfilePropertyDefinition object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfileController.GetPropertyDefinitionByName(System.Int32,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Gets a Property Defintion from the Data Store by name
            </summary>
            <param name="portalId">The id of the Portal</param>
            <param name="name">The name of the ProfilePropertyDefinition object to retrieve</param>
            <returns>The ProfilePropertyDefinition object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfileController.GetPropertyDefinitionsByCategory(System.Int32,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Gets a collection of Property Defintions from the Data Store by category
            </summary>
            <param name="portalId">The id of the Portal</param>
            <param name="category">The category of the Property Defintions to retrieve</param>
            <returns>A ProfilePropertyDefinitionCollection object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfileController.GetPropertyDefinitionsByPortal(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Gets a collection of Property Defintions from the Data Store by portal
            </summary>
            <param name="portalId">The id of the Portal</param>
            <returns>A ProfilePropertyDefinitionCollection object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfileController.GetPropertyDefinitionsByPortal(System.Int32,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            Gets a collection of Property Defintions from the Data Store by portal
            </summary>
            <param name="portalId">The id of the Portal</param>
            <param name="clone">Whether to use a clone object.</param>
            <returns>A ProfilePropertyDefinitionCollection object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfileController.GetPropertyDefinitionsByPortal(System.Int32,System.Boolean,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            Gets a collection of Property Defintions from the Data Store by portal
            </summary>
            <param name="portalId">The id of the Portal</param>
            <param name="clone">Whether to use a clone object.</param>
            <param name="includeDeleted">Whether to include deleted profile properties.</param>
            <returns>A ProfilePropertyDefinitionCollection object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfileController.GetUserProfile(DotNetNuke.Entities.Users.UserInfo@)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Profile Information for the User
            </summary>
            <remarks></remarks>
            <param name="user">The user whose Profile information we are retrieving.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfileController.UpdatePropertyDefinition(DotNetNuke.Entities.Profile.ProfilePropertyDefinition)">
            -----------------------------------------------------------------------------
            <summary>
            Updates a Property Defintion in the Data Store
            </summary>
            <param name="definition">The ProfilePropertyDefinition object to update</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfileController.UpdateUserProfile(DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Updates a User's Profile
            </summary>
            <param name="user">The use to update</param>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfileController.UpdateUserProfile(DotNetNuke.Entities.Users.UserInfo,DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection)">
            -----------------------------------------------------------------------------
            <summary>
            Updates a User's Profile
            </summary>
            <param name="user">The use to update</param>
            <param name="profileProperties">The collection of profile properties</param>
            <returns>The updated User</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfileController.ValidateProfile(System.Int32,DotNetNuke.Entities.Users.UserProfile)">
            -----------------------------------------------------------------------------
            <summary>
            Validates the Profile properties for the User (determines if all required properties
            have been set)
            </summary>
            <param name="portalId">The Id of the portal.</param>
            <param name="objProfile">The profile.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfileController.SearchProfilePropertyValues(System.Int32,System.String,System.String)">
            <summary>
            Searches the profile property values for a string (doesn't need to be the beginning).
            </summary>
            <param name="portalId">The portal identifier.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="searchString">The search string.</param>
            <returns>List of matching values</returns>
        </member>
        <member name="T:DotNetNuke.Entities.Profile.ProfilePropertyDefinition">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Entities.Profile
            Class:      ProfilePropertyDefinition
            -----------------------------------------------------------------------------
            <summary>
            The ProfilePropertyDefinition class provides a Business Layer entity for 
            property Definitions
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.DataType">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Data Type of the Profile Property
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.DefaultValue">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Default Value of the Profile Property
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.DefaultVisibility">
            -----------------------------------------------------------------------------
            <summary>
              Gets and sets the Default Visibility of the Profile Property
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.Deleted">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Deleted
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.IsDirty">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether the Definition has been modified since it has been retrieved
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.Length">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Length of the Profile Property
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.ModuleDefId">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the ModuleDefId
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.PortalId">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the PortalId
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.PropertyCategory">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Category of the Profile Property
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.PropertyDefinitionId">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Id of the ProfilePropertyDefinition
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.PropertyName">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Name of the Profile Property
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.PropertyValue">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Value of the Profile Property
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.ReadOnly">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the property is read only
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.Required">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the property is required
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.ValidationExpression">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets a Validation Expression (RegEx) for the Profile Property
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.ViewOrder">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the View Order of the Property
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.Visible">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the property is visible
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.ProfileVisibility">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the property is visible
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.ClearIsDirty">
            -----------------------------------------------------------------------------
            <summary>
            Clears the IsDirty Flag
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinition.Clone">
            <summary>
            Clone a ProfilePropertyDefinition
            </summary>
            <returns>A ProfilePropertyDefinition</returns>
        </member>
        <member name="T:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Entities.Profile
            Class:      ProfilePropertyDefinitionCollection
            -----------------------------------------------------------------------------
            <summary>
            The ProfilePropertyDefinitionCollection class provides Business Layer methods for 
            a collection of property Definitions
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection.#ctor">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a new default collection
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection.#ctor(System.Collections.ArrayList)">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a new Collection from an ArrayList of ProfilePropertyDefinition objects
            </summary>
            <param name="definitionsList">An ArrayList of ProfilePropertyDefinition objects</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection.#ctor(DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection)">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a new Collection from a ProfilePropertyDefinitionCollection
            </summary>
            <param name="collection">A ProfilePropertyDefinitionCollection</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection.Item(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets an item in the collection.
            </summary>
            <remarks>This overload returns the item by its index. </remarks>
            <param name="index">The index to get</param>
            <returns>A ProfilePropertyDefinition object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection.Item(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Gets an item in the collection.
            </summary>
            <remarks>This overload returns the item by its name</remarks>
            <param name="name">The name of the Property to get</param>
            <returns>A ProfilePropertyDefinition object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection.Add(DotNetNuke.Entities.Profile.ProfilePropertyDefinition)">
            -----------------------------------------------------------------------------
            <summary>
            Adds a property Definition to the collectio.
            </summary>
            <param name="value">A ProfilePropertyDefinition object</param>
            <returns>The index of the property Definition in the collection</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection.AddRange(System.Collections.ArrayList)">
            -----------------------------------------------------------------------------
            <summary>
            Add an ArrayList of ProfilePropertyDefinition objects
            </summary>
            <param name="definitionsList">An ArrayList of ProfilePropertyDefinition objects</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection.AddRange(DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection)">
            -----------------------------------------------------------------------------
            <summary>
            Add an existing ProfilePropertyDefinitionCollection
            </summary>
            <param name="collection">A ProfilePropertyDefinitionCollection</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection.Contains(DotNetNuke.Entities.Profile.ProfilePropertyDefinition)">
            -----------------------------------------------------------------------------
            <summary>
            Determines whether the collection contains a property definition
            </summary>
            <param name="value">A ProfilePropertyDefinition object</param>
            <returns>A Boolean True/False</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection.GetByCategory(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Gets a sub-collection of items in the collection by category.
            </summary>
            <param name="category">The category to get</param>
            <returns>A ProfilePropertyDefinitionCollection object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection.GetById(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Gets an item in the collection by Id.
            </summary>
            <param name="id">The id of the Property to get</param>
            <returns>A ProfilePropertyDefinition object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection.GetByName(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Gets an item in the collection by name.
            </summary>
            <param name="name">The name of the Property to get</param>
            <returns>A ProfilePropertyDefinition object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection.IndexOf(DotNetNuke.Entities.Profile.ProfilePropertyDefinition)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the index of a property Definition
            </summary>
            <param name="value">A ProfilePropertyDefinition object</param>
            <returns>The index of the property Definition in the collection</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection.Insert(System.Int32,DotNetNuke.Entities.Profile.ProfilePropertyDefinition)">
            -----------------------------------------------------------------------------
            <summary>
            Inserts a property Definition into the collectio.
            </summary>
            <param name="value">A ProfilePropertyDefinition object</param>
            <param name="index">The index to insert the item at</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection.Remove(DotNetNuke.Entities.Profile.ProfilePropertyDefinition)">
            -----------------------------------------------------------------------------
            <summary>
            Removes a property definition from the collection
            </summary>
            <param name="value">The ProfilePropertyDefinition object to remove</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionCollection.Sort">
            -----------------------------------------------------------------------------
            <summary>
            Sorts the collection using the ProfilePropertyDefinitionComparer (ie by ViewOrder)
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionComparer">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Entities.Profile
            Class:      ProfilePropertyDefinitionComparer
            -----------------------------------------------------------------------------
            <summary>
            The ProfilePropertyDefinitionComparer class provides an implementation of
            IComparer to sort the ProfilePropertyDefinitionCollection by ViewOrder
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Profile.ProfilePropertyDefinitionComparer.Compare(System.Object,System.Object)">
            -----------------------------------------------------------------------------
            <summary>
            Compares two ProfilePropertyDefinition objects
            </summary>
            <param name="x">A ProfilePropertyDefinition object</param>
            <param name="y">A ProfilePropertyDefinition object</param>
            <returns>An integer indicating whether x greater than y, x=y or x less than y</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.Urls.AdvancedFriendlyUrlProvider.BaseFriendlyUrl(DotNetNuke.Entities.Tabs.TabInfo,System.String,System.String,System.String,DotNetNuke.Entities.Urls.FriendlyUrlSettings)">
            <summary>
            Return a FriendlyUrl for the supplied Tab, but don't improve it past the standard DNN Friendly Url version 
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.AdvancedFriendlyUrlProvider.ImprovedFriendlyUrl(DotNetNuke.Entities.Tabs.TabInfo,System.String,System.String,System.String,System.Boolean,DotNetNuke.Entities.Urls.FriendlyUrlSettings,System.Guid)">
            <summary>
            Return a full-improved Friendly Url for the supplied tab
            </summary>
            <param name="tab">The current page</param>
            <param name="path">The non-friendly path to the page</param>
            <param name="pageName">The name of the page</param>
            <param name="httpAlias">The current portal alias to use</param>
            <param name="ignoreCustomRedirects">If true, then the Friendly Url will be constructed without using any custom redirects</param>
            <param name="settings">The current Friendly Url Settings to use</param>
            <param name="parentTraceId"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.AdvancedUrlRewriter.RedirectPortalAlias(System.String,DotNetNuke.Entities.Urls.UrlAction@,DotNetNuke.Entities.Urls.FriendlyUrlSettings)">
            <summary>
            Redirects an alias if that is allowed by the settings
            </summary>
            <param name="httpAlias"></param>
            <param name="result"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.AdvancedUrlRewriter.CheckIfAliasIsCustomTabAlias(DotNetNuke.Entities.Urls.UrlAction@,System.String,DotNetNuke.Entities.Urls.FriendlyUrlSettings)">
            <summary>
            Checks to see whether the specified alias is a customTabAlias
            </summary>
            <param name="result"></param>
            <param name="httpAlias"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.AdvancedUrlRewriter.ConfigurePortalAliasRedirect(DotNetNuke.Entities.Urls.UrlAction@,System.String,System.String,System.Boolean,DotNetNuke.Entities.Urls.RedirectReason,System.Collections.Generic.List{DotNetNuke.Entities.Urls.InternalAlias},DotNetNuke.Entities.Urls.FriendlyUrlSettings)">
            <summary>
            Configures the result object to set the correct Alias redirect
            parameters and destination URL
            </summary>
            <param name="result"></param>
            <param name="wrongAlias"></param>
            <param name="rightAlias"></param>
            <param name="ignoreCustomAliasTabs"></param>
            <param name="redirectReason"></param>
            <param name="internalAliases"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.AdvancedUrlRewriter.IgnoreRequestForInstall(System.String,System.String,System.String,System.String)">
            <summary>
            Determines if this is a request from an install / upgrade url
            </summary>
            <param name="physicalPath"></param>
            <param name="refererPath"></param>
            <param name="requestedDomain"></param>
            <param name="refererDomain"></param>
            <returns></returns>
            <remarks>
            //875 : cater for the upgradewizard.aspx Url that is new to DNN 6.1
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.AdvancedUrlRewriter.CheckForSiteRootRedirect(System.String,System.String)">
            <summary>
            Make sure any redirect to the site root doesn't append the nasty /default.aspx on the end
            </summary>
            <param name="alias"></param>
            <param name="destUrl"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.BasicFriendlyUrlProvider.AddPage(System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            AddPage adds the page to the friendly url
            </summary>
            <remarks>
            </remarks>
            <param name="path">The path to format.</param>
            <param name="pageName">The page name.</param>
            <returns>The formatted url</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.BasicFriendlyUrlProvider.GetFriendlyAlias(System.String,System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            GetFriendlyAlias gets the Alias root of the friendly url
            </summary>
            <remarks>
            </remarks>
            <param name="path">The path to format.</param>
            <param name="portalAlias">The portal alias of the site.</param>
            <param name="isPagePath">Whether is a relative page path.</param>
            <returns>The formatted url</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.BasicFriendlyUrlProvider.GetFriendlyQueryString(DotNetNuke.Entities.Tabs.TabInfo,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            GetFriendlyQueryString gets the Querystring part of the friendly url
            </summary>
            <remarks>
            </remarks>
            <param name="tab">The tab whose url is being formatted.</param>
            <param name="path">The path to format.</param>
            <param name="pageName">The Page name.</param>
            <returns>The formatted url</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.CacheController.FindFriendlyUrlParmsConfigFilePath(System.Int32,System.Boolean@)">
            <summary>
            Finds the best match friendlyurlparms.config file path
            </summary>
            <param name="portalId">The portalId to search for. -1 if all portals required.</param>
            <param name="portalSpecificFound"></param>
            <returns>If a non-zero length string, a valid file path.  If a zero length string, no file was found.</returns>
            <remarks>
            First priority is a file called n.friendlyurlparms.config, in the root path
            Next priority is a file called portals\n\friendlyurlparms.config, in the portal path
            Last priority is the friendlyurlparms.config file, in the root path
            Task no 807
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.CacheController.GetFriendlyUrlIndexFromCache(DotNetNuke.Collections.Internal.SharedDictionary{System.Int32,DotNetNuke.Collections.Internal.SharedDictionary{System.String,System.String}}@,System.Collections.Concurrent.ConcurrentBag{System.Int32}@,DotNetNuke.Collections.Internal.SharedDictionary{System.String,System.String}@)">
            <summary>
            Retrieve the Url Dictionary for the installation.
            </summary>
            <param name="urlDict"></param>
            <param name="urlPortals"></param>
            <param name="customAliasTabs"></param>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.CacheController.StoreFriendlyUrlIndexInCache(DotNetNuke.Collections.Internal.SharedDictionary{System.Int32,DotNetNuke.Collections.Internal.SharedDictionary{System.String,System.String}},System.Collections.Concurrent.ConcurrentBag{System.Int32},DotNetNuke.Collections.Internal.SharedDictionary{System.String,System.String},DotNetNuke.Entities.Urls.FriendlyUrlSettings,System.String)">
            <summary>
            Store the Url Dictionary (all tab urls / tabids) for the installation
            </summary>
            <param name="urlDict"></param>
            <param name="urlPortals"></param>
            <param name="customAliasTabs"></param>
            <param name="settings"></param>
            <param name="reason"></param>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.CacheController.StoreListOfTabsWithProviders(System.Collections.Generic.List{DotNetNuke.Entities.Urls.ExtensionUrlProvider},System.Int32,DotNetNuke.Entities.Urls.FriendlyUrlSettings)">
            <summary>
            This method stores a list of tabIds for the specific portal in the cache
            This is used to lookup and see if there are any providers to load for a tab,
            without having to store individual tabid/portaldId provider lists for every tab
            If a tab doesn't appear on this cached list, then the cache isn't checked 
            for that particular tabid/portalId combination
            </summary>
            <param name="providers"></param>
            <param name="portalId"></param>
            <param name="settings"></param>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.CacheController.GetPortal(System.Int32,System.Boolean)">
            <summary>
            Returns a portal info object for the portal
            </summary>
            <param name="portalId"></param>
            <param name="exceptionOnNull"></param>
            <remarks>This method wraps the PortalController.GetPortal method, and adds a check if the reuslt is null.</remarks>.
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.CollectionExtensions.LoadFromXmlFile(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{DotNetNuke.Entities.Urls.ParameterRedirectAction}},System.String,System.Int32,System.Boolean,System.Collections.Generic.List{System.String}@)">
            <summary>
            Returns all the redirect rules for the specified portal
            </summary>
            <param name="actions"></param>
            <param name="fileName"></param>
            <param name="portalId"></param>
            <param name="portalSpecific">If true, all rules belong to supplied portalId, even if not specified.</param>
            <param name="messages"></param>
            <remarks>807 : change to allow specificatoin of assumption that all rules belong to the supplied portal</remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.CustomUrlDictController.BuildUrlDictionary(DotNetNuke.Collections.Internal.SharedDictionary{System.Int32,DotNetNuke.Collections.Internal.SharedDictionary{System.String,System.String}},System.Int32,DotNetNuke.Entities.Urls.FriendlyUrlSettings,DotNetNuke.Collections.Internal.SharedDictionary{System.String,System.String}@)">
            <summary>
            Returns a list of tab and redirects from the database, for the specified portal
            Assumes that the dictionary should have any existing items replaced if the portalid is specified 
            and the portal tabs already exist in the dictionary.
            </summary>
            <param name="existingTabs"></param>
            <param name="portalId"></param>
            <param name="settings"></param>
            <param name="customAliasTabs"></param>
            <remarks>
               Each dictionary entry in the return value is a complex data type of another dictionary that is indexed by the url culture.  If there is 
               only one culture for the Url, it will be that culture.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.CustomUrlDictController.FetchCustomUrlDictionary(System.Int32,System.Boolean,System.Boolean,DotNetNuke.Entities.Urls.FriendlyUrlSettings,DotNetNuke.Collections.Internal.SharedDictionary{System.String,System.String}@,System.Guid)">
            <summary>
            returns a tabId indexed dictionary of Friendly Urls
            </summary>
            <param name="portalId"></param>
            <param name="forceRebuild"></param>
            <param name="bypassCache"></param>
            <param name="settings"></param>
            <param name="customAliasForTabs"></param>
            <param name="parentTraceId"></param>
            <returns></returns>
        </member>
        <member name="T:DotNetNuke.Entities.Urls.DupKeyCheck">
            <summary>
            The DupKeyCheck class is a small helper class used to maintain state of what to do with a duplicate Url when building the Url Index.
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.ExtensionUrlProviderController.GetProvidersToCall(System.Int32,System.Int32,DotNetNuke.Entities.Urls.FriendlyUrlSettings,System.Guid)">
            <summary>
            Returns the providers to call. Returns tabid matches first, and any portal id matches after that.
            </summary>
            <param name="tabId"></param>
            <param name="portalId"></param>
            <param name="settings"></param>
            <param name="parentTraceId"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.ExtensionUrlProviderController.CheckForAlwaysCallProviders(System.Int32,System.Int32,DotNetNuke.Entities.Urls.FriendlyUrlSettings,System.Guid)">
            <summary>
            Checks to see if any providers are marked as 'always call for rewrites'
            </summary>
            <param name="portalId"></param>
            <param name="tabId"></param>
            <param name="settings"></param>
            <param name="parentTraceId"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.ExtensionUrlProviderController.CheckForSiteRootRewrite(System.Int32,DotNetNuke.Entities.Urls.FriendlyUrlSettings,System.Guid)">
            <summary>
            Returns boolean value is any loaded providers require checking of rewrite / redirect values from the site root (ie, not dnn tab path)
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.ExtensionUrlProviderController.GetModuleProviders(System.Int32)">
            <summary>
            Loads the module providers
            </summary>
            <param name="portalId"></param>
            <returns></returns>
            <remarks>Note : similar copy for UI purposes in ConfigurationController.cs</remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.ExtensionUrlProviderController.LogModuleProviderExceptionInRequest(System.Exception,System.String,DotNetNuke.Entities.Urls.ExtensionUrlProvider,DotNetNuke.Entities.Urls.UrlAction,System.Collections.Generic.List{System.String})">
            <summary>
            logs an exception related to a module provider once per cache-lifetime
            </summary>
            <param name="ex"></param>
            <param name="status"></param>
            <param name="result"></param>
            <param name="messages"></param>
            <param name="provider"></param>
        </member>
        <member name="P:DotNetNuke.Entities.Urls.ExtensionUrlProviderInfo.AllTabs">
            <summary>
            When true, the module provider will be used for all tabs in the current portal.  Including a specific tabid switches value to false.
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Urls.ExtensionUrlProviderInfo.DesktopModuleId">
            <summary>
            The DesktopModuleId is used to associate a particular Extension Url Provider with a specific DotNetNuke extension.
            </summary>
            <remarks>
            If the Extension provider is not associated with any particular DotNetNuke extension, return null.
            </remarks>
        </member>
        <member name="P:DotNetNuke.Entities.Urls.ExtensionUrlProviderInfo.IsActive">
            <summary>
            When true, provider is active
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Urls.ExtensionUrlProviderInfo.RewriteAllUrls">
            <summary>
            When true, TransformFriendlyUrl is called for every Url in the portal
            When false, TransformFriendlyUrl is called only for tabs in the TabIds list
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Urls.ExtensionUrlProviderInfo.RedirectAllUrls">
            <summary>
            When true, CheckForRedirect is called for every Url in the portal
            When false, CheckForRedirect is called only for tabs in the TabIds list
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Urls.ExtensionUrlProviderInfo.ReplaceAllUrls">
            <summary>
            When true, ChangeFriendlyUrl is called for every generated Url called through the NavigateUrl API
            When false, ChangeFriendlyUrl is called only for tabs in the TabIds list
            </summary>
        </member>
        <member name="P:DotNetNuke.Entities.Urls.ExtensionUrlProviderInfo.TabIds">
            <summary>
            Returns a list of TabIds where the module provider should be called when generating friendly urls
            </summary>
        </member>
        <member name="T:DotNetNuke.Entities.Urls.FriendlyUrlOptions">
            <summary>
            This class encapsulates different options used in generating friendly urls
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.FriendlyUrlPathController.SplitUserIdFromFriendlyUrlPath(System.String,System.String,System.String,System.String@,System.String@)">
            <summary>
            Splits out the userid value from the supplied Friendly Url Path
            </summary>
            <param name="parmName"></param>
            <param name="otherParametersPath">The 'other' parameters which form the total UserProfile Url (if supplied)</param>
            <param name="rawUserId"></param>
            <param name="remainingPath">The remaining path not associated with the user id</param>
            <param name="urlPath"></param>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.FriendlyUrlPathController.CheckParameterRegexReplacement(System.String,DotNetNuke.Entities.Tabs.TabInfo,DotNetNuke.Entities.Urls.FriendlyUrlSettings,System.Int32,System.String@,System.Collections.Generic.List{System.String}@,System.Boolean@,System.Guid)">
            <summary>
            This method checks the list of rules for parameter replacement and modifies the parameter path accordingly
            </summary>
            <param name="parameterPath"></param>
            <param name="tab"></param>
            <param name="settings"></param>
            <param name="portalId"></param>
            <param name="replacedPath"></param>
            <param name="messages"></param>
            <param name="changeToSiteRoot"></param>
            <param name="parentTraceId"></param>
            <returns></returns>
        </member>
        <member name="T:DotNetNuke.Entities.Urls.ExtensionUrlProvider">
            <summary>
            This abstract class is to provide a inherited base class for a custom module friendly url provider.  All public methods must be overridden to provide the basis for a custom module provider.
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.ExtensionUrlProvider.AlwaysUsesDnnPagePath(System.Int32)">
            <summary>
            When true, output Urls from the provider for the specified portalId always include the current DotNetNuke page path (ie example.com/pagename/friendlyUrl)
            When false, output Urls from the provider for the specified portalId may sometimes not include the current DotNetNUke page path (ie example.com/friendlyUrl)
            </summary>
            <remarks>
            Defaults to true.  Must be set to false by the provider if any call to the 'ChangeFriendlyUrl' method results in the output 
            parameter 'useDnnPagePath' is false.  If 'false' is possible, then 'false' must be returned in this method.
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.ExtensionUrlProvider.ChangeFriendlyUrl(DotNetNuke.Entities.Tabs.TabInfo,System.String,DotNetNuke.Entities.Urls.FriendlyUrlOptions,System.String,System.String@,System.Boolean@,System.Collections.Generic.List{System.String}@)">
            <summary>
            Generates a new friendly Url based on the parameters supplied
            </summary>
            <param name="tab">The current Tab the Friendly Url is for</param>
            <param name="friendlyUrlPath">The current friendly Url Path (minus alias) as generated by the Advanced Friendly Url provider</param>
            <param name="options">The current friendly Url options that apply to the current portal, as configured within the Extension Url Provider settings.  These include space replacement values and other settings which should be incorporated into the Friendly Url generation.</param>
            <param name="endingPageName">The 'pageName' value that comes from the FriendlyUrl API of DNN.  Normally this is the 'default.aspx' value (DotNetNuke.Common.Globals.glbDefaultPage).  A value of 'default.aspx' is discarded. However, it may be a different value for other modules and if not default.aspx will be appended to the end of the Url.  
            This is a ref parameter, so it can either be left as-is, or changed to default.aspx or "" if no specific value is required.</param>
            <param name="useDnnPagePath">Output parameter, must be set by module Friendly Url Provider.  If true, the /pagename/ part of the Url will be removed, and the Url path will be relative from the site root (example.com/custom-module-path instead of example.com/pagename/custom-module-path)</param>
            <param name="messages">A list of information messages used for both debug output and UI information.  Add any informational message to this collection if desired.</param>
            <remarks>Note using 'useDnnPagePath' = true requires having a specific tab returned from the TransformFriendlyUrlToQueryString below.  Usage of the 'useDnnPagePath' implies the TransformFriendlyUrlToQueryString method returns a ?tabid=xx value in the querystring.  
            It also means the provider level property 'AlwaysUsesDnnPagePath' must return 'false'</remarks>
            <returns>Friendly Url for specified values.  Return friendlyUrlPath if no change is made.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.ExtensionUrlProvider.CheckForRedirect(System.Int32,System.Int32,System.String,System.Uri,System.Collections.Specialized.NameValueCollection,DotNetNuke.Entities.Urls.FriendlyUrlOptions,System.String@,System.Collections.Generic.List{System.String}@)">
            <summary>
            
            </summary>
            <param name="tabId"></param>
            <param name="portalid"></param>
            <param name="requestUri"></param>
            <param name="queryStringCol"></param>
            <param name="options"></param>
            <param name="messages"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.ExtensionUrlProvider.GetProviderPortalSettings">
            <summary>
            This module returns any custom settings for the provider in a key/value pair.  This is used when any customised settings are saved to the web.config file.
            </summary>
            <returns>A dictionary of key/value pairs, where the key represents the web.config attribute name, and the value is the value to be stored in the web.config file</returns>
            <remarks>Note: the key values are case sensitive, and should match any values read from the attributes collection in the provider constructor.  If the provider has no custom attributes, return null or an empty dictionary. To remove a setting, add the value as a null.  Null values in the dictionary are removed as attributes.</remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.ExtensionUrlProvider.TransformFriendlyUrlToQueryString(System.String[],System.Int32,System.Int32,DotNetNuke.Entities.Urls.FriendlyUrlOptions,System.String,DotNetNuke.Entities.Portals.PortalAliasInfo,System.Collections.Generic.List{System.String}@,System.Int32@,System.String@)">
            <summary>
            Transforms a friendly Url into a querystring.  Used as input into the rewriting process, after the Url Rewriting process has identified the correct DNN Page.
            </summary>
            <param name="urlParms">string array of the friendly Url Path elements, separated by /</param>
            <param name="tabId">TabId of page the Friendly Url </param>
            <param name="portalId">PortalId of the Friendly Url</param>
            <remarks>This method will be only called if there is no match between the Page Index entries this Provider supplies via the 'CreatePageIndex' method.  This method is called
            when a DNN page match is found in the requested path, and there are other parameters behind the page path. You should only return a TabId in the querystring, when the ChangeFriendlyUrl function is returning 'true' for the output value of 'useDnnPagePath'.</remarks>
            <example>
            Given a Url of example.com/pagename/key/value - this method will be called with key,value in the urlParms array with a page match on 'pagename'.  The method should return 'key=value'.
            Or, if given a Url of example.com/pagename/my-friendly-module-url, it should transform 'my-friendly-module-url' into whatever the module actually uses to build content.  This might mean returning 'article=2354' derived from doing a specific lookup on 'my-friendly-module-url'.
            Warning: It's unwise to do a specific database lookup for each call of this method.  This method needs to be high-performance so should use a stateless method (ie, regex parse) or, if looking up database values, cached hashtables or thread-safe dictionaries.
            </example>
            <returns>Querystring value in key=value format, which will be used as an input to the rewriting function.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.ExtensionUrlProvider.AlwaysCallForRewrite(System.Int32)">
            <summary>
            This method is called to check whether to do a Url Rewrite on all Tabs specified by the provider
            </summary>
            <param name="portalId">The current portalId</param>
            <returns>True if the rewriter should be called, even if there are no Url parameters (ie, just plain DNN page Url).  False if not.
            Does not affect the calling of this provider when there are parameters supplied in the Url - that is determined by the tabIds property
            of the provider.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.FriendlyUrlController.GetCustomAliasesForTabs">
            <summary>
            Returns a list of http alias values where that alias is associated with a tab as a custom alias
            </summary>
            <remarks>Aliases returned are all in lower case only</remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.FriendlyUrlController.IsAdminTab(System.Int32,System.String,DotNetNuke.Entities.Urls.FriendlyUrlSettings)">
            <summary>
            Replaces the core IsAdminTab call which was decommissioned for DNN 5.0
            </summary>
            <param name="tabPath">The path of the tab //admin//someothername</param>
            <param name="settings"></param>
            <remarks>Duplicated in RewriteController.cs</remarks>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.FriendlyUrlController.EnsureLeadingChar(System.String,System.String)">
            <summary>
            Ensures that the path starts with the leading character
            </summary>
            <param name="leading"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.IExtensionUrlProviderSettingsControl.SaveSettings">
            <summary>
            Build the Settings Dictionary and return it to the caller to persist to the database
            </summary>
            <returns></returns>
        </member>
        <member name="T:DotNetNuke.Entities.Urls.PageIndexData">
            <summary>
            The PageIndexData class is used during the page index build process.
            </summary>
        </member>
        <member name="T:DotNetNuke.Entities.Urls.PagingInfo">
            <summary>
            Class used as a utility to help manage paging in database queries
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.RedirectController.CancelRedirect(DotNetNuke.Entities.Urls.UrlAction@,System.Web.HttpContext,DotNetNuke.Entities.Urls.FriendlyUrlSettings,System.String)">
            <summary>
            Cancels a redirect
            </summary>
            <param name="result"></param>
            <param name="context"></param>
            <param name="settings"></param>
            <param name="message"></param>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.RedirectController.CheckForModuleProviderRedirect(System.Uri,DotNetNuke.Entities.Urls.UrlAction@,System.Collections.Specialized.NameValueCollection,DotNetNuke.Entities.Urls.FriendlyUrlSettings,System.Guid)">
            <summary>
            Checks for a redirect based on a module friendly url provider rule
            </summary>
            <param name="requestUri"></param>
            <param name="result"></param>
            <param name="queryStringCol"></param>
            <param name="settings"></param>
            <param name="parentTraceId"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.RedirectController.GetTabRedirectUrl(DotNetNuke.Entities.Tabs.TabInfo,DotNetNuke.Entities.Urls.FriendlyUrlSettings,System.String,DotNetNuke.Entities.Urls.UrlAction,System.Boolean@,System.Guid)">
            <summary>
            Gets a redirect Url for when the tab has a specified external Url that is of type 'TabType.Tab'.  This covers both
            'PermanentRedirect' and 'ExternalUrl' scenarios, where the settings are to redirect the value.
            </summary>
            <param name="tab"></param>
            <param name="settings"></param>
            <param name="cleanPath"></param>
            <param name="result"></param>
            <param name="permRedirect"></param>
            <param name="parentTraceId"></param>
            <returns></returns>
            <remarks>823 : Moved from CheckForRedirects to allow call earlier in pipeline</remarks>
        </member>
        <member name="T:DotNetNuke.Entities.Urls.RedirectTokens">
            <summary>
            This class contains helpers which set the redirect action and reason tokens.  These are fake additions to the rewritten query string
            which are used as a type of property to store intent of a particular url in the page index.  This is done to keep the base type 
            stored in the page index dictionary as a value type (string) rather than a object type with properties.  So the two 'properties'
            of a Url are the action (ie 301 redirect, 302 redirect, 404, etc) and the reason (home page redirect, etc) are stored as 
            part of the rewritten querystring in the index.   These then have to be removed and translated back to 'action' parameters
            when the rewriting actually happens.  So all methods in this class are to do with either storing or retrieving these tokens.
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.RedirectTokens.GetRedirectReasonTokensFromRewritePath(System.String)">
            <summary>
            Returns the list of tokens found in a rewrite path as a key/value dictionary
            </summary>
            <param name="rewritePath">
                Rewritten Url path
            </param>
            <returns></returns>
            <summary>
            Returns a list of the redirect tokens found in the querystring
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.RedirectTokens.AddRedirectReasonToRewritePath(System.String,DotNetNuke.Entities.Urls.ActionType,DotNetNuke.Entities.Urls.RedirectReason)">
            <summary>
            Adds on a redirect reason to the rewrite path
            </summary>
            <param name="existingRewritePath"></param>
            <param name="action"></param>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.RedirectTokens.DetermineRedirectReasonAndAction(System.String,DotNetNuke.Entities.Urls.UrlAction,System.Boolean,DotNetNuke.Entities.Urls.FriendlyUrlSettings,System.String@,DotNetNuke.Entities.Urls.RedirectReason@,DotNetNuke.Entities.Urls.ActionType@)">
            <summary>
            DetermineRedirectReasonAndAction extracts the redirect value from the rewrite url and 
            returns the new rewritten url, and the reason for the redirection, and an action value for the type of redirect
            </summary>
            <param name="rewrittenUrl">Rewritten url as found in page dictionary</param>
            <param name="result">The current rewrite result.</param>
            <param name="wasParms">true if there are parameters in the path, false if not</param>
            <param name="settings">current FriendlyUrlSettings object</param>
            <param name="action">New action value for UrlAction object</param>
            <param name="reason">New redirect reason value for UrlAction object</param>
            <param name="newUrl">Url to used for rewrite process</param>
            <returns>the new Url, with any replacements done.  Replacements occur when a reason token
            was stored in the tab dictionary entry just to indicate a redirect reason.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.RedirectTokens.GetActionFromRewritePath(System.String,DotNetNuke.Entities.Urls.ActionType@)">
            <summary>
            Return the action type from a rewritten Url
            </summary>
            <param name="rewrittenUrl"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.RedirectTokens.RemoveAnyRedirectReasons(System.String)">
            <summary>
            Removes any reason tokens from the querystring
            </summary>
            <param name="rewritePath"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.RedirectTokens.RemoveAnyRedirectTokens(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Removes any redirect tokens from the rewrite path
            </summary>
            <param name="path"></param>
            <param name="queryStringCol"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.RedirectTokens.RemoveAnyRedirectTokensAndReasons(System.String)">
            <summary>
            Removes and redirect tokens and redirect reasons from the rewritePath
            </summary>
            <param name="rewritePath"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.RedirectTokens.SetRedirectReasonAndAction(DotNetNuke.Entities.Urls.UrlAction@,DotNetNuke.Entities.Urls.FriendlyUrlSettings)">
            <summary>
            Sets the Action and Reason values in the UrlAction parameter
            </summary>
            <param name="result"></param>
            <param name="settings"></param>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.RewriteController.AddLanguageCodeToRewritePath(System.String@,System.String)">
            <summary>
            appends a language/culture code value if it is not already present in the rewrite path
            </summary>
            <param name="rewritePath"></param>
            <param name="cultureCode"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.RewriteController.AddSkinToRewritePath(System.Int32,System.Int32,System.String@,System.String,System.String@)">
            <summary>
            appends a skin value to the rewrite path, as long as there is no existing skin in the path
            </summary>
            <param name="portalId"></param>
            <param name="rewritePath">The current rewrite path</param>
            <param name="skin">The selected skin</param>
            <param name="tabId"></param>
            <param name="message"></param>
            <remarks>852 : Add skin src to rewrite path for specific aliases</remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.RewriteController.CanRewriteRequest(DotNetNuke.Entities.Urls.UrlAction,System.String,DotNetNuke.Entities.Urls.FriendlyUrlSettings)">
            <summary>
            Checks for exclusions on Rewriting the path, based on a regex pattern
            </summary>
            <param name="result"></param>
            <param name="requestedPath"></param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.RewriteController.GetRewriteOrRequestedPath(DotNetNuke.Entities.Urls.UrlAction,System.Uri)">
            <summary>
            Returns either the rewritten path (if a rewrite used) or the requested path (if no rewrite used)
            </summary>
            <param name="result"></param>
            <param name="requestUri"></param>
            <returns>Url suitable for input into friendly url generation routine</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.RewriteController.IdentifyByPhysicalResource(System.String,System.String,System.Collections.Specialized.NameValueCollection,DotNetNuke.Entities.Urls.UrlAction@,System.Boolean,DotNetNuke.Entities.Urls.FriendlyUrlSettings,System.Boolean@,System.Boolean@,System.Guid)">
            <summary>
            Identifies a request for a physical file on the system
            </summary>
            <param name="physicalPath">The Physical Path propery of the request</param>
            <param name="fullUrl"></param>
            <param name="queryStringCol"></param>
            <param name="result"></param>
            <param name="useFriendlyUrls"></param>
            <param name="settings"></param>
            <param name="isPhysicalResource"></param>
            <param name="checkFurtherForRewrite"></param>
            <param name="parentTraceId"></param>
            <returns>true if a physical path, false if not</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.RewriteController.IsAdminTab(System.Int32,System.String,DotNetNuke.Entities.Urls.FriendlyUrlSettings)">
            <summary>
            Replaces the core IsAdminTab call which was decommissioned for DNN 5.0
            </summary>
            <param name="portalId"></param>
            <param name="tabPath">The path of the tab //admin//someothername</param>
            <param name="settings"></param>
            /// <remarks>Duplicated in UrlMasterController.cs</remarks>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.RewriteController.IsExcludedFromFriendlyUrls(DotNetNuke.Entities.Tabs.TabInfo,DotNetNuke.Entities.Urls.FriendlyUrlSettings,System.Boolean)">
            <summary>
            Determines if the tab is excluded from FriendlyUrl Processing
            </summary>
            <param name="tab"></param>
            <param name="settings"></param>
            <param name="rewriting">If true, we are checking for rewriting purposes, if false, we are checking for friendly Url Generating.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.RewriteController.RequestRedirectOnBuiltInUrl(System.String,System.String,DotNetNuke.Entities.Urls.UrlAction)">
            <summary>
            Checks for a current parameter belonging to one of the built in 'ctl' values
            </summary>
            <param name="urlParm"></param>
            <param name="rewritePath"></param>
            <param name="result"></param>
            <remarks>Sets the Action parameter of the Result to 'CheckFor301' if suspected. Actual redirect taken care of by friendly url redirection logic</remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.RewriteController.RewriteParameters(System.String,System.String,System.String[],DotNetNuke.Entities.Urls.UrlAction,System.String,DotNetNuke.Entities.Urls.FriendlyUrlSettings,System.String@)">
            <summary>
            converts an array of Url path sections into the rewritten string of parameters for the requested Url
            </summary>
            <param name="newUrl">The current candidate for the rewritten tab path, as found in the tab dictionary</param>
            <param name="tabKeyVal">The tabKey value which was used to find the current newUrl value</param>
            <param name="urlParms">The Url path (after the tab name) converted to an array</param>
            <param name="result">The UrlAction parameter keeping track of the values</param>
            <param name="langParms">The raw language/xx-XX values from the requested Url</param>
            <param name="settings">The current friendly url settings</param>
            <param name="cultureCode">an out parameter identifying if a culture code was determined during the process.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.RewriteController.RewriteParameters(System.String,System.String,System.String[],System.Boolean,DotNetNuke.Entities.Urls.UrlAction,System.Boolean@,System.Guid)">
            <summary>
            Scans the collection of Rewrite Parameter rules, and rewrites the parameters if a match is found
            </summary>
            <param name="newUrl"></param>
            <param name="tabKeyVal"></param>
            <param name="urlParms"></param>
            <param name="isSiteRoot"></param>
            <param name="urlAction"></param>
            <param name="rewriteParms"></param>
            <param name="parentTraceId"></param>
            <returns>The new Url with the parameters rewritten onto the end of hte old Url</returns>
        </member>
        <member name="T:DotNetNuke.Entities.Urls.StringLengthComparer">
            <summary>
            The StringLengthComparer class is a comparer override used for sorting portal aliases by length
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.TabIndexController.PortalExistsInIndex(DotNetNuke.Collections.Internal.SharedDictionary{System.Int32,DotNetNuke.Entities.Urls.PathSizes},System.Int32)">
            <summary>
            Returns whether the portal specified exists in the Tab index or not.
            </summary>
            <param name="portalDepths">The current portalDepths dictionary.</param>
            <param name="portalId">The id of the portal to search for.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.TabIndexController.FetchTabDictionary(System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@,DotNetNuke.Entities.Urls.FriendlyUrlSettings,System.Boolean,System.Boolean,System.Guid)">
            <summary> 
            Gets the Tab Dictionary from the DataCache memory location, if it's empty or missing, builds a new one. 
            </summary>
            <param name="portalId"></param>
            <param name="minTabPathDepth">ByRef parameter to return the minimum tab path depth (the number of '/' in the tab path)</param> 
            <param name="maxTabPathDepth">ByRef parameter to return the maximum tab path depth (the number of '/' in the tab path)</param> 
            <param name="minAliasPathDepth">ByRef parameter to return the minimum alias path depth (the number of '/' in the alias path</param> 
            <param name="maxAliasPathDepth">ByRef parameter to return the maximum alias path depth (the number of '/' in the alias path)</param>
            <param name="settings"></param>
            <param name="forceRebuild"></param>
            <param name="bypassCache"></param>
            <param name="parentTraceId"></param>
            <returns>Dictionary (string, string) of Tab paths in tab key, with the rewrite path as the value</returns> 
            <remarks>
            Changes
            Task 608 : Incrementally build tab dictionary instead of building entire dicitionary all at once
            Task 609 : If usePortalAlias is specified, only build dictionary with specific portal alias : ignore others
            Task 791 : allow for specification of true/false for using thread locking to prevent multiple rebuilds on threads
            </remarks> 
        </member>
        <member name="M:DotNetNuke.Entities.Urls.TabIndexController.GetCustomPortalAliases(DotNetNuke.Entities.Urls.FriendlyUrlSettings)">
            <summary>
            Returns a list of aliases that are used in custom tab/alias association.
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.TabIndexController.GetPortalAliasByPortal(System.Int32,System.String)">
            <summary>
            Gets the portal alias by portal.
            </summary>
            <param name="portalId">The portal id.</param>
            <param name="portalAlias">The portal alias.</param>
            <returns>Portal alias.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.TabIndexController.GetPortalAliases(DotNetNuke.Entities.Urls.FriendlyUrlSettings)">
            <summary>
            Returns an ordered dictionary of alias regex patterns.  These patterns are used to identify a portal alias by getting a match.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.TabIndexController.GetTabPath(DotNetNuke.Entities.Tabs.TabInfo,DotNetNuke.Entities.Urls.FriendlyUrlOptions,System.Guid)">
            <summary>
            Returns the tab path of the base DNN tab.  Ie /Home or /Somepage/SomeOtherPage
            </summary>
            <param name="tab"></param>
            <param name="options"></param>
            <param name="parentTraceId"></param>
            <remarks>Will remove // from the tabPath as stored in the Tabs object/table</remarks>
            <returns></returns>
        </member>
        <member name="T:DotNetNuke.Entities.Urls.TabPathHelper">
            <summary>
            The TabPathHelper class provides helper methods for working with tab urls
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.TabPathHelper.GetFriendlyUrlTabPath(DotNetNuke.Entities.Tabs.TabInfo,DotNetNuke.Entities.Urls.FriendlyUrlOptions,System.Guid)">
            <summary>
            Get the tab path for the supplied Tab
            </summary>
            <param name="tab"></param>
            <param name="options"></param>
            <param name="parentTraceId"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.TabPathHelper.GetHomePageTabIdForCulture(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Finds a culture-specific homepage tabid for a non-default language
            </summary>
            <param name="defaultCulture">The default culture of the portal</param>
            <param name="cultureCode"></param>
            <param name="defaultHomeTabId">The default home page tab id</param>
            <param name="portalId"></param>
            <returns>THe valid home page tabid for the portalid and culture</returns>
            <remarks>Note if no specific home page found for the culture, will return defaultHomeTabId back</remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.TabPathHelper.GetTabPath(DotNetNuke.Entities.Tabs.TabInfo,DotNetNuke.Entities.Urls.FriendlyUrlSettings,DotNetNuke.Entities.Urls.FriendlyUrlOptions,System.Boolean,System.Boolean,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean@,System.String@,System.Boolean@,System.Guid)">
            <summary>
            For the supplied options, return a tab path for the specified tab
            </summary>
            <param name="tab">TabInfo object of selected tab</param>
            <param name="settings">FriendlyUrlSettings</param>
            <param name="options"></param>
            <param name="ignoreCustomRedirects">Whether to add in the customised Tab redirects or not</param>
            <param name="homePageSiteRoot"></param>
            <param name="isHomeTab"></param>
            <param name="cultureCode"></param>
            <param name="isDefaultCultureCode"></param>
            <param name="hasPath"></param>
            <param name="dropLangParms"></param>
            <param name="customHttpAlias"></param>
            <param name="isCustomPath"></param>
            <param name="parentTraceId"></param>
            <remarks>751 : include isDefaultCultureCode flag to determine when using the portal default language
            770 : include custom http alias output for when the Url uses a specific alias due to custom Url rules
             : include new out parameter 'isCustomPath' to return whether the Url was generated from Url-Master custom url
            </remarks>
            <returns>The tab path as specified</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.TabPathHelper.ReplaceDiacritics(System.String,System.Boolean@)">
            <summary>
            Replaces the diacritic characters in a path with other values
            </summary>
            <param name="tabPath"></param>
            <param name="replacedDiacritic"></param>
            <returns></returns>
        </member>
        <member name="T:DotNetNuke.Entities.Urls.UrlAction">
            <summary>
            The UrlAction class keeps state of the current Request throughout the rewriting process
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.UrlAction.SetActionWithNoDowngrade(DotNetNuke.Entities.Urls.ActionType)">
            <summary>
            Sets the action value, but checks to ensure that the action is 
            not being 'downgraded' (example: cannot set 'Redirect301' to 'CheckFor301')
            </summary>
            <param name="newAction"></param>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.UrlAction.SetOriginalPath(System.String,DotNetNuke.Entities.Urls.FriendlyUrlSettings)">
            <summary>
            Copies the original request path to the OriginalPath variables (originalPath, originanPathNoAlias)
            </summary>
            <param name="path"></param>
            <param name="settings"></param>
        </member>
        <member name="T:DotNetNuke.Entities.Urls.UrlRewriterBase">
            <summary>
            Abstract class to allow derived classes of different implementations of Url Rewriter
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.UrlRewriterUtils.GetOptionsFromSettings(DotNetNuke.Entities.Urls.FriendlyUrlSettings)">
            <summary>
            Return a FriendlyUrlOptions object from the provider settings
            </summary>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.UrlRewriterUtils.ExtendOptionsForCustomURLs(DotNetNuke.Entities.Urls.FriendlyUrlOptions)">
            <summary>
            Return an extended FriendlyUrlOptions object for Custom URLs checkings
            </summary>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.UrlRewriterUtils.Log404(System.Web.HttpRequest,DotNetNuke.Entities.Urls.FriendlyUrlSettings,DotNetNuke.Entities.Urls.UrlAction)">
            <summary>
            Logs the 404 error to a table for later checking 
            </summary>
            <param name="request"></param>
            <param name="settings"></param>
            <param name="result"></param>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.UrlRewriterUtils.LogExceptionInRequest(System.Exception,System.String,DotNetNuke.Entities.Urls.UrlAction)">
            <summary>
            logs an exception once per cache-lifetime
            </summary>
            <param name="ex"></param>
            <param name="status"></param>
            <param name="result"></param>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.UrlRewriterUtils.CleanExtension(System.String,DotNetNuke.Entities.Urls.FriendlyUrlSettings,System.String)">
            <summary>
            Clean Page name to remove page extension.
            </summary>
            <param name="value">page name.</param>
            <param name="settings">friendly url settings.</param>
            <param name="langParms">language.</param>
            <returns></returns>
        </member>
        <member name="T:DotNetNuke.Entities.Urls.XmlHelpers">
            <summary>
            The Xml Helpers class is used to read in parameter rewrite/replace/redirect rules from the friendlyUrlParms.config file
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Urls.XmlHelpers.TabIdsFromAttributes(System.String,System.String,System.Int32,System.Collections.Generic.List{System.String}@)">
            <summary>
            Returns a tab id from either a raw tabId, or a list of tab names delimited by ';'
            </summary>
            <param name="tabIdsRaw"></param>
            <param name="tabNames"></param>
            <param name="portalId"></param>
            <param name="messages"></param>
            <returns></returns>
        </member>
        <member name="T:DotNetNuke.Entities.BaseEntityInfo">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.Entities
            Class	 : BaseEntityInfo
            -----------------------------------------------------------------------------
            <summary>
            BaseEntityInfo provides auditing fields for Core tables.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.BaseEntityInfo.CreatedByUserID">
            -----------------------------------------------------------------------------
            <summary>
            Gets the CreatedByUserID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.BaseEntityInfo.CreatedOnDate">
            -----------------------------------------------------------------------------
            <summary>
            Gets the CreatedOnDate
            </summary>
            <returns>A DateTime</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.BaseEntityInfo.LastModifiedByUserID">
            -----------------------------------------------------------------------------
            <summary>
            Gets the LastModifiedByUserID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Entities.BaseEntityInfo.LastModifiedOnDate">
            -----------------------------------------------------------------------------
            <summary>
            Gets the LastModifiedOnDate
            </summary>
            <returns>A DateTime</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.BaseEntityInfo.CreatedByUser(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the UserInfo object associated with this user
            </summary>
            <param name="portalId">The PortalID associated with the desired user</param>
            <returns>A UserInfo object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.BaseEntityInfo.LastModifiedByUser(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the UserInfo object associated with this user
            </summary>
            <param name="portalId">The PortalID associated with the desired user</param>
            <returns>A UserInfo object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.BaseEntityInfo.FillInternal(System.Data.IDataReader)">
            -----------------------------------------------------------------------------
            <summary>
            Fills a BaseEntityInfo from a Data Reader
            </summary>
            <param name="dr">The Data Reader to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Entities.BaseEntityInfo.FillBaseProperties(System.Data.IDataReader)">
            <summary>
            method used by cbo to fill readonly properties ignored by HydrateObject reflection
            </summary>
            <param name="dr">the data reader to use</param>
            <remarks></remarks>
        </member>
        <member name="T:DotNetNuke.Entities.Icons.IconController">
            <summary>
            IconController provides all operation to icons.
            </summary>
            <remarks>
            Tab is equal to page in DotNetNuke.
            Tabs will be a sitemap for a poatal, and every request at first need to check whether there is valid tab information
            include in the url, if not it will use default tab to display information.
            </remarks>
        </member>
        <member name="M:DotNetNuke.Entities.Icons.IconController.IconURL(System.String)">
            <summary>
            Gets the Icon URL.
            </summary>
            <param name="key">Key to icon, e.g. edit</param>        
            <returns>Link to the image, e.g. /Icons/Sigma/edit_16x16_standard.png</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Icons.IconController.IconURL(System.String,System.String)">
            <summary>
            Gets the Icon URL.
            </summary>
            <param name="key">Key to icon, e.g. edit</param>        
            <param name="size">Size of icon, e.g.16x16 (default) or 32x32</param>
            <returns>Link to the image, e.g. /Icons/Sigma/edit_16x16_standard.png</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Icons.IconController.IconURL(System.String,System.String,System.String)">
            <summary>
            Gets the Icon URL.
            </summary>
            <param name="key">Key to icon, e.g. edit</param>        
            <param name="size">Size of icon, e.g.16x16 (default) or 32x32</param>
            <param name="style">Style of icon, e.g. Standard (default)</param>
            <returns>Link to the image, e.g. /Icons/Sigma/edit_16x16_standard.png</returns>
        </member>
        <member name="T:DotNetNuke.Entities.Controllers.HostController">
            <summary>
            HostController provides business layer of host settings.
            </summary>
            <example>
            <code lang="C#">
            public static bool CheckUpgrade
            {
                get
                {
                    return HostController.Instance.GetBoolean("CheckUpgrade", true);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.HostController.#ctor">
            <summary>
            Initializes a new instance of the HostController class
            </summary>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.HostController.GetBoolean(System.String)">
            <summary>
            Gets the setting value by the specific key.
            </summary>
            <param name="key">The key.</param>
            <returns>host setting's value.</returns>
            <exception cref="T:System.ArgumentException">key is empty.</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.HostController.GetBoolean(System.String,System.Boolean)">
            <summary>
            Gets the setting value by the specific key.
            </summary>
            <param name="key">The key.</param>
            <param name="defaultValue">this value will be return if setting's value is empty.</param>
            <returns>host setting's value.</returns>
            <exception cref="T:System.ArgumentException">key is empty.</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.HostController.GetDouble(System.String)">
            <summary>
            Gets the setting value by the specific key.
            </summary>
            <param name="key">The key.</param>
            <returns>host setting's value.</returns>
            <exception cref="T:System.ArgumentException">key is empty.</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.HostController.GetDouble(System.String,System.Double)">
            <summary>
            Gets the setting value by the specific key.
            </summary>
            <param name="key">The key.</param>
            <param name="defaultValue">this value will be return if setting's value is empty.</param>
            <returns>host setting's value.</returns>
            <exception cref="T:System.ArgumentException">key is empty.</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.HostController.GetInteger(System.String)">
            <summary>
            Gets the setting value by the specific key.
            </summary>
            <param name="key">The key.</param>
            <returns>host setting's value.</returns>
            <exception cref="T:System.ArgumentException">key is empty.</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.HostController.GetInteger(System.String,System.Int32)">
            <summary>
            Gets the setting value by the specific key.
            </summary>
            <param name="key">The key.</param>
            <param name="defaultValue">this value will be return if setting's value is empty.</param>
            <returns>host setting's value.</returns>
            <exception cref="T:System.ArgumentException">key is empty.</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.HostController.GetSettings">
            <summary>
            Gets all host settings.
            </summary>
            <returns>host setting.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.HostController.GetSettingsDictionary">
            <summary>
            Gets all host settings as dictionary.
            </summary>
            <returns>host setting's value.</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.HostController.GetEncryptedString(System.String,System.String)">
            <summary>
            takes in a text value, decrypts it with a FIPS compliant algorithm and returns the value
            </summary>
            <param name="key">the host setting to read</param>
            <param name="passPhrase">the pass phrase used for encryption/decryption</param>
            <returns>The setting value as a <see cref="T:System.String"/></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.HostController.GetString(System.String)">
            <summary>
            Gets the setting value by the specific key.
            </summary>
            <param name="key">The key.</param>
            <returns>host setting's value.</returns>
            <exception cref="T:System.ArgumentException">key is empty.</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.HostController.GetString(System.String,System.String)">
            <summary>
            Gets the setting value by the specific key.
            </summary>
            <param name="key">The key.</param>
            <param name="defaultValue">this value will be return if setting's value is empty.</param>
            <returns>host setting's value.</returns>
            <exception cref="T:System.ArgumentException">key is empty.</exception>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.HostController.Update(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Updates the specified settings.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.HostController.Update(DotNetNuke.Entities.ConfigurationSetting)">
            <summary>
            Updates the specified config.
            </summary>
            <param name="config">The config.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.HostController.Update(DotNetNuke.Entities.ConfigurationSetting,System.Boolean)">
            <summary>
            Updates the specified config.
            </summary>
            <param name="config">The config.</param>
            <param name="clearCache">if set to <c>true</c> will clear cache after updating the setting.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.HostController.Update(System.String,System.String,System.Boolean)">
            <summary>
            Updates the specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <param name="clearCache">if set to <c>true</c> will clear cache after update settings.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.HostController.Update(System.String,System.String)">
            <summary>
            Updates the setting for a specified key.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.HostController.UpdateEncryptedString(System.String,System.String,System.String)">
            <summary>
            Takes in a <see cref="T:System.String"/> value, encrypts it with a FIPS compliant algorithm and stores it.
            </summary>
            <param name="key">host settings key</param>
            <param name="value">host settings value</param>
            <param name="passPhrase">pass phrase to allow encryption/decryption</param>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.HostController.IncrementCrmVersion(System.Boolean)">
            <summary>
            Increments the Client Resource Manager (CRM) version to bust local cache
            </summary>
            <param name="includeOverridingPortals">If true also forces a CRM version increment on portals that have non-default settings for CRM</param>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.HostController.GetSettingsFromDatabase">
            <summary>
            Gets all settings from the databse
            </summary>
            <returns><see cref="!:Dictionary"/>&lt;<see cref="T:System.String"/>, <see cref="T:DotNetNuke.Entities.ConfigurationSetting"/>&gt;</returns>
        </member>
        <member name="T:DotNetNuke.Entities.Controllers.IHostController">
            <summary>
            Interface of HostController.
            </summary>
            <example>
            <code lang="C#">
            public static bool CheckUpgrade
            {
                get
                {
                    return HostController.Instance.GetBoolean("CheckUpgrade", true);
                }
            }
            </code>
            </example>
            <seealso cref="T:DotNetNuke.Entities.Controllers.HostController"/>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.IHostController.GetBoolean(System.String)">
            <summary>
            Gets the setting value for the specific key
            </summary>
            <param name="key">The setting key string</param>
            <returns>host setting as a boolean</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.IHostController.GetBoolean(System.String,System.Boolean)">
            <summary>
            Gets the setting value for the specific key
            </summary>
            <param name="key">The setting key string</param>
            <param name="defaultValue">Default value returned if the setting is not found or not compatible with the requested type</param>
            <returns>host setting or the provided default value as a <see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.IHostController.GetDouble(System.String,System.Double)">
            <summary>
            Gets the setting value for the specific key
            </summary>
            <param name="key">The setting key string</param>
            <param name="defaultValue">Default value returned if the setting is not found or not compatible with the requested type</param>
            <returns>Host setting or the provided default value as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.IHostController.GetDouble(System.String)">
            <summary>
            Gets the setting value for the specific key
            </summary>
            <param name="key">The setting key string</param>
            <returns>Host setting as a <see cref="T:System.Double"/></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.IHostController.GetInteger(System.String)">
            <summary>
            Gets the setting value for the specific key
            </summary>
            <param name="key">The setting key string</param>
            <returns>Host setting as an <see cref="T:System.Int32"/></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.IHostController.GetInteger(System.String,System.Int32)">
            <summary>
            Gets the setting value for the specific key
            </summary>
            <param name="key">The setting key string</param>
            <param name="defaultValue">Default value returned if the setting is not found or not compatible with the requested type</param>
            <returns>Host setting or provided default value as a <see cref="T:System.Int32"/></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.IHostController.GetSettings">
            <summary>
            Gets the host settings
            </summary>
            <returns>Host settings as a <see cref="!:Dictionary"/>&lt;<see cref="T:System.String"/>, <see cref="T:DotNetNuke.Entities.ConfigurationSetting"/>&gt;</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.IHostController.GetSettingsDictionary">
            <summary>
            Gets the host settings
            </summary>
            <returns>Host settings as a <see cref="!:Dictionary"/>&lt;<see cref="T:System.String"/>, <see cref="T:System.String"/>&gt;</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.IHostController.GetEncryptedString(System.String,System.String)">
            <summary>
            Gets an encrypted host setting as a <see cref="T:System.String"/>
            </summary>
            <param name="key">The setting key string</param>
            <param name="passPhrase">The passPhrase used to decrypt the setting value</param>
            <returns>The setting value as a <see cref="T:System.String"/></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.IHostController.GetString(System.String)">
            <summary>
            Gets the setting value for a specific key
            </summary>
            <param name="key">The setting key string</param>
            <returns>The setting value as a <see cref="T:System.String"/></returns>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.IHostController.GetString(System.String,System.String)">
            <summary>
            Gets the setting value for a specific key
            </summary>
            <param name="key">The seeting key string</param>
            <param name="defaultValue"></param>
            <returns>Default value returned if the setting is not found</returns>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.IHostController.Update(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Updates the specified settings
            </summary>
            <param name="settings">The settings to update</param>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.IHostController.Update(DotNetNuke.Entities.ConfigurationSetting)">
            <summary>
            Updates the specified config
            </summary>
            <param name="config">The configuration setting</param>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.IHostController.Update(DotNetNuke.Entities.ConfigurationSetting,System.Boolean)">
            <summary>
            Updates the specified config, ontionally clearing the cache
            </summary>
            <param name="config">The configuaration setting</param>
            <param name="clearCache">If set to <c>true</c>, will clear the cache after updating the setting.</param>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.IHostController.Update(System.String,System.String,System.Boolean)">
            <summary>
            Updates the setting for a specific key
            </summary>
            <param name="key">The setting key string</param>
            <param name="value">The value to update</param>
            <param name="clearCache">If set to <c>true</c>, will clear the cache after updating the setting</param>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.IHostController.Update(System.String,System.String)">
            <summary>
            Updates the setting for a specific key
            </summary>
            <param name="key">The setting key string</param>
            <param name="value">The value to update</param>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.IHostController.UpdateEncryptedString(System.String,System.String,System.String)">
            <summary>
            Takes in a <see cref="T:System.String"/> value, encrypts it with a FIPS compliant algorithm and stores
            </summary>
            <param name="key">host settings key</param>
            <param name="value">host settings value</param>
            <param name="passPhrase">pass phrase to allow encryption/decryption</param>
        </member>
        <member name="M:DotNetNuke.Entities.Controllers.IHostController.IncrementCrmVersion(System.Boolean)">
            <summary>
            Increments the Client Resource Manager (CRM) version to bust local cache
            </summary>
            <param name="includeOverridingPortals">If true also forces a CRM version increment on portals that have non-default settings for CRM</param>
        </member>
        <member name="T:DotNetNuke.Collections.EnumerableExtensions">
            <summary>
            Provides extensions to IEnumerable
            </summary>
        </member>
        <member name="M:DotNetNuke.Collections.EnumerableExtensions.ToDataTable(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Converts dynamic data to a DataTable. Useful for databinding.
            </summary>
            <param name="items">The items in the IEnumerable</param>
            <returns>A DataTable with the copied dynamic data.</returns>
        </member>
        <member name="T:DotNetNuke.Collections.CollectionExtensions">
            <summary>
            Provides a collection of useful extensions to collections
            </summary>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.CreateDictionaryFromString(System.String,System.Char,System.Char)">
            <summary>
            Converts a string with multiple key-value pairs into a Dictionary, if there are duplicated keys in your string 
            only the first found key is kept since keys must be unique in a Dictionary
            </summary>
            <param name="stringOfPairs">The string containing the key-value pairs</param> 
            <param name="pairsSeparator">The separator used to separate each key-value pair</param>
            <param name="pairSeparator">The separator used between the each key and value</param>
            <returns>Dictionary with a string key and a string value</returns> 
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.DictionaryToString(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String)">
            <summary>
            Converts a Dictionary with a string key and a string value into a plain string separated by your choice of separators
            </summary>
            <param name="dictionary">The Dictionary to convert</param>
            <param name="pairsSeparator">The separator to use between key-value pairs</param>
            <param name="pairSeparator">The separator to use between each key and value</param>
            <returns>The dictionary's contents as a <see cref="T:System.String" /></returns> 
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetFlexibleBooleanParsingFunction">
            <summary>
            Gets a converter function which parses a <see cref="T:System.String"/> value into a <see cref="T:System.Boolean"/>.
            Considers the value <c>true</c> if it is one of the following (case-insensitive):
            <list type="bullet">
            <item><term>true</term></item>
            <item><term>on</term></item>
            <item><term>1</term></item>
            <item><term>yes</term></item>
            </list>
            </summary>
            <returns>A <see cref="T:System.Func`2" /> instance.</returns>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetFlexibleBooleanParsingFunction(System.String[])">
            <summary>Gets a converter function which parses a <see cref="T:System.String"/> value into a <see cref="T:System.Boolean"/>.</summary>
            <param name="trueValues">The <see cref="T:System.String"/> values (case-insensitive) which should be parsed as <c>true</c>.</param>
            <returns>A <see cref="T:System.Func`2" /> instance.</returns>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValue``1(System.Collections.IDictionary,System.String)">
            <summary>Gets the value from the dictionary.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key by which to get the value.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.InvalidCastException">
            the value is <c>null</c> and <typeparamref name="T"/> is a value type, or
            the value does not implement the <see cref="T:System.IConvertible"/> interface and
            no cast is defined from the value to <typeparamref name="T"/>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException"><paramref name="dictionary"/> does not contain a value for <paramref name="key"/></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValue``1(System.Linq.ILookup{System.String,System.String},System.String)">
            <summary>Gets the value from the lookup.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="lookup">The lookup.</param>
            <param name="key">The key by which to get the value.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.InvalidCastException">
            the value is <c>null</c> and <typeparamref name="T"/> is a value type, or
            the value does not implement the <see cref="T:System.IConvertible"/> interface and
            no cast is defined from the value to <typeparamref name="T"/>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="lookup"/> is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="lookup"/> has multiple values for the given <paramref name="key"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="lookup"/> does not contain a value for <paramref name="key"/></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValue``1(System.Xml.XPath.IXPathNavigable,System.String)">
            <summary>Gets the value from the XML node's child elements, returning the default value of <typeparamref key="T" /> if the value doesn't exist.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="node">An XML node which containers other elements.</param>
            <param name="key">The name of the element from which to get the value.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.InvalidCastException">
            the value is <c>null</c> and <typeparamref name="T"/> is a value type, or
            the value does not implement the <see cref="T:System.IConvertible"/> interface and
            no cast is defined from the value to <typeparamref name="T"/>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException"><paramref name="node"/> does not contain a value for <paramref name="key"/></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValue``1(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>Gets the value from the collection.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="collection">The collection.</param>
            <param name="key">The key by which to get the value.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.InvalidCastException">
            the value is <c>null</c> and <typeparamref name="T"/> is a value type, or
            the value does not implement the <see cref="T:System.IConvertible"/> interface and
            no cast is defined from the value to <typeparamref name="T"/>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="collection"/> has multiple values for the given <paramref name="key"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="collection"/> does not contain a value for <paramref name="key"/></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValue``1(System.Xml.Linq.XContainer,System.String)">
            <summary>Gets the value from the XML node's child elements.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="node">An XML node which containers other elements.</param>
            <param name="key">The name of the element from which to get the value.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.InvalidCastException">
            the value is <c>null</c> and <typeparamref name="T"/> is a value type, or
            the value does not implement the <see cref="T:System.IConvertible"/> interface and
            no cast is defined from the value to <typeparamref name="T"/>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException"><paramref name="node"/> does not contain a value for <paramref name="key"/></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValue``1(System.Collections.IDictionary,System.String,System.Func{System.Object,``0})">
            <summary>Gets the value from the dictionary.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key by which to get the value.</param>
            <param name="converter">A function to convert the value as an <see cref="T:System.Object"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> or <paramref name="converter"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException"><paramref name="dictionary"/> does not contain a value for <paramref name="key"/></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValue``1(System.Linq.ILookup{System.String,System.String},System.String,System.Func{System.Object,``0})">
            <summary>Gets the value from the lookup.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="lookup">The lookup.</param>
            <param name="key">The key by which to get the value.</param>
            <param name="converter">A function to convert the value as an <see cref="T:System.Object"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="lookup"/> is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="lookup"/> has multiple values for the given <paramref name="key"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="lookup"/> does not contain a value for <paramref name="key"/></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValue``1(System.Xml.XPath.IXPathNavigable,System.String,System.Func{System.Object,``0})">
            <summary>Gets the value from the XML node's child elements.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="node">An XML node which containers other elements.</param>
            <param name="key">The name of the element from which to get the value.</param>
            <param name="converter">A function to convert the value as an <see cref="T:System.Object"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException"><paramref name="node"/> does not contain a value for <paramref name="key"/></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValue``1(System.Collections.Specialized.NameValueCollection,System.String,System.Func{System.Object,``0})">
            <summary>Gets the value from the collection.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="collection">The collection.</param>
            <param name="key">The key by which to get the value.</param>
            <param name="converter">A function to convert the value as an <see cref="T:System.Object"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="collection"/> has multiple values for the given <paramref name="key"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="collection"/> does not contain a value for <paramref name="key"/></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValue``1(System.Xml.Linq.XContainer,System.String,System.Func{System.Object,``0})">
            <summary>Gets the value from the XML node's child elements.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="node">An XML node which containers other elements.</param>
            <param name="key">The name of the element from which to get the value.</param>
            <param name="converter">A function to convert the value as an <see cref="T:System.Object"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException"><paramref name="node"/> does not contain a value for <paramref name="key"/></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValue``1(System.Collections.IDictionary,System.String,System.Func{System.String,``0})">
            <summary>Gets the value from the dictionary.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key by which to get the value.</param>
            <param name="converter">A function to convert the value as an <see cref="T:System.String"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException"><paramref name="dictionary"/> does not contain a value for <paramref name="key"/></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValue``1(System.Linq.ILookup{System.String,System.String},System.String,System.Func{System.String,``0})">
            <summary>Gets the value from the lookup.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="lookup">The lookup.</param>
            <param name="key">The key by which to get the value.</param>
            <param name="converter">A function to convert the value as an <see cref="T:System.String"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="lookup"/> is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="lookup"/> has multiple values for the given <paramref name="key"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="lookup"/> does not contain a value for <paramref name="key"/></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValue``1(System.Xml.XPath.IXPathNavigable,System.String,System.Func{System.String,``0})">
            <summary>Gets the value from the XML node's child elements.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="node">An XML node which containers other elements.</param>
            <param name="key">The name of the element from which to get the value.</param>
            <param name="converter">A function to convert the value as an <see cref="T:System.String"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException"><paramref name="node"/> does not contain a value for <paramref name="key"/></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValue``1(System.Collections.Specialized.NameValueCollection,System.String,System.Func{System.String,``0})">
            <summary>Gets the value from the collection.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="collection">The collection.</param>
            <param name="key">The key by which to get the value.</param>
            <param name="converter">A function to convert the value as an <see cref="T:System.String"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="collection"/> has multiple values for the given <paramref name="key"/></exception>
            <exception cref="T:System.ArgumentException"><paramref name="collection"/> does not contain a value for <paramref name="key"/></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValue``1(System.Xml.Linq.XContainer,System.String,System.Func{System.String,``0})">
            <summary>Gets the value from the XML node's child elements.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="node">An XML node which containers other elements.</param>
            <param name="key">The name of the element from which to get the value.</param>
            <param name="converter">A function to convert the value as an <see cref="T:System.String"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <c>null</c></exception>
            <exception cref="T:System.ArgumentException"><paramref name="node"/> does not contain a value for <paramref name="key"/></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValueOrDefault``1(System.Collections.IDictionary,System.String)">
            <summary>Gets the value from the dictionary, returning the default value of <typeparamref key="T" /> if the value doesn't exist.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key by which to get the value.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.InvalidCastException">
            the value is <c>null</c> and <typeparamref name="T"/> is a value type, or
            the value does not implement the <see cref="T:System.IConvertible"/> interface and
            no cast is defined from the value to <typeparamref name="T"/>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is <c>null</c></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValueOrDefault``1(System.Linq.ILookup{System.String,System.String},System.String)">
            <summary>Gets the value from the lookup, returning the default value of <typeparamref key="T" /> if the value doesn't exist.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="lookup">The lookup.</param>
            <param name="key">The key by which to get the value.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.InvalidCastException">
            the value is <c>null</c> and <typeparamref name="T"/> is a value type, or
            the value does not implement the <see cref="T:System.IConvertible"/> interface and
            no cast is defined from the value to <typeparamref name="T"/>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="lookup"/> is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="lookup"/> has multiple values for the given <paramref name="key"/></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValueOrDefault``1(System.Xml.XPath.IXPathNavigable,System.String)">
            <summary>Gets the value from the XML node's child elements, returning the default value of <typeparamref key="T" /> if the value doesn't exist.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="node">An XML node which containers other elements.</param>
            <param name="key">The name of the element from which to get the value.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.InvalidCastException">
            the value is <c>null</c> and <typeparamref name="T"/> is a value type, or
            the value does not implement the <see cref="T:System.IConvertible"/> interface and
            no cast is defined from the value to <typeparamref name="T"/>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <c>null</c></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValueOrDefault``1(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>Gets the value from the collection, returning the default value of <typeparamref key="T" /> if the value doesn't exist.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="collection">The collection.</param>
            <param name="key">The key by which to get the value.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.InvalidCastException">
            the value is <c>null</c> and <typeparamref name="T"/> is a value type, or
            the value does not implement the <see cref="T:System.IConvertible"/> interface and
            no cast is defined from the value to <typeparamref name="T"/>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="collection"/> has multiple values for the given <paramref name="key"/></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValueOrDefault``1(System.Xml.Linq.XContainer,System.String)">
            <summary>Gets the value from the XML node's child elements, returning the default value of <typeparamref key="T" /> if the value doesn't exist.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="node">An XML node which containers other elements.</param>
            <param name="key">The name of the element from which to get the value.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.InvalidCastException">
            the value is <c>null</c> and <typeparamref name="T"/> is a value type, or
            the value does not implement the <see cref="T:System.IConvertible"/> interface and
            no cast is defined from the value to <typeparamref name="T"/>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <c>null</c></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValueOrDefault``1(System.Collections.IDictionary,System.String,``0)">
            <summary>Gets the value from the dictionary, returning <paramref name="defaultValue"/> if the value doesn't exist.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key by which to get the value.</param>
            <param name="defaultValue">The default value to return if the dictionary doesn't have a value for the given <paramref name="key"/>.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.InvalidCastException">
            the value is <c>null</c> and <typeparamref name="T"/> is a value type, or
            the value does not implement the <see cref="T:System.IConvertible"/> interface and
            no cast is defined from the value to <typeparamref name="T"/>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is <c>null</c></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValueOrDefault``1(System.Linq.ILookup{System.String,System.String},System.String,``0)">
            <summary>Gets the value from the lookup, returning <paramref name="defaultValue"/> if the value doesn't exist.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="lookup">The lookup.</param>
            <param name="key">The key by which to get the value.</param>
            <param name="defaultValue">The default value to return if the lookup doesn't have a value for the given <paramref name="key"/>.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.InvalidCastException">
            the value is <c>null</c> and <typeparamref name="T"/> is a value type, or
            the value does not implement the <see cref="T:System.IConvertible"/> interface and
            no cast is defined from the value to <typeparamref name="T"/>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="lookup"/> is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="lookup"/> has multiple values for the given <paramref name="key"/></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValueOrDefault``1(System.Xml.XPath.IXPathNavigable,System.String,``0)">
            <summary>Gets the value from the XML node's child elements, returning <paramref name="defaultValue"/>  if the value doesn't exist.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="node">An XML node which containers other elements.</param>
            <param name="key">The name of the element from which to get the value.</param>
            <param name="defaultValue">The default value to return if the node doesn't have a value for the given <paramref name="key"/>.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.InvalidCastException">
            the value is <c>null</c> and <typeparamref name="T"/> is a value type, or
            the value does not implement the <see cref="T:System.IConvertible"/> interface and
            no cast is defined from the value to <typeparamref name="T"/>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <c>null</c></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValueOrDefault``1(System.Collections.Specialized.NameValueCollection,System.String,``0)">
            <summary>Gets the value from the collection, returning <paramref name="defaultValue"/> if the value doesn't exist.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="collection">The collection.</param>
            <param name="key">The key by which to get the value.</param>
            <param name="defaultValue">The default value to return if the collection doesn't have a value for the given <paramref name="key"/>.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.InvalidCastException">
            the value is <c>null</c> and <typeparamref name="T"/> is a value type, or
            the value does not implement the <see cref="T:System.IConvertible"/> interface and
            no cast is defined from the value to <typeparamref name="T"/>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="collection"/> has multiple values for the given <paramref name="key"/></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValueOrDefault``1(System.Xml.Linq.XContainer,System.String,``0)">
            <summary>Gets the value from the XML node's child elements, returning <paramref name="defaultValue"/>  if the value doesn't exist.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="node">An XML node which containers other elements.</param>
            <param name="key">The name of the element from which to get the value.</param>
            <param name="defaultValue">The default value to return if the node doesn't have a value for the given <paramref name="key"/>.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.InvalidCastException">
            the value is <c>null</c> and <typeparamref name="T"/> is a value type, or
            the value does not implement the <see cref="T:System.IConvertible"/> interface and
            no cast is defined from the value to <typeparamref name="T"/>
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <c>null</c></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValueOrDefault``1(System.Collections.IDictionary,System.String,System.Func{System.Object,``0})">
            <summary>Gets the value from the dictionary, returning the default value of <typeparamref key="T" /> if the value doesn't exist.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key by which to get the value.</param>
            <param name="converter">A function to convert the value as an <see cref="T:System.Object"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is <c>null</c></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValueOrDefault``1(System.Linq.ILookup{System.String,System.String},System.String,System.Func{System.Object,``0})">
            <summary>Gets the value from the lookup, returning the default value of <typeparamref key="T" /> if the value doesn't exist.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="lookup">The lookup.</param>
            <param name="key">The key by which to get the value.</param>
            <param name="converter">A function to convert the value as an <see cref="T:System.Object"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="lookup"/> is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="lookup"/> has multiple values for the given <paramref name="key"/></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValueOrDefault``1(System.Xml.XPath.IXPathNavigable,System.String,System.Func{System.Object,``0})">
            <summary>Gets the value from the XML node's child elements, returning the default value of <typeparamref key="T" /> if the value doesn't exist.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="node">An XML node which containers other elements.</param>
            <param name="key">The name of the element from which to get the value.</param>
            <param name="converter">A function to convert the value as an <see cref="T:System.Object"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <c>null</c></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValueOrDefault``1(System.Collections.Specialized.NameValueCollection,System.String,System.Func{System.Object,``0})">
            <summary>Gets the value from the collection, returning the default value of <typeparamref key="T" /> if the value doesn't exist.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="collection">The collection.</param>
            <param name="key">The key by which to get the value.</param>
            <param name="converter">A function to convert the value as an <see cref="T:System.Object"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="collection"/> has multiple values for the given <paramref name="key"/></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValueOrDefault``1(System.Xml.Linq.XContainer,System.String,System.Func{System.Object,``0})">
            <summary>Gets the value from the XML node's child elements, returning the default value of <typeparamref key="T" /> if the value doesn't exist.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="node">An XML node which containers other elements.</param>
            <param name="key">The name of the element from which to get the value.</param>
            <param name="converter">A function to convert the value as an <see cref="T:System.Object"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <c>null</c></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValueOrDefault``1(System.Collections.IDictionary,System.String,System.Func{System.String,``0})">
            <summary>Gets the value from the dictionary, returning the default value of <typeparamref key="T" /> if the value doesn't exist.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key by which to get the value.</param>
            <param name="converter">A function to convert the value as an <see cref="T:System.String"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is <c>null</c></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValueOrDefault``1(System.Linq.ILookup{System.String,System.String},System.String,System.Func{System.String,``0})">
            <summary>Gets the value from the lookup, returning the default value of <typeparamref key="T" /> if the value doesn't exist.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="lookup">The lookup.</param>
            <param name="key">The key by which to get the value.</param>
            <param name="converter">A function to convert the value as an <see cref="T:System.String"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="lookup"/> is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="lookup"/> has multiple values for the given <paramref name="key"/></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValueOrDefault``1(System.Xml.XPath.IXPathNavigable,System.String,System.Func{System.String,``0})">
            <summary>Gets the value from the XML node's child elements, returning the default value of <typeparamref key="T" /> if the value doesn't exist.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="node">An XML node which containers other elements.</param>
            <param name="key">The name of the element from which to get the value.</param>
            <param name="converter">A function to convert the value as an <see cref="T:System.String"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <c>null</c></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValueOrDefault``1(System.Collections.Specialized.NameValueCollection,System.String,System.Func{System.String,``0})">
            <summary>Gets the value from the collection, returning the default value of <typeparamref key="T" /> if the value doesn't exist.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="collection">The collection.</param>
            <param name="key">The key by which to get the value.</param>
            <param name="converter">A function to convert the value as an <see cref="T:System.String"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="collection"/> has multiple values for the given <paramref name="key"/></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValueOrDefault``1(System.Xml.Linq.XContainer,System.String,System.Func{System.String,``0})">
            <summary>Gets the value from the XML node's child elements, returning the default value of <typeparamref key="T" /> if the value doesn't exist.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="node">An XML node which containers other elements.</param>
            <param name="key">The name of the element from which to get the value.</param>
            <param name="converter">A function to convert the value as an <see cref="T:System.String"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <c>null</c></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValueOrDefault``1(System.Collections.IDictionary,System.String,``0,System.Func{System.String,``0})">
            <summary>Gets the value from the dictionary, returning <paramref name="defaultValue"/> if the value doesn't exist.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key by which to get the value.</param>
            <param name="defaultValue">The default value to return if the dictionary doesn't have a value for the given <paramref name="key"/>.</param>
            <param name="converter">A function to convert the value as an <see cref="T:System.String"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> is <c>null</c></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValueOrDefault``1(System.Linq.ILookup{System.String,System.String},System.String,``0,System.Func{System.String,``0})">
            <summary>Gets the value from the lookup, returning <paramref name="defaultValue"/> if the value doesn't exist.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="lookup">The lookup.</param>
            <param name="key">The key by which to get the value.</param>
            <param name="defaultValue">The default value to return if the lookup doesn't have a value for the given <paramref name="key"/>.</param>
            <param name="converter">A function to convert the value as an <see cref="T:System.String"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="lookup"/> is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="lookup"/> has multiple values for the given <paramref name="key"/></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValueOrDefault``1(System.Xml.XPath.IXPathNavigable,System.String,``0,System.Func{System.String,``0})">
            <summary>Gets the value from the XML node's child elements, returning <paramref name="defaultValue"/> if the value doesn't exist.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="node">An XML node which containers other elements.</param>
            <param name="key">The name of the element from which to get the value.</param>
            <param name="defaultValue">The default value to return if the node doesn't have a value for the given <paramref name="key"/>.</param>
            <param name="converter">A function to convert the value as a <see cref="T:System.String"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <c>null</c></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValueOrDefault``1(System.Collections.Specialized.NameValueCollection,System.String,``0,System.Func{System.String,``0})">
            <summary>Gets the value from the collection, returning <paramref name="defaultValue"/> if the value doesn't exist.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="collection">The collection.</param>
            <param name="key">The key by which to get the value.</param>
            <param name="defaultValue">The default value to return if the collection doesn't have a value for the given <paramref name="key"/>.</param>
            <param name="converter">A function to convert the value as an <see cref="T:System.String"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="collection"/> has multiple values for the given <paramref name="key"/></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValueOrDefault``1(System.Xml.Linq.XContainer,System.String,``0,System.Func{System.String,``0})">
            <summary>Gets the value from the XML node's child elements, returning <paramref name="defaultValue"/> if the value doesn't exist.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="node">An XML node which containers other elements.</param>
            <param name="key">The name of the element from which to get the value.</param>
            <param name="defaultValue">The default value to return if the node doesn't have a value for the given <paramref name="key"/>.</param>
            <param name="converter">A function to convert the value as a <see cref="T:System.String"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <c>null</c></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValueOrDefault``1(System.Linq.ILookup{System.String,System.String},System.String,``0,System.Func{System.Object,``0})">
            <summary>Gets the value from the lookup, returning <paramref name="defaultValue"/> if the value doesn't exist.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="lookup">The lookup.</param>
            <param name="key">The key by which to get the value.</param>
            <param name="defaultValue">The default value to return if the lookup doesn't have a value for the given <paramref name="key"/>.</param>
            <param name="converter">A function to convert the value as an <see cref="T:System.Object"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="lookup"/> is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="lookup"/> has multiple values for the given <paramref name="key"/></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValueOrDefault``1(System.Xml.XPath.IXPathNavigable,System.String,``0,System.Func{System.Object,``0})">
            <summary>Gets the value from the XML node's child elements, returning <paramref name="defaultValue"/> if the value doesn't exist.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="node">An XML node which containers other elements.</param>
            <param name="key">The name of the element from which to get the value.</param>
            <param name="defaultValue">The default value to return if the node doesn't have a value for the given <paramref name="key"/>.</param>
            <param name="converter">A function to convert the value as an <see cref="T:System.Object"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <c>null</c></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValueOrDefault``1(System.Collections.Specialized.NameValueCollection,System.String,``0,System.Func{System.Object,``0})">
            <summary>Gets the value from the collection, returning <paramref name="defaultValue"/> if the value doesn't exist.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="collection">The collection.</param>
            <param name="key">The key by which to get the value.</param>
            <param name="defaultValue">The default value to return if the collection doesn't have a value for the given <paramref name="key"/>.</param>
            <param name="converter">A function to convert the value as an <see cref="T:System.Object"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException"><paramref name="collection"/> has multiple values for the given <paramref name="key"/></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValueOrDefault``1(System.Xml.Linq.XContainer,System.String,``0,System.Func{System.Object,``0})">
            <summary>Gets the value from the XML node's child elements, returning <paramref name="defaultValue"/> if the value doesn't exist.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="node">An XML node which containers other elements.</param>
            <param name="key">The name of the element from which to get the value.</param>
            <param name="defaultValue">The default value to return if the node doesn't have a value for the given <paramref name="key"/>.</param>
            <param name="converter">A function to convert the value as an <see cref="T:System.Object"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <c>null</c></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValueOrDefault``1(System.Collections.IDictionary,System.String,``0,System.Func{System.Object,``0})">
            <summary>Gets the value from the dictionary, returning the <paramref key="defaultValue"/> if the value doesn't exist.</summary>
            <typeparam name="T">The type of the value to retrieve</typeparam>
            <param name="dictionary">The dictionary.</param>
            <param name="key">The key by which to get the value.</param>
            <param name="defaultValue">The default value to return if the dictionary doesn't have a value for the given <paramref name="key"/>.</param>
            <param name="converter">A function to convert the value as an <see cref="T:System.Object"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="dictionary"/> or <paramref name="converter"/> is <c>null</c></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValues``1(System.Linq.ILookup{System.String,System.String},System.String)">
            <summary>Gets the values from the lookup.</summary>
            <typeparam name="T">The type of the values to retrieve</typeparam>
            <param name="lookup">The lookup.</param>
            <param name="key">The key by which to get the values.</param>
            <returns>A sequence of <typeparamref name="T"/> instances.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="lookup"/> is <c>null</c></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValues``1(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>Gets the values from the collection.</summary>
            <typeparam name="T">The type of the values to retrieve</typeparam>
            <param name="collection">The collection.</param>
            <param name="key">The key by which to get the values.</param>
            <returns>A sequence of <typeparamref name="T"/> instances.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <c>null</c></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValues``1(System.Linq.ILookup{System.String,System.String},System.String,System.Func{System.String,``0})">
            <summary>Gets the values from the lookup.</summary>
            <typeparam name="T">The type of the values to retrieve</typeparam>
            <param name="lookup">The lookup.</param>
            <param name="key">The key by which to get the values.</param>
            <param name="converter">A function to convert a value as an <see cref="T:System.Object"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A sequence of <typeparamref name="T"/> instances.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="lookup"/> or <paramref name="converter"/> is <c>null</c></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.GetValues``1(System.Collections.Specialized.NameValueCollection,System.String,System.Func{System.String,``0})">
            <summary>Gets the values from the collection.</summary>
            <typeparam name="T">The type of the values to retrieve</typeparam>
            <param name="collection">The collection.</param>
            <param name="key">The key by which to get the values.</param>
            <param name="converter">A function to convert a value as an <see cref="T:System.Object"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A sequence of <typeparamref name="T"/> instances.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> or <paramref name="converter"/> is <c>null</c></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.ToLookup(System.Collections.Specialized.NameValueCollection)">
            <summary>Converts the <paramref name="collection"/> to an <see cref="T:System.Linq.ILookup`2"/>.</summary>
            <param name="collection">The collection.</param>
            <returns>An <see cref="T:System.Linq.ILookup`2"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is <c>null</c></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.ToLookup(System.Collections.Specialized.NameValueCollection,System.Boolean)">
            <summary>Converts the <paramref name="collection" /> to an <see cref="T:System.Linq.ILookup`2" />.</summary>
            <param name="collection">The collection.</param>
            <param name="splitValues">If <c>true</c>, treats values in the <paramref name="collection"/> as comma-delimited lists of items (e.g. from a <see cref="T:System.Collections.Specialized.NameValueCollection"/>)</param>
            <returns>An <see cref="T:System.Linq.ILookup`2" /> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection" /> is <c>null</c></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes an action for each element in the source collection.
            </summary>
            <typeparam name="TType">The type of the type.</typeparam>
            <param name="source">The source.</param>
            <param name="action">The action.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.ConvertValue``1(System.Object)">
            <summary>Converts the <paramref name="value"/> into a <typeparamref name="T"/> instance.</summary>
            <typeparam name="T">The type of the value to return</typeparam>
            <param name="value">The value to convert.</param>
            <returns>A <typeparamref name="T"/> instance.</returns>
            <exception cref="T:System.InvalidCastException">
            the value is <c>null</c> and <typeparamref name="T"/> is a value type, or
            the value does not implement the <see cref="T:System.IConvertible"/> interface and
            no cast is defined from the value to <typeparamref name="T"/>
            </exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.ConvertValue``1(System.Object,System.Func{System.String,``0})">
            <summary>Converts the <paramref name="value" /> into a <typeparamref name="T" /> instance.</summary>
            <typeparam name="T">The type of the value to return</typeparam>
            <param name="value">The value to convert.</param>
            <param name="converter">A function to convert a <see cref="T:System.String"/> to a <typeparamref name="T"/> instance.</param>
            <returns>A <typeparamref name="T" /> instance.</returns>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.ParseValues(System.String,System.String[])">
            <summary>Wraps the <paramref name="values"/> into <see cref="T:System.Collections.Generic.KeyValuePair`2"/> instances.</summary>
            <param name="key">The key.</param>
            <param name="values">The values.</param>
            <returns>A sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> instances.</returns>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.ParseValues(System.String,System.String[],System.Boolean)">
            <summary>Wraps the <paramref name="values"/> into <see cref="T:System.Collections.Generic.KeyValuePair`2"/> instances.</summary>
            <param name="key">The key.</param>
            <param name="values">The values.</param>
            <param name="splitSingleValue">If <c>true</c>, treats a single item in <paramref name="values"/> as a comma-delimited list of items (e.g. from a <see cref="T:System.Collections.Specialized.NameValueCollection"/>)</param>
            <returns>A sequence of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> instances.</returns>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.ToDictionary(System.Xml.Linq.XContainer)">
            <summary>Converts the <paramref name="node"/> to a <see cref="T:System.Collections.Generic.Dictionary`2"/>.</summary>
            <param name="node">The node.</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <c>null</c></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.ToDictionary(System.Xml.XPath.IXPathNavigable)">
            <summary>Converts the <paramref name="node"/> to a <see cref="T:System.Collections.Generic.Dictionary`2"/>.</summary>
            <param name="node">The node.</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is <c>null</c></exception>
        </member>
        <member name="M:DotNetNuke.Collections.CollectionExtensions.ToDictionary(System.Linq.ILookup{System.String,System.String},System.String)">
            <summary>Converts the <paramref name="lookup" /> to a <see cref="T:System.Collections.Generic.Dictionary`2" /> for the specific <paramref name="key" />.</summary>
            <param name="lookup">The lookup.</param>
            <param name="key">The key.</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> instance with zero or one key/value.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="lookup" /> is <c>null</c></exception>
            <exception cref="T:System.InvalidOperationException">There were multiple values for the given key</exception>
        </member>
        <member name="T:DotNetNuke.Collections.IIndexable">
            <summary>
            This interface used to make a class can have index declaration.
            </summary>
        </member>
        <member name="T:DotNetNuke.Collections.IPagedList`1">
            <summary>
              Provides an interface to a paged list, which contains a snapshot
              of a single page of data from the data store
            </summary>
            <typeparam name = "T">The type of objects stored in the list</typeparam>
        </member>
        <member name="P:DotNetNuke.Collections.IPagedList`1.HasNextPage">
            <summary>
              Gets a boolean indicating if there is a next page available
            </summary>
        </member>
        <member name="P:DotNetNuke.Collections.IPagedList`1.HasPreviousPage">
            <summary>
              Gets a boolean indicating if there is a previous page available
            </summary>
        </member>
        <member name="P:DotNetNuke.Collections.IPagedList`1.IsFirstPage">
            <summary>
              Gets a boolean indicating if this is the first page
            </summary>
        </member>
        <member name="P:DotNetNuke.Collections.IPagedList`1.IsLastPage">
            <summary>
              Gets a boolean indicating if this is the last page
            </summary>
        </member>
        <member name="P:DotNetNuke.Collections.IPagedList`1.PageCount">
            <summary>
              The no of pages in this list
            </summary>
        </member>
        <member name="P:DotNetNuke.Collections.IPagedList`1.PageIndex">
            <summary>
              The index of the page contained in this list
            </summary>
        </member>
        <member name="P:DotNetNuke.Collections.IPagedList`1.PageSize">
            <summary>
              The size of the page in this list
            </summary>
        </member>
        <member name="P:DotNetNuke.Collections.IPagedList`1.TotalCount">
            <summary>
              The total number of objects in the data store
            </summary>
        </member>
        <member name="P:DotNetNuke.Collections.Internal.NaiveLockingList`1.SharedList">
            <summary>
            Access to the underlying SharedList
            <remarks>
            Allows locking to be explicitly managed for the sake of effeciency
            </remarks>
            </summary>
        </member>
        <member name="T:DotNetNuke.Collections.PagedList`1">
            <summary>
              Represents a snapshot of a single page of objects from a data store
            </summary>
            <typeparam name = "T">The type of objects contained in this list</typeparam>
        </member>
        <member name="M:DotNetNuke.Collections.PagedList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32)">
            <summary>
             Initializes a new instance of the <see cref="T:DotNetNuke.Collections.PagedList`1"/> a paged list containing objects from the selected enumerable source
            </summary>
            <param name = "source">The <see cref = "T:System.Collections.Generic.IEnumerable`1" /> data store containing objects to be retrieved</param>
            <param name = "pageIndex">The index of the page to retrieve</param>
            <param name = "pageSize">The size of the page to retrieve</param>
        </member>
        <member name="M:DotNetNuke.Collections.PagedList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
             Initializes a new instance of the <see cref="T:DotNetNuke.Collections.PagedList`1"/> a paged list containing objects from the selected enumerable source
            </summary>
            <param name="items">The items that constitute the page</param>
            <param name="totalCount">The total number of items in the original source</param>
            <param name = "pageIndex">The index of the page to retrieve</param>
            <param name = "pageSize">The size of the page to retrieve</param>
        </member>
        <member name="P:DotNetNuke.Collections.PagedList`1.HasNextPage">
            <summary>
              Gets a boolean indicating if there is a next page available
            </summary>
        </member>
        <member name="P:DotNetNuke.Collections.PagedList`1.HasPreviousPage">
            <summary>
              Gets a boolean indicating if there is a previous page available
            </summary>
        </member>
        <member name="P:DotNetNuke.Collections.PagedList`1.IsFirstPage">
            <summary>
              Gets a boolean indicating if this is the first page
            </summary>
        </member>
        <member name="P:DotNetNuke.Collections.PagedList`1.IsLastPage">
            <summary>
              Gets a boolean indicating if this is the last page
            </summary>
        </member>
        <member name="P:DotNetNuke.Collections.PagedList`1.PageCount">
            <summary>
              Gets or sets the number of pages in this list 
            </summary>
        </member>
        <member name="P:DotNetNuke.Collections.PagedList`1.PageIndex">
            <summary>
              Gets or sets the index of the page contained in this list
            </summary>
        </member>
        <member name="P:DotNetNuke.Collections.PagedList`1.PageSize">
            <summary>
              Gets or sets the size of the page in this list 
            </summary>
        </member>
        <member name="P:DotNetNuke.Collections.PagedList`1.TotalCount">
            <summary>
              Gets or ses the total number of objects in the data store 
            </summary>
        </member>
        <member name="T:DotNetNuke.Collections.PageSelector`1">
            <summary>
              Provides options to allow the consumer to select a page of data from a paged data store
            </summary>
            <typeparam name = "T">The type of object in the data store</typeparam>
        </member>
        <member name="M:DotNetNuke.Collections.PageSelector`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetNuke.Collections.PageSelector`1"/> for use on the specified data store 
            </summary>
            <param name = "source">The data store to page</param>
            <param name = "pageSize">The size of each page</param>
        </member>
        <member name="M:DotNetNuke.Collections.PageSelector`1.GetPage(System.Int32)">
            <summary>
              Retrieves the specified page as a <see cref = "T:DotNetNuke.Collections.IPagedList`1" />
            </summary>
            <param name = "pageIndex">The index (zero-based) of the page to retrieve</param>
            <returns>
            An <see cref = "T:DotNetNuke.Collections.IPagedList`1" /> containing the page of data, or an 
            empty list if the page does not exist
            </returns>
        </member>
        <member name="T:DotNetNuke.Collections.PagingExtensions">
            <summary>
              Contains filters that can be applied to <see cref = "!:IEnumerable" /> stores
            </summary>
        </member>
        <member name="M:DotNetNuke.Collections.PagingExtensions.InPagesOf``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
              Filters the incoming store to retrieve pages of a specified size.
            </summary>
            <typeparam name = "T">The type of the object being filtered</typeparam>
            <param name = "source">The source object being filtered</param>
            <param name = "pageSize">The page size to use</param>
            <returns>
              A <see cref = "T:DotNetNuke.Collections.PageSelector`1" /> object that is used to select a single
              page of data from the data source.
            </returns>
        </member>
        <member name="M:DotNetNuke.Collections.PagingExtensions.ToPagedList``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> into an <see cref="T:DotNetNuke.Collections.IPagedList`1"/>
            </summary>
            <typeparam name="T">The type of the items in the <paramref name="source"/></typeparam> 
            <param name = "source">The source <see cref="T:System.Collections.Generic.IEnumerable`1"/> to convert</param>
            <param name = "pageIndex">The page index requested</param>
            <param name = "pageSize">The page size requested</param>
            <returns>A <see cref="T:DotNetNuke.Collections.IPagedList`1"/> object that is used to select a single 
            page of data from the data source</returns>
        </member>
        <member name="M:DotNetNuke.ComponentModel.ComponentType.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the ComponentType class.
            </summary>
            <param name="baseType">The base type of Components of this ComponentType</param>
        </member>
        <member name="M:DotNetNuke.ComponentModel.DataAnnotations.CacheableAttribute.#ctor">
            <summary>
            Construct a new CacheableAttribute
            </summary>
        </member>
        <member name="M:DotNetNuke.ComponentModel.DataAnnotations.CacheableAttribute.#ctor(System.String)">
            <summary>
            Construct a new CacheableAttribute
            </summary>
            <param name="cacheKey">The cacheKey to use</param>
        </member>
        <member name="M:DotNetNuke.ComponentModel.DataAnnotations.CacheableAttribute.#ctor(System.String,System.Web.Caching.CacheItemPriority)">
            <summary>
            Construct a new CacheableAttribute
            </summary>
            <param name="cacheKey">The cacheKey to use</param>
            <param name="priority">The priority of the cached item</param>
        </member>
        <member name="M:DotNetNuke.ComponentModel.DataAnnotations.CacheableAttribute.#ctor(System.String,System.Web.Caching.CacheItemPriority,System.Int32)">
            <summary>
            Construct a new CacheableAttribute
            </summary>
            <param name="cacheKey">The cacheKey to use</param>
            <param name="priority">The priority of the cached item</param>
            <param name="timeOut">The timeout multiplier used to cache the item</param>
        </member>
        <member name="P:DotNetNuke.ComponentModel.DataAnnotations.CacheableAttribute.CacheKey">
            <summary>
            The root key to use for the cache
            </summary>
        </member>
        <member name="P:DotNetNuke.ComponentModel.DataAnnotations.CacheableAttribute.CachePriority">
            <summary>
            The priority of the cached item.  The default value is CacheItemPriority.Default
            </summary>
        </member>
        <member name="P:DotNetNuke.ComponentModel.DataAnnotations.CacheableAttribute.CacheTimeOut">
            <summary>
            The timeout multiplier used to cache the item. This value is multiple by the Host 
            Performance Setting to determine the actual timeout value. The default value is 20. 
            </summary>
        </member>
        <member name="P:DotNetNuke.ComponentModel.DataAnnotations.ScopeAttribute.Scope">
            <summary>
            The property to use to scope the cache.  The default is an empty string.
            </summary>
        </member>
        <member name="M:DotNetNuke.ComponentModel.InstanceComponentBuilder.#ctor(System.String,System.Object)">
            <summary>
            Initializes a new instance of the InstanceComponentBuilder class.
            </summary>
            <param name="name"></param>
            <param name="instance"></param>
        </member>
        <member name="M:DotNetNuke.ComponentModel.SimpleContainer.#ctor">
            <summary>
              Initializes a new instance of the SimpleContainer class.
            </summary>
        </member>
        <member name="M:DotNetNuke.ComponentModel.SimpleContainer.#ctor(System.String)">
            <summary>
              Initializes a new instance of the SimpleContainer class.
            </summary>
            <param name = "name"></param>
        </member>
        <member name="M:DotNetNuke.ComponentModel.SingletonComponentBuilder.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the SingletonComponentBuilder class.
            </summary>
            <param name="name">The name of the component</param>
            <param name="type">The type of the component</param>
        </member>
        <member name="M:DotNetNuke.ComponentModel.TransientComponentBuilder.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the TransientComponentBuilder class.
            </summary>
            <param name="name">The name of the component</param>
            <param name="type">The type of the component</param>
        </member>
        <member name="T:DotNetNuke.Framework.JavaScriptLibraries.CommonJs">
            <summary>
                this class contains a number of constants that map to <see cref="P:DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibrary.LibraryName"/>s
                done as a series of constants as enums do not allow hyphens or periods
            </summary>
        </member>
        <member name="F:DotNetNuke.Framework.JavaScriptLibraries.CommonJs.jQuery">
            <summary>jQuery library name</summary>
        </member>
        <member name="F:DotNetNuke.Framework.JavaScriptLibraries.CommonJs.jQueryMigrate">
            <summary>jQuery Migrate library name</summary>
        </member>
        <member name="F:DotNetNuke.Framework.JavaScriptLibraries.CommonJs.jQueryUI">
            <summary>jQuery UI library name</summary>
        </member>
        <member name="F:DotNetNuke.Framework.JavaScriptLibraries.CommonJs.Knockout">
            <summary>Knockout library name</summary>
        </member>
        <member name="F:DotNetNuke.Framework.JavaScriptLibraries.CommonJs.KnockoutMapping">
            <summary>Knockout Mapping library name</summary>
        </member>
        <member name="F:DotNetNuke.Framework.JavaScriptLibraries.CommonJs.jQueryFileUpload">
            <summary>jQuery Fileupload library name</summary>
        </member>
        <member name="F:DotNetNuke.Framework.JavaScriptLibraries.CommonJs.DnnPlugins">
            <summary>DNN jQuery plugins library name</summary>
        </member>
        <member name="F:DotNetNuke.Framework.JavaScriptLibraries.CommonJs.HoverIntent">
            <summary>HoverIntent library name</summary>
        </member>
        <member name="T:DotNetNuke.Framework.JavaScriptLibraries.SpecificVersion">
            <summary>
            determine which version of a script is to be used
            </summary>
        </member>
        <member name="F:DotNetNuke.Framework.JavaScriptLibraries.SpecificVersion.Latest">
            <summary>The most recent version</summary>
        </member>
        <member name="F:DotNetNuke.Framework.JavaScriptLibraries.SpecificVersion.LatestMajor">
            <summary>Match the major version</summary>
        </member>
        <member name="F:DotNetNuke.Framework.JavaScriptLibraries.SpecificVersion.LatestMinor">
            <summary>Match the major and minor versions</summary>
        </member>
        <member name="F:DotNetNuke.Framework.JavaScriptLibraries.SpecificVersion.Exact">
            <summary>Match version exactly</summary>
        </member>
        <member name="M:DotNetNuke.Framework.JavaScriptLibraries.IJavaScriptLibraryController.DeleteLibrary(DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibrary)">
            <summary>Delete the library reference from the database</summary>
            <param name="library">Library to be deleted</param>
        </member>
        <member name="M:DotNetNuke.Framework.JavaScriptLibraries.IJavaScriptLibraryController.GetLibrary(System.Func{DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibrary,System.Boolean})">
            <summary>Get information about the latest version of a <see cref="T:DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibrary"/> that matches the given <paramref name="predicate"/></summary>
            <param name="predicate">A function used to filter the library</param>
            <example>
            JavaScriptLibraryController.Instance.GetLibrary(l => string.Equals(l.LibraryName, "Knockout", StringComparison.OrdinalIgnoreCase))
            </example>
            <returns>The highest version <see cref="T:DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibrary"/> instance that matches the <paramref name="predicate"/>, or <c>null</c> if no library matches</returns>
        </member>
        <member name="M:DotNetNuke.Framework.JavaScriptLibraries.IJavaScriptLibraryController.GetLibraries(System.Func{DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibrary,System.Boolean})">
            <summary>Gets all of the <see cref="T:DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibrary"/> instances matching the given <paramref name="predicate"/></summary>
            <param name="predicate">A function used to filter the library</param>
            <example>
            JavaScriptLibraryController.Instance.GetLibraries(l => string.Equals(l.LibraryName, "Knockout", StringComparison.OrdinalIgnoreCase))
            </example>
            <returns>A sequence of <see cref="T:DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibrary"/> instances</returns>
        </member>
        <member name="M:DotNetNuke.Framework.JavaScriptLibraries.IJavaScriptLibraryController.GetLibraries">
            <summary>Gets all of the <see cref="T:DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibrary"/> instances</summary>
            <returns>A sequence of <see cref="T:DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibrary"/> instances</returns>
        </member>
        <member name="M:DotNetNuke.Framework.JavaScriptLibraries.IJavaScriptLibraryController.SaveLibrary(DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibrary)">
            <summary>Save a library to the database</summary>
            <param name="library">Library to be saved</param>
        </member>
        <member name="M:DotNetNuke.Framework.JavaScriptLibraries.JavaScript.IsInstalled(System.String)">
            <summary>
                checks whether the script file is a known javascript library
            </summary>
            <param name="jsname">script identifier</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Framework.JavaScriptLibraries.JavaScript.UseDebugScript">
            <summary>
                determine whether to use the debug script for a file
            </summary>
            <returns>whether to use the debug script</returns>
        </member>
        <member name="M:DotNetNuke.Framework.JavaScriptLibraries.JavaScript.Version(System.String)">
            <summary>
                returns the version of a javascript library from the database
            </summary>
            <param name="jsname">the library name</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Framework.JavaScriptLibraries.JavaScript.RequestRegistration(System.String)">
            <summary>Requests a script to be added to the page</summary>
            <param name="jsname">the library name</param>
        </member>
        <member name="M:DotNetNuke.Framework.JavaScriptLibraries.JavaScript.RequestRegistration(System.String,System.Version)">
            <summary>Requests a script to be added to the page</summary>
            <param name="jsname">the library name</param>
            <param name="version">the library's version</param>
        </member>
        <member name="M:DotNetNuke.Framework.JavaScriptLibraries.JavaScript.RequestRegistration(System.String,System.Version,DotNetNuke.Framework.JavaScriptLibraries.SpecificVersion)">
            <summary>Requests a script to be added to the page</summary>
            <param name="jsname">the library name</param>
            <param name="version">the library's version</param>
            <param name="specific">
            how much of the <paramref name="version"/> to pay attention to.
            When <see cref="F:DotNetNuke.Framework.JavaScriptLibraries.SpecificVersion.Latest"/> is passed, ignore the <paramref name="version"/>.
            When <see cref="F:DotNetNuke.Framework.JavaScriptLibraries.SpecificVersion.LatestMajor"/> is passed, match the major version.
            When <see cref="F:DotNetNuke.Framework.JavaScriptLibraries.SpecificVersion.LatestMinor"/> is passed, match the major and minor versions.
            When <see cref="F:DotNetNuke.Framework.JavaScriptLibraries.SpecificVersion.Exact"/> is passed, match all parts of the version.
            </param>
        </member>
        <member name="M:DotNetNuke.Framework.JavaScriptLibraries.JavaScript.Register(System.Web.UI.Page)">
            <summary>
                method is called once per page event cycle and will
                load all scripts requested during that page processing cycle
            </summary>
            <param name="page">reference to the current page</param>
        </member>
        <member name="P:DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibrary.JavaScriptLibraryID">
            <summary>
            unique identifier id for a javscript library package
            </summary>
        </member>
        <member name="P:DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibrary.PackageID">
            <summary>
            package id associated with the javscript library package
            </summary>
        </member>
        <member name="P:DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibrary.LibraryName">
            <summary>
            name of the javscript library package (used when requesting library)
            </summary>
        </member>
        <member name="P:DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibrary.Version">
            <summary>
            version of the the javscript library package from the database
            </summary>
        </member>
        <member name="P:DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibrary.ObjectName">
            <summary>
            main object (where relevant) of the javscript library package
            used to generate the local file fallback code in the case where the CDN file is not available
            </summary>
        </member>
        <member name="P:DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibrary.FileName">
            <summary>
            filename of the script in the filesystem
            </summary>
        </member>
        <member name="P:DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibrary.PreferredScriptLocation">
            <summary>
            position in the page the script reference is injected
            </summary>
        </member>
        <member name="P:DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibrary.CDNPath">
            <summary>
            location of the content delivery network (CDN) where the script is loaded from when CDN has been enabled in host
            </summary>
        </member>
        <member name="M:DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibrary.ReadXml(System.Xml.XmlReader)">
            -----------------------------------------------------------------------------
            <summary>
            Reads a JavaScriptLibrary from an XmlReader
            </summary>
            <param name="reader">The XmlReader to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibrary.WriteXml(System.Xml.XmlWriter)">
            -----------------------------------------------------------------------------
            <summary>
            Writes a JavaScriptLibrary to an XmlWriter
            </summary>
            <param name="writer">The XmlWriter to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibraryController.DeleteLibrary(DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibrary)">
            <summary>Delete the library reference from the database</summary>
            <param name="library">Library to be deleted</param>
        </member>
        <member name="M:DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibraryController.GetLibrary(System.Func{DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibrary,System.Boolean})">
            <summary>Get information about the latest version of a <see cref="T:DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibrary"/> that matches the given <paramref name="predicate"/></summary>
            <param name="predicate">A function used to filter the library</param>
            <example>
            JavaScriptLibraryController.Instance.GetLibrary(l => string.Equals(l.LibraryName, "Knockout", StringComparison.OrdinalIgnoreCase))
            </example>
            <returns>The highest version <see cref="T:DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibrary"/> instance that matches the <paramref name="predicate"/>, or <c>null</c> if no library matches</returns>
        </member>
        <member name="M:DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibraryController.GetLibraries(System.Func{DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibrary,System.Boolean})">
            <summary>Gets all of the <see cref="T:DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibrary"/> instances matching the given <paramref name="predicate"/></summary>
            <param name="predicate">A function used to filter the library</param>
            <example>
            JavaScriptLibraryController.Instance.GetLibraries(l => string.Equals(l.LibraryName, "Knockout", StringComparison.OrdinalIgnoreCase))
            </example>
            <returns>A sequence of <see cref="T:DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibrary"/> instances</returns>
        </member>
        <member name="M:DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibraryController.GetLibraries">
            <summary>Gets all of the <see cref="T:DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibrary"/> instances</summary>
            <returns>A sequence of <see cref="T:DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibrary"/> instances</returns>
        </member>
        <member name="M:DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibraryController.SaveLibrary(DotNetNuke.Framework.JavaScriptLibraries.JavaScriptLibrary)">
            <summary>Save a library to the database</summary>
            <param name="library">Library to be saved</param>
        </member>
        <member name="T:DotNetNuke.Framework.JavaScriptLibraries.ScriptLocation">
            <summary>
            determine whereabouts in the page the script (and fallback script when CDN is enabled) is emitted
            </summary>
        </member>
        <member name="T:DotNetNuke.Framework.ServiceLocator`2">
            <summary>
            Provides a readily testable way to manage a Singleton
            </summary>
            <typeparam name="TContract">The interface that the controller provides</typeparam>
            <typeparam name="TSelf">The type of the controller itself, used to call the GetFactory override</typeparam>
        </member>
        <member name="P:DotNetNuke.Framework.ServiceLocator`2.Instance">
            <summary>
            Returns a singleton of T
            </summary>
        </member>
        <member name="M:DotNetNuke.Framework.ServiceLocator`2.SetTestableInstance(`0)">
            <summary>
            Registers an instance to use for the Singleton
            </summary>
            <remarks>Intended for unit testing purposes, not thread safe</remarks>
            <param name="instance"></param>
        </member>
        <member name="M:DotNetNuke.Framework.ServiceLocator`2.ClearInstance">
            <summary>
            Clears the current instance, a new instance will be initialized when next requested
            </summary>
            <remarks>Intended for unit testing purposes, not thread safe</remarks>
        </member>
        <member name="T:DotNetNuke.Framework.IServicesFramework">
            <summary>
            Do not implement.  This interface is only implemented by the DotNetNuke core framework. Outside the framework it should used as a type and for unit test purposes only.
            There is no guarantee that this interface will not change.
            </summary>
        </member>
        <member name="M:DotNetNuke.Framework.IServicesFramework.RequestAjaxAntiForgerySupport">
            <summary>
            Will cause anti forgery tokens to be included in the current page
            </summary>
        </member>
        <member name="M:DotNetNuke.Framework.IServicesFramework.RequestAjaxScriptSupport">
            <summary>
            Will cause ajax scripts to be included in the current page
            </summary>
        </member>
        <member name="T:DotNetNuke.Framework.ServicesFramework">
            <summary>
            Enables modules to support Services Framework features
            </summary>
        </member>
        <member name="M:DotNetNuke.Framework.AJAX.AddScriptManager(System.Web.UI.Page)">
            -----------------------------------------------------------------------------
            <summary>
              AddScriptManager is used internally by the framework to add a ScriptManager control to the page
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Framework.AJAX.AddScriptManager(System.Web.UI.Page,System.Boolean)">
            <summary>
            AddScriptManager is used internally by the framework to add a ScriptManager control to the page.
            </summary>
            <param name="page">the page instance.</param>
            <param name="checkCdn">Whether check cdn settings from host settings.</param>
        </member>
        <member name="M:DotNetNuke.Framework.AJAX.GetScriptManager(System.Web.UI.Page)">
            <summary>Gets the current ScriptManager on the page</summary>
            <param name="objPage">the page instance.</param>
            <returns>The ScriptManager instance, or <c>null</c></returns>
        </member>
        <member name="M:DotNetNuke.Framework.AJAX.IsEnabled">
            -----------------------------------------------------------------------------
            <summary>
              IsEnabled can be used to determine if AJAX has been enabled already as we
              only need one Script Manager per page.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Framework.AJAX.IsInstalled">
            -----------------------------------------------------------------------------
            <summary>
              IsInstalled can be used to determine if AJAX is installed on the server
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Framework.AJAX.RegisterPostBackControl(System.Web.UI.Control)">
            -----------------------------------------------------------------------------
            <summary>
              Allows a control to be excluded from UpdatePanel async callback
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Framework.AJAX.RegisterScriptManager">
            -----------------------------------------------------------------------------
            <summary>
              RegisterScriptManager must be used by developers to instruct the framework that AJAX is required on the page
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Framework.AJAX.RemoveScriptManager(System.Web.UI.Page)">
            -----------------------------------------------------------------------------
            <summary>
              RemoveScriptManager will remove the ScriptManager control during Page Render if the RegisterScriptManager has not been called
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Framework.AJAX.WrapUpdatePanelControl(System.Web.UI.Control,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
              Wraps a control in an update panel
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:DotNetNuke.Framework.CachePageStatePersister">
            -----------------------------------------------------------------------------
            Namespace:  DotNetNuke.Framework
            Project:    DotNetNuke
            Class:      CachePageStatePersister
            -----------------------------------------------------------------------------
            <summary>
            CachePageStatePersister provides a cache based page state peristence mechanism
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Framework.CachePageStatePersister.#ctor(System.Web.UI.Page)">
            -----------------------------------------------------------------------------
            <summary>
            Creates the CachePageStatePersister
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Framework.CachePageStatePersister.Load">
            -----------------------------------------------------------------------------
            <summary>
            Loads the Page State from the Cache
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Framework.CachePageStatePersister.Save">
            -----------------------------------------------------------------------------
            <summary>
            Saves the Page State to the Cache
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Framework.CDefault">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Class	 : CDefault
            -----------------------------------------------------------------------------
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Framework.CDefault.ScrollToControl(System.Web.UI.Control)">
            -----------------------------------------------------------------------------
            <summary>
            Allows the scroll position on the page to be moved to the top of the passed in control.
            </summary>
            <param name="objControl">Control to scroll to</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Framework.DiskPageStatePersister">
            -----------------------------------------------------------------------------
            Namespace:  DotNetNuke.Framework
            Project:    DotNetNuke
            Class:      DiskPageStatePersister
            -----------------------------------------------------------------------------
            <summary>
            DiskPageStatePersister provides a disk (stream) based page state peristence mechanism
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Framework.DiskPageStatePersister.#ctor(System.Web.UI.Page)">
            -----------------------------------------------------------------------------
            <summary>
            Creates the DiskPageStatePersister
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Framework.DiskPageStatePersister.CacheDirectory">
            -----------------------------------------------------------------------------
            <summary>
            The CacheDirectory property is used to return the location of the "Cache"
            Directory for the Portal
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Framework.DiskPageStatePersister.StateFileName">
            -----------------------------------------------------------------------------
            <summary>
            The StateFileName property is used to store the FileName for the State
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Framework.DiskPageStatePersister.Load">
            -----------------------------------------------------------------------------
            <summary>
            Loads the Page State from the Cache
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Framework.DiskPageStatePersister.Save">
            -----------------------------------------------------------------------------
            <summary>
            Saves the Page State to the Cache
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="F:DotNetNuke.Framework.jQuery.DefaultHostedUrl">
            <summary>
            Returns the default URL for a hosted version of the jQuery script
            </summary>
            <remarks>
            Google hosts versions of many popular javascript libraries on their CDN.
            Using the hosted version increases the likelihood that the file is already
            cached in the users browser.
            </remarks>
        </member>
        <member name="M:DotNetNuke.Framework.jQuery.KeepAlive(System.Web.UI.Page)">
            <summary>
            Active the page with keep alive, so that authentication will not expire.
            </summary>
            <param name="page">The page instance.</param>
        </member>
        <member name="T:DotNetNuke.Framework.PageBase">
            -----------------------------------------------------------------------------
            Namespace:  DotNetNuke.Framework
            Project:    DotNetNuke
            Class:      PageBase
            -----------------------------------------------------------------------------
            <summary>
            PageBase provides a custom DotNetNuke base class for pages
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Framework.PageBase.#ctor">
            -----------------------------------------------------------------------------
            <summary>
            Creates the Page
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Framework.PageBase.PageStatePersister">
            -----------------------------------------------------------------------------
            <summary>
            PageStatePersister returns an instance of the class that will be used to persist the Page State
            </summary>
            <returns>A System.Web.UI.PageStatePersister</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Framework.PageBase.HeaderIsWritten">
            <summary>
            Indicate whether http headers has been sent to client. 
            </summary>
        </member>
        <member name="M:DotNetNuke.Framework.PageBase.GetControlAttribute(System.Web.UI.Control,System.Collections.ArrayList,System.String)">
            <summary>
            <para>GetControlAttribute looks a the type of control and does it's best to find an AttributeCollection.</para>
            </summary>
            <param name="control">Control to find the AttributeCollection on</param>
            <param name="affectedControls">ArrayList that hold the controls that have been localized. This is later used for the removal of the key attribute.</param>				
            <param name="attributeName">Name of key to search for.</param>				
            <returns>A string containing the key for the specified control or null if a key attribute wasn't found</returns>
        </member>
        <member name="M:DotNetNuke.Framework.PageBase.ProcessControl(System.Web.UI.Control,System.Collections.ArrayList,System.Boolean,System.String)">
            <summary>
            <para>ProcessControl peforms the high level localization for a single control and optionally it's children.</para>
            </summary>
            <param name="control">Control to find the AttributeCollection on</param>
            <param name="affectedControls">ArrayList that hold the controls that have been localized. This is later used for the removal of the key attribute.</param>				
            <param name="includeChildren">If true, causes this method to process children of this controls.</param>
            <param name="resourceFileRoot">Root Resource File.</param>
        </member>
        <member name="M:DotNetNuke.Framework.PageBase.RemoveKeyAttribute(System.Collections.ArrayList)">
            <summary>
            <para>RemoveKeyAttribute remove the key attribute from the control. If this isn't done, then the HTML output will have 
            a bad attribute on it which could cause some older browsers problems.</para>
            </summary>
            <param name="affectedControls">ArrayList that hold the controls that have been localized. This is later used for the removal of the key attribute.</param>		
        </member>
        <member name="T:DotNetNuke.Framework.Reflection">
            -----------------------------------------------------------------------------
            Namespace: DotNetNuke.Framework
            Project	 : DotNetNuke
            Class	 : Reflection
            -----------------------------------------------------------------------------
            <summary>
            Library responsible for reflection
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Framework.Reflection.CreateObject(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Creates an object
            </summary>
            <param name="ObjectProviderType">The type of Object to create (data/navigation)</param>
            <returns>The created Object</returns>
            <remarks>Overload for creating an object from a Provider configured in web.config</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Framework.Reflection.CreateObject(System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            Creates an object
            </summary>
            <param name="ObjectProviderType">The type of Object to create (data/navigation)</param>
            <param name="UseCache">Caching switch</param>
            <returns>The created Object</returns>
            <remarks>Overload for creating an object from a Provider configured in web.config</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Framework.Reflection.CreateObject(System.String,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Creates an object
            </summary>
            <param name="ObjectProviderType">The type of Object to create (data/navigation)</param>
            <param name="ObjectNamespace">The namespace of the object to create.</param>
            <param name="ObjectAssemblyName">The assembly of the object to create.</param>
            <returns>The created Object</returns>
            <remarks>Overload for creating an object from a Provider including NameSpace and 
            AssemblyName ( this allows derived providers to share the same config )</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Framework.Reflection.CreateObject(System.String,System.String,System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            Creates an object
            </summary>
            <param name="ObjectProviderType">The type of Object to create (data/navigation)</param>
            <param name="ObjectNamespace">The namespace of the object to create.</param>
            <param name="ObjectAssemblyName">The assembly of the object to create.</param>
            <param name="UseCache">Caching switch</param>
            <returns>The created Object</returns>
            <remarks>Overload for creating an object from a Provider including NameSpace and 
            AssemblyName ( this allows derived providers to share the same config )</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Framework.Reflection.CreateObject(System.String,System.String,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Creates an object
            </summary>
            <param name="ObjectProviderType">The type of Object to create (data/navigation)</param>
            <param name="ObjectProviderName">The name of the Provider</param>
            <param name="ObjectNamespace">The namespace of the object to create.</param>
            <param name="ObjectAssemblyName">The assembly of the object to create.</param>
            <returns>The created Object</returns>
            <remarks>Overload for creating an object from a Provider including NameSpace, 
            AssemblyName and ProviderName</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Framework.Reflection.CreateObject(System.String,System.String,System.String,System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            Creates an object
            </summary>
            <param name="ObjectProviderType">The type of Object to create (data/navigation)</param>
            <param name="ObjectProviderName">The name of the Provider</param>
            <param name="ObjectNamespace">The namespace of the object to create.</param>
            <param name="ObjectAssemblyName">The assembly of the object to create.</param>
            <param name="UseCache">Caching switch</param>
            <returns>The created Object</returns>
            <remarks>Overload for creating an object from a Provider including NameSpace, 
            AssemblyName and ProviderName</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Framework.Reflection.CreateObject(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            Creates an object
            </summary>
            <param name="ObjectProviderType">The type of Object to create (data/navigation)</param>
            <param name="ObjectProviderName">The name of the Provider</param>
            <param name="ObjectNamespace">The namespace of the object to create.</param>
            <param name="ObjectAssemblyName">The assembly of the object to create.</param>
            <param name="UseCache">Caching switch</param>
            <param name="fixAssemblyName">Whether append provider name as part of the assembly name.</param>
            <returns>The created Object</returns>
            <remarks>Overload for creating an object from a Provider including NameSpace, 
            AssemblyName and ProviderName</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Framework.Reflection.CreateObject(System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Creates an object
            </summary>
            <param name="TypeName">The fully qualified TypeName</param>
            <param name="CacheKey">The Cache Key</param>
            <returns>The created Object</returns>
            <remarks>Overload that takes a fully-qualified typename and a Cache Key</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Framework.Reflection.CreateObject(System.String,System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            Creates an object
            </summary>
            <param name="TypeName">The fully qualified TypeName</param>
            <param name="CacheKey">The Cache Key</param>
            <param name="UseCache">Caching switch</param>
            <returns>The created Object</returns>
            <remarks>Overload that takes a fully-qualified typename and a Cache Key</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Framework.Reflection.CreateObject``1">
            -----------------------------------------------------------------------------
            <summary>
            Creates an object
            </summary>
            <typeparam name="T">The type of object to create</typeparam>
            <returns></returns>
            <remarks>Generic version</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Framework.Reflection.CreateObject(System.Type)">
            -----------------------------------------------------------------------------
            <summary>
            Creates an object
            </summary>
            <param name="type">The type of object to create</param>
            <returns></returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Framework.UserControlBase">
            -----------------------------------------------------------------------------
            <summary>
            The UserControlBase class defines a custom base class inherited by all
            user controls within the Portal.
            </summary>
        </member>
        <member name="P:DotNetNuke.Framework.BaseHttpHandler.Context">
            <summary>
              Returns the <see cref = "T:System.Web.HttpContext" /> object for the incoming HTTP request.
            </summary>
        </member>
        <member name="P:DotNetNuke.Framework.BaseHttpHandler.Request">
            <summary>
              Returns the <see cref = "T:System.Web.HttpRequest" /> object for the incoming HTTP request.
            </summary>
        </member>
        <member name="P:DotNetNuke.Framework.BaseHttpHandler.Response">
            <summary>
              Gets the <see cref = "T:System.Web.HttpResponse" /> object associated with the Page object. This object 
              allows you to send HTTP response data to a client and contains information about that response.
            </summary>
        </member>
        <member name="P:DotNetNuke.Framework.BaseHttpHandler.Content">
            <summary>
              Gets the string representation of the body of the incoming request.
            </summary>
        </member>
        <member name="P:DotNetNuke.Framework.BaseHttpHandler.RequiresAuthentication">
            <summary>
              Gets a value indicating whether this handler
              requires users to be authenticated.
            </summary>
            <value>
              <c>true</c> if authentication is required
              otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DotNetNuke.Framework.BaseHttpHandler.HasPermission">
            <summary>
              Gets a value indicating whether the requester
              has the necessary permissions.
            </summary>
            <remarks>
              By default all authenticated users have permssions.  
              This property is only enforced if <see cref = "P:DotNetNuke.Framework.BaseHttpHandler.RequiresAuthentication" /> is <c>true</c>
            </remarks>
            <value>
              <c>true</c> if the user has the appropriate permissions
              otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DotNetNuke.Framework.BaseHttpHandler.ContentMimeType">
            <summary>
              Gets the content MIME type for the response object.
            </summary>
            <value></value>
        </member>
        <member name="P:DotNetNuke.Framework.BaseHttpHandler.ContentEncoding">
            <summary>
              Gets the content encoding for the response object.
            </summary>
            <value></value>
        </member>
        <member name="M:DotNetNuke.Framework.BaseHttpHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
              Processs the incoming HTTP request.
            </summary>
            <param name = "context">Context.</param>
        </member>
        <member name="M:DotNetNuke.Framework.BaseHttpHandler.HandleRequest">
            <summary>
              Handles the request.  This is where you put your
              business logic.
            </summary>
            <remarks>
              <p>This method should result in a call to one 
                (or more) of the following methods:</p>
              <p><code>context.Response.BinaryWrite();</code></p>
              <p><code>context.Response.Write();</code></p>
              <p><code>context.Response.WriteFile();</code></p>
              <p>
                <code>
                  someStream.Save(context.Response.OutputStream);
                </code>
              </p>
              <p>etc...</p>
              <p>
                If you want a download box to show up with a 
                pre-populated filename, add this call here 
                (supplying a real filename).
              </p>
              <p>
              <code>Response.AddHeader("Content-Disposition"
                , "attachment; filename=\"" + Filename + "\"");</code>
              </p>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Framework.BaseHttpHandler.ValidateParameters">
            <summary>
              Validates the parameters.  Inheriting classes must
              implement this and return true if the parameters are
              valid, otherwise false.
            </summary>
            <returns><c>true</c> if the parameters are valid,
              otherwise <c>false</c></returns>
        </member>
        <member name="M:DotNetNuke.Framework.BaseHttpHandler.SetResponseCachePolicy(System.Web.HttpCachePolicy)">
            <summary>
              Sets the cache policy.  Unless a handler overrides
              this method, handlers will not allow a respons to be
              cached.
            </summary>
            <param name = "cache">Cache.</param>
        </member>
        <member name="M:DotNetNuke.Framework.BaseHttpHandler.RespondFileNotFound">
            <summary>
              Helper method used to Respond to the request
              that the file was not found.
            </summary>
        </member>
        <member name="M:DotNetNuke.Framework.BaseHttpHandler.RespondInternalError">
            <summary>
              Helper method used to Respond to the request
              that an error occurred in processing the request.
            </summary>
        </member>
        <member name="M:DotNetNuke.Framework.BaseHttpHandler.RespondForbidden">
            <summary>
              Helper method used to Respond to the request
              that the request in attempting to access a resource
              that the user does not have access to.
            </summary>
        </member>
        <member name="T:DotNetNuke.Security.FIPSCompliant">
            <summary>
                This class implements a number of methods that can be safely used in a FIPS-140 compliant environment
                FIPS compliant Algorithms:
                Hash algorithms
                HMACSHA1
                MACTripleDES
                SHA1CryptoServiceProvider
                SHA256CryptoServiceProvider
                Symmetric algorithms (use the same key for encryption and decryption)
                DESCryptoServiceProvider
                TripleDESCryptoServiceProvider
                Asymmetric algorithms (use a public key for encryption and a private key for decryption)
                DSACryptoServiceProvider
                RSACryptoServiceProvider
            </summary>
        </member>
        <member name="M:DotNetNuke.Security.FIPSCompliant.EncryptAES(System.String,System.String,System.String,System.Int32)">
            <summary>
            uses the AES FIPS-140 compliant algorithm to encrypt a string
            </summary>
            <param name="plainText">the text to encrypt</param>
            <param name="passPhrase">the pass phase to do the encryption</param>
            <param name="salt">a salt value to ensure ciphertext using the same text/password is different</param>
            <param name="iterations">number of iterations to derive the key (higher is slower but more secure) - optional parameter with a default of 1000</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Security.FIPSCompliant.DecryptAES(System.String,System.String,System.String,System.Int32)">
            <summary>
            uses the AES FIPS-140 compliant algorithm to encrypt a string
            </summary>
            <param name="encryptedText">the text to decrypt</param>
            <param name="passPhrase">the pass phase to do the decryption</param>
            <param name="salt">a salt value to ensure ciphertext using the same text/password is different</param>
            <param name="iterations">number of iterations to derive the key (higher is slower but more secure) - optional parameter with a default of 1000</param>
            <returns></returns>
        </member>
        <member name="T:DotNetNuke.Security.Membership.AspNetMembershipProvider">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Provider.AspNetProvider
            Class:      AspNetMembershipProvider
            -----------------------------------------------------------------------------
            <summary>
            The AspNetMembershipProvider overrides the default MembershipProvider to provide
            an AspNet Membership Component (MemberRole) implementation
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.AddUserPortal(System.Int32,System.Int32)">
            <summary>
            add new userportal record (used for creating sites with existing user)
            </summary>
            <param name="portalId">portalid</param>
            <param name="userId">userid</param>
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.ChangeUsername(System.Int32,System.String)">
            <summary>
            function supports the ability change username
            </summary>
            <param name="userId">user id</param>
            <param name="newUsername">updated username</param>
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.ChangePassword(DotNetNuke.Entities.Users.UserInfo,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            ChangePassword attempts to change the users password
            </summary>
            <remarks>
            </remarks>
            <param name="user">The user to update.</param>
            <param name="oldPassword">The old password.</param>
            <param name="newPassword">The new password.</param>
            <returns>A Boolean indicating success or failure.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.ChangePasswordQuestionAndAnswer(DotNetNuke.Entities.Users.UserInfo,System.String,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            ChangePasswordQuestionAndAnswer attempts to change the users password Question
            and PasswordAnswer
            </summary>
            <remarks>
            </remarks>
            <param name="user">The user to update.</param>
            <param name="password">The password.</param>
            <param name="passwordQuestion">The new password question.</param>
            <param name="passwordAnswer">The new password answer.</param>
            <returns>A Boolean indicating success or failure.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.CreateUser(DotNetNuke.Entities.Users.UserInfo@)">
            -----------------------------------------------------------------------------
            <summary>
            CreateUser persists a User to the Data Store
            </summary>
            <remarks>
            </remarks>
            <param name="user">The user to persist to the Data Store.</param>
            <returns>A UserCreateStatus enumeration indicating success or reason for failure.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.DeleteUser(DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            DeleteUser deletes a single User from the Data Store
            </summary>
            <remarks>
            </remarks>
            <param name="user">The user to delete from the Data Store.</param>
            <returns>A Boolean indicating success or failure.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.DeleteUsersOnline(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Deletes all UserOnline inof from the database that has activity outside of the
            time window
            </summary>
            <remarks>
            </remarks>
            <param name="timeWindow">Time Window in Minutes</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GeneratePassword">
            -----------------------------------------------------------------------------
            <summary>
            Generates a new random password (Length = Minimum Length + 4)
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GeneratePassword(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Generates a new random password
            </summary>
            <param name="length">The length of password to generate.</param>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetOnlineUsers(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Gets a collection of Online Users
            </summary>
            <param name="portalId">The Id of the Portal</param>
            <returns>An ArrayList of UserInfo objects</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetPassword(DotNetNuke.Entities.Users.UserInfo,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Current Password Information for the User 
            </summary>
            <remarks>
            </remarks>
            <param name="user">The user to delete from the Data Store.</param>
            <param name="passwordAnswer">The answer to the Password Question, ues to confirm the user
            has the right to obtain the password.</param>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetUser(System.Int32,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetUserByUserName retrieves a User from the DataStore
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="userId">The id of the user being retrieved from the Data Store.</param>
            <returns>The User as a UserInfo object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetUserByDisplayName(System.Int32,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            GetUserByDisplayName retrieves a User from the DataStore
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="displayName">The displayName of the user being retrieved from the Data Store.</param>
            <returns>The User as a UserInfo object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetUserByUserName(System.Int32,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            GetUserByUserName retrieves a User from the DataStore. Supports user caching in memory cache.
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="username">The username of the user being retrieved from the Data Store.</param>
            <returns>The User as a UserInfo object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetUserByVanityUrl(System.Int32,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            GetUserByVanityUrl retrieves a User from the DataStore
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="vanityUrl">The vanityUrl of the user being retrieved from the Data Store.</param>
            <returns>The User as a UserInfo object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetUserByPasswordResetToken(System.Int32,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            GetUserByPasswordResetToken retrieves a User from the DataStore
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="resetToken">The password reset token.</param>
            <returns>The User as a UserInfo object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetUserCountByPortal(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetUserCountByPortal gets the number of users in the portal
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">The Id of the Portal</param>
            <returns>The no of users</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetUserMembership(DotNetNuke.Entities.Users.UserInfo@)">
            -----------------------------------------------------------------------------
            <summary>
            GetUserMembership retrieves the UserMembership information from the Data Store
            </summary>
            <remarks>
            </remarks>
            <param name="user">The user whose Membership information we are retrieving.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetUsers(System.Int32,System.Int32,System.Int32,System.Int32@)">
            -----------------------------------------------------------------------------
            <summary>
            GetUsers gets all the users of the portal
            </summary>
            <remarks>If all records are required, (ie no paging) set pageSize = -1</remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="pageIndex">The page of records to return.</param>
            <param name="pageSize">The size of the page</param>
            <param name="totalRecords">The total no of records that satisfy the criteria.</param>
            <returns>An ArrayList of UserInfo objects.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetUsers(System.Int32,System.Int32,System.Int32,System.Int32@,System.Boolean,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            GetUsers gets all the users of the portal
            </summary>
            <remarks>If all records are required, (ie no paging) set pageSize = -1</remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="pageIndex">The page of records to return.</param>
            <param name="pageSize">The size of the page</param>
            <param name="totalRecords">The total no of records that satisfy the criteria.</param>
            <param name="includeDeleted">Include deleted users.</param>
            <param name="superUsersOnly">Only select super users.</param>
            <returns>An ArrayList of UserInfo objects.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetUsersAdvancedSearch(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.String,System.Boolean,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="portalId"></param>
            <param name="userId"></param>
            <param name="filterUserId"></param>
            <param name="filterRoleId"></param>
            <param name="relationshipTypeId"> </param>
            <param name="isAdmin"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <param name="sortColumn"></param>
            <param name="sortAscending"></param>
            <param name="propertyNames"></param>
            <param name="propertyValues"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetUsersBasicSearch(System.Int32,System.Int32,System.Int32,System.String,System.Boolean,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="portalId"></param>
            <param name="pageIndex"></param>
            <param name="pageSize"></param>
            <param name="sortColumn"></param>
            <param name="sortAscending"></param>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetUsersByEmail(System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            -----------------------------------------------------------------------------
            <summary>
            GetUsersByEmail gets all the users of the portal whose email matches a provided
            filter expression
            </summary>
            <remarks>If all records are required, (ie no paging) set pageSize = -1</remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="emailToMatch">The email address to use to find a match.</param>
            <param name="pageIndex">The page of records to return.</param>
            <param name="pageSize">The size of the page</param>
            <param name="totalRecords">The total no of records that satisfy the criteria.</param>
            <returns>An ArrayList of UserInfo objects.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetUsersByEmail(System.Int32,System.String,System.Int32,System.Int32,System.Int32@,System.Boolean,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            GetUsersByEmail gets all the users of the portal whose email matches a provided
            filter expression
            </summary>
            <remarks>If all records are required, (ie no paging) set pageSize = -1</remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="emailToMatch">The email address to use to find a match.</param>
            <param name="pageIndex">The page of records to return.</param>
            <param name="pageSize">The size of the page</param>
            <param name="totalRecords">The total no of records that satisfy the criteria.</param>
            <param name="includeDeleted">Include deleted users.</param>
            <param name="superUsersOnly">Only select super users.</param>
            <returns>An ArrayList of UserInfo objects.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetUsersByUserName(System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            -----------------------------------------------------------------------------
            <summary>
            GetUsersByUserName gets all the users of the portal whose username matches a provided
            filter expression
            </summary>
            <remarks>If all records are required, (ie no paging) set pageSize = -1</remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="userNameToMatch">The username to use to find a match.</param>
            <param name="pageIndex">The page of records to return.</param>
            <param name="pageSize">The size of the page</param>
            <param name="totalRecords">The total no of records that satisfy the criteria.</param>
            <returns>An ArrayList of UserInfo objects.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetUsersByUserName(System.Int32,System.String,System.Int32,System.Int32,System.Int32@,System.Boolean,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            GetUsersByUserName gets all the users of the portal whose username matches a provided
            filter expression
            </summary>
            <remarks>If all records are required, (ie no paging) set pageSize = -1</remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="userNameToMatch">The username to use to find a match.</param>
            <param name="pageIndex">The page of records to return.</param>
            <param name="pageSize">The size of the page</param>
            <param name="totalRecords">The total no of records that satisfy the criteria.</param>
            <param name="includeDeleted">Include deleted users.</param>
            <param name="superUsersOnly">Only select super users.</param>
            <returns>An ArrayList of UserInfo objects.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetUsersByDisplayName(System.Int32,System.String,System.Int32,System.Int32,System.Int32@,System.Boolean,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            GetUsersByDisplayName gets all the users of the portal whose display name matches a provided
            filter expression
            </summary>
            <remarks>If all records are required, (ie no paging) set pageSize = -1</remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="nameToMatch">The display name to use to find a match.</param>
            <param name="pageIndex">The page of records to return.</param>
            <param name="pageSize">The size of the page</param>
            <param name="totalRecords">The total no of records that satisfy the criteria.</param>
            <param name="includeDeleted">Include deleted users.</param>
            <param name="superUsersOnly">Only select super users.</param>
            <returns>An ArrayList of UserInfo objects.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetUsersByProfileProperty(System.Int32,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            -----------------------------------------------------------------------------
            <summary>
            GetUsersByProfileProperty gets all the users of the portal whose profile matches
            the profile property pased as a parameter
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="propertyName">The name of the property being matched.</param>
            <param name="propertyValue">The value of the property being matched.</param>
            <param name="pageIndex">The page of records to return.</param>
            <param name="pageSize">The size of the page</param>
            <param name="totalRecords">The total no of records that satisfy the criteria.</param>
            <returns>An ArrayList of UserInfo objects.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetUsersByProfileProperty(System.Int32,System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Boolean,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            GetUsersByProfileProperty gets all the users of the portal whose profile matches
            the profile property pased as a parameter
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="propertyName">The name of the property being matched.</param>
            <param name="propertyValue">The value of the property being matched.</param>
            <param name="pageIndex">The page of records to return.</param>
            <param name="pageSize">The size of the page</param>
            <param name="totalRecords">The total no of records that satisfy the criteria.</param>
            <param name="includeDeleted">Include deleted users.</param>
            <param name="superUsersOnly">Only select super users.</param>
            <returns>An ArrayList of UserInfo objects.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.IsUserOnline(DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether the user in question is online
            </summary>
            <remarks>
            </remarks>
            <param name="user">The user.</param>
            <returns>A Boolean indicating whether the user is online.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.ResetPassword(DotNetNuke.Entities.Users.UserInfo,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            ResetPassword resets a user's password and returns the newly created password
            </summary>
            <remarks>
            </remarks>
            <param name="user">The user to update.</param>
            <param name="passwordAnswer">The answer to the user's password Question.</param>
            <returns>The new Password.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.ResetAndChangePassword(DotNetNuke.Entities.Users.UserInfo,System.String)">
            <summary>
            function sets user specific password reset token and timeout
            works for all PasswordFormats as it resets and then changes the password
            so old password is not required
            method does not support RequiresQuestionAndAnswer
            </summary>
            <param name="user"></param>
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.UnLockUser(DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Unlocks the User's Account
            </summary>
            <remarks>
            </remarks>
            <param name="user">The user whose account is being Unlocked.</param>
            <returns>True if successful, False if unsuccessful.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.UserAgreedToTerms(DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            User has agreed to terms and conditions for the portal
            </summary>
            <remarks>
            </remarks>
            <param name="user">The agreeing user.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.ResetTermsAgreement(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Reset all agreements on portal so all users need to agree again at next login
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">Portal for which to reset agreements.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.UserRequestsRemoval(DotNetNuke.Entities.Users.UserInfo,System.Boolean)">
            <summary>
            Sets a boolean on the user portal to indicate this user has requested that their account be deleted
            </summary>
            <param name="user">User requesting removal</param>
            <param name="remove">True if user requests removal, false if the value needs to be reset.</param>
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.UpdateUser(DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            UpdateUser persists a user to the Data Store
            </summary>
            <remarks>
            </remarks>
            <param name="user">The user to persist to the Data Store.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.UpdateUsersOnline(System.Collections.Hashtable)">
            -----------------------------------------------------------------------------
            <summary>
            Updates UserOnline info
            time window
            </summary>
            <param name="userList">List of users to update</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.UserLogin(System.Int32,System.String,System.String,System.String,DotNetNuke.Security.Membership.UserLoginStatus@)">
            -----------------------------------------------------------------------------
            <summary>
            UserLogin attempts to log the user in, and returns the User if successful
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">The Id of the Portal the user belongs to</param>
            <param name="username">The user name of the User attempting to log in</param>
            <param name="password">The password of the User attempting to log in</param>
            <param name="verificationCode">The verification code of the User attempting to log in</param>
            <param name="loginStatus">An enumerated value indicating the login status.</param>
            <returns>The User as a UserInfo object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.UserLogin(System.Int32,System.String,System.String,System.String,System.String,DotNetNuke.Security.Membership.UserLoginStatus@)">
            -----------------------------------------------------------------------------
            <summary>
            UserLogin attempts to log the user in, and returns the User if successful
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">The Id of the Portal the user belongs to</param>
            <param name="username">The user name of the User attempting to log in</param>
            <param name="password">The password of the User attempting to log in (may not be used by all Auth types)</param>
            <param name="authType">The type of Authentication Used</param>
            <param name="verificationCode">The verification code of the User attempting to log in</param>
            <param name="loginStatus">An enumerated value indicating the login status.</param>
            <returns>The User as a UserInfo object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Membership.AspNetMembershipProvider.GetUserByUserNameFromDataStore(System.Int32,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            GetUserByUserNameFromDataStore retrieves a User from the DataStore.
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="username">The username of the user being retrieved from the Data Store.</param>
            <returns>The User as a UserInfo object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Security.Membership.MembershipProviderConfig">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Security.Membership
            Class:      MembershipProviderConfig
            -----------------------------------------------------------------------------
            <summary>
            The MembershipProviderConfig class provides a wrapper to the Membership providers
            configuration
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Membership.MembershipProviderConfig.CanEditProviderProperties">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether the Provider Properties can be edited
            </summary>
            <returns>A Boolean</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Membership.MembershipProviderConfig.MaxInvalidPasswordAttempts">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the maximum number of invlaid attempts to login are allowed
            </summary>
            <returns>A Boolean.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Membership.MembershipProviderConfig.MinNonAlphanumericCharacters">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Mimimum no of Non AlphNumeric characters required
            </summary>
            <returns>An Integer.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Membership.MembershipProviderConfig.MinPasswordLength">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Mimimum Password Length
            </summary>
            <returns>An Integer.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Membership.MembershipProviderConfig.PasswordAttemptWindow">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the window in minutes that the maxium attempts are tracked for
            </summary>
            <returns>A Boolean.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Membership.MembershipProviderConfig.PasswordFormat">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Password Format
            </summary>
            <returns>A PasswordFormat enumeration.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Membership.MembershipProviderConfig.PasswordResetEnabled">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the Users's Password can be reset
            </summary>
            <returns>A Boolean.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Membership.MembershipProviderConfig.PasswordRetrievalEnabled">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the Users's Password can be retrieved
            </summary>
            <returns>A Boolean.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Membership.MembershipProviderConfig.PasswordStrengthRegularExpression">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets a Regular Expression that determines the strength of the password
            </summary>
            <returns>A String.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Membership.MembershipProviderConfig.RequiresQuestionAndAnswer">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether a Question/Answer is required for Password retrieval
            </summary>
            <returns>A Boolean.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Membership.MembershipProviderConfig.RequiresUniqueEmail">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether a Unique Email is required
            </summary>
            <returns>A Boolean.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Security.Membership.PasswordConfig">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Security.Membership
            Class:      PasswordConfig
            -----------------------------------------------------------------------------
            <summary>
            The PasswordConfig class provides a wrapper any Portal wide Password Settings
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Membership.PasswordConfig.PasswordExpiry">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Password Expiry time in days
            </summary>
            <returns>An integer.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Membership.PasswordConfig.PasswordExpiryReminder">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the a Reminder time in days (to remind the user that theire password
            is about to expire
            </summary>
            <returns>An integer.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Security.Permissions.CompareDesktopModulePermissions">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.Security.Permissions
            Class	 : CompareDesktopModulePermissions
            -----------------------------------------------------------------------------
            <summary>
            CompareDesktopModulePermissions provides the a custom IComparer implementation for
            DesktopModulePermissionInfo objects
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Security.Permissions.CompareFolderPermissions">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.Security.Permissions
            Class	 : CompareTabPermissions
            -----------------------------------------------------------------------------
            <summary>
            CompareTabPermissions provides the a custom IComparer implementation for
            TabPermissionInfo objects
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Security.Permissions.CompareModulePermissions">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.Security.Permissions
            Class	 : CompareModulePermissions
            -----------------------------------------------------------------------------
            <summary>
            CompareModulePermissions provides the a custom IComparer implementation for
            ModulePermissionInfo objects
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Security.Permissions.CompareTabPermissions">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.Security.Permissions
            Class	 : CompareTabPermissions
            -----------------------------------------------------------------------------
            <summary>
            CompareTabPermissions provides the a custom IComparer implementation for
            TabPermissionInfo objects
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Permissions.Controls.DesktopModulePermissionsGrid.Permissions">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Permissions Collection
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Permissions.Controls.DesktopModulePermissionsGrid.PortalDesktopModuleID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and Sets the Id of the PortalDesktopModule
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.DesktopModulePermissionsGrid.GetDesktopModulePermissions">
            -----------------------------------------------------------------------------
            <summary>
            Gets the DesktopModulePermissions from the Data Store
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.DesktopModulePermissionsGrid.ParseKeys(System.String[])">
            -----------------------------------------------------------------------------
            <summary>
            Parse the Permission Keys used to persist the Permissions in the ViewState
            </summary>
            <param name="Settings">A string array of settings</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.DesktopModulePermissionsGrid.AddPermission(System.Collections.ArrayList,DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Updates a Permission
            </summary>
            <param name="permissions">The permissions collection</param>
            <param name="user">The user to add</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.DesktopModulePermissionsGrid.AddPermission(System.Collections.ArrayList,DotNetNuke.Security.Roles.RoleInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Updates a Permission
            </summary>
            <param name="permissions">The permissions collection</param>
            <param name="role">The roleto add</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.DesktopModulePermissionsGrid.GetPermissions">
            -----------------------------------------------------------------------------
            <summary>
            Gets the permissions from the Database
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.DesktopModulePermissionsGrid.LoadViewState(System.Object)">
            -----------------------------------------------------------------------------
            <summary>
            Load the ViewState
            </summary>
            <param name="savedState">The saved state</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.DesktopModulePermissionsGrid.SaveViewState">
            -----------------------------------------------------------------------------
            <summary>
            Saves the ViewState
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.DesktopModulePermissionsGrid.SupportsDenyPermissions(DotNetNuke.Security.Permissions.PermissionInfo)">
            -----------------------------------------------------------------------------
            <summary>
            returns whether or not the derived grid supports Deny permissions
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Permissions.Controls.FolderPermissionsGrid.FolderPath">
            -----------------------------------------------------------------------------
            <summary>
            Gets and Sets the path of the Folder
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Permissions.Controls.FolderPermissionsGrid.Permissions">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Permission Collection
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.FolderPermissionsGrid.GetFolderPermissions">
            -----------------------------------------------------------------------------
            <summary>
            Gets the TabPermissions from the Data Store
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.FolderPermissionsGrid.ParseKeys(System.String[])">
            -----------------------------------------------------------------------------
            <summary>
            Parse the Permission Keys used to persist the Permissions in the ViewState
            </summary>
            <param name="settings">A string array of settings</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.FolderPermissionsGrid.AddPermission(System.Collections.ArrayList,DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Updates a Permission
            </summary>
            <param name="permissions">The permissions collection</param>
            <param name="user">The user to add</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.FolderPermissionsGrid.AddPermission(System.Collections.ArrayList,DotNetNuke.Security.Roles.RoleInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Updates a Permission
            </summary>
            <param name="permissions">The permissions collection</param>
            <param name="role">The role to add</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.FolderPermissionsGrid.GetEnabled(DotNetNuke.Security.Permissions.PermissionInfo,DotNetNuke.Security.Roles.RoleInfo,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Enabled status of the permission
            </summary>
            <param name="objPerm">The permission being loaded</param>
            <param name="role">The role</param>
            <param name="column">The column of the Grid</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.FolderPermissionsGrid.GetPermission(DotNetNuke.Security.Permissions.PermissionInfo,DotNetNuke.Security.Roles.RoleInfo,System.Int32,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Value of the permission
            </summary>
            <param name="objPerm">The permission being loaded</param>
            <param name="role">The role</param>
            <param name="column">The column of the Grid</param>
            <param name="defaultState">Default State.</param>
            <returns>A Boolean (True or False)</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.FolderPermissionsGrid.GetPermissions">
            -----------------------------------------------------------------------------
            <summary>
            Gets the permissions from the Database
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.FolderPermissionsGrid.LoadViewState(System.Object)">
            -----------------------------------------------------------------------------
            <summary>
            Load the ViewState
            </summary>
            <param name="savedState">The saved state</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.FolderPermissionsGrid.SaveViewState">
            -----------------------------------------------------------------------------
            <summary>
            Saves the ViewState
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.FolderPermissionsGrid.SupportsDenyPermissions(DotNetNuke.Security.Permissions.PermissionInfo)">
            -----------------------------------------------------------------------------
            <summary>
            returns whether or not the derived grid supports Deny permissions
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.FolderPermissionsGrid.GenerateDataGrid">
            -----------------------------------------------------------------------------
            <summary>
            Overrides the Base method to Generate the Data Grid
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.InheritViewPermissionsFromTab">
            -----------------------------------------------------------------------------
            <summary>
            Gets and Sets whether the Module inherits the Page's(Tab's) permissions
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.ModuleID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and Sets the Id of the Module
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.TabId">
            -----------------------------------------------------------------------------
            <summary>
            Gets and Sets the Id of the Tab associated with this module
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.Permissions">
            -----------------------------------------------------------------------------
            <summary>
            Gets the ModulePermission Collection
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.IsImplicitRole(System.Int32,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Check if a role is implicit for Module Permissions
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.GetModulePermissions">
            -----------------------------------------------------------------------------
            <summary>
            Gets the ModulePermissions from the Data Store
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.ParseKeys(System.String[])">
            -----------------------------------------------------------------------------
            <summary>
            Parse the Permission Keys used to persist the Permissions in the ViewState
            </summary>
            <param name="Settings">A string array of settings</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.AddPermission(System.Collections.ArrayList,DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Updates a Permission
            </summary>
            <param name="permissions">The permissions collection</param>
            <param name="user">The user to add</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.AddPermission(System.Collections.ArrayList,DotNetNuke.Security.Roles.RoleInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Updates a Permission
            </summary>
            <param name="permissions">The permissions collection</param>
            <param name="role">The role to add</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.GetEnabled(DotNetNuke.Security.Permissions.PermissionInfo,DotNetNuke.Security.Roles.RoleInfo,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Enabled status of the permission
            </summary>
            <param name="objPerm">The permission being loaded</param>
            <param name="role">The role</param>
            <param name="column">The column of the Grid</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.GetEnabled(DotNetNuke.Security.Permissions.PermissionInfo,DotNetNuke.Entities.Users.UserInfo,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Enabled status of the permission
            </summary>
            <param name="objPerm">The permission being loaded</param>
            <param name="user">The user</param>
            <param name="column">The column of the Grid</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.GetPermission(DotNetNuke.Security.Permissions.PermissionInfo,DotNetNuke.Security.Roles.RoleInfo,System.Int32,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Value of the permission
            </summary>
            <param name="objPerm">The permission being loaded</param>
            <param name="role">The role</param>
            <param name="column">The column of the Grid</param>
            <param name="defaultState">Default State.</param>
            <returns>A Boolean (True or False)</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.GetPermission(DotNetNuke.Security.Permissions.PermissionInfo,DotNetNuke.Entities.Users.UserInfo,System.Int32,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Value of the permission
            </summary>
            <param name="objPerm">The permission being loaded</param>
            <param name="user">The role</param>
            <param name="column">The column of the Grid</param>
            <param name="defaultState">Default State.</param>
            <returns>A Boolean (True or False)</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.GetPermissions">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Permissions from the Data Store
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.LoadViewState(System.Object)">
            -----------------------------------------------------------------------------
            <summary>
            Load the ViewState
            </summary>
            <param name="savedState">The saved state</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.SaveViewState">
            -----------------------------------------------------------------------------
            <summary>
            Saves the ViewState
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.SupportsDenyPermissions(DotNetNuke.Security.Permissions.PermissionInfo)">
            -----------------------------------------------------------------------------
            <summary>
            returns whether or not the derived grid supports Deny permissions
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.ModulePermissionsGrid.GenerateDataGrid">
            -----------------------------------------------------------------------------
            <summary>
            Overrides the Base method to Generate the Data Grid
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.RegisterScriptsForAjaxPanel">
            <summary>
            Registers the scripts neccesary to make the tri-state controls work inside a RadAjaxPanel
            </summary>
            <remarks>
            No need to call this unless using the PermissionGrid inside an ajax control that omits scripts on postback
            See DesktopModules/Admin/Tabs.ascx.cs for an example of usage
            </remarks>
        </member>
        <member name="P:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.AdministratorRoleId">
            <summary>
            Gets the Id of the Administrator Role
            </summary>
        </member>
        <member name="P:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.RegisteredUsersRoleId">
            <summary>
            Gets the Id of the Registered Users Role
            </summary>
        </member>
        <member name="P:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.DynamicColumnAdded">
            <summary>
            Gets and Sets whether a Dynamic Column has been added
            </summary>
        </member>
        <member name="P:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.dtRolePermissions">
            <summary>
            Gets the underlying Permissions Data Table
            </summary>
        </member>
        <member name="P:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.dtUserPermissions">
            <summary>
            Gets the underlying Permissions Data Table
            </summary>
        </member>
        <member name="P:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.PortalId">
            <summary>
            Gets the Id of the Portal
            </summary>
        </member>
        <member name="P:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.Roles">
            <summary>
            Gets and Sets the collection of Roles to display
            </summary>
        </member>
        <member name="P:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.ResourceFile">
            <summary>
            Gets and Sets the ResourceFile to localize permissions
            </summary>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.GenerateDataGrid">
            <summary>
            Generate the Data Grid
            </summary>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.AddPermission(System.Collections.ArrayList,DotNetNuke.Entities.Users.UserInfo)">
            <summary>
            Updates a Permission
            </summary>
            <param name="permissions">The permissions collection</param>
            <param name="user">The user to add</param>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.AddPermission(System.Collections.ArrayList,DotNetNuke.Security.Roles.RoleInfo)">
            <summary>
            Updates a Permission
            </summary>
            <param name="permissions">The permissions collection</param>
            <param name="role">The role to add</param>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.BuildKey(System.Boolean,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Builds the key used to store the "permission" information in the ViewState
            </summary>
            <param name="allowAccess">The type of permission ( grant / deny )</param>
            <param name="permissionId">The Id of the permission</param>
            <param name="objectPermissionId">The Id of the object permission</param>
            <param name="roleId">The role id</param>
            <param name="roleName">The role name</param>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.BuildKey(System.Boolean,System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Builds the key used to store the "permission" information in the ViewState
            </summary>
            <param name="allowAccess">The type of permission ( grant / deny )</param>
            <param name="permissionId">The Id of the permission</param>
            <param name="objectPermissionId">The Id of the object permission</param>
            <param name="roleId">The role id</param>
            <param name="roleName">The role name</param>
            <param name="userID">The user id</param>
            <param name="displayName">The user display name</param>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.CreateChildControls">
            <summary>
            Creates the Child Controls
            </summary>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.GetEnabled(DotNetNuke.Security.Permissions.PermissionInfo,DotNetNuke.Security.Roles.RoleInfo,System.Int32)">
            <summary>
            Gets the Enabled status of the permission
            </summary>
            <param name="objPerm">The permission being loaded</param>
            <param name="role">The role</param>
            <param name="column">The column of the Grid</param>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.GetEnabled(DotNetNuke.Security.Permissions.PermissionInfo,DotNetNuke.Entities.Users.UserInfo,System.Int32)">
            <summary>
            Gets the Enabled status of the permission
            </summary>
            <param name="objPerm">The permission being loaded</param>
            <param name="user">The user</param>
            <param name="column">The column of the Grid</param>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.GetPermission(DotNetNuke.Security.Permissions.PermissionInfo,DotNetNuke.Security.Roles.RoleInfo,System.Int32)">
            <summary>
            Gets the Value of the permission
            </summary>
            <param name="objPerm">The permission being loaded</param>
            <param name="role">The role</param>
            <param name="column">The column of the Grid</param>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.GetPermission(DotNetNuke.Security.Permissions.PermissionInfo,DotNetNuke.Security.Roles.RoleInfo,System.Int32,System.String)">
            <summary>
            Gets the Value of the permission
            </summary>
            <param name="objPerm">The permission being loaded</param>
            <param name="role">The role</param>
            <param name="column">The column of the Grid</param>
            <param name="defaultState">Default State.</param>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.GetPermission(DotNetNuke.Security.Permissions.PermissionInfo,DotNetNuke.Entities.Users.UserInfo,System.Int32)">
            <summary>
            Gets the Value of the permission
            </summary>
            <param name="objPerm">The permission being loaded</param>
            <param name="user">The user</param>
            <param name="column">The column of the Grid</param>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.GetPermission(DotNetNuke.Security.Permissions.PermissionInfo,DotNetNuke.Entities.Users.UserInfo,System.Int32,System.String)">
            <summary>
            Gets the Value of the permission
            </summary>
            <param name="objPerm">The permission being loaded</param>
            <param name="user">The user</param>
            <param name="column">The column of the Grid</param>
            <param name="defaultState">Default State.</param>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.GetPermissions">
            <summary>
            Gets the permissions from the Database
            </summary>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.GetUsers">
            <summary>
            Gets the users from the Database
            </summary>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.OnPreRender(System.EventArgs)">
            <summary>
            Overrides the base OnPreRender method to Bind the Grid to the Permissions
            </summary>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.UpdatePermission(DotNetNuke.Security.Permissions.PermissionInfo,System.Int32,System.String,System.Boolean)">
            <summary>
            Updates a Permission
            </summary>
            <param name="permission">The permission being updated</param>
            <param name="roleId">Rold Id.</param>
            <param name="roleName">The name of the role</param>
            <param name="allowAccess">The value of the permission</param>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.UpdatePermission(DotNetNuke.Security.Permissions.PermissionInfo,System.Int32,System.String,System.String)">
            <summary>
            Updates a Permission
            </summary>
            <param name="permission">The permission being updated</param>
            <param name="roleId">Role Id.</param>
            <param name="roleName">The name of the role</param>
            <param name="stateKey">The permission state</param>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.UpdatePermission(DotNetNuke.Security.Permissions.PermissionInfo,System.String,System.Int32,System.Boolean)">
            <summary>
            Updates a Permission
            </summary>
            <param name="permission">The permission being updated</param>
            <param name="displayName">The user's displayname</param>
            <param name="userId">The user's id</param>
            <param name="allowAccess">The value of the permission</param>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.UpdatePermission(DotNetNuke.Security.Permissions.PermissionInfo,System.String,System.Int32,System.String)">
            <summary>
            Updates a Permission
            </summary>
            <param name="permission">The permission being updated</param>
            <param name="displayName">The user's displayname</param>
            <param name="userId">The user's id</param>
            <param name="stateKey">The permission state</param>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.UpdatePermissions">
            <summary>
            Updates the permissions
            </summary>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.UpdateRolePermissions">
            <summary>
            Updates the permissions
            </summary>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.UpdateUserPermissions">
            <summary>
            Updates the permissions
            </summary>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.RoleGroupsSelectedIndexChanged(System.Object,System.EventArgs)">
            <summary>
            RoleGroupsSelectedIndexChanged runs when the Role Group is changed
            </summary>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.AddUser(System.Object,System.EventArgs)">
            <summary>
            AddUser runs when the Add user linkbutton is clicked
            </summary>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.PermissionsGrid.AddRole(System.Object,System.EventArgs)">
            <summary>
            AddRole runs when the Add Role linkbutton is clicked
            </summary>
        </member>
        <member name="P:DotNetNuke.Security.Permissions.Controls.TabPermissionsGrid.Permissions">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Permissions Collection
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Permissions.Controls.TabPermissionsGrid.TabID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and Sets the Id of the Tab
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.TabPermissionsGrid.GetTabPermissions">
            -----------------------------------------------------------------------------
            <summary>
            Gets the TabPermissions from the Data Store
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.TabPermissionsGrid.ParseKeys(System.String[])">
            -----------------------------------------------------------------------------
            <summary>
            Parse the Permission Keys used to persist the Permissions in the ViewState
            </summary>
            <param name="Settings">A string array of settings</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.TabPermissionsGrid.AddPermission(System.Collections.ArrayList,DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Updates a Permission
            </summary>
            <param name="permissions">The permissions collection</param>
            <param name="user">The user to add</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.TabPermissionsGrid.AddPermission(System.Collections.ArrayList,DotNetNuke.Security.Roles.RoleInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Updates a Permission
            </summary>
            <param name="permissions">The permissions collection</param>
            <param name="role">The role to add</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.TabPermissionsGrid.GetEnabled(DotNetNuke.Security.Permissions.PermissionInfo,DotNetNuke.Security.Roles.RoleInfo,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Enabled status of the permission
            </summary>
            <param name="objPerm">The permission being loaded</param>
            <param name="role">The role</param>
            <param name="column">The column of the Grid</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.TabPermissionsGrid.GetPermission(DotNetNuke.Security.Permissions.PermissionInfo,DotNetNuke.Security.Roles.RoleInfo,System.Int32,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Value of the permission
            </summary>
            <param name="objPerm">The permission being loaded</param>
            <param name="role">The role</param>
            <param name="column">The column of the Grid</param>
            <param name="defaultState">Default State.</param>
            <returns>A Boolean (True or False)</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.TabPermissionsGrid.GetPermissions">
            -----------------------------------------------------------------------------
            <summary>
            Gets the permissions from the Database
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.TabPermissionsGrid.LoadViewState(System.Object)">
            -----------------------------------------------------------------------------
            <summary>
            Load the ViewState
            </summary>
            <param name="savedState">The saved state</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.TabPermissionsGrid.SaveViewState">
            -----------------------------------------------------------------------------
            <summary>
            Saves the ViewState
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.Controls.TabPermissionsGrid.SupportsDenyPermissions(DotNetNuke.Security.Permissions.PermissionInfo)">
            -----------------------------------------------------------------------------
            <summary>
            returns whether or not the derived grid supports Deny permissions
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Security.Permissions.DesktopModulePermissionCollection">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.Security.Permissions
            Class	 : DesktopModulePermissionCollection
            -----------------------------------------------------------------------------
            <summary>
            DesktopModulePermissionCollection provides the a custom collection for DesktopModulePermissionInfo
            objects
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Security.Permissions.DesktopModulePermissionController">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.Security.Permissions
            Class	 : DesktopModulePermissionController
            -----------------------------------------------------------------------------
            <summary>
            DesktopModulePermissionController provides the Business Layer for DesktopModule Permissions
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.DesktopModulePermissionController.ClearPermissionCache">
            -----------------------------------------------------------------------------
            <summary>
            ClearPermissionCache clears the DesktopModule Permission Cache
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.DesktopModulePermissionController.AddDesktopModulePermission(DotNetNuke.Security.Permissions.DesktopModulePermissionInfo)">
            -----------------------------------------------------------------------------
            <summary>
            AddDesktopModulePermission adds a DesktopModule Permission to the Database
            </summary>
            <param name="objDesktopModulePermission">The DesktopModule Permission to add</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.DesktopModulePermissionController.DeleteDesktopModulePermission(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            DeleteDesktopModulePermission deletes a DesktopModule Permission in the Database
            </summary>
            <param name="DesktopModulePermissionID">The ID of the DesktopModule Permission to delete</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.DesktopModulePermissionController.DeleteDesktopModulePermissionsByPortalDesktopModuleID(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            DeleteDesktopModulePermissionsByPortalDesktopModuleID deletes a DesktopModule's
            DesktopModule Permission in the Database
            </summary>
            <param name="portalDesktopModuleID">The ID of the DesktopModule to delete</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.DesktopModulePermissionController.DeleteDesktopModulePermissionsByUserID(DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            DeleteDesktopModulePermissionsByUserID deletes a user's DesktopModule Permission in the Database
            </summary>
            <param name="objUser">The user</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.DesktopModulePermissionController.GetDesktopModulePermission(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetDesktopModulePermission gets a DesktopModule Permission from the Database
            </summary>
            <param name="DesktopModulePermissionID">The ID of the DesktopModule Permission</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.DesktopModulePermissionController.GetDesktopModulePermissions(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetDesktopModulePermissions gets a DesktopModulePermissionCollection
            </summary>
            <param name="portalDesktopModuleID">The ID of the DesktopModule</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.DesktopModulePermissionController.HasDesktopModulePermission(DotNetNuke.Security.Permissions.DesktopModulePermissionCollection,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            HasDesktopModulePermission checks whether the current user has a specific DesktopModule Permission
            </summary>
            <param name="objDesktopModulePermissions">The Permissions for the DesktopModule</param>
            <param name="permissionKey">The Permission to check</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.DesktopModulePermissionController.UpdateDesktopModulePermission(DotNetNuke.Security.Permissions.DesktopModulePermissionInfo)">
            -----------------------------------------------------------------------------
            <summary>
            UpdateDesktopModulePermission updates a DesktopModule Permission in the Database
            </summary>
            <param name="objDesktopModulePermission">The DesktopModule Permission to update</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Security.Permissions.DesktopModulePermissionInfo">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.Security.Permissions
            Class	 : DesktopModulePermissionInfo
            -----------------------------------------------------------------------------
            <summary>
            DesktopModulePermissionInfo provides the Entity Layer for DesktopModulePermissionInfo
            Permissions
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.DesktopModulePermissionInfo.#ctor">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a new DesktopModulePermissionInfo
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.DesktopModulePermissionInfo.#ctor(DotNetNuke.Security.Permissions.PermissionInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a new DesktopModulePermissionInfo
            </summary>
            <param name="permission">A PermissionInfo object</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Permissions.DesktopModulePermissionInfo.DesktopModulePermissionID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the DesktopModule Permission ID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Permissions.DesktopModulePermissionInfo.PortalDesktopModuleID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the PortalDesktopModule ID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.DesktopModulePermissionInfo.Fill(System.Data.IDataReader)">
            -----------------------------------------------------------------------------
            <summary>
            Fills a DesktopModulePermissionInfo from a Data Reader
            </summary>
            <param name="dr">The Data Reader to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Permissions.DesktopModulePermissionInfo.KeyID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Key ID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.DesktopModulePermissionInfo.Equals(DotNetNuke.Security.Permissions.DesktopModulePermissionInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Compares if two DesktopModulePermissionInfo objects are equivalent/equal
            </summary>
            <param name="other">a DesktopModulePermissionObject</param>
            <returns>true if the permissions being passed represents the same permission
            in the current object
            </returns>
            <remarks>
            This function is needed to prevent adding duplicates to the DesktopModulePermissionCollection.
            DesktopModulePermissionCollection.Contains will use this method to check if a given permission
            is already included in the collection.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.DesktopModulePermissionInfo.Equals(System.Object)">
            -----------------------------------------------------------------------------
            <summary>
            Compares if two DesktopModulePermissionInfo objects are equivalent/equal
            </summary>
            <param name="obj">a DesktopModulePermissionObject</param>
            <returns>true if the permissions being passed represents the same permission
            in the current object
            </returns>
            <remarks>
            This function is needed to prevent adding duplicates to the DesktopModulePermissionCollection.
            DesktopModulePermissionCollection.Contains will use this method to check if a given permission
            is already included in the collection.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.FolderPermissionController.DotNetNuke#Security#Permissions#IFolderPermissionController#CanAddFolder(DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>
            Returns a flag indicating whether the current user can add a folder or file
            </summary>
            <param name="folder">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.FolderPermissionController.DotNetNuke#Security#Permissions#IFolderPermissionController#CanAdminFolder(DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>
            Returns a flag indicating whether the current user can addmister a folder
            </summary>
            <param name="folder">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.FolderPermissionController.DotNetNuke#Security#Permissions#IFolderPermissionController#CanViewFolder(DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>
            Returns a flag indicating whether the current user can view a folder or file
            </summary>
            <param name="folder">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.FolderPermissionController.ImplicitRoles(System.Int32)">
            <summary>
            Returns a list with all roles with implicit permissions on Folders
            </summary>
            <param name="portalId">The Portal Id where the Roles are</param>
            <returns>A List with the implicit roles</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.FolderPermissionController.CanAddFolder(DotNetNuke.Services.FileSystem.FolderInfo)">
            <summary>
            Returns a flag indicating whether the current user can add a folder or file
            </summary>
            <param name="folder">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.FolderPermissionController.CanAdminFolder(DotNetNuke.Services.FileSystem.FolderInfo)">
            <summary>
            Returns a flag indicating whether the current user can addmister a folder
            </summary>
            <param name="folder">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.FolderPermissionController.CanBrowseFolder(DotNetNuke.Services.FileSystem.FolderInfo)">
            <summary>
            Returns a flag indicating whether the current user can browse the folder
            </summary>
            <param name="folder">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.FolderPermissionController.CanCopyFolder(DotNetNuke.Services.FileSystem.FolderInfo)">
            <summary>
            Returns a flag indicating whether the current user can copy a folder or file
            </summary>
            <param name="folder">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.FolderPermissionController.CanDeleteFolder(DotNetNuke.Services.FileSystem.FolderInfo)">
            <summary>
            Returns a flag indicating whether the current user can delete a folder or file
            </summary>
            <param name="folder">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.FolderPermissionController.CanManageFolder(DotNetNuke.Services.FileSystem.FolderInfo)">
            <summary>
            Returns a flag indicating whether the current user can manage a folder's settings
            </summary>
            <param name="folder">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.FolderPermissionController.CanViewFolder(DotNetNuke.Services.FileSystem.FolderInfo)">
            <summary>
            Returns a flag indicating whether the current user can view a folder or file
            </summary>
            <param name="folder">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.FolderPermissionController.CopyPermissionsToSubfolders(DotNetNuke.Services.FileSystem.IFolderInfo,DotNetNuke.Security.Permissions.FolderPermissionCollection)">
            <summary>
            Copies the permissions to subfolders.
            </summary>
            <param name="folder">The parent folder.</param>
            <param name="newPermissions">The new permissions.</param>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.FolderPermissionController.SaveFolderPermissions(DotNetNuke.Services.FileSystem.FolderInfo)">
            -----------------------------------------------------------------------------
            <summary>
            SaveFolderPermissions updates a Folder's permissions
            </summary>
            <param name="folder">The Folder to update</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.FolderPermissionController.SaveFolderPermissions(DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>
            SaveFolderPermissions updates a Folder's permissions
            </summary>
            <param name="folder">The Folder to update</param>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.FolderPermissionInfo.#ctor">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a new FolderPermissionInfo
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.FolderPermissionInfo.#ctor(DotNetNuke.Security.Permissions.PermissionInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a new FolderPermissionInfo
            </summary>
            <param name="permission">A PermissionInfo object</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.FolderPermissionInfo.Fill(System.Data.IDataReader)">
            -----------------------------------------------------------------------------
            <summary>
            Fills a FolderPermissionInfo from a Data Reader
            </summary>
            <param name="dr">The Data Reader to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Permissions.FolderPermissionInfo.KeyID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Key ID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Security.Permissions.ModulePermissionCollection">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.Security.Permissions
            Class	 : ModulePermissionCollection
            -----------------------------------------------------------------------------
            <summary>
            ModulePermissionCollection provides the a custom collection for ModulePermissionInfo
            objects
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Security.Permissions.ModulePermissionController">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.Security.Permissions
            Class	 : ModulePermissionController
            -----------------------------------------------------------------------------
            <summary>
            ModulePermissionController provides the Business Layer for Module Permissions
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.ModulePermissionController.ImplicitRoles(System.Int32)">
            <summary>
            Returns a list with all roles with implicit permissions on Modules
            </summary>
            <param name="portalId">The Portal Id where the Roles are</param>
            <returns>A List with the implicit roles</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.ModulePermissionController.CanAdminModule(DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            Returns a flag indicating whether the current user can administer a module
            </summary>
            <param name="module">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.ModulePermissionController.CanDeleteModule(DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            Returns a flag indicating whether the current user can delete a module
            </summary>
            <param name="module">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.ModulePermissionController.CanEditModuleContent(DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            Returns a flag indicating whether the current user can edit module content
            </summary>
            <param name="module">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.ModulePermissionController.CanExportModule(DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            Returns a flag indicating whether the current user can export a module
            </summary>
            <param name="module">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.ModulePermissionController.CanImportModule(DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            Returns a flag indicating whether the current user can import a module
            </summary>
            <param name="module">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.ModulePermissionController.CanManageModule(DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            Returns a flag indicating whether the current user can manage a module's settings
            </summary>
            <param name="module">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.ModulePermissionController.CanViewModule(DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            Returns a flag indicating whether the current user can view a module
            </summary>
            <param name="module">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.ModulePermissionController.DeleteModulePermissionsByUser(DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            DeleteModulePermissionsByUser deletes a user's Module Permission in the Database
            </summary>
            <param name="user">The user</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.ModulePermissionController.GetModulePermissions(System.Int32,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetModulePermissions gets a ModulePermissionCollection
            </summary>
            <param name="moduleId">The ID of the module</param>
            <param name="tabId">The ID of the tab</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.ModulePermissionController.HasModulePermission(DotNetNuke.Security.Permissions.ModulePermissionCollection,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            HasModulePermission checks whether the current user has a specific Module Permission
            </summary>
            <remarks>If you pass in a comma delimited list of permissions (eg "ADD,DELETE", this will return
            true if the user has any one of the permissions.</remarks>
            <param name="modulePermissions">The Permissions for the Module</param>
            <param name="permissionKey">The Permission to check</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.ModulePermissionController.HasModuleAccess(DotNetNuke.Security.SecurityAccessLevel,System.String,DotNetNuke.Entities.Modules.ModuleInfo)">
            -----------------------------------------------------------------------------
             <summary>
             Determines if user has the necessary permissions to access an item with the
             designated AccessLevel.
             </summary>
             <param name="accessLevel">The SecurityAccessLevel required to access a portal module or module action.</param>
             <param name="permissionKey">If Security Access is Edit the permissionKey is the actual "edit" permisison required.</param>
             <param name="moduleConfiguration">The ModuleInfo object for the associated module.</param>
             <returns>A boolean value indicating if the user has the necessary permissions</returns>
             <remarks>Every module control and module action has an associated permission level.  This
             function determines whether the user represented by UserName has sufficient permissions, as
             determined by the PortalSettings and ModuleSettings, to access a resource with the
             designated AccessLevel.</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.ModulePermissionController.SaveModulePermissions(DotNetNuke.Entities.Modules.ModuleInfo)">
            -----------------------------------------------------------------------------
            <summary>
            SaveModulePermissions updates a Module's permissions
            </summary>
            <param name="module">The Module to update</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Security.Permissions.ModulePermissionInfo">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.Security.Permissions
            Class	 : ModulePermissionInfo
            -----------------------------------------------------------------------------
            <summary>
            ModulePermissionInfo provides the Entity Layer for Module Permissions
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.ModulePermissionInfo.#ctor">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a new ModulePermissionInfo
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.ModulePermissionInfo.#ctor(DotNetNuke.Security.Permissions.PermissionInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a new ModulePermissionInfo
            </summary>
            <param name="permission">A PermissionInfo object</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Permissions.ModulePermissionInfo.ModulePermissionID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Module Permission ID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Permissions.ModulePermissionInfo.ModuleID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Module ID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.ModulePermissionInfo.Fill(System.Data.IDataReader)">
            -----------------------------------------------------------------------------
            <summary>
            Fills a ModulePermissionInfo from a Data Reader
            </summary>
            <param name="dr">The Data Reader to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Permissions.ModulePermissionInfo.KeyID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Key ID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.ModulePermissionInfo.Equals(DotNetNuke.Security.Permissions.ModulePermissionInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Compares if two ModulePermissionInfo objects are equivalent/equal
            </summary>
            <param name="other">a ModulePermissionObject</param>
            <returns>true if the permissions being passed represents the same permission
            in the current object
            </returns>
            <remarks>
            This function is needed to prevent adding duplicates to the ModulePermissionCollection.
            ModulePermissionCollection.Contains will use this method to check if a given permission
            is already included in the collection.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.ModulePermissionInfo.Equals(System.Object)">
            -----------------------------------------------------------------------------
            <summary>
            Compares if two ModulePermissionInfo objects are equivalent/equal
            </summary>
            <param name="obj">a ModulePermissionObject</param>
            <returns>true if the permissions being passed represents the same permission
            in the current object
            </returns>
            <remarks>
            This function is needed to prevent adding duplicates to the ModulePermissionCollection.
            ModulePermissionCollection.Contains will use this method to check if a given permission
            is already included in the collection.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Security.Permissions.PermissionInfo">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.Security.Permissions
            Class	 : PermissionInfo
            -----------------------------------------------------------------------------
            <summary>
            PermissionInfo provides the Entity Layer for Permissions
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Permissions.PermissionInfo.ModuleDefID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Mdoule Definition ID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Permissions.PermissionInfo.PermissionCode">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Permission Code
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Permissions.PermissionInfo.PermissionID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Permission ID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Permissions.PermissionInfo.PermissionKey">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Permission Key
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Permissions.PermissionInfo.PermissionName">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Permission Name
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionInfo.FillInternal(System.Data.IDataReader)">
            -----------------------------------------------------------------------------
            <summary>
            FillInternal fills a PermissionInfo from a Data Reader
            </summary>
            <param name="dr">The Data Reader to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Security.Permissions.PermissionInfoBase">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.Security.Permissions
            Class	 : PermissionInfoBase
            -----------------------------------------------------------------------------
            <summary>
            PermissionInfoBase provides a base class for PermissionInfo classes
            </summary>
            <remarks>All Permission calsses have  a common set of properties
              - AllowAccess
              - RoleID
              - RoleName
              - UserID
              - Username
              - DisplayName
            
            and these are implemented in this base class
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Permissions.PermissionInfoBase.AllowAccess">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets  aflag that indicates whether the user or role has permission
            </summary>
            <returns>A Boolean</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Permissions.PermissionInfoBase.DisplayName">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the User's DisplayName
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Permissions.PermissionInfoBase.RoleID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Role ID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Permissions.PermissionInfoBase.RoleName">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Role Name
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Permissions.PermissionInfoBase.UserID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the User ID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Permissions.PermissionInfoBase.Username">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the User Name
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionInfoBase.FillInternal(System.Data.IDataReader)">
            -----------------------------------------------------------------------------
            <summary>
            FillInternal fills the PermissionInfoBase from a Data Reader
            </summary>
            <param name="dr">The Data Reader to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.GetModulePermissions(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetModulePermissions gets a Dictionary of ModulePermissionCollections by
            Module.
            </summary>
            <param name="tabID">The ID of the tab</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.GetModulePermissionsCallBack(DotNetNuke.Common.Utilities.CacheItemArgs)">
            -----------------------------------------------------------------------------
            <summary>
            GetModulePermissionsCallBack gets a Dictionary of ModulePermissionCollections by
            Module from the the Database.
            </summary>
            <param name="cacheItemArgs">The CacheItemArgs object that contains the parameters
            needed for the database call</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.GetTabPermissions(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetTabPermissions gets a Dictionary of TabPermissionCollections by
            Tab.
            </summary>
            <param name="portalID">The ID of the portal</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.GetTabPermissionsCallBack(DotNetNuke.Common.Utilities.CacheItemArgs)">
            -----------------------------------------------------------------------------
            <summary>
            GetTabPermissionsCallBack gets a Dictionary of TabPermissionCollections by
            Tab from the the Database.
            </summary>
            <param name="cacheItemArgs">The CacheItemArgs object that contains the parameters
            needed for the database call</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.GetDesktopModulePermissions">
            -----------------------------------------------------------------------------
            <summary>
            GetDesktopModulePermissions gets a Dictionary of DesktopModulePermissionCollections by
            DesktopModule.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.GetDesktopModulePermissionsCallBack(DotNetNuke.Common.Utilities.CacheItemArgs)">
            -----------------------------------------------------------------------------
            <summary>
            GetDesktopModulePermissionsCallBack gets a Dictionary of DesktopModulePermissionCollections by
            DesktopModule from the the Database.
            </summary>
            <param name="cacheItemArgs">The CacheItemArgs object that contains the parameters
            needed for the database call</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.FillDesktopModulePermissionDictionary(System.Data.IDataReader)">
            -----------------------------------------------------------------------------
            <summary>
            FillDesktopModulePermissionDictionary fills a Dictionary of DesktopModulePermissions from a
            dataReader
            </summary>
            <param name="dr">The IDataReader</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.IsPortalEditor">
            <summary>
            The portal editor can edit whole site's content, it should be only administrators by default.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.CanAddFolder(DotNetNuke.Services.FileSystem.FolderInfo)">
            <summary>
            Returns a flag indicating whether the current user can add a folder or file
            </summary>
            <param name="folder">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.CanBrowseFolder(DotNetNuke.Services.FileSystem.FolderInfo)">
            <summary>
            Returns a flag indicating whether the current user can browse the folder
            </summary>
            <param name="folder">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.CanAdminFolder(DotNetNuke.Services.FileSystem.FolderInfo)">
            <summary>
            Returns a flag indicating whether the current user can addmister a folder
            </summary>
            <param name="folder">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.CanCopyFolder(DotNetNuke.Services.FileSystem.FolderInfo)">
            <summary>
            Returns a flag indicating whether the current user can copy a folder or file
            </summary>
            <param name="folder">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.CanDeleteFolder(DotNetNuke.Services.FileSystem.FolderInfo)">
            <summary>
            Returns a flag indicating whether the current user can delete a folder or file
            </summary>
            <param name="folder">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.CanManageFolder(DotNetNuke.Services.FileSystem.FolderInfo)">
            <summary>
            Returns a flag indicating whether the current user can manage a folder's settings
            </summary>
            <param name="folder">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.CanViewFolder(DotNetNuke.Services.FileSystem.FolderInfo)">
            <summary>
            Returns a flag indicating whether the current user can view a folder or file
            </summary>
            <param name="folder">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.SaveFolderPermissions(DotNetNuke.Services.FileSystem.FolderInfo)">
            <summary>
            SaveFolderPermissions updates a Folder's permissions
            </summary>
            <param name="folder">The Folder to update</param>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.SaveFolderPermissions(DotNetNuke.Services.FileSystem.IFolderInfo)">
            -----------------------------------------------------------------------------
            <summary>
            SaveFolderPermissions updates a Folder's permissions
            </summary>
            <param name="folder">The Folder to update</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.CanAdminModule(DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            Returns a flag indicating whether the current user can administer a module
            </summary>
            <param name="module">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.CanDeleteModule(DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            Returns a flag indicating whether the current user can delete a module
            </summary>
            <param name="module">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.CanEditModuleContent(DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            Returns a flag indicating whether the current user can edit module content
            </summary>
            <param name="module">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.CanExportModule(DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            Returns a flag indicating whether the current user can export a module
            </summary>
            <param name="module">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.CanImportModule(DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            Returns a flag indicating whether the current user can import a module
            </summary>
            <param name="module">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.CanManageModule(DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            Returns a flag indicating whether the current user can manage a module's settings
            </summary>
            <param name="module">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.CanViewModule(DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            Returns a flag indicating whether the current user can view a module
            </summary>
            <param name="module">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.DeleteModulePermissionsByUser(DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            DeleteModulePermissionsByUser deletes a user's Module Permission in the Database
            </summary>
            <param name="user">The user</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.GetModulePermissions(System.Int32,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetModulePermissions gets a ModulePermissionCollection
            </summary>
            <param name="moduleID">The ID of the module</param>
            <param name="tabID">The ID of the tab</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.HasModuleAccess(DotNetNuke.Security.SecurityAccessLevel,System.String,DotNetNuke.Entities.Modules.ModuleInfo)">
            -----------------------------------------------------------------------------
             <summary>
             Determines if user has the necessary permissions to access an item with the
             designated AccessLevel.
             </summary>
             <param name="accessLevel">The SecurityAccessLevel required to access a portal module or module action.</param>
             <param name="permissionKey">If Security Access is Edit the permissionKey is the actual "edit" permisison required.</param>
             <param name="moduleConfiguration">The ModuleInfo object for the associated module.</param>
             <returns>A boolean value indicating if the user has the necessary permissions</returns>
             <remarks>Every module control and module action has an associated permission level.  This
             function determines whether the user represented by UserName has sufficient permissions, as
             determined by the PortalSettings and ModuleSettings, to access a resource with the
             designated AccessLevel.</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.HasModulePermission(DotNetNuke.Security.Permissions.ModulePermissionCollection,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            HasModulePermission checks whether the current user has a specific Module Permission
            </summary>
            <param name="modulePermissions">The Permissions for the Module</param>
            <param name="permissionKey">The Permission to check</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.SaveModulePermissions(DotNetNuke.Entities.Modules.ModuleInfo)">
            -----------------------------------------------------------------------------
            <summary>
            SaveModulePermissions updates a Module's permissions
            </summary>
            <param name="module">The Module to update</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.ImplicitRolesForPages(System.Int32)">
            <summary>
            Returns a list with all roles with implicit permissions on Tabs
            </summary>
            <param name="portalId">The Portal Id where the Roles are</param>
            <returns>A List with the implicit roles</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.ImplicitRolesForFolders(System.Int32)">
            <summary>
            Returns a list with all roles with implicit permissions on Folders
            </summary>
            <param name="portalId">The Portal Id where the permissions are</param>
            <returns>A List with the implicit roles</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.CanAddContentToPage(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Returns a flag indicating whether the current user can add content to a page
            </summary>
            <param name="tab">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.CanAddPage(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Returns a flag indicating whether the current user can add a child page to a page
            </summary>
            <param name="tab">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.CanAdminPage(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Returns a flag indicating whether the current user can administer a page
            </summary>
            <param name="tab">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.CanCopyPage(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Returns a flag indicating whether the current user can copy a page
            </summary>
            <param name="tab">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.CanDeletePage(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Returns a flag indicating whether the current user can delete a page
            </summary>
            <param name="tab">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.CanExportPage(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Returns a flag indicating whether the current user can export a page
            </summary>
            <param name="tab">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.CanImportPage(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Returns a flag indicating whether the current user can import a page
            </summary>
            <param name="tab">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.CanManagePage(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Returns a flag indicating whether the current user can manage a page's settings
            </summary>
            <param name="tab">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.CanNavigateToPage(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Returns a flag indicating whether the current user can see a page in a navigation object
            </summary>
            <param name="tab">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.CanViewPage(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Returns a flag indicating whether the current user can view a page
            </summary>
            <param name="tab">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.DeleteTabPermissionsByUser(DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            DeleteTabPermissionsByUser deletes a user's Tab Permissions in the Database
            </summary>
            <param name="user">The user</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.GetTabPermissions(System.Int32,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetTabPermissions gets a TabPermissionCollection
            </summary>
            <param name="tabId">The ID of the tab</param>
            <param name="portalId">The ID of the portal</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.HasTabPermission(DotNetNuke.Security.Permissions.TabPermissionCollection,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            HasTabPermission checks whether the current user has a specific Tab Permission
            </summary>
            <param name="tabPermissions">The Permissions for the Tab</param>
            <param name="permissionKey">The Permission to check</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.SaveTabPermissions(DotNetNuke.Entities.Tabs.TabInfo)">
            -----------------------------------------------------------------------------
            <summary>
            SaveTabPermissions saves a Tab's permissions
            </summary>
            <param name="tab">The Tab to update</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.GetDesktopModulePermission(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetDesktopModulePermission gets a DesktopModule Permission from the Database
            </summary>
            <param name="desktopModulePermissionId">The ID of the DesktopModule Permission</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.GetDesktopModulePermissions(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetDesktopModulePermissions gets a DesktopModulePermissionCollection
            </summary>
            <param name="portalDesktopModuleId">The ID of the DesktopModule</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.PermissionProvider.HasDesktopModulePermission(DotNetNuke.Security.Permissions.DesktopModulePermissionCollection,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            HasDesktopModulePermission checks whether the current user has a specific DesktopModule Permission
            </summary>
            <param name="desktopModulePermissions">The Permissions for the DesktopModule</param>
            <param name="permissionKey">The Permission to check</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Security.Permissions.TabPermissionCollection">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.Security.Permissions
            Class	 : TabPermissionCollection
            -----------------------------------------------------------------------------
            <summary>
            TabPermissionCollection provides the a custom collection for TabPermissionInfo
            objects
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Security.Permissions.TabPermissionController">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.Security.Permissions
            Class	 : TabPermissionController
            -----------------------------------------------------------------------------
            <summary>
            TabPermissionController provides the Business Layer for Tab Permissions
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.TabPermissionController.ImplicitRoles(System.Int32)">
            <summary>
            Returns a list with all roles with implicit permissions on Tabs
            </summary>
            <param name="portalId">The Portal Id where the Roles are</param>
            <returns>A List with the implicit roles</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.TabPermissionController.CanAddContentToPage">
            <summary>
            Returns a flag indicating whether the current user can add content to the current page
            </summary>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.TabPermissionController.CanAddContentToPage(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Returns a flag indicating whether the current user can add content to a page
            </summary>
            <param name="tab">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.TabPermissionController.CanAddPage">
            <summary>
            Returns a flag indicating whether the current user can add a child page to the current page
            </summary>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.TabPermissionController.CanAddPage(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Returns a flag indicating whether the current user can add a child page to a page
            </summary>
            <param name="tab">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.TabPermissionController.CanAdminPage">
            <summary>
            Returns a flag indicating whether the current user can administer the current page
            </summary>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.TabPermissionController.CanAdminPage(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Returns a flag indicating whether the current user can administer a page
            </summary>
            <param name="tab">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.TabPermissionController.CanCopyPage">
            <summary>
            Returns a flag indicating whether the current user can copy the current page
            </summary>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.TabPermissionController.CanCopyPage(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Returns a flag indicating whether the current user can copy a page
            </summary>
            <param name="tab">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.TabPermissionController.CanDeletePage">
            <summary>
            Returns a flag indicating whether the current user can delete the current page
            </summary>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.TabPermissionController.CanDeletePage(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Returns a flag indicating whether the current user can delete a page
            </summary>
            <param name="tab">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.TabPermissionController.CanExportPage">
            <summary>
            Returns a flag indicating whether the current user can export the current page
            </summary>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.TabPermissionController.CanExportPage(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Returns a flag indicating whether the current user can export a page
            </summary>
            <param name="tab">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.TabPermissionController.CanImportPage">
            <summary>
            Returns a flag indicating whether the current user can import the current page
            </summary>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.TabPermissionController.CanImportPage(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Returns a flag indicating whether the current user can import a page
            </summary>
            <param name="tab">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.TabPermissionController.CanManagePage">
            <summary>
            Returns a flag indicating whether the current user can manage the current page's settings
            </summary>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.TabPermissionController.CanManagePage(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Returns a flag indicating whether the current user can manage a page's settings
            </summary>
            <param name="tab">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.TabPermissionController.CanNavigateToPage">
            <summary>
            Returns a flag indicating whether the current user can see the current page in a navigation object
            </summary>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.TabPermissionController.CanNavigateToPage(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Returns a flag indicating whether the current user can see a page in a navigation object
            </summary>
            <param name="tab">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.TabPermissionController.CanViewPage">
            <summary>
            Returns a flag indicating whether the current user can view the current page
            </summary>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.TabPermissionController.CanViewPage(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
            Returns a flag indicating whether the current user can view a page
            </summary>
            <param name="tab">The page</param>
            <returns>A flag indicating whether the user has permission</returns>
        </member>
        <member name="M:DotNetNuke.Security.Permissions.TabPermissionController.DeleteTabPermissionsByUser(DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            DeleteTabPermissionsByUser deletes a user's Tab Permissions in the Database
            </summary>
            <param name="user">The user</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.TabPermissionController.GetTabPermissions(System.Int32,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetTabPermissions gets a TabPermissionCollection
            </summary>
            <param name="tabId">The ID of the tab</param>
            <param name="portalId">The ID of the portal</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.TabPermissionController.HasTabPermission(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            HasTabPermission checks whether the current user has a specific Tab Permission
            </summary>
            <remarks>If you pass in a comma delimited list of permissions (eg "ADD,DELETE", this will return
            true if the user has any one of the permissions.</remarks>
            <param name="permissionKey">The Permission to check</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.TabPermissionController.HasTabPermission(DotNetNuke.Security.Permissions.TabPermissionCollection,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            HasTabPermission checks whether the current user has a specific Tab Permission
            </summary>
            <remarks>If you pass in a comma delimited list of permissions (eg "ADD,DELETE", this will return
            true if the user has any one of the permissions.</remarks>
            <param name="tabPermissions">The Permissions for the Tab</param>
            <param name="permissionKey">The Permission(s) to check</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.TabPermissionController.SaveTabPermissions(DotNetNuke.Entities.Tabs.TabInfo)">
            -----------------------------------------------------------------------------
            <summary>
            SaveTabPermissions saves a Tab's permissions
            </summary>
            <param name="tab">The Tab to update</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Security.Permissions.TabPermissionInfo">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.Security.Permissions
            Class	 : TabPermissionInfo
            -----------------------------------------------------------------------------
            <summary>
            TabPermissionInfo provides the Entity Layer for Tab Permissions
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.TabPermissionInfo.#ctor">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a new TabPermissionInfo
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.TabPermissionInfo.#ctor(DotNetNuke.Security.Permissions.PermissionInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a new TabPermissionInfo
            </summary>
            <param name="permission">A PermissionInfo object</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Permissions.TabPermissionInfo.TabPermissionID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Tab Permission ID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Permissions.TabPermissionInfo.TabID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Tab ID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Permissions.TabPermissionInfo.Fill(System.Data.IDataReader)">
            -----------------------------------------------------------------------------
            <summary>
            Fills a TabPermissionInfo from a Data Reader
            </summary>
            <param name="dr">The Data Reader to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Permissions.TabPermissionInfo.KeyID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Key ID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Security.Profile.DNNProfileProvider">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Security.Profile
            Class:      DNNProfileProvider
            -----------------------------------------------------------------------------
            <summary>
            The DNNProfileProvider overrides the default ProfileProvider to provide
            a purely DotNetNuke implementation
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Profile.DNNProfileProvider.CanEditProviderProperties">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether the Provider Properties can be edited
            </summary>
            <returns>A Boolean</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Profile.DNNProfileProvider.GetUserProfile(DotNetNuke.Entities.Users.UserInfo@)">
            -----------------------------------------------------------------------------
            <summary>
            GetUserProfile retrieves the UserProfile information from the Data Store
            </summary>
            <remarks>
            </remarks>
            <param name="user">The user whose Profile information we are retrieving.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Profile.DNNProfileProvider.UpdateUserProfile(DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            UpdateUserProfile persists a user's Profile to the Data Store
            </summary>
            <remarks>
            </remarks>
            <param name="user">The user to persist to the Data Store.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Security.Profile.ProfileProviderConfig">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Security.Profile
            Class:      ProfileProviderConfig
            -----------------------------------------------------------------------------
            <summary>
            The ProfileProviderConfig class provides a wrapper to the Profile providers
            configuration
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Profile.ProfileProviderConfig.CanEditProviderProperties">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether the Provider Properties can be edited
            </summary>
            <returns>A Boolean</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Security.Roles.DNNRoleProvider">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Security.Membership
            Class:      DNNRoleProvider
            -----------------------------------------------------------------------------
            <summary>
            The DNNRoleProvider overrides the default MembershipProvider to provide
            a purely DNN Membership Component implementation
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.DNNRoleProvider.CreateRole(DotNetNuke.Security.Roles.RoleInfo)">
            -----------------------------------------------------------------------------
            <summary>
            CreateRole persists a Role to the Data Store
            </summary>
            <remarks>
            </remarks>
            <param name="role">The role to persist to the Data Store.</param>
            <returns>A Boolean indicating success or failure.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.DNNRoleProvider.DeleteRole(DotNetNuke.Security.Roles.RoleInfo)">
            -----------------------------------------------------------------------------
            <summary>
            DeleteRole deletes a Role from the Data Store
            </summary>
            <param name="role">The role to delete from the Data Store.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.DNNRoleProvider.GetRoles(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Get the roles for a portal
            </summary>
            <param name="portalId">Id of the portal (If -1 all roles for all portals are 
            retrieved.</param>
            <returns>An ArrayList of RoleInfo objects</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.DNNRoleProvider.UpdateRole(DotNetNuke.Security.Roles.RoleInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Update a role
            </summary>
            <param name="role">The role to update</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.DNNRoleProvider.UpdateRoleSettings(DotNetNuke.Security.Roles.RoleInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Update the role settings for a role
            </summary>
            <param name="role">The role to update</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.DNNRoleProvider.AddUserToRole(System.Int32,DotNetNuke.Entities.Users.UserInfo,DotNetNuke.Entities.Users.UserRoleInfo)">
            -----------------------------------------------------------------------------
            <summary>
            AddUserToRole adds a User to a Role
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">Id of the portal</param>
            <param name="user">The user to add.</param>
            <param name="userRole">The role to add the user to.</param>
            <returns>A Boolean indicating success or failure.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.DNNRoleProvider.GetUserRole(System.Int32,System.Int32,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetUserRole gets a User/Role object from the Data Store
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">Id of the portal</param>
            <param name="userId">The Id of the User</param>
            <param name="roleId">The Id of the Role.</param>
            <returns>The UserRoleInfo object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.DNNRoleProvider.GetUserRoles(DotNetNuke.Entities.Users.UserInfo,System.Boolean)">
            <summary>
            Gets a list of UserRoles for the user
            </summary>
            <param name="user">A UserInfo object representaing the user</param>
            <param name="includePrivate">Include private roles.</param>
            <returns>A list of UserRoleInfo objects</returns>
        </member>
        <member name="M:DotNetNuke.Security.Roles.DNNRoleProvider.GetUserRoles(System.Int32,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            GetUserRoles gets a collection of User/Role objects from the Data Store
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">Id of the portal</param>
            <param name="userName">The user to fetch roles for</param>
            <param name="roleName">The role to fetch users for</param>
            <returns>An ArrayList of UserRoleInfo objects</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.DNNRoleProvider.GetUsersByRoleName(System.Int32,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Get the users in a role (as User objects)
            </summary>
            <param name="portalId">Id of the portal (If -1 all roles for all portals are 
            retrieved.</param>
            <param name="roleName">The role to fetch users for</param>
            <returns>An ArrayList of UserInfo objects</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.DNNRoleProvider.RemoveUserFromRole(System.Int32,DotNetNuke.Entities.Users.UserInfo,DotNetNuke.Entities.Users.UserRoleInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Remove a User from a Role
            </summary>
            <remarks>
            </remarks>
            <param name="portalId">Id of the portal</param>
            <param name="user">The user to remove.</param>
            <param name="userRole">The role to remove the user from.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.DNNRoleProvider.UpdateUserRole(DotNetNuke.Entities.Users.UserRoleInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Updates a User/Role
            </summary>
            <param name="userRole">The User/Role to update</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.DNNRoleProvider.CreateRoleGroup(DotNetNuke.Security.Roles.RoleGroupInfo)">
            -----------------------------------------------------------------------------
            <summary>
            CreateRoleGroup persists a RoleGroup to the Data Store
            </summary>
            <remarks>
            </remarks>
            <param name="roleGroup">The RoleGroup to persist to the Data Store.</param>
            <returns>The Id of the new role.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.DNNRoleProvider.DeleteRoleGroup(DotNetNuke.Security.Roles.RoleGroupInfo)">
            -----------------------------------------------------------------------------
            <summary>
            DeleteRoleGroup deletes a RoleGroup from the Data Store
            </summary>
            <param name="roleGroup">The RoleGroup to delete from the Data Store.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.DNNRoleProvider.GetRoleGroup(System.Int32,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetRoleGroup gets a RoleGroup from the Data Store
            </summary>
            <param name="portalId">Id of the portal</param>
            <param name="roleGroupId">The Id of the RoleGroup to retrieve.</param>
            <returns>A RoleGroupInfo object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.DNNRoleProvider.GetRoleGroups(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Get the RoleGroups for a portal
            </summary>
            <param name="portalId">Id of the portal.</param>
            <returns>An ArrayList of RoleGroupInfo objects</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.DNNRoleProvider.UpdateRoleGroup(DotNetNuke.Security.Roles.RoleGroupInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Update a RoleGroup
            </summary>
            <param name="roleGroup">The RoleGroup to update</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.IRoleController.AddRole(DotNetNuke.Security.Roles.RoleInfo)">
            <summary>
                Adds a role
            </summary>
            <param name="role">The Role to Add</param>
            <returns>The Id of the new role</returns>
        </member>
        <member name="M:DotNetNuke.Security.Roles.IRoleController.AddRole(DotNetNuke.Security.Roles.RoleInfo,System.Boolean)">
            <summary>
                Adds a role
            </summary>
            <param name="role">The Role to Add</param>
            <param name="addToExistUsers">Add this role on all exist users if auto assignment is true.</param>
            <returns>The Id of the new role</returns>
        </member>
        <member name="M:DotNetNuke.Security.Roles.IRoleController.AddUserRole(System.Int32,System.Int32,System.Int32,DotNetNuke.Security.Roles.RoleStatus,System.Boolean,System.DateTime,System.DateTime)">
            <summary>
                Adds a User to a Role
            </summary>
            <remarks>Overload adds Effective Date</remarks>
            <param name="portalId">The Id of the Portal</param>
            <param name="userId">The Id of the User</param>
            <param name="roleId">The Id of the Role</param>
            <param name="status">The status of the Role</param>
            <param name="isOwner">If the user is the owner of the Role</param>
            <param name="effectiveDate">The expiry Date of the Role membership</param>
            <param name="expiryDate">The expiry Date of the Role membership</param>
        </member>
        <member name="M:DotNetNuke.Security.Roles.IRoleController.ClearRoleCache(System.Int32)">
            <summary>
                Clears Roles cache for the passed portal ID and for the default ID (-1) as well.
            </summary>
            <param name="portalId">Id of the portal</param>
        </member>
        <member name="M:DotNetNuke.Security.Roles.IRoleController.DeleteRole(DotNetNuke.Security.Roles.RoleInfo)">
            <summary>
                Deletes a role
            </summary>
            <param name="role">The Role to delete</param>
        </member>
        <member name="M:DotNetNuke.Security.Roles.IRoleController.GetRole(System.Int32,System.Func{DotNetNuke.Security.Roles.RoleInfo,System.Boolean})">
            <summary>
                Fetch a single role based on a predicate
            </summary>
            <param name="portalId">Id of the portal</param>
            <param name="predicate">The predicate (criteria) required</param>
            <returns>A RoleInfo object</returns>
        </member>
        <member name="M:DotNetNuke.Security.Roles.IRoleController.GetRoleById(System.Int32,System.Int32)">
            <summary>
                Fetch a single role
            </summary>
            <param name="roleId">the roleid</param>
            <param name="portalId">the portalid</param>
            <returns>>A RoleInfo object</returns>
        </member>
        <member name="M:DotNetNuke.Security.Roles.IRoleController.GetRoleByName(System.Int32,System.String)">
            <summary>
                Fetch a role by rolename and portal id
            </summary>
            <param name="portalId">the portalid</param>
            <param name="roleName">the role name</param>
            <returns>>A RoleInfo object</returns>
        </member>
        <member name="M:DotNetNuke.Security.Roles.IRoleController.GetRoles(System.Int32)">
            <summary>
                Obtains a list of roles from the cache (or for the database if the cache has expired)
            </summary>
            <param name="portalId">The id of the portal</param>
            <returns>The list of roles</returns>
        </member>
        <member name="M:DotNetNuke.Security.Roles.IRoleController.GetRoles(System.Int32,System.Func{DotNetNuke.Security.Roles.RoleInfo,System.Boolean})">
            <summary>
                Get the roles based on a predicate
            </summary>
            <param name="portalId">Id of the portal</param>
            <param name="predicate">The predicate (criteria) required</param>
            <returns>A List of RoleInfo objects</returns>
        </member>
        <member name="M:DotNetNuke.Security.Roles.IRoleController.GetRolesBasicSearch(System.Int32,System.Int32,System.String)">
            <summary>
                get a list of roles based on progressive search
            </summary>
            <param name="portalId">the id of the portal</param>
            <param name="pageSize">the number of items to return</param>
            <param name="filterBy">the text used to trim data</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Security.Roles.IRoleController.GetRoleSettings(System.Int32)">
            <summary>
                Gets the settings for a role
            </summary>
            <param name="roleId">Id of the role</param>
            <returns>A Dictionary of settings</returns>
        </member>
        <member name="M:DotNetNuke.Security.Roles.IRoleController.GetUserRole(System.Int32,System.Int32,System.Int32)">
            <summary>
                Gets a User/Role
            </summary>
            <param name="portalId">The Id of the Portal</param>
            <param name="userId">The Id of the user</param>
            <param name="roleId">The Id of the Role</param>
            <returns>A UserRoleInfo object</returns>
        </member>
        <member name="M:DotNetNuke.Security.Roles.IRoleController.GetUserRoles(DotNetNuke.Entities.Users.UserInfo,System.Boolean)">
            <summary>
                Gets a list of UserRoles for the user
            </summary>
            <param name="user">A UserInfo object representaing the user</param>
            <param name="includePrivate">Include private roles.</param>
            <returns>A list of UserRoleInfo objects</returns>
        </member>
        <member name="M:DotNetNuke.Security.Roles.IRoleController.GetUserRoles(System.Int32,System.String,System.String)">
            <summary>
                Gets a list of UserRoles for the user
            </summary>
            <param name="portalId">Id of the portal</param>
            <param name="userName">The user to fetch roles for</param>
            <param name="roleName">The role to fetch users for</param>
            <returns>A list of UserRoleInfo objects</returns>
        </member>
        <member name="M:DotNetNuke.Security.Roles.IRoleController.GetUsersByRole(System.Int32,System.String)">
            <summary>
                Get the users in a role (as User objects)
            </summary>
            <param name="portalId">
                Id of the portal (If -1 all roles for all portals are
                retrieved.
            </param>
            <param name="roleName">The role to fetch users for</param>
            <returns>A List of UserInfo objects</returns>
        </member>
        <member name="M:DotNetNuke.Security.Roles.IRoleController.UpdateRole(DotNetNuke.Security.Roles.RoleInfo)">
            <summary>
                Persists a role to the Data Store
            </summary>
            <param name="role">The role to persist</param>
        </member>
        <member name="M:DotNetNuke.Security.Roles.IRoleController.UpdateRole(DotNetNuke.Security.Roles.RoleInfo,System.Boolean)">
            <summary>
                Persists a role to the Data Store
            </summary>
            <param name="role">The role to persist</param>
            <param name="addToExistUsers">Add this role on all exist users if auto assignment is true.</param>
        </member>
        <member name="M:DotNetNuke.Security.Roles.IRoleController.UpdateRoleSettings(DotNetNuke.Security.Roles.RoleInfo,System.Boolean)">
            <summary>
                Update the role settings
            </summary>
            <param name="role">The Role</param>
            <param name="clearCache">A flag that indicates whether the cache should be cleared</param>
        </member>
        <member name="M:DotNetNuke.Security.Roles.IRoleController.UpdateUserRole(System.Int32,System.Int32,System.Int32,DotNetNuke.Security.Roles.RoleStatus,System.Boolean,System.Boolean)">
            <summary>
                Updates a Service (UserRole)
            </summary>
            <param name="portalId">The Id of the Portal</param>
            <param name="userId">The Id of the User</param>
            <param name="roleId">The Id of the Role</param>
            <param name="status">The status of the Role</param>
            <param name="isOwner">If the user is the owner of the Role</param>
            <param name="cancel">A flag that indicates whether to cancel (delete) the userrole</param>
        </member>
        <member name="T:DotNetNuke.Security.Roles.RoleComparer">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Security.Roles
            Class:      RoleComparer
            -----------------------------------------------------------------------------
            <summary>
            The RoleComparer class provides an Implementation of IComparer for
            RoleInfo objects
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.RoleComparer.Compare(System.Object,System.Object)">
            -----------------------------------------------------------------------------
            <summary>
            Compares two RoleInfo objects by performing a comparison of their rolenames
            </summary>
            <param name="x">One of the items to compare</param>
            <param name="y">One of the items to compare</param>
            <returns>An Integer that determines whether x is greater, smaller or equal to y </returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Security.Roles.RoleController">
            <summary>
            The RoleController class provides Business Layer methods for Roles
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.RoleController.GetUserRole(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a User/Role
            </summary>
            <param name="portalId">The Id of the Portal</param>
            <param name="userId">The Id of the user</param>
            <param name="roleId">The Id of the Role</param>
            <returns>A UserRoleInfo object</returns>
        </member>
        <member name="M:DotNetNuke.Security.Roles.RoleController.GetUserRoles(DotNetNuke.Entities.Users.UserInfo,System.Boolean)">
            <summary>
            Gets a list of UserRoles for the user
            </summary>
            <param name="user">A UserInfo object representaing the user</param>
            <param name="includePrivate">Include private roles.</param>
            <returns>A list of UserRoleInfo objects</returns>
        </member>
        <member name="M:DotNetNuke.Security.Roles.RoleController.AddRoleGroup(DotNetNuke.Security.Roles.RoleGroupInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Adds a Role Group
            </summary>
            <param name="objRoleGroupInfo">The RoleGroup to Add</param>
            <returns>The Id of the new role</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.RoleController.AddUserRole(DotNetNuke.Entities.Users.UserInfo,DotNetNuke.Security.Roles.RoleInfo,DotNetNuke.Entities.Portals.PortalSettings,DotNetNuke.Security.Roles.RoleStatus,System.DateTime,System.DateTime,System.Boolean,System.Boolean)">
            <summary>
            Adds a User to a Role
            </summary>
            <param name="user">The user to assign</param>
            <param name="role">The role to add</param>
            <param name="portalSettings">The PortalSettings of the Portal</param>
            <param name="status">RoleStatus</param>
            <param name="effectiveDate">The expiry Date of the Role membership</param>
            <param name="expiryDate">The expiry Date of the Role membership</param>
            <param name="notifyUser">A flag that indicates whether the user should be notified</param>
            <param name="isOwner">A flag that indicates whether this user should be one of the group owners</param>
        </member>
        <member name="M:DotNetNuke.Security.Roles.RoleController.CanRemoveUserFromRole(DotNetNuke.Entities.Portals.PortalSettings,System.Int32,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Determines if the specified user can be removed from a role
            </summary>
            <remarks>
            Roles such as "Registered Users" and "Administrators" can only
            be removed in certain circumstances
            </remarks>
            <param name="PortalSettings">A <see cref="T:DotNetNuke.Entities.Portals.PortalSettings">PortalSettings</see> structure representing the current portal settings</param>
            <param name="UserId">The Id of the User that should be checked for role removability</param>
            <param name="RoleId">The Id of the Role that should be checked for removability</param>
            <returns></returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.RoleController.CanRemoveUserFromRole(DotNetNuke.Entities.Portals.PortalInfo,System.Int32,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Determines if the specified user can be removed from a role
            </summary>
            <remarks>
            Roles such as "Registered Users" and "Administrators" can only
            be removed in certain circumstances
            </remarks>
            <param name="PortalInfo">A <see cref="T:DotNetNuke.Entities.Portals.PortalInfo">PortalInfo</see> structure representing the current portal</param>
            <param name="UserId">The Id of the User</param>
            <param name="RoleId">The Id of the Role that should be checked for removability</param>
            <returns></returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.RoleController.DeleteRoleGroup(System.Int32,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Deletes a Role Group
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.RoleController.DeleteRoleGroup(DotNetNuke.Security.Roles.RoleGroupInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Deletes a Role Group
            </summary>
            <param name="objRoleGroupInfo">The RoleGroup to Delete</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.RoleController.DeleteUserRole(DotNetNuke.Entities.Users.UserInfo,DotNetNuke.Security.Roles.RoleInfo,DotNetNuke.Entities.Portals.PortalSettings,System.Boolean)">
            <summary>
            Removes a User from a Role
            </summary>
            <param name="objUser">The user to remove</param>
            <param name="role">The role to remove the use from</param>
            <param name="portalSettings">The PortalSettings of the Portal</param>
            <param name="notifyUser">A flag that indicates whether the user should be notified</param>
        </member>
        <member name="M:DotNetNuke.Security.Roles.RoleController.DeleteUserRoles(DotNetNuke.Entities.Users.UserInfo)">
            <summary>
            Completely remove all a user's roles for a specific portal. This method is used when 
            anonymizing a user
            </summary>
            <param name="user">User for which all roles must be deleted. The PortalId property
            is used to determine for which portal roles must be removed.</param>
        </member>
        <member name="M:DotNetNuke.Security.Roles.RoleController.GetRoleGroup(System.Int32,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Fetch a single RoleGroup
            </summary>
            <param name="portalId">The Id of the Portal</param>
            <param name="roleGroupId">Role Group ID</param>
            <returns></returns>
            <remarks></remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.RoleController.GetRoleGroupByName(System.Int32,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Fetch a single RoleGroup by Name
            </summary>
            <param name="portalId">The Id of the Portal</param>
            <param name="roleGroupName">Role Group Name</param>
            <returns></returns>
            <remarks></remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.RoleController.GetRoleGroups(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Gets an ArrayList of RoleGroups
            </summary>
            <param name="PortalID">The Id of the Portal</param>
            <returns>An ArrayList of RoleGroups</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.RoleController.SerializeRoleGroups(System.Xml.XmlWriter,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Serializes the role groups
            </summary>
            <param name="writer">An XmlWriter</param>
            <param name="portalID">The Id of the Portal</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.RoleController.UpdateRoleGroup(DotNetNuke.Security.Roles.RoleGroupInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Updates a Role Group
            </summary>
            <param name="roleGroup">The RoleGroup to Update</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Security.Roles.RoleGroupInfo">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Security.Roles
            Class:      RoleGroupInfo
            -----------------------------------------------------------------------------
            <summary>
            The RoleGroupInfo class provides the Entity Layer RoleGroup object
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Roles.RoleGroupInfo.RoleGroupID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the RoleGroup Id
            </summary>
            <value>An Integer representing the Id of the RoleGroup</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Roles.RoleGroupInfo.PortalID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Portal Id for the RoleGroup
            </summary>
            <value>An Integer representing the Id of the Portal</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Roles.RoleGroupInfo.RoleGroupName">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the RoleGroup Name
            </summary>
            <value>A string representing the Name of the RoleGroup</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Roles.RoleGroupInfo.Description">
            -----------------------------------------------------------------------------
            <summary>
            Gets an sets the Description of the RoleGroup
            </summary>
            <value>A string representing the description of the RoleGroup</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Roles.RoleGroupInfo.Roles">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Roles for this Role Group
            </summary>
            <returns>A Boolean</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.RoleGroupInfo.Fill(System.Data.IDataReader)">
            -----------------------------------------------------------------------------
            <summary>
            Fills a RoleGroupInfo from a Data Reader
            </summary>
            <param name="dr">The Data Reader to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Roles.RoleGroupInfo.KeyID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Key ID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.RoleGroupInfo.GetSchema">
            -----------------------------------------------------------------------------
            <summary>
            Gets an XmlSchema for the RoleGroupInfo
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.RoleGroupInfo.ReadXml(System.Xml.XmlReader)">
            -----------------------------------------------------------------------------
            <summary>
            Reads a RoleGroupInfo from an XmlReader
            </summary>
            <param name="reader">The XmlReader to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.RoleGroupInfo.WriteXml(System.Xml.XmlWriter)">
            -----------------------------------------------------------------------------
            <summary>
            Writes a RoleGroupInfo to an XmlWriter
            </summary>
            <param name="writer">The XmlWriter to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.RoleGroupInfo.ReadRoles(System.Xml.XmlReader)">
            -----------------------------------------------------------------------------
            <summary>
            Reads a Roles from an XmlReader
            </summary>
            <param name="reader">The XmlReader to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Security.Roles.RoleInfo">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Security.Roles
            Class:      RoleInfo
            -----------------------------------------------------------------------------
            <summary>
            The RoleInfo class provides the Entity Layer Role object
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Roles.RoleInfo.IsSystemRole">
            <summary>
            Gets whether this role is a system role
            </summary>
            <value>A boolean representing whether this is a system role such as Administrators, Registered Users etc.</value>
        </member>
        <member name="P:DotNetNuke.Security.Roles.RoleInfo.AutoAssignment">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether users are automatically assigned to the role
            </summary>
            <value>A boolean (True/False)</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Roles.RoleInfo.BillingFrequency">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Billing Frequency for the role
            </summary>
            <value>A String representing the Billing Frequency of the Role<br/>
            <ul>
            <list>N - None</list>
            <list>O - One time fee</list>
            <list>D - Daily</list>
            <list>W - Weekly</list>
            <list>M - Monthly</list>
            <list>Y - Yearly</list>
            </ul>
            </value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Roles.RoleInfo.BillingPeriod">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the length of the billing period
            </summary>
            <value>An integer representing the length of the billing period</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Roles.RoleInfo.Description">
            -----------------------------------------------------------------------------
            <summary>
            Gets an sets the Description of the Role
            </summary>
            <value>A string representing the description of the role</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Roles.RoleInfo.IconFile">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Icon File for the role
            </summary>
            <value>A string representing the Icon File for the role</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Roles.RoleInfo.IsPublic">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the role is public
            </summary>
            <value>A boolean (True/False)</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Roles.RoleInfo.PortalID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Portal Id for the Role
            </summary>
            <value>An Integer representing the Id of the Portal</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Roles.RoleInfo.RoleID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Role Id
            </summary>
            <value>An Integer representing the Id of the Role</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Roles.RoleInfo.RoleGroupID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the RoleGroup Id
            </summary>
            <value>An Integer representing the Id of the RoleGroup</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Roles.RoleInfo.RoleName">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Role Name
            </summary>
            <value>A string representing the name of the role</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Roles.RoleInfo.RoleType">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Role Type
            </summary>
            <value>A enum representing the type of the role</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Roles.RoleInfo.RSVPCode">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the RSVP Code for the role
            </summary>
            <value>A string representing the RSVP Code for the role</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Roles.RoleInfo.SecurityMode">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the role is a security role and can be used in Permission
            Grids etc.
            </summary>
            <value>A SecurityMode enum</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Roles.RoleInfo.ServiceFee">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the fee for the role
            </summary>
            <value>A single number representing the fee for the role</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Roles.RoleInfo.Settings">
            -----------------------------------------------------------------------------
            <summary>
            Gets the role settings
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Roles.RoleInfo.Status">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the status for the role
            </summary>
            <value>An enumerated value Pending, Disabled, Approved</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Roles.RoleInfo.TrialFee">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the trial fee for the role
            </summary>
            <value>A single number representing the trial fee for the role</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Roles.RoleInfo.TrialFrequency">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Trial Frequency for the role
            </summary>
            <value>A String representing the Trial Frequency of the Role<br/>
            <ul>
            <list>N - None</list>
            <list>O - One time fee</list>
            <list>D - Daily</list>
            <list>W - Weekly</list>
            <list>M - Monthly</list>
            <list>Y - Yearly</list>
            </ul>
            </value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Roles.RoleInfo.TrialPeriod">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the length of the trial period
            </summary>
            <value>An integer representing the length of the trial period</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Roles.RoleInfo.UserCount">
            -----------------------------------------------------------------------------
            <summary>
            Gets the number of users in the role
            </summary>
            <value>An integer representing the number of users</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.RoleInfo.Fill(System.Data.IDataReader)">
            -----------------------------------------------------------------------------
            <summary>
            Fills a RoleInfo from a Data Reader
            </summary>
            <param name="dr">The Data Reader to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Security.Roles.RoleInfo.KeyID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Key ID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.RoleInfo.GetSchema">
            -----------------------------------------------------------------------------
            <summary>
            Gets an XmlSchema for the RoleInfo
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.RoleInfo.ReadXml(System.Xml.XmlReader)">
            -----------------------------------------------------------------------------
            <summary>
            Reads a RoleInfo from an XmlReader
            </summary>
            <param name="reader">The XmlReader to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.Roles.RoleInfo.WriteXml(System.Xml.XmlWriter)">
            -----------------------------------------------------------------------------
            <summary>
            Writes a RoleInfo to an XmlWriter
            </summary>
            <param name="writer">The XmlWriter to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Security.PortalSecurity.FilterFlag">
            -----------------------------------------------------------------------------
             <summary>
             The FilterFlag enum determines which filters are applied by the InputFilter
             function.  The Flags attribute allows the user to include multiple
             enumerated values in a single variable by OR'ing the individual values
             together.
             </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Security.PortalSecurity.ConfigType">
            <summary>
            Determines the configuration source for the remove and replace functions
            </summary>
        </member>
        <member name="T:DotNetNuke.Security.PortalSecurity.FilterScope">
            <summary>
            determines whether to use system (host) list, portal specific list, or combine both
            At present only supported by ConfigType.ListController
            </summary>
        </member>
        <member name="M:DotNetNuke.Security.PortalSecurity.FilterStrings(System.String)">
            -----------------------------------------------------------------------------
             <summary>
             This function uses Regex search strings to remove HTML tags which are
             targeted in Cross-site scripting (XSS) attacks.  This function will evolve
             to provide more robust checking as additional holes are found.
             </summary>
             <param name="strInput">This is the string to be filtered</param>
             <returns>Filtered UserInput</returns>
             <remarks>
             This is a private function that is used internally by the FormatDisableScripting function
             </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.PortalSecurity.FormatDisableScripting(System.String)">
            -----------------------------------------------------------------------------
             <summary>
             This function uses Regex search strings to remove HTML tags which are
             targeted in Cross-site scripting (XSS) attacks.  This function will evolve
             to provide more robust checking as additional holes are found.
             </summary>
             <param name="strInput">This is the string to be filtered</param>
             <returns>Filtered UserInput</returns>
             <remarks>
             This is a private function that is used internally by the InputFilter function
             </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.PortalSecurity.FormatAngleBrackets(System.String)">
            -----------------------------------------------------------------------------
             <summary>
             This filter removes angle brackets i.e.
             </summary>
             <param name="strInput">This is the string to be filtered</param>
             <returns>Filtered UserInput</returns>
             <remarks>
             This is a private function that is used internally by the InputFilter function
             </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.PortalSecurity.FormatMultiLine(System.String)">
            -----------------------------------------------------------------------------
             <summary>
             This filter removes CrLf characters and inserts br
             </summary>
             <param name="strInput">This is the string to be filtered</param>
             <returns>Filtered UserInput</returns>
             <remarks>
             This is a private function that is used internally by the InputFilter function
             </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.PortalSecurity.FormatRemoveSQL(System.String)">
            -----------------------------------------------------------------------------
             <summary>
             This function verifies raw SQL statements to prevent SQL injection attacks
             and replaces a similar function (PreventSQLInjection) from the Common.Globals.vb module
             </summary>
             <param name="strSQL">This is the string to be filtered</param>
             <returns>Filtered UserInput</returns>
             <remarks>
             This is a private function that is used internally by the InputFilter function
             </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.PortalSecurity.IncludesMarkup(System.String)">
            -----------------------------------------------------------------------------
             <summary>
             This function determines if the Input string contains any markup.
             </summary>
             <param name="strInput">This is the string to be checked</param>
             <returns>True if string contains Markup tag(s)</returns>
             <remarks>
             This is a private function that is used internally by the InputFilter function
             </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.PortalSecurity.CreateKey(System.Int32)">
            -----------------------------------------------------------------------------
             <summary>
             This function creates a random key
             </summary>
             <param name="numBytes">This is the number of bytes for the key</param>
             <returns>A random string</returns>
             <remarks>
             This is a public function used for generating SHA1 keys
             </remarks>
        </member>
        <member name="M:DotNetNuke.Security.PortalSecurity.InputFilter(System.String,DotNetNuke.Security.PortalSecurity.FilterFlag)">
            -----------------------------------------------------------------------------
             <summary>
             This function applies security filtering to the UserInput string.
             </summary>
             <param name="userInput">This is the string to be filtered</param>
             <param name="filterType">Flags which designate the filters to be applied</param>
             <returns>Filtered UserInput</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.PortalSecurity.Replace(System.String,DotNetNuke.Security.PortalSecurity.ConfigType,System.String,DotNetNuke.Security.PortalSecurity.FilterScope)">
            -----------------------------------------------------------------------------
             <summary>
             Replaces profanity words with other words in the provided input string.
             </summary>
             <remarks>
             The correspondence between the words to search and the words to replace could be specified in two different places:
             1) In an external file. (NOT IMPLEMENTED)
             2) In System/Site lists.
             The name of the System List is "ProfanityFilter". The name of the list in each portal is composed using the following rule:
             "ProfanityFilter-" + PortalID.
             </remarks>
             <param name="inputString">The string to search the words in.</param>
             <param name="configType">The type of configuration.</param>
             <param name="configSource">The external file to search the words. Ignored when configType is ListController.</param>
             <param name="filterScope">When using ListController configType, this parameter indicates which list(s) to use.</param>
             <returns>The original text with the profanity words replaced.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.PortalSecurity.Remove(System.String,DotNetNuke.Security.PortalSecurity.ConfigType,System.String,DotNetNuke.Security.PortalSecurity.FilterScope)">
            -----------------------------------------------------------------------------
             <summary>
             Removes profanity words in the provided input string.
             </summary>
             <remarks>
             The words to search could be defined in two different places:
             1) In an external file. (NOT IMPLEMENTED)
             2) In System/Site lists.
             The name of the System List is "ProfanityFilter". The name of the list in each portal is composed using the following rule:
             "ProfanityFilter-" + PortalID.
             </remarks>
             <param name="inputString">The string to search the words in.</param>
             <param name="configType">The type of configuration.</param>
             <param name="configSource">The external file to search the words. Ignored when configType is ListController.</param>
             <param name="filterScope">When using ListController configType, this parameter indicates which list(s) to use.</param>
             <returns>The original text with the profanity words removed.</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Security.PortalSecurity.ValidateInput(System.String,DotNetNuke.Security.PortalSecurity.FilterFlag)">
            -----------------------------------------------------------------------------
             <summary>
             This function applies security filtering to the UserInput string, and reports
             whether the input string is valid.
             </summary>
             <param name="userInput">This is the string to be filtered</param>
             <param name="filterType">Flags which designate the filters to be applied</param>
             <returns></returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Security.SecurityAccessLevel">
            -----------------------------------------------------------------------------
             <summary>
             The SecurityAccessLevel enum is used to determine which level of access rights
             to assign to a specific module or module action. 
             </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Assets.IAssetManager.GetFolderContent(System.Int32,System.Int32,System.Int32,System.String,DotNetNuke.Services.Assets.SubfolderFilter)">
            <summary>
            Gets the page of files and folders contained in the specified folder.
            </summary>
            <param name="folderId">Folder Identifier</param>
            <param name="startIndex">Start index to retrieve items</param>
            <param name="numItems">Max Number of items</param>
            <param name="sortExpression">The sort expression in a SQL format, e.g. FileName ASC</param>
            <param name="subfolderFilter"></param>
            <returns>The list of files and folders contained in the specified folder paginated</returns>
        </member>
        <member name="M:DotNetNuke.Services.Assets.IAssetManager.SearchFolderContent(System.Int32,System.String,System.Int32,System.Int32,System.String,DotNetNuke.Services.Assets.SubfolderFilter)">
            <summary>
            Searches the files and folders contained in the specified folder.
            </summary>
            <param name="folderId">Folder Identifier</param>
            <param name="pattern">The pattern to search for</param>
            <param name="startIndex">Start index to retrieve items</param>
            <param name="numItems">Max Number of items</param>
            <param name="sortExpression">The sort expression in a SQL format, e.g. FileName ASC</param>
            <returns>The list of files and folders contained in the specified folder paginated</returns>
        </member>
        <member name="M:DotNetNuke.Services.Assets.IAssetManager.GetFolders(DotNetNuke.Services.FileSystem.IFolderInfo,System.String,System.Boolean)">
            <summary>
            Gets the list of subfolders for the specified folder.
            </summary>        
            <param name="parentFolder">The folder from where to get the list of subfolders.</param>
            <param name="orderingField">The field to order the list</param>
            <param name="asc">True to order ascending, false to order descending</param>
            <returns>The list of subfolders for the specified folder.</returns>
        </member>
        <member name="M:DotNetNuke.Services.Assets.IAssetManager.RenameFile(System.Int32,System.String)">
            <summary>
            Renames a existing file.
            </summary>
            <param name="fileId">File reference to rename</param>
            <param name="newFileName">The new name to set to the file</param>
            <returns>The final renamed file</returns>
        </member>
        <member name="M:DotNetNuke.Services.Assets.IAssetManager.RenameFolder(System.Int32,System.String)">
            <summary>
            Renames a existing folder.
            </summary>
            <param name="folderId">Folder reference to rename</param>
            <param name="newFolderName">The new name to set to the folder</param>
            <returns>The final renamed folder</returns>
        </member>
        <member name="M:DotNetNuke.Services.Assets.IAssetManager.CreateFolder(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Creates a new folder.
            </summary>
            <param name="folderName">folderName is the name of the new folder</param>
            <param name="folderParentId">The reference to the parent folder where the new folder will be create</param>
            <param name="folderMappingId">folderMappingID is the mapping related with the new folder</param>
            <param name="mappedPath">mappedPath used for the mapping to folder in remove provider</param>
            <returns>The newly folder created under the specified parent folder</returns> 
        </member>
        <member name="M:DotNetNuke.Services.Assets.IAssetManager.DeleteFolder(System.Int32,System.Boolean,System.Collections.Generic.ICollection{DotNetNuke.Services.FileSystem.IFolderInfo})">
            <summary>
            Deletes an existing folder 
            </summary>
            <param name="folderId">The ide of the folder to delete</param>
            <param name="onlyUnlink">In case of a remote folder, specifies that the folder should be unlinked, not deleted</param>
            <param name="nonDeletedSubfolders">The list of subfolders that could not be deleted, for example due to permissions</param>
            <returns>True if the folder has been correctly deleted, false otherwise</returns>  
        </member>
        <member name="M:DotNetNuke.Services.Assets.IAssetManager.DeleteFile(System.Int32)">
            <summary>
            Deletes an existing file
            </summary>
            <param name="fileId">The ide of the folder to delete</param>
            <returns>True if the file has been correctly deleted, false otherwise</returns>  
        </member>
        <member name="M:DotNetNuke.Services.Authentication.OAuth.OAuthClientBase.GenerateTimeStamp">
            <summary>
            Generate the timestamp for the signature
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Authentication.OAuth.OAuthClientBase.GenerateNonce">
            <summary>
            Generate a nonce
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Authentication.OAuth.OAuthClientBase.GenerateSignature(System.Uri,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String@,System.Collections.Generic.List{DotNetNuke.Services.Authentication.OAuth.QueryParameter}@)">
            <summary>
            Generates a signature using the HMAC-SHA1 algorithm
            </summary>
            <param name="url">The full url that needs to be signed including its non OAuth url parameters</param>
            <param name="token">The token, if available. If not available pass null or an empty string</param>
            <param name="tokenSecret">The token secret, if available. If not available pass null or an empty string</param>
            <param name="callbackurl"> </param>
            <param name="oauthVerifier">This value MUST be included when exchanging Request Tokens for Access Tokens. Otherwise pass a null or an empty string</param>
            <param name="httpMethod">The http method used. Must be a valid HTTP method verb (POST,GET,PUT, etc)</param>
            <param name="timeStamp"> </param>
            <param name="nonce"> </param>
            <param name="normalizedUrl"> </param>
            <param name="requestParameters"> </param>
            <returns>A base64 string of the hash value</returns>
        </member>
        <member name="M:DotNetNuke.Services.Authentication.OAuth.OAuthClientBase.UrlEncode(System.String)">
            <summary>
            This is a different Url Encode implementation since the default .NET one outputs the percent encoding in lower case.
            While this is not a problem with the percent encoding spec, it is used in upper case throughout OAuth
            </summary>
            <param name="value">The value to Url encode</param>
            <returns>Returns a Url encoded string</returns>
        </member>
        <member name="T:DotNetNuke.Services.Authentication.OAuth.OAuthConfigBase">
            <summary>
            The Config class provides a central area for management of Module Configuration Settings.
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Authentication.OAuth.QueryParameter">
            <summary>
            Provides an internal structure to sort the query parameter
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Authentication.OAuth.QueryParameterComparer">
            <summary>
            Comparer class used to perform the sorting of the query parameters
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Authentication.UserAuthenticationInfo">
            <summary>
            DNN-4016
            The UserAuthenticationInfo class provides the Entity Layer for the 
            user information in the Authentication Systems.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Authentication.UserAuthenticationInfo.UserAuthenticationID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and Sets the ID of the User Record in the Authentication System
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Authentication.UserAuthenticationInfo.UserID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and Sets the PackageID for the Authentication System
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Authentication.UserAuthenticationInfo.AuthenticationType">
            -----------------------------------------------------------------------------
            <summary>
            Gets and Sets the type (name) of the Authentication System (eg DNN, OpenID, LiveID)
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Authentication.UserAuthenticationInfo.AuthenticationToken">
            -----------------------------------------------------------------------------
            <summary>
            Gets and Sets the url for the Logoff Control
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Authentication.UserAuthenticationInfo.Fill(System.Data.IDataReader)">
            -----------------------------------------------------------------------------
            <summary>
            Fills a UserAuthenticationInfo from a Data Reader
            </summary>
            <param name="dr">The Data Reader to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Authentication.UserAuthenticationInfo.KeyID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Key ID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Authentication.AuthenticationConfig">
            -----------------------------------------------------------------------------
            <summary>
            The AuthenticationConfig class providesa configuration class for the DNN
            Authentication provider
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Authentication.AuthenticationConfigBase">
            -----------------------------------------------------------------------------
            <summary>
            The AuthenticationConfigBase class provides base configuration class for the 
            Authentication providers
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Authentication.AuthenticationConfigBase.DependencyProvider">
            <summary>
            Gets or sets the Dependency Provider to resolve registered 
            services with the container.
            </summary>
            <value>
            The Dependency Service.
            </value>
        </member>
        <member name="T:DotNetNuke.Services.Authentication.AuthenticationController">
            -----------------------------------------------------------------------------
            <summary>
            The AuthenticationController class provides the Business Layer for the
            Authentication Systems.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Authentication.AuthenticationController.AddAuthentication(DotNetNuke.Services.Authentication.AuthenticationInfo)">
            -----------------------------------------------------------------------------
            <summary>
            AddAuthentication adds a new Authentication System to the Data Store.
            </summary>
            <param name="authSystem">The new Authentication System to add</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Authentication.AuthenticationController.AddUserAuthentication(System.Int32,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            AddUserAuthentication adds a new UserAuthentication to the User.
            </summary>
            <param name="userID">The new Authentication System to add</param>
            <param name="authenticationType">The authentication type</param>
            <param name="authenticationToken">The authentication token</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Authentication.AuthenticationController.GetUserAuthentication(System.Int32)">
            <summary>
            Retrieves authentication information for an user.
            </summary>
            <param name="userID"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Authentication.AuthenticationController.GetAuthenticationService(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetAuthenticationService fetches a single Authentication Systems
            </summary>
            <param name="authenticationID">The ID of the Authentication System</param>
            <returns>An AuthenticationInfo object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Authentication.AuthenticationController.GetAuthenticationServiceByPackageID(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetAuthenticationServiceByPackageID fetches a single Authentication System
            </summary>
            <param name="packageID">The id of the Package</param>
            <returns>An AuthenticationInfo object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Authentication.AuthenticationController.GetAuthenticationServiceByType(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            GetAuthenticationServiceByType fetches a single Authentication Systems
            </summary>
            <param name="authenticationType">The type of the Authentication System</param>
            <returns>An AuthenticationInfo object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Authentication.AuthenticationController.GetAuthenticationServices">
            -----------------------------------------------------------------------------
            <summary>
            GetAuthenticationServices fetches a list of all the Authentication Systems
            installed in the system
            </summary>
            <returns>A List of AuthenticationInfo objects</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Authentication.AuthenticationController.GetAuthenticationType">
            -----------------------------------------------------------------------------
            <summary>
            GetAuthenticationType fetches the authentication method used by the currently logged on user
            </summary>
            <returns>An AuthenticationInfo object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Authentication.AuthenticationController.GetEnabledAuthenticationServices">
            -----------------------------------------------------------------------------
            <summary>
            GetEnabledAuthenticationServices fetches a list of all the Authentication Systems
            installed in the system that have been enabled by the Host user
            </summary>
            <returns>A List of AuthenticationInfo objects</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Authentication.AuthenticationController.HasSocialAuthenticationEnabled(System.Web.UI.UserControl)">
            <summary>
            Determines whether the current portal has any Non-DNN authentication providers enabled.
            </summary>
            <param name="control">The control.</param>
            <returns><c>true</c> if the portal has any Non-DNN authentication enabled, Otherwise <c>false</c>.</returns>
        </member>
        <member name="M:DotNetNuke.Services.Authentication.AuthenticationController.IsEnabledForPortal(DotNetNuke.Services.Authentication.AuthenticationInfo,System.Int32)">
            <summary>
            Determines whether the authentication is enabled for the specified portal.
            </summary>
            <param name="authentication">The authentication.</param>
            <param name="portalId">The portal identifier.</param>
            <returns><c>true</c> if OAuth Provider and it is enabled for the portal, Otherwise <c>false</c>.</returns>
        </member>
        <member name="M:DotNetNuke.Services.Authentication.AuthenticationController.GetLogoffRedirectURL(DotNetNuke.Entities.Portals.PortalSettings,System.Web.HttpRequest)">
            -----------------------------------------------------------------------------
            <summary>
            GetLogoffRedirectURL fetches the url to redirect too after logoff
            </summary>
            <param name="settings">A PortalSettings object</param>
            <param name="request">The current Request</param>
            <returns>The Url</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Authentication.AuthenticationController.SetAuthenticationType(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            SetAuthenticationType sets the authentication method used by the currently logged on user
            </summary>
            <param name="value">The Authentication type</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Authentication.AuthenticationController.UpdateAuthentication(DotNetNuke.Services.Authentication.AuthenticationInfo)">
            -----------------------------------------------------------------------------
            <summary>
            UpdateAuthentication updates an existing Authentication System in the Data Store.
            </summary>
            <param name="authSystem">The new Authentication System to update</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Authentication.AuthenticationInfo">
            -----------------------------------------------------------------------------
            <summary>
            The AuthenticationInfo class provides the Entity Layer for the 
            Authentication Systems.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Authentication.AuthenticationInfo.AuthenticationID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and Sets the ID of the Authentication System
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Authentication.AuthenticationInfo.PackageID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and Sets the PackageID for the Authentication System
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Authentication.AuthenticationInfo.IsEnabled">
            -----------------------------------------------------------------------------
            <summary>
            Gets and Sets a flag that determines whether the Authentication System is enabled
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Authentication.AuthenticationInfo.AuthenticationType">
            -----------------------------------------------------------------------------
            <summary>
            Gets and Sets the type (name) of the Authentication System (eg DNN, OpenID, LiveID)
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Authentication.AuthenticationInfo.SettingsControlSrc">
            -----------------------------------------------------------------------------
            <summary>
            Gets and Sets the url for the Settings Control
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Authentication.AuthenticationInfo.LoginControlSrc">
            -----------------------------------------------------------------------------
            <summary>
            Gets and Sets the url for the Login Control
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Authentication.AuthenticationInfo.LogoffControlSrc">
            -----------------------------------------------------------------------------
            <summary>
            Gets and Sets the url for the Logoff Control
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Authentication.AuthenticationInfo.Fill(System.Data.IDataReader)">
            -----------------------------------------------------------------------------
            <summary>
            Fills a RoleInfo from a Data Reader
            </summary>
            <param name="dr">The Data Reader to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Authentication.AuthenticationInfo.KeyID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Key ID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Authentication.AuthenticationLoginBase">
            -----------------------------------------------------------------------------
            <summary>
            The AuthenticationLoginBase class provides a bas class for Authentiication 
            Login controls
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Authentication.AuthenticationLoginBase.AuthenticationType">
            -----------------------------------------------------------------------------
            <summary>
            Gets and Sets the Type of Authentication associated with this control
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Authentication.AuthenticationLoginBase.Enabled">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether the control is Enabled
            </summary>
            <remarks>This property must be overriden in the inherited class</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Authentication.AuthenticationLoginBase.IPAddress">
            -----------------------------------------------------------------------------
            <summary>
            Gets the IP address associated with the request
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Authentication.AuthenticationLoginBase.Mode">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Authentication mode of the control (Login or Register)
            </summary>
            <remarks>This property may be overriden in the inherited class</remarks>
            -----------------------------------------------------------------------------        
        </member>
        <member name="P:DotNetNuke.Services.Authentication.AuthenticationLoginBase.RedirectURL">
            -----------------------------------------------------------------------------
            <summary>
            Gets and Sets the Redirect Url for this control
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Authentication.AuthenticationLoginBase.SupportsRegistration">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether the control supports Registration
            </summary>
            <remarks>This property may be overriden in the inherited class</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Authentication.AuthenticationLogoffBase">
            -----------------------------------------------------------------------------
            <summary>
            The AuthenticationLogoffBase class provides a base class for Authentiication 
            Logoff controls
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Authentication.AuthenticationLogoffBase.DependencyProvider">
            <summary>
            Gets or sets the Dependency Provider to resolve registered 
            services with the container.
            </summary>
            <value>
            The Dependency Service.
            </value>
        </member>
        <member name="P:DotNetNuke.Services.Authentication.AuthenticationLogoffBase.AuthenticationType">
            -----------------------------------------------------------------------------
            <summary>
            Gets and Sets the Type of Authentication associated with this control
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Authentication.AuthenticationSettingsBase">
            -----------------------------------------------------------------------------
            <summary>
            The AuthenticationSettingsBase class provides a base class for Authentiication 
            Settings controls
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Authentication.AuthenticationSettingsBase.AuthenticationType">
            -----------------------------------------------------------------------------
            <summary>
            Gets and Sets the Type of Authentication associated with this control
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Authentication.AuthenticationSettingsBase.UpdateSettings">
            -----------------------------------------------------------------------------
            <summary>
            UpdateSettings updates the settings in the Data Store
            </summary>
            <remarks>This method must be overriden in the inherited class</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Authentication.LogOffHandler">
            -----------------------------------------------------------------------------
            <summary>
            The LogOffHandler class provides a replacement for the LogOff page
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Authentication.UserAuthenticatedEventArgs">
            -----------------------------------------------------------------------------
            <summary>
            The UserAuthenticatedEventArgs class provides a custom EventArgs object for the
            UserAuthenticated event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Authentication.UserAuthenticatedEventArgs.#ctor(DotNetNuke.Entities.Users.UserInfo,System.String,DotNetNuke.Security.Membership.UserLoginStatus,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            All properties Constructor.
            </summary>
            <param name="user">The user being authenticated.</param>
            <param name="token">The user token</param>
            <param name="status">The login status.</param>
            <param name="type">The type of Authentication</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Authentication.UserAuthenticatedEventArgs.Authenticated">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets a flag that determines whether the User was authenticated
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Authentication.UserAuthenticatedEventArgs.AuthenticationType">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Authentication Type
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Authentication.UserAuthenticatedEventArgs.AutoRegister">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets a flag that determines whether the user should be automatically registered
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Authentication.UserAuthenticatedEventArgs.LoginStatus">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Login Status
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Authentication.UserAuthenticatedEventArgs.Message">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Message
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Authentication.UserAuthenticatedEventArgs.Profile">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Profile
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Authentication.UserAuthenticatedEventArgs.RememberMe">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the RememberMe setting
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Authentication.UserAuthenticatedEventArgs.User">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the User
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Authentication.UserAuthenticatedEventArgs.UserToken">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the UserToken (the userid or authenticated id)
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Authentication.UserAuthenticatedEventArgs.UserName">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Username
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Connections.IConnectionsController.GetConnections(System.Int32)">
            <summary>
            Get Connection Settings for a Site
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Connections.IConnectionsController.GetConnectionConfigs(System.Int32,System.String)">
            <summary>
            Get Connection Configuration Value.
            </summary>
            <param name="portalId"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:DotNetNuke.Services.Connections.IConnector.Id">
            <summary>
            Id of the connector. It is required if SupportsMultiple is true.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Connections.IConnector.Name">
            <summary>
            Unique name of the connector. It is used to distinguish between different types of connectors.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Connections.IConnector.Type">
            <summary>
            Category of the connector. It can be used to sort similar type resources.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Connections.IConnector.SupportsMultiple">
            <summary>
            Determines whether this connector supports multiple connections or not.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Connections.IConnector.DisplayName">
            <summary>
            Display name of the connector.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Connections.IConnector.IconUrl">
            <summary>
            Icon url of the connector.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Connections.IConnector.PluginFolder">
            <summary>
            Plugins folder for the connector.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Connections.IConnector.IsEngageConnector">
            <summary>
            Determines if it is engage connector or not.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Connections.IConnector.HasConfig(System.Int32)">
            <summary>
            Checks if the connector has been configured or not.
            </summary>
            <param name="portalId"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Connections.IConnector.GetConfig(System.Int32)">
            <summary>
            Get the connector configuration.
            </summary>
            <param name="portalId"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Connections.IConnector.SaveConfig(System.Int32,System.Collections.Generic.IDictionary{System.String,System.String},System.Boolean@,System.String@)">
            <summary>
            Save the connector configuration. This will work as both edit and new  if SupportsMultiple is true.
            </summary>
            <param name="portalId"></param>
            <param name="values"></param>
            <param name="validated"></param>
            <param name="customErrorMessage"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Connections.IConnector.GetConnectors(System.Int32)">
            <summary>
            Get all the connectors of a particular type.
            </summary>
            <param name="portalId"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Connections.IConnector.DeleteConnector(System.Int32)">
            <summary>
            Delete a connector. This is used only if SupportsMultiple is true.
            </summary>
            <param name="portalId"></param>
        </member>
        <member name="M:DotNetNuke.Services.Cryptography.FipsCompilanceCryptographyProvider.EncryptParameter(System.String,System.String)">
            <summary>
                copy of legacy PortalSecurity.Encrypt method
            </summary>
            <param name="message">string to be encrypted</param>
            <param name="passphrase">key for encryption</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Cryptography.FipsCompilanceCryptographyProvider.DecryptParameter(System.String,System.String)">
            <summary>
                copy of legacy PortalSecurity.Decrypt method
            </summary>
            <param name="message">string to be decrypted</param>
            <param name="passphrase">key for decryption</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Cryptography.FipsCompilanceCryptographyProvider.EncryptString(System.String,System.String)">
            <summary>
                copy of legacy PortalSecurity.EncryptString method
            </summary>
            <param name="message">string to be encrypted</param>
            <param name="passphrase">key for encryption</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Cryptography.FipsCompilanceCryptographyProvider.DecryptString(System.String,System.String)">
            <summary>
                copy of legacy PortalSecurity.DecryptString method
            </summary>
            <param name="message">string to be decrypted</param>
            <param name="passphrase">key for decryption</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Cryptography.CoreCryptographyProvider.EncryptParameter(System.String,System.String)">
            <summary>
                copy of legacy PortalSecurity.Encrypt method
            </summary>
            <param name="message">string to be encrypted</param>
            <param name="passphrase">key for encryption</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Cryptography.CoreCryptographyProvider.DecryptParameter(System.String,System.String)">
            <summary>
                copy of legacy PortalSecurity.Decrypt method
            </summary>
            <param name="message">string to be decrypted</param>
            <param name="passphrase">key for decryption</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Cryptography.CoreCryptographyProvider.EncryptString(System.String,System.String)">
            <summary>
                copy of legacy PortalSecurity.EncryptString method
            </summary>
            <param name="message">string to be encrypted</param>
            <param name="passphrase">key for encryption</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Cryptography.CoreCryptographyProvider.DecryptString(System.String,System.String)">
            <summary>
                copy of legacy PortalSecurity.DecryptString method
            </summary>
            <param name="message">string to be decrypted</param>
            <param name="passphrase">key for decryption</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Cryptography.CryptographyProvider.EncryptParameter(System.String,System.String)">
            <summary>
                simple method that uses basic encryption to safely encode parameters
            </summary>
            <param name="message">the text to be encrypted (encoded)</param>
            <param name="passphrase">the key to perform the encryption</param>
            <returns>encrypted string</returns>
        </member>
        <member name="M:DotNetNuke.Services.Cryptography.CryptographyProvider.DecryptParameter(System.String,System.String)">
            <summary>
                simple method that uses basic encryption to safely decode parameters
            </summary>
            <param name="message">the text to be decrypted (decoded)</param>
            <param name="passphrase">the key to perform the decryption</param>
            <returns>decrypted string</returns>
        </member>
        <member name="M:DotNetNuke.Services.Cryptography.CryptographyProvider.EncryptString(System.String,System.String)">
            <summary>
                safely encrypt sensitive data
            </summary>
            <param name="message">the text to be encrypted</param>
            <param name="passphrase">the key to perform the encryption</param>
            <returns>encrypted string</returns>
        </member>
        <member name="M:DotNetNuke.Services.Cryptography.CryptographyProvider.DecryptString(System.String,System.String)">
            <summary>
                safely decrypt sensitive data
            </summary>
            <param name="message">the text to be decrypted</param>
            <param name="passphrase">the key to perform the decryption</param>
            <returns>decrypted string</returns>
        </member>
        <member name="M:DotNetNuke.Services.Cryptography.ICryptographyProvider.EncryptParameter(System.String,System.String)">
            <summary>
                simple method that uses basic encryption to safely encode parameters
            </summary>
            <param name="message">the text to be encrypted (encoded)</param>
            <param name="passphrase">the key to perform the encryption</param>
            <returns>encrypted string</returns>
        </member>
        <member name="M:DotNetNuke.Services.Cryptography.ICryptographyProvider.DecryptParameter(System.String,System.String)">
            <summary>
                simple method that uses basic encryption to safely decode parameters
            </summary>
            <param name="message">the text to be decrypted (decoded)</param>
            <param name="passphrase">the key to perform the decryption</param>
            <returns>decrypted string</returns>
        </member>
        <member name="M:DotNetNuke.Services.Cryptography.ICryptographyProvider.EncryptString(System.String,System.String)">
            <summary>
                safely encrypt sensitive data
            </summary>
            <param name="message">the text to be encrypted</param>
            <param name="passphrase">the key to perform the encryption</param>
            <returns>encrypted string</returns>
        </member>
        <member name="M:DotNetNuke.Services.Cryptography.ICryptographyProvider.DecryptString(System.String,System.String)">
            <summary>
                safely decrypt sensitive data
            </summary>
            <param name="message">the text to be decrypted</param>
            <param name="passphrase">the key to perform the decryption</param>
            <returns>decrypted string</returns>
        </member>
        <member name="T:DotNetNuke.Services.Exceptions.BasePortalException">
            <summary>
            Base Portal Exception.
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Exceptions.Exceptions">
            <summary>
            Exceptions class provides operation to log most of the exceptions occured in system.
            </summary>
            <remarks>
            <para>
            For most developers, there is a hard problem need to face to is that our product will run on many and many servers with
            much different environment, such as hardware, network, system version, framework version and so on, so there is many of reasons
            will make our application throw lof of exceptions,even will stop our app to working. so when some error occured, we need a way
            to find out the reason, we know we need to log all the exception, but the point is how to log useful information, you should log
            the information what you need to location the code caught the error, but DONOT just log 'ERROR'. so we provide a full support of
            exception log system. when error occured, we can found the detail information in event log and can locationt the error quickly.
            </para>
            <para>
            Current we immplement lot of custom exception to use in different levels:
            <list type="bullet">
            <item><see cref="T:DotNetNuke.Services.Exceptions.ModuleLoadException"/></item>
            <item><see cref="T:DotNetNuke.Services.Exceptions.ObjectHydrationException"/></item>
            <item><see cref="T:DotNetNuke.Services.Exceptions.PageLoadException"/></item>
            <item><see cref="T:DotNetNuke.Services.Exceptions.SchedulerException"/></item>
            <item><see cref="T:DotNetNuke.Services.Exceptions.SearchException"/></item>
            <item><see cref="T:DotNetNuke.Services.Exceptions.SecurityException"/></item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.Exceptions.Exceptions.GetExceptionInfo(System.Exception)">
            <summary>
            Gets the exception info.
            </summary>
            <param name="e">The exception.</param>
            <returns>Exception info.</returns>
        </member>
        <member name="M:DotNetNuke.Services.Exceptions.Exceptions.ThreadAbortCheck(System.Exception)">
            <summary>
            Threads the abort check if the exception is a ThreadAbortCheck.
            </summary>
            <param name="exc">The exc.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Exceptions.Exceptions.ProcessModuleLoadException(DotNetNuke.Entities.Modules.PortalModuleBase,System.Exception)">
            <summary>
            Processes the module load exception.
            </summary>
            <param name="objPortalModuleBase">The portal module base.</param>
            <param name="exc">The exc.</param>
        </member>
        <member name="M:DotNetNuke.Services.Exceptions.Exceptions.ProcessModuleLoadException(DotNetNuke.Entities.Modules.PortalModuleBase,System.Exception,System.Boolean)">
            <summary>
            Processes the module load exception.
            </summary>
            <param name="objPortalModuleBase">The portal module base.</param>
            <param name="exc">The exc.</param>
            <param name="DisplayErrorMessage">if set to <c>true</c> display error message.</param>
        </member>
        <member name="M:DotNetNuke.Services.Exceptions.Exceptions.ProcessModuleLoadException(System.String,DotNetNuke.Entities.Modules.PortalModuleBase,System.Exception,System.Boolean)">
            <summary>
            Processes the module load exception.
            </summary>
            <param name="FriendlyMessage">The friendly message.</param>
            <param name="objPortalModuleBase">The obj portal module base.</param>
            <param name="exc">The exc.</param>
            <param name="DisplayErrorMessage">if set to <c>true</c> display error message.</param>
        </member>
        <member name="M:DotNetNuke.Services.Exceptions.Exceptions.ProcessModuleLoadException(System.Web.UI.Control,System.Exception)">
            <summary>
            Processes the module load exception.
            </summary>
            <param name="ctrl">The CTRL.</param>
            <param name="exc">The exc.</param>
        </member>
        <member name="M:DotNetNuke.Services.Exceptions.Exceptions.ProcessModuleLoadException(System.Web.UI.Control,System.Exception,System.Boolean)">
            <summary>
            Processes the module load exception.
            </summary>
            <param name="ctrl">The CTRL.</param>
            <param name="exc">The exc.</param>
            <param name="DisplayErrorMessage">if set to <c>true</c> [display error message].</param>
        </member>
        <member name="M:DotNetNuke.Services.Exceptions.Exceptions.ProcessModuleLoadException(System.String,System.Web.UI.Control,System.Exception)">
            <summary>
            Processes the module load exception.
            </summary>
            <param name="FriendlyMessage">The friendly message.</param>
            <param name="ctrl">The CTRL.</param>
            <param name="exc">The exc.</param>
        </member>
        <member name="M:DotNetNuke.Services.Exceptions.Exceptions.ProcessModuleLoadException(System.String,System.Web.UI.Control,System.Exception,System.Boolean)">
            <summary>
            Processes the module load exception.
            </summary>
            <param name="FriendlyMessage">The friendly message.</param>
            <param name="ctrl">The CTRL.</param>
            <param name="exc">The exc.</param>
            <param name="DisplayErrorMessage">if set to <c>true</c> display error message.</param>
        </member>
        <member name="M:DotNetNuke.Services.Exceptions.Exceptions.ProcessPageLoadException(System.Exception)">
            <summary>
            Processes the page load exception.
            </summary>
            <param name="exc">The exc.</param>
        </member>
        <member name="M:DotNetNuke.Services.Exceptions.Exceptions.ProcessPageLoadException(System.Exception,System.String)">
            <summary>
            Processes the page load exception.
            </summary>
            <param name="exc">The exc.</param>
            <param name="URL">The URL.</param>
        </member>
        <member name="M:DotNetNuke.Services.Exceptions.Exceptions.LogException(DotNetNuke.Services.Exceptions.ModuleLoadException)">
            <summary>
            Logs the ModuleLoadException.
            </summary>
            <param name="exc">The exc.</param>
        </member>
        <member name="M:DotNetNuke.Services.Exceptions.Exceptions.LogException(DotNetNuke.Services.Exceptions.PageLoadException)">
            <summary>
            Logs the PageLoadException.
            </summary>
            <param name="exc">The exc.</param>
        </member>
        <member name="M:DotNetNuke.Services.Exceptions.Exceptions.LogException(DotNetNuke.Services.Exceptions.SchedulerException)">
            <summary>
            Logs the SchedulerException.
            </summary>
            <param name="exc">The exc.</param>
        </member>
        <member name="M:DotNetNuke.Services.Exceptions.Exceptions.LogException(DotNetNuke.Services.Exceptions.SecurityException)">
            <summary>
            Logs the SecurityException.
            </summary>
            <param name="exc">The exc.</param>
        </member>
        <member name="M:DotNetNuke.Services.Exceptions.Exceptions.LogException(System.Exception)">
            <summary>
            Logs all the basic exception.
            </summary>
            <param name="exc">The exc.</param>
        </member>
        <member name="M:DotNetNuke.Services.Exceptions.Exceptions.ProcessSchedulerException(System.Exception)">
            <summary>
            Processes the scheduler exception.
            </summary>
            <param name="exc">The exc.</param>
        </member>
        <member name="M:DotNetNuke.Services.Exceptions.Exceptions.LogSearchException(DotNetNuke.Services.Exceptions.SearchException)">
            <summary>
            Logs the search exception.
            </summary>
            <param name="exc">The exc.</param>
        </member>
        <member name="T:DotNetNuke.Services.FileSystem.FolderTypeConfig">
            -----------------------------------------------------------------------------
            <summary>
            HostSettingConfig - A class that represents Install/DotNetNuke.Install.Config/Settings
            </summary>
            -----------------------------------------------------------------------------    
        </member>
        <member name="T:DotNetNuke.Services.FileSystem.FolderTypeSettingConfig">
            -----------------------------------------------------------------------------
            <summary>
            HostSettingConfig - A class that represents Install/DotNetNuke.Install.Config/Settings
            </summary>
            -----------------------------------------------------------------------------    
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.FolderMappings.IFolderMappingsConfigController.FolderTypes">
            <summary>
            All folder types read from folderMappings config file
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.FolderMappings.IFolderMappingsConfigController.ConfigNode">
            <summary>
            Root node in folderMappings config file
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderMappings.IFolderMappingsConfigController.LoadConfig">
            <summary>
            Load data from folderMappings config file
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderMappings.IFolderMappingsConfigController.SaveConfig(System.String)">
            <summary>
            Save data in folderMappings config file
            </summary>
            <param name="folderMappinsSettings"></param>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderMappings.IFolderMappingsConfigController.GetFolderMapping(System.Int32,System.String)">
            <summary>
            Gets the folderMapping configured for a specific folder
            </summary>
            <param name="portalId">Portal Id where the folder is</param>
            <param name="folderPath">Specific folder path</param>        
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileContentTypeManager.GetContentType(System.String)">
            <summary>
            Gets the Content Type for the specified file extension.
            </summary>
            <param name="extension">The file extension.</param>
            <returns>The Content Type for the specified extension.</returns>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.IFileContentTypeManager.ContentTypes">
            <summary>
            Get all content types dictionary.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileLinkClickController.GetFileLinkClick(DotNetNuke.Services.FileSystem.IFileInfo)">
            <summary>
            Get the Link Click Url from a file
            </summary>
            <param name="file">The specified file</param>
            <returns>The Link Click Url</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileLinkClickController.GetFileIdFromLinkClick(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Get the File Id value contained in a Link Click Url
            </summary>
            <param name="queryParams">Query string parameters collection from a Link Click url</param>
            <returns>A File Id (or -1 if no File Id could be extracted from the query string parameters)</returns>
        </member>
        <member name="T:DotNetNuke.Services.FileSystem.IFileVersionController">
            <summary>
            Do not implement.  This interface is meant for reference and unit test purposes only.
            There is no guarantee that this interface will not change.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileVersionController.AddFileVersion(DotNetNuke.Services.FileSystem.IFileInfo,System.Int32,System.Boolean,System.Boolean,System.IO.Stream)">
            <summary>
            Add a new version of the file
            </summary>
            <param name="file">The file to add a version to</param>
            <param name="userId">The user who is performing the operation</param>
            <param name="published">Indicates if the new version should be the published version</param>
            <param name="removeOldestVersions">Remove the oldest versions if # > MaxVersions</param>
            <param name="content">Version content</param>
            <returns>The name of the file where the content should be stored</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileVersionController.SetPublishedVersion(DotNetNuke.Services.FileSystem.IFileInfo,System.Int32)">
            <summary>
            Changes the published version of a file
            </summary>
            <param name="file">The file to change its published version</param>
            <param name="version">the version to change to</param>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileVersionController.DeleteFileVersion(DotNetNuke.Services.FileSystem.IFileInfo,System.Int32)">
            <summary>
            Deletes a version of a file.
            If the version to delete is the published version, the previous version gets published
            </summary>
            <param name="file">The file to delete the version from</param>
            <param name="version">The number of the version to delete</param>
            <returns>The new published version</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileVersionController.GetFileVersion(DotNetNuke.Services.FileSystem.IFileInfo,System.Int32)">
            <summary>
            Gets the physical file with a specific version of a file
            </summary>
            <param name="file">The file to get the version from</param>
            <param name="version">The number of the version to retrieve</param>
            <returns>The version of the file</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileVersionController.DeleteAllUnpublishedVersions(DotNetNuke.Services.FileSystem.IFileInfo,System.Boolean)">
            <summary>
            Deletes all the unpublished versions of a file
            </summary>
            <param name="file">The file with versions</param>
            <param name="resetPublishedVersionNumber">If True reset to 1 the PublishedVersion Property of the FileInfo</param>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileVersionController.GetFileVersions(DotNetNuke.Services.FileSystem.IFileInfo)">
            <summary>
            Returns all the versions of a file
            </summary>
            <param name="file">The file with versions</param>
            <returns>Collection of file versions</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileVersionController.IsFolderVersioned(System.Int32)">
            <summary>
            This method returns true if FileVersion is enabled in the Folder, false otherwise 
            </summary>
            <param name="folderId">Folder Id</param>
            <returns>true if FileVersion is enabled in the Folder, false otherwise </returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileVersionController.IsFolderVersioned(DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>
            This method returns true if FileVersion is enabled in the Folder, false otherwise 
            </summary>
            <param name="folder">FolderInfo object</param>
            <returns>true if FileVersion is enabled in the Folder, false otherwise </returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileVersionController.IsFileVersionEnabled(System.Int32)">
            <summary>
            This method returns true if FileVersion is enabled in the portal, false otherwise 
            </summary>
            <param name="portalId">Portal Id</param>
            <returns>true if FileVersion is enabled in the portal, false otherwise </returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileVersionController.MaxFileVersions(System.Int32)">
            <summary>
            This method returns the max number of versions for a portal
            </summary>
            <param name="portalId">Portal Id</param>
            <returns>Max file versions</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileVersionController.RollbackFileVersion(DotNetNuke.Services.FileSystem.IFileInfo,System.Int32,System.Int32)">
            <summary>
            Rollbacks a file to the specified version
            </summary>
            <param name="file">The file to perform the rollback</param>        
            <param name="version">The version to rollback to</param>
            <param name="userId">The user who is performing the operation</param>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileVersionController.GetVersionContent(DotNetNuke.Services.FileSystem.IFileInfo,System.Int32)">
            <summary>
            Get the content of a specific version file
            </summary>
            <param name="file">The file to get the version</param>
            <param name="version">The version to obtain the content</param>
            <returns>The Stream with the file content</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileVersionController.GetFileVersionsInFolder(System.Int32)">
            <summary>
            Get all the non-published versions in a Folder
            </summary>
            <param name="folderId">Folder Id</param>
            <returns>Collection of file versions</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.Internal.IFileDeletionController.DeleteFile(DotNetNuke.Services.FileSystem.IFileInfo)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="file">The file to delete.</param>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.Internal.IFileDeletionController.UnlinkFile(DotNetNuke.Services.FileSystem.IFileInfo)">
            <summary>
            Unlinks the specified file
            </summary>
            <param name="file">The file to unlink</param>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.Internal.IFileDeletionController.DeleteFileData(DotNetNuke.Services.FileSystem.IFileInfo)">
            <summary>
            Deletes the specified file metadata.
            </summary>
            <param name="file">The file to delete its metadata.</param>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.Internal.IFileLockingController.IsFileLocked(DotNetNuke.Services.FileSystem.IFileInfo,System.String@)">
            <summary>
            Checks if a file is locked or not
            </summary>
            <param name="file">The file to be checked</param>
            <param name="lockReasonKey">The friendly reason why the file is locked</param>
            <returns>True if the file is locked, false in otherwise</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.Internal.IFileLockingController.IsFileOutOfPublishPeriod(DotNetNuke.Services.FileSystem.IFileInfo,System.Int32,System.Int32)">
            <summary>
            Checks if the file is out of Publish Period
            </summary>
            <param name="file">the file to be checked</param>
            <param name="portalId">The Portal Id where the file is contained</param>
            <param name="userId">The user Id who is accessing to the file</param>
            <returns>True if the file is out of publish period, false in otherwise. In anycase, True for admin or host users</returns>
        </member>
        <member name="T:DotNetNuke.Services.FileSystem.Internal.IFileSecurityChecker">
            <summary>
            File Content Security Checker.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.Internal.IFileSecurityChecker.Validate(System.IO.Stream)">
            <summary>
            Checks if the file has valid content.
            </summary>
            <param name="fileContent">The File Content.</param>
        </member>
        <member name="T:DotNetNuke.Services.FileSystem.Internal.IFileSecurityController">
            <summary>
            Internal class to check file security.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.Internal.IFileSecurityController.Validate(System.String,System.IO.Stream)">
            <summary>
            Checks if the file has valid content.
            </summary>
            <param name="fileName">The File Name.</param>
            <param name="fileContent">The File Content.</param>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.Internal.IUserSecurityController.IsHostAdminUser(System.Int32)">
            <summary>
            Checks if the Current user is Host user or Admin user of the provided portal
            </summary>
            <param name="portalId">Portal Id to check Admin users</param>
            <returns>True if the Current user is Host user or Admin user. False otherwise</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.Internal.IUserSecurityController.IsHostAdminUser(System.Int32,System.Int32)">
            <summary>
            Checks if the provided user is Host user or Admin user of the provided portal
            </summary>
            <param name="portalId">Portal Id to check Admin users</param>
            <param name="userId">User Id to check</param>
            <returns>True if the user is Host user or Admin user. False otherwise</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.Internal.IUserSecurityController.HasFolderPermission(DotNetNuke.Services.FileSystem.IFolderInfo,System.String)">
            <summary>
            Checks if the provided permission is allowed for the current user in the provided folder
            </summary>
            <param name="folder">Folder to check</param>
            <param name="permissionKey">Permission key to check</param>
            <returns></returns>
        </member>
        <member name="T:DotNetNuke.Services.FileSystem.Internal.FileSecurityController">
            <summary>
            Internal class to check file security.
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.FileSystem.Internal.DefaultFolderProviders">
            <summary>
            This class contains a method to return the list of names of the default folder providers.
            </summary>
            <remarks>
            This class is reserved for internal use and is not intended to be used directly from your code.
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.Internal.DefaultFolderProviders.GetDefaultProviders">
            <summary>
            Returns a list with the names of the default folder providers.
            </summary>
            <returns>The list of names of the default folder providers.</returns>
        </member>
        <member name="T:DotNetNuke.Services.FileSystem.ContentDisposition">
            <summary>
            Represents the different options when downloading a file.
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.FileSystem.ContentDisposition.Attachment">
            <summary>
            The browser will display a dialog to allow the user to save or view the document.
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.FileSystem.ContentDisposition.Inline">
            <summary>
            The document will be displayed automatically.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.IFileInfo.Title">
            <summary>
            Gets or sets a metadata field with an optional title associated to the file
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.IFileInfo.EnablePublishPeriod">
            <summary>
            Gets or sets a value indicating whether publish period is enabled for the file
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.IFileInfo.StartDate">
            <summary>
            Gets or sets the date on which the file starts to be published
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.IFileInfo.EndDate">
            <summary>
            Gets or sets the date on which the file ends to be published
            </summary>        
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.IFileInfo.IsEnabled">
            <summary>
            Gets a value indicating whether the file is enabled,
            considering if the publish period is active and if the current date is within the publish period
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.IFileInfo.ContentItemID">
            <summary>
            Gets or sets a reference to ContentItem, to use in Workflows
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.IFileInfo.PublishedVersion">
            <summary>
            Gets or sets the published version number of the file
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.IFileInfo.HasBeenPublished">
            <summary>
            Gets a flag which says whether the file has ever been published
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.FileSystem.IFileManager">
            <summary>
            Do not implement.  This interface is meant for reference and unit test purposes only.
            There is no guarantee that this interface will not change.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileManager.AddFile(DotNetNuke.Services.FileSystem.IFolderInfo,System.String,System.IO.Stream)">
            <summary>
            Adds a file to the specified folder.
            </summary>
            <param name="folder">The folder where to add the file.</param>
            <param name="fileName">The name of the file.</param>
            <param name="fileContent">The content of the file.</param>
            <returns>A <see cref="T:DotNetNuke.Services.FileSystem.IFileInfo">IFileInfo</see> as specified by the parameters.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileManager.AddFile(DotNetNuke.Services.FileSystem.IFolderInfo,System.String,System.IO.Stream,System.Boolean)">
            <summary>
            Adds a file to the specified folder.
            </summary>
            <param name="folder">The folder where to add the file.</param>
            <param name="fileName">The name of the file.</param>
            <param name="fileContent">The content of the file.</param>
            <param name="overwrite">Indicates if the file has to be over-written if it exits.</param>
            <returns>A <see cref="T:DotNetNuke.Services.FileSystem.IFileInfo">IFileInfo</see> as specified by the parameters.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileManager.AddFile(DotNetNuke.Services.FileSystem.IFolderInfo,System.String,System.IO.Stream,System.Boolean,System.Boolean,System.String)">
            <summary>
            Adds a file to the specified folder.
            </summary>
            <param name="folder">The folder where to add the file.</param>
            <param name="fileName">The name of the file.</param>
            <param name="fileContent">The content of the file.</param>
            <param name="overwrite">Indicates if the file has to be over-written if it exists.</param>
            <param name="checkPermissions">Indicates if permissions have to be met.</param>
            <param name="contentType">The content type of the file.</param>
            <returns>A <see cref="T:DotNetNuke.Services.FileSystem.IFileInfo">IFileInfo</see> as specified by the parameters.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileManager.AddFile(DotNetNuke.Services.FileSystem.IFolderInfo,System.String,System.IO.Stream,System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
            Adds a file to the specified folder.
            </summary>
            <param name="folder">The folder where to add the file.</param>
            <param name="fileName">The name of the file.</param>
            <param name="fileContent">The content of the file.</param>
            <param name="overwrite">Indicates if the file has to be over-written if it exists.</param>
            <param name="checkPermissions">Indicates if permissions have to be met.</param>
            <param name="contentType">The content type of the file.</param>
            <param name="createdByUserID">ID of the user that creates the file</param>
            <returns>A <see cref="T:DotNetNuke.Services.FileSystem.IFileInfo">IFileInfo</see> as specified by the parameters.</returns>        
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileManager.AddFile(DotNetNuke.Services.FileSystem.IFolderInfo,System.String,System.IO.Stream,System.Boolean,System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
            Adds a file to the specified folder.
            </summary>
            <param name="folder">The folder where to add the file.</param>
            <param name="fileName">The name of the file.</param>
            <param name="fileContent">The content of the file.</param>
            <param name="overwrite">Indicates if the file has to be over-written if it exists.</param>
            <param name="checkPermissions">Indicates if permissions have to be met.</param>
            <param name="ignoreWhiteList">Indicates whether the whitelist should be ignored</param>
            <param name="contentType">The content type of the file.</param>
            <param name="createdByUserID">ID of the user that creates the file</param>
            <returns>A <see cref="T:DotNetNuke.Services.FileSystem.IFileInfo">IFileInfo</see> as specified by the parameters.</returns>        
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileManager.CopyFile(DotNetNuke.Services.FileSystem.IFileInfo,DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>
            Copies the specified file into the specified folder.
            </summary>
            <param name="file">The file to copy.</param>
            <param name="destinationFolder">The folder where to copy the file to.</param>
            <returns>A <see cref="T:DotNetNuke.Services.FileSystem.IFileInfo">IFileInfo</see> with the information of the copied file.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileManager.DeleteFile(DotNetNuke.Services.FileSystem.IFileInfo)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="file">The file to delete.</param>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileManager.DeleteFiles(System.Collections.Generic.IEnumerable{DotNetNuke.Services.FileSystem.IFileInfo})">
            <summary>
            Deletes the specified files.
            </summary>
            <param name="files">The files to delete.</param>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileManager.FileExists(DotNetNuke.Services.FileSystem.IFolderInfo,System.String)">
            <summary>
            Checks the existence of the specified file in the specified folder.
            </summary>
            <param name="folder">The folder where to check the existence of the file.</param>
            <param name="fileName">The file name to check the existence of.</param>
            <returns>A boolean value indicating whether the file exists or not in the specified folder.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileManager.FileExists(DotNetNuke.Services.FileSystem.IFolderInfo,System.String,System.Boolean)">
            <summary>
            Checks the existence of the specified file in the specified folder.
            </summary>
            <param name="folder">The folder where to check the existence of the file.</param>
            <param name="fileName">The file name to check the existence of.</param>
            <param name="retrieveUnpublishedFiles">Indicates if the file is retrieved from All files or from Published files</param>
            <returns>A boolean value indicating whether the file exists or not in the specified folder.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileManager.GetFile(System.Int32)">
            <summary>
            Gets the file metadata for the specified file.
            </summary>
            <param name="fileID">The file identifier.</param>
            <returns>The <see cref="T:DotNetNuke.Services.FileSystem.IFileInfo">IFileInfo</see> object with the metadata of the specified file.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileManager.GetFile(System.Int32,System.Boolean)">
            <summary>
            Gets the file metadata for the specified file.
            </summary>
            <param name="fileID">The file identifier.</param>
            <param name="retrieveUnpublishedFiles">Indicates if the file is retrieved from All files or from Published files</param>
            <returns>The <see cref="T:DotNetNuke.Services.FileSystem.IFileInfo">IFileInfo</see> object with the metadata of the specified file.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileManager.GetFile(DotNetNuke.Services.FileSystem.IFolderInfo,System.String)">
            <summary>
            Gets the file metadata for the specified file.
            </summary>
            <param name="folder">The folder where the file is stored.</param>
            <param name="fileName">The name of the file.</param>
            <returns>The <see cref="T:DotNetNuke.Services.FileSystem.IFileInfo">IFileInfo</see> object with the metadata of the specified file.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileManager.GetFile(DotNetNuke.Services.FileSystem.IFolderInfo,System.String,System.Boolean)">
            <summary>
            Gets the file metadata for the specified file.
            </summary>
            <param name="folder">The folder where the file is stored.</param>
            <param name="fileName">The name of the file.</param>
            <param name="retrieveUnpublishedFiles">Indicates if the file is retrieved from All files or from Published files</param>
            <returns>The <see cref="T:DotNetNuke.Services.FileSystem.IFileInfo">IFileInfo</see> object with the metadata of the specified file.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileManager.GetFile(System.Int32,System.String)">
            <summary>
            Gets the file metadata for the specified file.
            </summary>
            <param name="portalId">The portal ID or Null.NullInteger for the Host</param>
            <param name="relativePath">Relative path to the file.</param>
            <remarks>Host and portal settings commonly return a relative path to a file.  This method uses that relative path to fetch file metadata.</remarks>
            <returns>The <see cref="T:DotNetNuke.Services.FileSystem.IFileInfo">IFileInfo</see> object with the metadata of the specified file.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileManager.GetFile(System.Int32,System.String,System.Boolean)">
            <summary>
            Gets the file metadata for the specified file.
            </summary>
            <param name="portalId">The portal ID or Null.NullInteger for the Host</param>
            <param name="relativePath">Relative path to the file.</param>
            <param name="retrieveUnpublishedFiles">Indicates if the file is retrieved from All files or from Published files</param>
            <remarks>Host and portal settings commonly return a relative path to a file.  This method uses that relative path to fetch file metadata.</remarks>
            <returns>The <see cref="T:DotNetNuke.Services.FileSystem.IFileInfo">IFileInfo</see> object with the metadata of the specified file.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileManager.GetFileContent(DotNetNuke.Services.FileSystem.IFileInfo)">
            <summary>
            Gets the content of the specified file.
            </summary>
            <param name="file">The file to get the content from.</param>
            <returns>A stream with the content of the file.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileManager.GetSeekableStream(System.IO.Stream)">
            <summary>
            Gets a seekable Stream based on the specified non-seekable Stream.
            </summary>
            <param name="stream">A non-seekable Stream.</param>
            <returns>A seekable Stream.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileManager.GetUrl(DotNetNuke.Services.FileSystem.IFileInfo)">
            <summary>
            Gets the direct Url to the file.
            </summary>
            <param name="file">The file to get the Url.</param>
            <returns>The direct Url to the file.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileManager.IsImageFile(DotNetNuke.Services.FileSystem.IFileInfo)">
            <summary>
            Gets a flag that dertermines if the file is an Image
            </summary>
            <param name="file">The file to test.</param>
            <returns>The flag as a boolean value.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileManager.MoveFile(DotNetNuke.Services.FileSystem.IFileInfo,DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>
            Moves the specified file into the specified folder.
            </summary>
            <param name="file">The file to move.</param>
            <param name="destinationFolder">The folder where to move the file to.</param>
            <returns>An <see cref="T:DotNetNuke.Services.FileSystem.IFileInfo">IFileInfo</see> with the information of the moved file.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileManager.RenameFile(DotNetNuke.Services.FileSystem.IFileInfo,System.String)">
            <summary>
            Renames the specified file.
            </summary>
            <param name="file">The file to rename</param>
            <param name="newFileName">The new filename to assign to the file.</param>
            <returns>An <see cref="T:DotNetNuke.Services.FileSystem.IFileInfo">IFileInfo</see> with the information of the renamed file.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileManager.SetAttributes(DotNetNuke.Services.FileSystem.IFileInfo,System.IO.FileAttributes)">
            <summary>
            Sets the specified FileAttributes of the file.
            </summary>
            <param name="file">The file.</param>
            <param name="fileAttributes">The file attributes to add.</param>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileManager.UnzipFile(DotNetNuke.Services.FileSystem.IFileInfo)">
            <summary>
            Extracts the files and folders contained in the specified zip file to the folder where the file belongs.
            </summary>
            <param name="file">The file to unzip.</param>
            <returns>Total files count in the zip file.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileManager.UnzipFile(DotNetNuke.Services.FileSystem.IFileInfo,DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>
            Extracts the files and folders contained in the specified zip file to the specified folder.
            </summary>
            <param name="file">The file to unzip.</param>
            <param name="destinationFolder">The folder to unzip to.</param>
            <returns>Total files count in the zip file.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileManager.UnzipFile(DotNetNuke.Services.FileSystem.IFileInfo,DotNetNuke.Services.FileSystem.IFolderInfo,System.Collections.Generic.IList{System.String})">
            <summary>
            Extracts the files and folders contained in the specified zip file to the specified folder.
            </summary>
            <param name="file">The file to unzip.</param>
            <param name="destinationFolder">The folder to unzip to.</param>
            <param name="invalidFiles">Files which can't exact.</param>
            <returns>Total files count in the zip file.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileManager.UpdateFile(DotNetNuke.Services.FileSystem.IFileInfo)">
            <summary>
            Updates the metadata of the specified file.
            </summary>
            <param name="file">The file to update.</param>
            <returns>A <see cref="T:DotNetNuke.Services.FileSystem.IFileInfo">IFileInfo</see> as the updated file.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileManager.UpdateFile(DotNetNuke.Services.FileSystem.IFileInfo,System.IO.Stream)">
            <summary>
            Regenerates the hash and updates the metadata of the specified file.
            </summary>
            <param name="file">The file to update.</param>
            <param name="fileContent">Stream used to regenerate the hash.</param>
            <returns>A <see cref="T:DotNetNuke.Services.FileSystem.IFileInfo">IFileInfo</see> as the updated file.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileManager.WriteFile(DotNetNuke.Services.FileSystem.IFileInfo,System.IO.Stream)">
            <summary>
            Writes the content of the specified file into the specified stream.
            </summary>
            <param name="file">The file to write into the stream.</param>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFileManager.WriteFileToResponse(DotNetNuke.Services.FileSystem.IFileInfo,DotNetNuke.Services.FileSystem.ContentDisposition)">
            <summary>
            Downloads the specified file.
            </summary>
            <param name="file">The file to download.</param>
            <param name="contentDisposition">Indicates how to display the document once downloaded.</param>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.IFolderInfo.IsVersioned">
            <summary>
            Gets or sets a value indicating whether file versions are active for the folder
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.IFolderInfo.WorkflowID">
            <summary>
            Gets or sets a reference to the active Workflow for the folder
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.IFolderInfo.ParentID">
            <summary>
            Gets or sets a reference to the parent folder
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.IFolderInfo.MappedPath">
            <summary>
            Gets or sets the path this folder is mapped on its provider file system
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.IFolderInfo.HasChildren">
            <summary>
            Gets a value indicating whether the folder has any child subfolder
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.FileSystem.IFolderManager">
            <summary>
            Do not implement.  This interface is meant for reference and unit test purposes only.
            There is no guarantee that this interface will not change.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.AddAllUserReadPermission(DotNetNuke.Services.FileSystem.IFolderInfo,DotNetNuke.Security.Permissions.PermissionInfo)">
            <summary>
            Adds read permissions for all users to the specified folder.
            </summary>
            <param name="folder">The folder to add the permission to.</param>
            <param name="permission">Used as base class for FolderPermissionInfo when there is no read permission already defined.</param>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.AddFolder(DotNetNuke.Services.FileSystem.FolderMappingInfo,System.String)">
            <summary>
            Creates a new folder using the provided folder path and mapping.
            </summary>
            <param name="folderMapping">The folder mapping to use.</param>
            <param name="folderPath">The path of the new folder.</param>
            <returns>The added folder.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.AddFolder(DotNetNuke.Services.FileSystem.FolderMappingInfo,System.String,System.String)">
            <summary>
            Creates a new folder using the provided folder path and mapping.
            </summary>
            <param name="folderMapping">The folder mapping to use.</param>
            <param name="folderPath">The path of the new folder.</param>
            <param name="mappedPath">The path of the new folder in the provider.</param>
            <returns>The added folder.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.AddFolder(System.Int32,System.String)">
            <summary>
            Creates a new folder in the given portal using the provided folder path.
            The same mapping than the parent folder will be used to create this folder. So this method have to be used only to create subfolders.
            </summary>
            <param name="portalId">The portal identifier.</param>
            <param name="folderPath">The path of the new folder.</param>
            <returns>The added folder.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.CopyParentFolderPermissions(DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>
            Sets folder permissions to the given folder by copying parent folder permissions.
            </summary>
            <param name="folder">The folder to copy permissions to</param>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.DeleteFolder(DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>
            Deletes the specified folder.
            </summary>
            <param name="folder">The folder to delete.</param>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.DeleteFolder(System.Int32)">
            <summary>
            Deletes the specified folder.
            </summary>
            <param name="folderId">The folder identifier.</param>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.UnlinkFolder(DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>
            Unlink the specified folder
            </summary>
            <param name="folder">The folder to unlink</param>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.DeleteFolder(DotNetNuke.Services.FileSystem.IFolderInfo,System.Collections.Generic.ICollection{DotNetNuke.Services.FileSystem.IFolderInfo})">
            <summary>
            Delete the specified folder and all its content
            </summary>
            <param name="folder"> The folder to delete></param>
            <param name="notDeletedSubfolders">A collection with all not deleted subfolders</param>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.FolderExists(System.Int32,System.String)">
            <summary>
            Checks the existence of the specified folder in the specified portal.
            </summary>
            <param name="portalId">The portal where to check the existence of the folder.</param>
            <param name="folderPath">The path of folder to check the existence of.</param>
            <returns>A boolean value indicating whether the folder exists or not in the specified portal.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.GetFiles(DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>
            Gets the files contained in the specified folder.
            </summary>
            <param name="folder">The folder from which to retrieve the files.</param>
            <returns>The list of files contained in the specified folder.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.GetFiles(DotNetNuke.Services.FileSystem.IFolderInfo,System.Boolean)">
            <summary>
            Gets the files contained in the specified folder.
            </summary>
            <param name="folder">The folder from which to retrieve the files.</param>
            <param name="recursive">Whether or not to include all the subfolders</param>
            <returns>The list of files contained in the specified folder.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.GetFiles(DotNetNuke.Services.FileSystem.IFolderInfo,System.Boolean,System.Boolean)">
            <summary>
            Gets the files contained in the specified folder.
            </summary>
            <param name="folder">The folder from which to retrieve the files.</param>
            <param name="recursive">Whether or not to include all the subfolders</param>
            <param name="retrieveUnpublishedFiles">Indicates if the file is retrieved from All files or from Published files</param>
            <returns>The list of files contained in the specified folder.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.SearchFiles(DotNetNuke.Services.FileSystem.IFolderInfo,System.String,System.Boolean)">
            <summary>
            Search the files contained in the specified folder, for a matching pattern
            </summary>
            <param name="folder">The folder from which to retrieve the files.</param>
            <param name="pattern">The patter to search for</param>
            <param name="recursive">Whether or not to include all the subfolders</param>
            <returns>The list of files contained in the specified folder.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.GetFileSystemFolders(DotNetNuke.Entities.Users.UserInfo,System.String)">
            <summary>
            Gets the list of Standard folders the specified user has the provided permissions.
            </summary>
            <param name="user">The user info</param>
            <param name="permissions">The permissions the folders have to met.</param>
            <returns>The list of Standard folders the specified user has the provided permissions.</returns>
            <remarks>This method is used to support legacy behaviours and situations where we know the file/folder is in the file system.</remarks>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.GetFolder(System.Int32)">
            <summary>
            Gets a folder entity by providing a portal identifier and folder identifier.
            </summary>
            <param name="folderId">The identifier of the folder.</param>
            <returns>The folder entity or null if the folder cannot be located.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.GetFolder(System.Int32,System.String)">
            <summary>
            Gets a folder entity by providing a portal identifier and folder path.
            </summary>
            <param name="portalId">The portal where the folder exists.</param>
            <param name="folderPath">The path of the folder.</param>
            <returns>The folder entity or null if the folder cannot be located.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.GetFolder(System.Guid)">
            <summary>
            Gets a folder entity by providing its unique id.
            </summary>
            <param name="uniqueId">The unique id of the folder.</param>
            <returns>The folder entity or null if the folder cannot be located.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.GetUserFolder(DotNetNuke.Entities.Users.UserInfo)">
            <summary>
            Get the users folder
            </summary>
            <param name="userInfo">the user</param>
            <returns>FolderInfo for the users folder</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.GetFolders(DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>
            Gets the list of subfolders for the specified folder.
            </summary>
            <param name="parentFolder">The folder to get the list of subfolders.</param>
            <returns>The list of subfolders for the specified folder.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.GetFolders(System.Int32)">
            <summary>
            Gets the sorted list of folders of the provided portal.
            </summary>
            <param name="portalId">The portal identifier.</param>
            <returns>The sorted list of folders of the provided portal.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.GetFolders(System.Int32,System.Boolean)">
            <summary>
            Gets the sorted list of folders of the provided portal.
            </summary>
            <param name="portalId">The portal identifier.</param>
            <param name="useCache">True = Read from Cache, False = Read from DB </param>
            <returns>The sorted list of folders of the provided portal.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.GetFolders(System.Int32,System.String,System.Int32)">
            <summary>
            Gets the sorted list of folders that match the provided permissions in the specified portal.
            </summary>
            <param name="portalId">The portal identifier.</param>
            <param name="permissions">The permissions to match.</param>
            <param name="userId">The user identifier to be used to check permissions.</param>
            <returns>The list of folders that match the provided permissions in the specified portal.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.GetFolders(DotNetNuke.Entities.Users.UserInfo)">
            <summary>
            Gets the list of folders the specified user has read permissions.
            </summary>
            <param name="user">The user info</param>
            <returns>The list of folders the specified user has read permissions.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.GetFolders(DotNetNuke.Entities.Users.UserInfo,System.String)">
            <summary>
            Gets the list of folders the specified user has the provided permissions.
            </summary>
            <param name="user">The user info</param>
            <param name="permissions">The permissions the folders have to met.</param>
            <returns>The list of folders the specified user has the provided permissions.</returns>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.IFolderManager.MyFolderName">
            <summary>
            Gets the alias name of the personal User Folder
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.MoveFolder(DotNetNuke.Services.FileSystem.IFolderInfo,DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>
            Moves the specified folder and its contents to a new location.
            </summary>
            <param name="folder">The folder to move.</param>
            <param name="destinationFolder">The destination folder.</param>
            <returns>The moved folder.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.RenameFolder(DotNetNuke.Services.FileSystem.IFolderInfo,System.String)">
            <summary>
            Renames the specified folder by setting the new provided folder name.
            </summary>
            <param name="folder">The folder to rename.</param>
            <param name="newFolderName">The new name to apply to the folder.</param>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.SetFolderPermission(DotNetNuke.Services.FileSystem.IFolderInfo,System.Int32,System.Int32)">
            <summary>
            Sets specific folder permissions for the given role to the given folder.        
            </summary>
            <param name="folder">The folder to set permission to</param>
            <param name="permissionId">The id of the permission to assign</param>
            <param name="roleId">The role to assign the permission to</param>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.SetFolderPermission(DotNetNuke.Services.FileSystem.IFolderInfo,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets specific folder permissions for the given role/user to the given folder.
            </summary>
            <param name="folder">The folder to set permission to</param>
            <param name="permissionId">The id of the permission to assign</param>
            <param name="roleId">The role to assign the permission to</param>
            <param name="userId">The user to assign the permission to</param>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.SetFolderPermissions(DotNetNuke.Services.FileSystem.IFolderInfo,System.Int32)">
            <summary>
            Sets folder permissions for administrator role to the given folder.
            </summary>
            <param name="folder">The folder to set permission to</param>
            <param name="administratorRoleId">The administrator role id to assign the permission to</param>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.Synchronize(System.Int32)">
            <summary>
            Synchronizes the entire folder tree for the specified portal.
            </summary>
            <param name="portalId">The portal identifier.</param>
            <returns>The number of folder collisions.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.Synchronize(System.Int32,System.String)">
            <summary>
            Synchronizes the specified folder, its files and its subfolders.
            </summary>
            <param name="portalId">The portal identifier.</param>
            <param name="relativePath">The relative path of the folder.</param>
            <returns>The number of folder collisions.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.Synchronize(System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Synchronizes the specified folder, its files and, optionally, its subfolders.
            </summary>
            <param name="portalId">The portal identifier.</param>
            <param name="relativePath">The relative path of the folder.</param>
            <param name="isRecursive">Indicates if the synchronization has to be recursive.</param>
            <param name="syncFiles">Indicates if files need to be synchronized.</param>
            <returns>The number of folder collisions.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.IFolderManager.UpdateFolder(DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>
            Updates metadata of the specified folder.
            </summary>
            <param name="folder">The folder to update.</param>
            <returns>The updated folder</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.DatabaseFolderProvider.ClearFileContent(System.Int32)">
            <summary>
            Clears the content of the file in the database.
            </summary>
            <param name="fileId">The file identifier.</param>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.DatabaseFolderProvider.UpdateFileContent(System.Int32,System.IO.Stream)">
            <summary>
            Updates the content of the file in the database.
            </summary>
            <param name="fileId">The file identifier.</param>
            <param name="content">The new content.</param>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.DatabaseFolderProvider.UpdateFileContent(System.Int32,System.Byte[])">
            <summary>
            Updates the content of the file in the database.
            </summary>
            <param name="fileId">The file identifier.</param>
            <param name="content">The new content.</param>
        </member>
        <member name="T:DotNetNuke.Services.FileSystem.FileInfo">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Class	 : FileInfo
            
            -----------------------------------------------------------------------------
            <summary>
              Represents the File object and holds the Properties of that object
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.FileInfo.Title">
            <summary>
            Gets or sets a metadata field with an optional title associated to the file
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.FileInfo.StartDate">
            <summary>
            Gets or sets the date on which the file starts to be published
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.FileInfo.EndDate">
            <summary>
            Gets or sets the date on which the file ends to be published
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.FileInfo.EnablePublishPeriod">
            <summary>
            Gets or sets a value indicating whether publish period is enabled for the file
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.FileInfo.PublishedVersion">
            <summary>
            Gets or sets the published version number of the file
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.FileInfo.HasBeenPublished">
            <summary>
            Gets a flag which says whether the file has ever been published
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.FileInfo.IsEnabled">
            <summary>
            Gets a value indicating whether the file is enabled,
            considering if the publish period is active and if the current date is within the publish period
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.FileInfo.ContentItemID">
            <summary>
            Gets or sets a reference to ContentItem, to use in Workflows
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.FileSystem.FileManager">
            <summary>
            Exposes methods to manage files.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.RotateFlipImage(System.IO.Stream@)">
            <summary>
            Rotate/Flip the image as per the metadata and reset the metadata.
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.AddFile(DotNetNuke.Services.FileSystem.IFolderInfo,System.String,System.IO.Stream)">
            <summary>
            Adds a file to the specified folder.
            </summary>
            <param name="folder">The folder where to add the file.</param>
            <param name="fileName">The name of the file.</param>
            <param name="fileContent">The content of the file.</param>
            <returns>A <see cref="T:DotNetNuke.Services.FileSystem.IFileInfo">IFileInfo</see> as specified by the parameters.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.AddFile(DotNetNuke.Services.FileSystem.IFolderInfo,System.String,System.IO.Stream,System.Boolean)">
            <summary>
            Adds a file to the specified folder.
            </summary>
            <param name="folder">The folder where to add the file.</param>
            <param name="fileName">The name of the file.</param>
            <param name="fileContent">The content of the file.</param>
            <param name="overwrite">Indicates if the file has to be over-written if it exits.</param>
            <returns>A <see cref="T:DotNetNuke.Services.FileSystem.IFileInfo">IFileInfo</see> as specified by the parameters.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.AddFile(DotNetNuke.Services.FileSystem.IFolderInfo,System.String,System.IO.Stream,System.Boolean,System.Boolean,System.String)">
            <summary>
            Adds a file to the specified folder.
            </summary>
            <param name="folder">The folder where to add the file.</param>
            <param name="fileName">The name of the file.</param>
            <param name="fileContent">The content of the file.</param>
            <param name="overwrite">Indicates if the file has to be over-written if it exists.</param>
            <param name="checkPermissions">Indicates if permissions have to be met.</param>
            <param name="contentType">The content type of the file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when folder, fileName or fileContent are null.</exception>
            <exception cref="T:DotNetNuke.Services.FileSystem.FolderProviderException">Thrown when the underlying system throw an exception.</exception>
            <exception cref="T:DotNetNuke.Services.FileSystem.InvalidFileExtensionException">Thrown when the extension of the specified file is not allowed.</exception>
            <exception cref="T:DotNetNuke.Services.FileSystem.NoSpaceAvailableException">Thrown when the portal has no space available to store the specified file.</exception>
            <exception cref="T:DotNetNuke.Services.FileSystem.PermissionsNotMetException">Thrown when permissions are not met.</exception>
            <returns>A <see cref="T:DotNetNuke.Services.FileSystem.IFileInfo">IFileInfo</see> as specified by the parameters.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.AddFile(DotNetNuke.Services.FileSystem.IFolderInfo,System.String,System.IO.Stream,System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
            Adds a file to the specified folder.
            </summary>
            <param name="folder">The folder where to add the file.</param>
            <param name="fileName">The name of the file.</param>
            <param name="fileContent">The content of the file.</param>
            <param name="overwrite">Indicates if the file has to be over-written if it exists.</param>
            <param name="checkPermissions">Indicates if permissions have to be met.</param>
            <param name="contentType">The content type of the file.</param>
            <param name="createdByUserID">ID of the user that creates the file</param>
            <exception cref="T:System.ArgumentNullException">Thrown when folder, fileName or fileContent are null.</exception>
            <exception cref="T:DotNetNuke.Services.FileSystem.FolderProviderException">Thrown when the underlying system throw an exception.</exception>
            <exception cref="T:DotNetNuke.Services.FileSystem.InvalidFileExtensionException">Thrown when the extension of the specified file is not allowed.</exception>
            <exception cref="T:DotNetNuke.Services.FileSystem.NoSpaceAvailableException">Thrown when the portal has no space available to store the specified file.</exception>
            <exception cref="T:DotNetNuke.Services.FileSystem.PermissionsNotMetException">Thrown when permissions are not met.</exception>
            <returns>A <see cref="T:DotNetNuke.Services.FileSystem.IFileInfo">IFileInfo</see> as specified by the parameters.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.AddFile(DotNetNuke.Services.FileSystem.IFolderInfo,System.String,System.IO.Stream,System.Boolean,System.Boolean,System.Boolean,System.String,System.Int32)">
            <summary>
            Adds a file to the specified folder.
            </summary>
            <param name="folder">The folder where to add the file.</param>
            <param name="fileName">The name of the file.</param>
            <param name="fileContent">The content of the file.</param>
            <param name="overwrite">Indicates if the file has to be over-written if it exists.</param>
            <param name="checkPermissions">Indicates if permissions have to be met.</param>
            <param name="ignoreWhiteList">Indicates whether the whitelist should be ignored</param>
            <param name="contentType">The content type of the file.</param>
            <param name="createdByUserID">ID of the user that creates the file</param>
            <exception cref="T:System.ArgumentNullException">Thrown when folder, fileName or fileContent are null.</exception>
            <exception cref="T:DotNetNuke.Services.FileSystem.FolderProviderException">Thrown when the underlying system throw an exception.</exception>
            <exception cref="T:DotNetNuke.Services.FileSystem.InvalidFileExtensionException">Thrown when the extension of the specified file is not allowed.</exception>
            <exception cref="T:DotNetNuke.Services.FileSystem.NoSpaceAvailableException">Thrown when the portal has no space available to store the specified file.</exception>
            <exception cref="T:DotNetNuke.Services.FileSystem.PermissionsNotMetException">Thrown when permissions are not met.</exception>
            <returns>A <see cref="T:DotNetNuke.Services.FileSystem.IFileInfo">IFileInfo</see> as specified by the parameters.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.CopyFile(DotNetNuke.Services.FileSystem.IFileInfo,DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>
            Copies the specified file into the specified folder.
            </summary>
            <param name="file">The file to copy.</param>
            <param name="destinationFolder">The folder where to copy the file to.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when file or destinationFolder are null.</exception>
            <returns>A <see cref="T:DotNetNuke.Services.FileSystem.IFileInfo">IFileInfo</see> with the information of the copied file.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.DeleteFile(DotNetNuke.Services.FileSystem.IFileInfo)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="file">The file to delete.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when file is null.</exception>
            <exception cref="T:DotNetNuke.Services.FileSystem.FolderProviderException">Thrown when the underlying system throw an exception.</exception>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.DeleteFiles(System.Collections.Generic.IEnumerable{DotNetNuke.Services.FileSystem.IFileInfo})">
            <summary>
            Deletes the specified files.
            </summary>
            <param name="files">The files to delete.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when files is null.</exception>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.FileExists(DotNetNuke.Services.FileSystem.IFolderInfo,System.String)">
            <summary>
            Checks the existence of the specified file in the specified folder.
            </summary>
            <param name="folder">The folder where to check the existence of the file.</param>
            <param name="fileName">The file name to check the existence of.</param>
            <returns>A bool value indicating whether the file exists or not in the specified folder.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when folder is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when fileName is null or empty.</exception>
            <exception cref="T:DotNetNuke.Services.FileSystem.FolderProviderException">Thrown when the underlying system throw an exception.</exception>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.FileExists(DotNetNuke.Services.FileSystem.IFolderInfo,System.String,System.Boolean)">
            <summary>
            Checks the existence of the specified file in the specified folder.
            </summary>
            <param name="folder">The folder where to check the existence of the file.</param>
            <param name="fileName">The file name to check the existence of.</param>
            <param name="retrieveUnpublishedFiles">Indicates if the file is retrieved from All files or from Published files</param>
            <returns>A bool value indicating whether the file exists or not in the specified folder.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when folder is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when fileName is null or empty.</exception>
            <exception cref="T:DotNetNuke.Services.FileSystem.FolderProviderException">Thrown when the underlying system throw an exception.</exception>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.GetContentType(System.String)">
            <summary>
            Gets the Content Type for the specified file extension.
            </summary>
            <param name="extension">The file extension.</param>
            <returns>The Content Type for the specified extension.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.GetFile(System.Int32)">
            <summary>
            Gets the file metadata for the specified file.
            </summary>
            <param name="fileID">The file identifier.</param>
            <returns>The <see cref="T:DotNetNuke.Services.FileSystem.IFileInfo">IFileInfo</see> object with the metadata of the specified file.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.GetFile(System.Int32,System.Boolean)">
            <summary>
            Gets the file metadata for the specified file.
            </summary>
            <param name="fileID">The file identifier.</param>
            <param name="retrieveUnpublishedFiles">Indicates if the file is retrieved from All files or from Published files</param>
            <returns>The <see cref="T:DotNetNuke.Services.FileSystem.IFileInfo">IFileInfo</see> object with the metadata of the specified file.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.GetFile(DotNetNuke.Services.FileSystem.IFolderInfo,System.String)">
            <summary>
            Gets the file metadata for the specified file.
            </summary>
            <param name="folder">The folder where the file is stored.</param>
            <param name="fileName">The name of the file.</param>
            <returns>The <see cref="T:DotNetNuke.Services.FileSystem.IFileInfo">IFileInfo</see> object with the metadata of the specified file.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.GetFile(DotNetNuke.Services.FileSystem.IFolderInfo,System.String,System.Boolean)">
            <summary>
            Gets the file metadata for the specified file.
            </summary>
            <param name="folder">The folder where the file is stored.</param>
            <param name="fileName">The name of the file.</param>
            <param name="retrieveUnpublishedFiles">Indicates if the file is retrieved from All files or from Published files</param>
            <returns>The <see cref="T:DotNetNuke.Services.FileSystem.IFileInfo">IFileInfo</see> object with the metadata of the specified file.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.GetFile(System.Int32,System.String)">
            <summary>
            Gets the file metadata for the specified file.
            </summary>
            <param name="portalId">The portal ID or Null.NullInteger for the Host</param>
            <param name="relativePath">Relative path to the file.</param>
            <remarks>Host and portal settings commonly return a relative path to a file.  This method uses that relative path to fetch file metadata.</remarks>
            <returns>The <see cref="T:DotNetNuke.Services.FileSystem.IFileInfo">IFileInfo</see> object with the metadata of the specified file.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.GetFile(System.Int32,System.String,System.Boolean)">
            <summary>
            Gets the file metadata for the specified file.
            </summary>
            <param name="portalId">The portal ID or Null.NullInteger for the Host</param>
            <param name="relativePath">Relative path to the file.</param>
            <param name="retrieveUnpublishedFiles">Indicates if the file is retrieved from All files or from Published files</param>
            <remarks>Host and portal settings commonly return a relative path to a file.  This method uses that relative path to fetch file metadata.</remarks>
            <returns>The <see cref="T:DotNetNuke.Services.FileSystem.IFileInfo">IFileInfo</see> object with the metadata of the specified file.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.GetFileContent(DotNetNuke.Services.FileSystem.IFileInfo)">
            <summary>
            Gets the content of the specified file.
            </summary>
            <param name="file">The file to get the content from.</param>
            <returns>A stream with the content of the file.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when file is null.</exception>
            <exception cref="T:DotNetNuke.Services.FileSystem.FolderProviderException">Thrown when the underlying system throw an exception.</exception>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.GetSeekableStream(System.IO.Stream)">
            <summary>
            Gets a seekable Stream based on the specified non-seekable Stream.
            </summary>
            <param name="stream">A non-seekable Stream.</param>
            <returns>A seekable Stream.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.GetUrl(DotNetNuke.Services.FileSystem.IFileInfo)">
            <summary>
            Gets the direct Url to the file.
            </summary>
            <param name="file">The file to get the Url.</param>
            <returns>The direct Url to the file.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when file is null.</exception>
            <exception cref="T:DotNetNuke.Services.FileSystem.FolderProviderException">Thrown when the underlying system throw an exception.</exception>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.IsImageFile(DotNetNuke.Services.FileSystem.IFileInfo)">
            <summary>
            Gets a flag that dertermines if the file is an Image
            </summary>
            <param name="file">The file to test.</param>
            <returns>The flag as a boolean value.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.MoveFile(DotNetNuke.Services.FileSystem.IFileInfo,DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>
            Moves the specified file into the specified folder.
            </summary>
            <param name="file">The file to move.</param>
            <param name="destinationFolder">The folder where to move the file to.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when file or destinationFolder are null.</exception>
            <exception cref="T:DotNetNuke.Services.FileSystem.FolderProviderException">Thrown when the underlying system throw an exception.</exception>
            <exception cref="T:DotNetNuke.Services.FileSystem.InvalidFileExtensionException">Thrown when the extension of the specified file is not allowed.</exception>
            <exception cref="T:DotNetNuke.Services.FileSystem.NoSpaceAvailableException">Thrown when the portal has no space available to store the specified file.</exception>
            <exception cref="T:DotNetNuke.Services.FileSystem.PermissionsNotMetException">Thrown when permissions are not met.</exception>
            <returns>An <see cref="T:DotNetNuke.Services.FileSystem.IFileInfo">IFileInfo</see> with the information of the moved file.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.RenameFile(DotNetNuke.Services.FileSystem.IFileInfo,System.String)">
            <summary>
            Renames the specified file.
            </summary>
            <param name="file">The file to rename</param>
            <param name="newFileName">The new filename to assign to the file.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when file is null.</exception>
            <exception cref="T:DotNetNuke.Services.FileSystem.FileAlreadyExistsException">Thrown when the folder already contains a file with the same name.</exception>
            <returns>An <see cref="T:DotNetNuke.Services.FileSystem.IFileInfo">IFileInfo</see> with the information of the renamed file.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.SetAttributes(DotNetNuke.Services.FileSystem.IFileInfo,System.IO.FileAttributes)">
            <summary>
            Sets the specified FileAttributes of the file.
            </summary>
            <param name="file">The file.</param>
            <param name="fileAttributes">The file attributes to add.</param>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.UnzipFile(DotNetNuke.Services.FileSystem.IFileInfo)">
            <summary>
            Extracts the files and folders contained in the specified zip file to the folder where the file belongs.
            </summary>
            <param name="file">The file to unzip.</param>
            <returns>Total files count in the zip file.</returns>
            <exception cref="T:System.ArgumentException">Thrown when file is not a zip compressed file.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when file or destination folder are null.</exception>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.UnzipFile(DotNetNuke.Services.FileSystem.IFileInfo,DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>
            Extracts the files and folders contained in the specified zip file to the specified folder.
            </summary>
            <param name="file">The file to unzip.</param>
            <param name="destinationFolder">The folder to unzip to.</param>
            <returns>Total files count in the zip file.</returns>
            <exception cref="T:System.ArgumentException">Thrown when file is not a zip compressed file.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when file or destination folder are null.</exception>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.UnzipFile(DotNetNuke.Services.FileSystem.IFileInfo,DotNetNuke.Services.FileSystem.IFolderInfo,System.Collections.Generic.IList{System.String})">
            <summary>
            Extracts the files and folders contained in the specified zip file to the specified folder.
            </summary>
            <param name="file">The file to unzip.</param>
            <param name="destinationFolder">The folder to unzip to.</param>
            <param name="invalidFiles">Files which can't exact.</param>
            <returns>Total files count in the zip file.</returns>
            <exception cref="T:System.ArgumentException">Thrown when file is not a zip compressed file.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when file or destination folder are null.</exception>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.UpdateFile(DotNetNuke.Services.FileSystem.IFileInfo)">
            <summary>
            Updates the metadata of the specified file.
            </summary>
            <param name="file">The file to update.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when file is null.</exception>
            <exception cref="T:DotNetNuke.Services.FileSystem.InvalidMetadataValuesException">Thrown when the file metadata are not valid.</exception>
            <returns>A <see cref="T:DotNetNuke.Services.FileSystem.IFileInfo">IFileInfo</see> as the updated file.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.UpdateFile(DotNetNuke.Services.FileSystem.IFileInfo,System.IO.Stream)">
            <summary>
            Regenerates the hash and updates the metadata of the specified file.
            </summary>
            <param name="file">The file to update.</param>
            <param name="fileContent">Stream used to regenerate the hash.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when file is null.</exception>
            <returns>A <see cref="T:DotNetNuke.Services.FileSystem.IFileInfo">IFileInfo</see> as the updated file.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.WriteFile(DotNetNuke.Services.FileSystem.IFileInfo,System.IO.Stream)">
            <summary>
            Writes the content of the specified file into the specified stream.
            </summary>
            <param name="file">The file to write into the stream.</param>
            <param name="stream">The stream to write to.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when file or stream are null.</exception>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.WriteFileToResponse(DotNetNuke.Services.FileSystem.IFileInfo,DotNetNuke.Services.FileSystem.ContentDisposition)">
            <summary>
            Downloads the specified file.
            </summary>
            <param name="file">The file to download.</param>
            <param name="contentDisposition">Indicates how to display the document once downloaded.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when file is null.</exception>
            <exception cref="T:DotNetNuke.Services.FileSystem.PermissionsNotMetException">Thrown when permissions are not met.</exception>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.MoveVersions(DotNetNuke.Services.FileSystem.IFileInfo,DotNetNuke.Services.FileSystem.IFolderInfo,DotNetNuke.Services.FileSystem.FolderProvider,DotNetNuke.Services.FileSystem.FolderProvider)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.AutoSyncFile(DotNetNuke.Services.FileSystem.IFileInfo)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.ExtractFiles(DotNetNuke.Services.FileSystem.IFileInfo,DotNetNuke.Services.FileSystem.IFolderInfo,System.Collections.Generic.IList{System.String})">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.EnsureZipFolder(System.String,DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.GetAutoDeleteFileStream(System.String)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.GetCurrentUserID">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.GetHash(System.IO.Stream)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
            <returns>SHA1 hash of the file</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.GetHash(DotNetNuke.Services.FileSystem.IFileInfo)">
            <summary>
            Gets the hash of a file
            </summary>
            <param name="fileInfo">The file info.</param>
            <returns>SHA1 hash of the file</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.GetHostMapPath">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.GetImageFromStream(System.IO.Stream)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.GetPerformanceSetting">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.IsAllowedExtension(System.String)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.IsValidFilename(System.String)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.IsFileAutoSyncEnabled">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.WriteFileToHttpContext(DotNetNuke.Services.FileSystem.IFileInfo,DotNetNuke.Services.FileSystem.ContentDisposition)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.WriteStream(System.Web.HttpResponse,System.IO.Stream)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.UpdateFile(DotNetNuke.Services.FileSystem.IFileInfo,System.Boolean)">
            <summary>
            Update file info to database.
            </summary>
            <param name="file">File info.</param>
            <param name="updateLazyload">Whether to update the lazy load properties: Width, Height, Sha1Hash.</param>        
            <returns>The file info</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.UpdateFile(DotNetNuke.Services.FileSystem.IFileInfo,System.Boolean,System.Boolean)">
            <summary>
            Update file info to database.
            </summary>
            <param name="file">File info.</param>
            <param name="updateLazyload">Whether to update the lazy load properties: Width, Height, Sha1Hash.</param>
            <param name="fireEvent">Whether to fire File events or not</param>
            <returns>The file info</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileManager.ClearFolderCache(System.Int32)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FileServerHandler.ProcessRequest(System.Web.HttpContext)">
            -----------------------------------------------------------------------------
            <summary>
            This handler handles requests for LinkClick.aspx, but only those specifc
            to file serving
            </summary>
            <param name="context">System.Web.HttpContext)</param>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.FileSystem.FolderController">
             -----------------------------------------------------------------------------
             Project	 : DotNetNuke
             Class	 : FolderController
            
             -----------------------------------------------------------------------------
             <summary>
             Business Class that provides access to the Database for the functions within the calling classes
             Instantiates the instance of the DataProvider and returns the object, if any
             </summary>
             <remarks>
             </remarks>
             -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.FolderInfo.HasChildren">
            <summary>
            Gets a value indicating whether the folder has any child subfolder
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.FolderInfo.IsVersioned">
            <summary>
            Gets or sets a value indicating whether file versions are active for the folder
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.FolderInfo.MappedPath">
            <summary>
            Gets or sets the path this folder is mapped on its provider file system
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.FolderInfo.WorkflowID">
            <summary>
            Gets or sets a reference to the active Workflow for the folder
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.FolderInfo.ParentID">
            <summary>
            Gets or sets a reference to the parent folder
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderInfo.Fill(System.Data.IDataReader)">
            -----------------------------------------------------------------------------
            <summary>
              Fills a FolderInfo from a Data Reader
            </summary>
            <param name = "dr">The Data Reader to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.FolderInfo.KeyID">
            -----------------------------------------------------------------------------
            <summary>
              Gets and sets the Key ID
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.FileSystem.FolderManager">
            <summary>
            Exposes methods to manage folders.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.AddFolder(DotNetNuke.Services.FileSystem.FolderMappingInfo,System.String)">
            <summary>
            Creates a new folder using the provided folder path.
            </summary>
            <param name="folderMapping">The folder mapping to use.</param>
            <param name="folderPath">The path of the new folder.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when folderPath or folderMapping are null.</exception>
            <exception cref="T:DotNetNuke.Services.FileSystem.FolderProviderException">Thrown when the underlying system throw an exception.</exception>
            <returns>The added folder.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.AddFolder(DotNetNuke.Services.FileSystem.FolderMappingInfo,System.String,System.String)">
            <summary>
            Creates a new folder using the provided folder path and mapping.
            </summary>
            <param name="folderMapping">The folder mapping to use.</param>
            <param name="folderPath">The path of the new folder.</param>
            <param name="mappedPath">The mapped path of the new folder.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when folderPath or folderMapping are null.</exception>
            <exception cref="T:DotNetNuke.Services.FileSystem.FolderProviderException">Thrown when the underlying system throw an exception.</exception>
            <returns>The added folder.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.AddFolder(System.Int32,System.String)">
            <summary>
            Creates a new folder in the given portal using the provided folder path.
            The same mapping than the parent folder will be used to create this folder. So this method have to be used only to create subfolders.
            </summary>
            <param name="portalId">The portal identifier.</param>
            <param name="folderPath">The path of the new folder.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when folderPath is null or empty.</exception>
            <returns>The added folder.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.DeleteFolder(DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>
            Deletes the specified folder.
            </summary>
            <param name="folder">The folder to delete.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when folder is null.</exception>
            <exception cref="T:DotNetNuke.Services.FileSystem.FolderProviderException">Thrown when the underlying system throw an exception.</exception>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.DeleteFolder(System.Int32)">
            <summary>
            Deletes the specified folder.
            </summary>
            <param name="folderId">The folder identifier.</param>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.DeleteFolder(DotNetNuke.Services.FileSystem.IFolderInfo,System.Collections.Generic.ICollection{DotNetNuke.Services.FileSystem.IFolderInfo})">
            <summary>
            Deletes the specified folder and all its content
            </summary>
            <param name="folder">The folder to delete</param>
            <param name="notDeletedSubfolders">A collection with all not deleted subfolders after processiong the action</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.FolderExists(System.Int32,System.String)">
            <summary>
            Checks the existence of the specified folder in the specified portal.
            </summary>
            <param name="portalId">The portal where to check the existence of the folder.</param>
            <param name="folderPath">The path of folder to check the existence of.</param>
            <returns>A bool value indicating whether the folder exists or not in the specified portal.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.GetFiles(DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>
            Gets the files contained in the specified folder.
            </summary>
            <param name="folder">The folder from which to retrieve the files.</param>
            <returns>The list of files contained in the specified folder.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.GetFiles(DotNetNuke.Services.FileSystem.IFolderInfo,System.Boolean)">
            <summary>
            Gets the files contained in the specified folder.
            </summary>
            <param name="folder">The folder from which to retrieve the files.</param>
            <param name="recursive">Whether or not to include all the subfolders</param>
            <returns>The list of files contained in the specified folder.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.GetFiles(DotNetNuke.Services.FileSystem.IFolderInfo,System.Boolean,System.Boolean)">
            <summary>
            Gets the files contained in the specified folder.
            </summary>
            <param name="folder">The folder from which to retrieve the files.</param>
            <param name="recursive">Whether or not to include all the subfolders</param>
            <param name="retrieveUnpublishedFiles">Indicates if the file is retrieved from All files or from Published files</param>
            <returns>The list of files contained in the specified folder.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.GetFileSystemFolders(DotNetNuke.Entities.Users.UserInfo,System.String)">
            <summary>
            Gets the list of Standard folders the specified user has the provided permissions.
            </summary>
            <param name="user">The user info</param>
            <param name="permissions">The permissions the folders have to met.</param>
            <returns>The list of Standard folders the specified user has the provided permissions.</returns>
            <remarks>This method is used to support legacy behaviours and situations where we know the file/folder is in the file system.</remarks>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.GetFolder(System.Int32)">
            <summary>
            Gets a folder entity by providing a folder identifier.
            </summary>
            <param name="folderId">The identifier of the folder.</param>
            <returns>The folder entity or null if the folder cannot be located.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.GetFolder(System.Int32,System.String)">
            <summary>
            Gets a folder entity by providing a portal identifier and folder path.
            </summary>
            <param name="portalId">The portal where the folder exists.</param>
            <param name="folderPath">The path of the folder.</param>
            <returns>The folder entity or null if the folder cannot be located.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.GetFolder(System.Guid)">
            <summary>
            Gets a folder entity by providing its unique id.
            </summary>
            <param name="uniqueId">The unique id of the folder.</param>
            <returns>The folder entity or null if the folder cannot be located.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.GetFolders(DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>
            Gets the list of subfolders for the specified folder.
            </summary>
            <param name="parentFolder">The folder to get the list of subfolders.</param>
            <returns>The list of subfolders for the specified folder.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when parentFolder is null.</exception>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.GetFolders(System.Int32,System.Boolean)">
            <summary>
            Gets the sorted list of folders of the provided portal.
            </summary>
            <param name="portalId">The portal identifier.</param>
            <param name="useCache">True = Read from Cache, False = Read from DB </param>
            <returns>The sorted list of folders of the provided portal.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.GetFolders(System.Int32)">
            <summary>
            Gets the sorted list of folders of the provided portal.
            </summary>
            <param name="portalId">The portal identifier.</param>
            <returns>The sorted list of folders of the provided portal.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.GetFolders(System.Int32,System.String,System.Int32)">
            <summary>
            Gets the sorted list of folders that match the provided permissions in the specified portal.
            </summary>
            <param name="portalId">The portal identifier.</param>
            <param name="permissions">The permissions to match.</param>
            <param name="userId">The user identifier to be used to check permissions.</param>
            <returns>The list of folders that match the provided permissions in the specified portal.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.GetFolders(DotNetNuke.Entities.Users.UserInfo)">
            <summary>
            Gets the list of folders the specified user has read permissions
            </summary>
            <param name="user">The user info</param>
            <returns>The list of folders the specified user has read permissions.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.GetFolders(DotNetNuke.Entities.Users.UserInfo,System.String)">
            <summary>
            Gets the list of folders the specified user has the provided permissions
            </summary>
            <param name="user">The user info</param>
            <param name="permissions">The permissions the folders have to met.</param>
            <returns>The list of folders the specified user has the provided permissions.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.RenameFolder(DotNetNuke.Services.FileSystem.IFolderInfo,System.String)">
            <summary>
            Renames the specified folder by setting the new provided folder name.
            </summary>
            <param name="folder">The folder to rename.</param>
            <param name="newFolderName">The new name to apply to the folder.</param>
            <exception cref="T:System.ArgumentException">Thrown when newFolderName is null or empty.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when folder is null.</exception>
            <exception cref="T:DotNetNuke.Services.FileSystem.FolderProviderException">Thrown when the underlying system throw an exception.</exception>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.SearchFiles(DotNetNuke.Services.FileSystem.IFolderInfo,System.String,System.Boolean)">
            <summary>
            Search the files contained in the specified folder, for a matching pattern
            </summary>
            <param name="folder">The folder from which to retrieve the files.</param>
            <param name="pattern">The patter to search for</param>
            <returns>The list of files contained in the specified folder.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.Synchronize(System.Int32)">
            <summary>
            Synchronizes the entire folder tree for the specified portal.
            </summary>
            <param name="portalId">The portal identifier.</param>
            <returns>The number of folder collisions.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.Synchronize(System.Int32,System.String)">
            <summary>
            Syncrhonizes the specified folder, its files and its subfolders.
            </summary>
            <param name="portalId">The portal identifier.</param>
            <param name="relativePath">The relative path of the folder.</param>
            <returns>The number of folder collisions.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.Synchronize(System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Syncrhonizes the specified folder, its files and, optionally, its subfolders.
            </summary>
            <param name="portalId">The portal identifier.</param>
            <param name="relativePath">The relative path of the folder.</param>
            <param name="isRecursive">Indicates if the synchronization has to be recursive.</param>
            <param name="syncFiles">Indicates if files need to be synchronized.</param>
            <exception cref="T:DotNetNuke.Services.FileSystem.NoNetworkAvailableException">Thrown when there are folder mappings requiring network connection but there is no network available.</exception>
            <returns>The number of folder collisions.</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.UpdateFolder(DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>
            Updates metadata of the specified folder.
            </summary>
            <param name="folder">The folder to update.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when folder is null.</exception>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.AddAllUserReadPermission(DotNetNuke.Services.FileSystem.IFolderInfo,DotNetNuke.Security.Permissions.PermissionInfo)">
            <summary>
            Adds read permissions for all users to the specified folder.
            </summary>
            <param name="folder">The folder to add the permission to.</param>
            <param name="permission">Used as base class for FolderPermissionInfo when there is no read permission already defined.</param>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.CopyParentFolderPermissions(DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>
            Sets folder permissions to the given folder by copying parent folder permissions.
            </summary>
            <param name="folder">The folder to copy permissions to</param>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.SetFolderPermission(DotNetNuke.Services.FileSystem.IFolderInfo,System.Int32,System.Int32)">
            <summary>
            Sets specific folder permissions for the given role to the given folder.        
            </summary>
            <param name="folder">The folder to set permission to</param>
            <param name="permissionId">The id of the permission to assign</param>
            <param name="roleId">The role to assign the permission to</param>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.SetFolderPermission(DotNetNuke.Services.FileSystem.IFolderInfo,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets specific folder permissions for the given role/user to the given folder.
            </summary>
            <param name="folder">The folder to set permission to</param>
            <param name="permissionId">The id of the permission to assign</param>
            <param name="roleId">The role to assign the permission to</param>
            <param name="userId">The user to assign the permission to</param>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.SetFolderPermissions(DotNetNuke.Services.FileSystem.IFolderInfo,System.Int32)">
            <summary>
            Sets folder permissions for administrator role to the given folder.
            </summary>
            <param name="folder">The folder to set permission to</param>
            <param name="administratorRoleId">The administrator role id to assign the permission to</param>  
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.DeleteFilesFromCache(System.Int32,System.String)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.AddUserFolder(DotNetNuke.Entities.Users.UserInfo)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.AreThereFolderMappingsRequiringNetworkConnectivity(System.Int32,System.String,System.Boolean)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.ClearFolderProviderCachedLists(System.Int32)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.ClearFolderCache(System.Int32)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.CreateFolderInDatabase(System.Int32,System.String,System.Int32,System.String)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.CreateFolderInFileSystem(System.String)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.DeleteFolder(System.Int32,System.String)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.DeleteFoldersFromExternalStorageLocations(System.Collections.Generic.Dictionary{System.Int32,DotNetNuke.Services.FileSystem.FolderMappingInfo},System.Collections.Generic.IEnumerable{DotNetNuke.Services.FileSystem.IFolderInfo})">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.GetCurrentScriptTimeout">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.GetCurrentUserId">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.GetDatabaseFolders(System.Int32,System.String,System.Boolean)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.GetDatabaseFoldersRecursive(DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.GetFileSystemFolders(System.Int32,System.String,System.Boolean)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.GetFileSystemFoldersRecursive(System.Int32,System.String)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.GetFolderMapping(System.Collections.Generic.Dictionary{System.Int32,DotNetNuke.Services.FileSystem.FolderMappingInfo},System.Int32)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.GetFolderMappingFoldersRecursive(DotNetNuke.Services.FileSystem.FolderMappingInfo,DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.GetFoldersByPermissionSortedCallBack(DotNetNuke.Common.Utilities.CacheItemArgs)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.GetFoldersSortedCallBack(DotNetNuke.Common.Utilities.CacheItemArgs)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.GetMergedTree(System.Int32,System.String,System.Boolean)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.IsFolderMappingEditable(DotNetNuke.Services.FileSystem.FolderMappingInfo)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.IsMoveOperationValid(DotNetNuke.Services.FileSystem.IFolderInfo,DotNetNuke.Services.FileSystem.IFolderInfo,System.String)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.IsMoveOperationValid(DotNetNuke.Services.FileSystem.IFolderInfo,System.String)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.IsNetworkAvailable">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.MergeFolderLists(System.Collections.Generic.SortedList{System.String,DotNetNuke.Services.FileSystem.FolderManager.MergedTreeItem},System.Collections.Generic.SortedList{System.String,DotNetNuke.Services.FileSystem.FolderManager.MergedTreeItem})">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.MoveDirectory(System.String,System.String)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.MoveFolderWithinProvider(DotNetNuke.Services.FileSystem.IFolderInfo,DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.MoveFolderBetweenProviders(DotNetNuke.Services.FileSystem.IFolderInfo,System.String)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.OverwriteFolder(DotNetNuke.Services.FileSystem.IFolderInfo,DotNetNuke.Services.FileSystem.IFolderInfo,System.Collections.Generic.Dictionary{System.Int32,DotNetNuke.Services.FileSystem.FolderMappingInfo},System.Collections.Generic.SortedList{System.String,DotNetNuke.Services.FileSystem.IFolderInfo})">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.ProcessMergedTreeItemInAddMode(DotNetNuke.Services.FileSystem.FolderManager.MergedTreeItem,System.Int32)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.ProcessMergedTreeItemInDeleteMode(DotNetNuke.Services.FileSystem.FolderManager.MergedTreeItem,System.Int32)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.RemoveOrphanedFiles(DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.RenameFolderInFileSystem(DotNetNuke.Services.FileSystem.IFolderInfo,System.String)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.SaveFolderPermissions(DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.SetScriptTimeout(System.Int32)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.SynchronizeFiles(DotNetNuke.Services.FileSystem.FolderManager.MergedTreeItem,System.Int32)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.UpdateParentFolder(System.Int32,System.String)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.UpdateChildFolders(DotNetNuke.Services.FileSystem.IFolderInfo,System.String)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderManager.CanMoveBetweenFolderMappings(DotNetNuke.Services.FileSystem.FolderMappingInfo,DotNetNuke.Services.FileSystem.FolderMappingInfo)">
            <summary>This member is reserved for internal use and is not intended to be used directly from your code.</summary>
        </member>
        <member name="T:DotNetNuke.Services.FileSystem.FolderManager.MergedTreeItem">
            <summary>
            This class and its members are reserved for internal use and are not intended to be used in your code.
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.FileSystem.FolderManager.IgnoreCaseStringComparer">
            <summary>
            This class and its members are reserved for internal use and are not intended to be used in your code.
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.FileSystem.FolderManager.MoveFoldersInfo">
            <summary>
            This class and its members are reserved for internal use and are not intended to be used in your code.
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.FileSystem.FolderMappingInfo">
            <summary>
              Represents the FolderMapping object and holds the Properties of that object
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderMappingInfo.Fill(System.Data.IDataReader)">
            <summary>
              Fills a FolderInfo from a Data Reader
            </summary>
            <param name = "dr">The Data Reader to use</param>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.FolderMappingInfo.KeyID">
            <summary>
              Gets and sets the Key ID
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderMappingSettingsControlBase.LoadSettings(System.Collections.Hashtable)">
            <summary>
            Use this method to load the provider's concrete settings.
            </summary>
            <param name="folderMappingSettings">The Hashtable containing the folder mapping settings.</param>
            <example>
            public override void LoadSettings(Hashtable folderMappingSettings)
            {
                if (folderMappingSettings.ContainsKey("AccessKeyId"))
                {
                    tbSettingValue.Text = folderMappingSettings["SettingName"].ToString();
                }
            }
            </example>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderMappingSettingsControlBase.UpdateSettings(System.Int32)">
             <summary>
             Use this method to update the provider's concrete settings for the specified folder mapping.
             </summary>
             <param name="folderMappingID">The folder mapping identifier.</param>
             <remarks>
             Because this method is executed after adding / updating the folder mapping, if there are validation errors,
             please throw an exception, as can be seen in the provided example.
             </remarks>
             <example>
             public override void UpdateSettings(int folderMappingID)
             {
                 Page.Validate();
            
                 if (Page.IsValid)
                 {
                     var folderMappingController = FolderMappingController.Instance;
                     var folderMapping = folderMappingController.GetFolderMapping(folderMappingID);
            
                     folderMapping.FolderMappingSettings["SettingName"] = tbSettingValue.Text;
            
                     folderMappingController.UpdateFolderMapping(folderMapping);
                 }
                 else
                 {
                     throw new Exception();
                 }
             }
             </example>
        </member>
        <member name="T:DotNetNuke.Services.FileSystem.FolderProvider">
            <summary>
              Base class that provides common functionallity to work with files and folders.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderProvider.GetProviderList">
            <summary>
              Get the list of all the folder providers.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderProvider.Instance(System.String)">
            <summary>
              Gets an instance of a specific FolderProvider of a given name.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.FolderProvider.IsStorageSecure">
            <summary>
            Gets a value indicating if the provider ensures the files/folders it manages are secure from outside access.
            </summary>
            <remarks>
            Some providers (e.g. Standard) store their files/folders in a way that allows for anonymous access that bypasses DotNetNuke.
            These providers cannot guarantee that files are only accessed by authorized users and must return false.
            </remarks>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.FolderProvider.RequiresNetworkConnectivity">
            <summary>
            Gets a value indicating if the provider requires network connectivity to do its tasks.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.FolderProvider.SupportsMappedPaths">
            <summary>
            Indicates if the folder provider supports mapped paths when creating new folders
            </summary>
            <remarks>
            If this method is not overrided it returns false
            </remarks>        
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.FolderProvider.SupportsMoveFile">
            <summary>
            Gets a value indicating whether the provider supports the MoveFile method.  If a provider supports the MoveFile method, the
            folder manager does nt have to implement move by copying the file and then deleting the original.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.FolderProvider.SupportsMoveFolder">
            <summary>
            Gets a value indicating whether the provider supports the MoveFolder method.  If a provider supports the MoveFolder method, the
            folder manager does not have to implement move by copying the folder and then deleting the original.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderProvider.CopyFile(System.String,System.String,System.String,DotNetNuke.Services.FileSystem.FolderMappingInfo)">
            <summary>
            Copies the specified file to the destination folder.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderProvider.GetFileStream(DotNetNuke.Services.FileSystem.IFolderInfo,DotNetNuke.Services.FileSystem.IFileInfo,System.Int32)">
            <summary>
              Gets a file Stream of the specified file.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderProvider.GetSettingsControlVirtualPath">
            <summary>
              Gets the virtual path of the control file used to display and update specific folder mapping settings. By default, the control name is Settings.ascx.
            </summary>
            <returns>
              If the folder provider has special settings, this method returns the virtual path of the control that allows to display and set those settings.
            </returns>
            <remarks>
              The returned control must inherit from FolderMappingSettingsControlBase.
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderProvider.MoveFile(DotNetNuke.Services.FileSystem.IFileInfo,DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>
            Moves a file to a new folder
            </summary>
            <param name="file"></param>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderProvider.MoveFolder(System.String,System.String,DotNetNuke.Services.FileSystem.FolderMappingInfo)">
            <summary>
            Moves the folder and files at the specified folder path to the new folder path.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderProvider.GetEncryptedSetting(System.Collections.Hashtable,System.String)">
            <summary>
            Gets the decrypted value of an encrypted folder mapping setting
            </summary>
            <remarks>If the value is not set the method returns null</remarks>
            <param name="folderMappingSettings">Folder mapping settings</param>
            <param name="settingName">Setting name</param>
            <exception cref="T:System.ArgumentNullException">the input parameters of the method cannot be null</exception>
            <returns>decrypted value</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderProvider.AddFile(DotNetNuke.Services.FileSystem.IFolderInfo,System.String,System.IO.Stream)">
            <summary>
              Adds a new file to the specified folder.
            </summary>
            <remarks>
              Do not close content Stream.
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderProvider.AddFolder(System.String,DotNetNuke.Services.FileSystem.FolderMappingInfo)">
            <summary>
              Adds a new folder to a specified parent folder.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderProvider.DeleteFile(DotNetNuke.Services.FileSystem.IFileInfo)">
            <summary>
              Deletes the specified file.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderProvider.DeleteFolder(DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>
              Deletes the specified folder.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderProvider.FileExists(DotNetNuke.Services.FileSystem.IFolderInfo,System.String)">
            <summary>
              Checks the existence of the specified file in the underlying system.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderProvider.FolderExists(System.String,DotNetNuke.Services.FileSystem.FolderMappingInfo)">
            <summary>
              Checks the existence of the specified folder in the underlying system.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderProvider.GetFileAttributes(DotNetNuke.Services.FileSystem.IFileInfo)">
            <summary>
              Gets the file attributes of the specified file.
            </summary>
            <remarks>
              Because some Providers don't support file attributes, this methods returns a nullable type to allow them to return null.
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderProvider.GetFiles(DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>
              Gets the list of file names contained in the specified folder.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderProvider.GetFileSize(DotNetNuke.Services.FileSystem.IFileInfo)">
            <summary>
            Gets the file length.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderProvider.GetFileStream(DotNetNuke.Services.FileSystem.IFileInfo)">
            <summary>
              Gets a file Stream of the specified file.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderProvider.GetFileStream(DotNetNuke.Services.FileSystem.IFolderInfo,System.String)">
            <summary>
              Gets a file Stream of the specified file.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderProvider.GetFileUrl(DotNetNuke.Services.FileSystem.IFileInfo)">
            <summary>
            Gets the direct Url to the file.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderProvider.GetFolderProviderIconPath">
            <summary>
              Gets the URL of the image to display in FileManager tree.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderProvider.GetLastModificationTime(DotNetNuke.Services.FileSystem.IFileInfo)">
            <summary>
              Gets the time when the specified file was last modified.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderProvider.GetSubFolders(System.String,DotNetNuke.Services.FileSystem.FolderMappingInfo)">
            <summary>
              Gets the list of subfolders for the specified folder.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderProvider.IsInSync(DotNetNuke.Services.FileSystem.IFileInfo)">
            <summary>
              Indicates if the specified file is synchronized.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderProvider.RenameFile(DotNetNuke.Services.FileSystem.IFileInfo,System.String)">
            <summary>
              Renames the specified file using the new filename.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderProvider.RenameFolder(DotNetNuke.Services.FileSystem.IFolderInfo,System.String)">
            <summary>
              Renames the specified folder using the new foldername.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderProvider.SetFileAttributes(DotNetNuke.Services.FileSystem.IFileInfo,System.IO.FileAttributes)">
            <summary>
              Sets the specified attributes to the specified file.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderProvider.SupportsFileAttributes">
            <summary>
              Gets a value indicating if the underlying system supports file attributes.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderProvider.UpdateFile(DotNetNuke.Services.FileSystem.IFileInfo,System.IO.Stream)">
            <summary>
              Updates the content of the specified file. It creates it if it doesn't exist.
            </summary>
            <remarks>
              Do not close content Stream.
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.FolderProvider.UpdateFile(DotNetNuke.Services.FileSystem.IFolderInfo,System.String,System.IO.Stream)">
            <summary>
              Updates the content of the specified file. It creates it if it doesn't exist.
            </summary>
            <remarks>
              Do not close content Stream.
            </remarks>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.SecureFolderProvider.ProtectedExtension">
            <summary>
            Gets the file extension to use for protected files.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.SecureFolderProvider.IsStorageSecure">
            <summary>
            Gets a value indicating if the provider ensures the files/folders it manages are secure from outside access.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.FileSystem.StandardFolderProvider.RequiresNetworkConnectivity">
            <summary>
            Gets a value indicating if the provider requires network connectivity to do its tasks.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.StandardFolderProvider.GetActualPath(DotNetNuke.Services.FileSystem.FolderMappingInfo,System.String,System.String)">
            <summary>
            Get actual path to a file
            </summary>
            <param name="folderMapping">Folder Mapping of the folder</param>
            <param name="folderPath">Folder Path where the file is contained</param>
            <param name="fileName">Name of the file</param>
            <returns>A windows supported path to the file</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.StandardFolderProvider.GetActualPath(DotNetNuke.Services.FileSystem.IFileInfo)">
            <summary>
            Get actual path to an IFileInfo
            </summary>
            <param name="file">The file</param>
            <returns>A windows supported path to the file</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.StandardFolderProvider.GetActualPath(DotNetNuke.Services.FileSystem.IFolderInfo,System.String)">
            <summary>
            Get actual path to a file in specified folder
            </summary>
            <param name="folder">The folder that contains the file</param>
            <param name="fileName">The file name</param>
            <returns>A windows supported path to the file</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.StandardFolderProvider.GetActualPath(DotNetNuke.Services.FileSystem.FolderMappingInfo,System.String)">
            <summary>
            Get actual path to a folder in the specified folder mapping
            </summary>
            <param name="folderMapping">The folder mapping</param>
            <param name="folderPath">The folder path</param>
            <returns>A windows supported path to the folder</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.StandardFolderProvider.GetActualPath(DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>
            Get actual path to a folder
            </summary>
            <param name="folder">The folder</param>
            <returns>A windows supported path to the folder</returns>
        </member>
        <member name="M:DotNetNuke.Services.FileSystem.StandardFolderProvider.GetRelativePath(DotNetNuke.Services.FileSystem.FolderMappingInfo,System.String)">
            <summary>
            Get the path relative to the root of the FolderMapping
            </summary>
            <param name="folderMapping">Path is relative to this</param>
            <param name="path">The path</param>
            <returns>A relative path</returns>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.IPCount.GetVisitorIPAddress(System.Web.HttpContextBase)">
            <summary>
            method to get Client ip address
            </summary>
            <returns>IP Address of visitor</returns>
        </member>
        <member name="F:DotNetNuke.Services.GeneratedImage.DnnImageHandler.WhiteListFolderPaths">
            <summary>
            While list of server folders where the system allow the dnn image handler to 
            read to serve image files from it and its subfolders
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.GeneratedImage.FilterTransform.ImageBrightnessTransform">
            <summary>
            Brightness ImageTransform class
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.FilterTransform.ImageBrightnessTransform.Brightness">
            <summary>
            Sets the brightness value. Defaultvalue is 0. Range is -255 .. 255
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.FilterTransform.ImageBrightnessTransform.UniqueString">
            <summary>
            Provides an Unique String for this class
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.FilterTransform.ImageBrightnessTransform.ProcessImage(System.Drawing.Image)">
            <summary>
            Processes an input image applying a brightness image transformation
            </summary>
            <param name="image">Input image</param>
            <returns>Image result after image transformation</returns>
        </member>
        <member name="T:DotNetNuke.Services.GeneratedImage.FilterTransform.ImageContrastTransform">
            <summary>
            Constrast ImageTransform class
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.FilterTransform.ImageContrastTransform.Contrast">
            <summary>
            Sets the contrast value. Defaultvalue is 0. Range is -100 .. 100
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.FilterTransform.ImageContrastTransform.UniqueString">
            <summary>
            Provides an Unique String for this class
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.FilterTransform.ImageContrastTransform.ProcessImage(System.Drawing.Image)">
            <summary>
            Processes an input image applying a contrast image transformation
            </summary>
            <param name="image">Input image</param>
            <returns>Image result after image transformation</returns>
        </member>
        <member name="T:DotNetNuke.Services.GeneratedImage.FilterTransform.ImageGammaTransform">
            <summary>
            Gamma ImageTransform class
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.FilterTransform.ImageGammaTransform.Gamma">
            <summary>
            Sets the gamma value. Defaultvalue is 0. Range is 0.2 .. 5
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.FilterTransform.ImageGammaTransform.UniqueString">
            <summary>
            Provides an Unique String for this class
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.FilterTransform.ImageGammaTransform.ProcessImage(System.Drawing.Image)">
            <summary>
            Processes an input image applying a gamma image transformation
            </summary>
            <param name="image">Input image</param>
            <returns>Image result after image transformation</returns>
        </member>
        <member name="T:DotNetNuke.Services.GeneratedImage.FilterTransform.ImageGreyScaleTransform">
            <summary>
            Grey Scale ImageTransform class
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.FilterTransform.ImageGreyScaleTransform.ProcessImage(System.Drawing.Image)">
            <summary>
            Processes an input image applying a grey scale image transformation
            </summary>
            <param name="image">Input image</param>
            <returns>Image result after image transformation</returns>
        </member>
        <member name="T:DotNetNuke.Services.GeneratedImage.FilterTransform.ImageInvertTransform">
            <summary>
            Invert ImageTransform class
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.FilterTransform.ImageInvertTransform.ProcessImage(System.Drawing.Image)">
            <summary>
            Processes an input image applying an invert image transformation
            </summary>
            <param name="image">Input image</param>
            <returns>Image result after image transformation</returns>
        </member>
        <member name="T:DotNetNuke.Services.GeneratedImage.FilterTransform.ImageResizeTransform">
            <summary>
            Resize ImageTransform class
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.FilterTransform.ImageResizeTransform.Mode">
            <summary>
            Sets the resize mode. The default value is Fit.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.FilterTransform.ImageResizeTransform.Width">
            <summary>
            Sets the width of the resulting image
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.FilterTransform.ImageResizeTransform.MaxWidth">
            <summary>
            Sets the Max width of the resulting image
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.FilterTransform.ImageResizeTransform.Height">
            <summary>
            Sets the height of the resulting image
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.FilterTransform.ImageResizeTransform.MaxHeight">
            <summary>
            Sets the max height of the resulting image
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.FilterTransform.ImageResizeTransform.Border">
            <summary>
            Sets the border width of the resulting image
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.FilterTransform.ImageResizeTransform.BackColor">
            <summary>
            Sets the Backcolor 
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.FilterTransform.ImageResizeTransform.ProcessImage(System.Drawing.Image)">
            <summary>
            Processes an input image applying a resize image transformation
            </summary>
            <param name="image">Input image</param>
            <returns>Image result after image transformation</returns>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.FilterTransform.ImageResizeTransform.UniqueString">
            <summary>
            Provides an Unique String for this transformation
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.GeneratedImage.FilterTransform.ImageRotateFlipTransform">
            <summary>
            Rotation ImageTransform class
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.FilterTransform.ImageRotateFlipTransform.RotateFlip">
            <summary>
            Sets the type of rotation / flip . Defaultvalue is RotateNoneFlipNone
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.FilterTransform.ImageRotateFlipTransform.UniqueString">
            <summary>
            Provides an Unique String for this transformation
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.FilterTransform.ImageRotateFlipTransform.ProcessImage(System.Drawing.Image)">
            <summary>
            Processes an input image applying a rotation image transformation
            </summary>
            <param name="image">Input image</param>
            <returns>Image result after image transformation</returns>
        </member>
        <member name="T:DotNetNuke.Services.GeneratedImage.ImageHandler">
            <summary>
            Image Handler abstract class
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.ImageHandler.EnableServerCache">
            <summary>
            Enables server-side caching of the result
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.ImageHandler.EnableClientCache">
            <summary>
            Enables client-side caching of the result
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.ImageHandler.ClientCacheExpiration">
            <summary>
            Sets the client-side cache expiration time
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.ImageHandler.AllowedDomains">
            <summary>
            List of Domains who are allowed to use the imagehandler when security is enabled
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.ImageHandler.ContentType">
            <summary>
            Sets the type of the result image. The handler will return ouput with MIME type matching this content
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.ImageHandler.ImageCompression">
            <summary>
            Sets the image compression encoding for the result image. Default is 50L
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.ImageHandler.EnableIPCount">
            <summary>
            Enables block mechanism for DDOS by referring IP
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.ImageHandler.IPCountMaxCount">
            <summary>
            Sets the maximum amount of images an IP address is allowed to generate 
            in the defined purge interval
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.ImageHandler.IPCountPurgeInterval">
            <summary>
            Timespan for resetting the blocking 
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.ImageHandler.ImageTransforms">
            <summary>
            A list of image transforms that will be applied successively to the image
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.ImageHandlerInternal.GetEncoderInfo(System.String)">
            <summary>
            Returns the encoder for the specified mime type
            </summary>
            <param name="mimeType">The mime type of the content</param>
            <returns>ImageCodecInfo</returns>
        </member>
        <member name="T:DotNetNuke.Services.GeneratedImage.ImageInfo">
            <summary>
            Image info class
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.ImageInfo.Image">
            <summary>
            Image
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.ImageInfo.ImageByteBuffer">
            <summary>
            Image byte buffer
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.ImageInfo.HttpStatusCode">
            <summary>
            Http status code
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.GeneratedImage.ImageQuantization.GrayscaleQuantizer">
            <summary>
            Summary description for PaletteQuantizer.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.ImageQuantization.GrayscaleQuantizer.#ctor">
            <summary>
            Construct the palette quantizer
            </summary>
            <remarks>
            Palette quantization only requires a single quantization step
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.ImageQuantization.GrayscaleQuantizer.QuantizePixel(DotNetNuke.Services.GeneratedImage.ImageQuantization.Quantizer.Color32)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="T:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer">
            <summary>
            Quantize using an Octree
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.#ctor(System.Int32,System.Int32)">
            <summary>
            Construct the octree quantizer
            </summary>
            <remarks>
            The Octree quantizer is a two pass algorithm. The initial pass sets up the octree,
            the second pass quantizes a color based on the nodes in the tree
            </remarks>
            <param name="maxColors">The maximum number of colors to return</param>
            <param name="maxColorBits">The number of significant bits</param>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.InitialQuantizePixel(DotNetNuke.Services.GeneratedImage.ImageQuantization.Quantizer.Color32)">
            <summary>
            Process the pixel in the first pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <remarks>
            This function need only be overridden if your quantize algorithm needs two passes,
            such as an Octree quantizer.
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.QuantizePixel(DotNetNuke.Services.GeneratedImage.ImageQuantization.Quantizer.Color32)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="original">Any old palette, this is overrwritten</param>
            <returns>The new color palette</returns>
        </member>
        <member name="F:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer._octree">
            <summary>
            Stores the tree
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer._maxColors">
            <summary>
            Maximum allowed color depth
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree">
            <summary>
            Class which does the actual quantization
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree.#ctor(System.Int32)">
            <summary>
            Construct the octree
            </summary>
            <param name="maxColorBits">The maximum number of significant bits in the image</param>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree.AddColor(DotNetNuke.Services.GeneratedImage.ImageQuantization.Quantizer.Color32)">
            <summary>
            Add a given color value to the octree
            </summary>
            <param name="pixel"></param>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree.Reduce">
            <summary>
            Reduce the depth of the tree
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree.Leaves">
            <summary>
            Get/Set the number of leaves in the tree
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree.ReducibleNodes">
            <summary>
            Return the array of reducible nodes
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree.TrackPrevious(DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree.OctreeNode)">
            <summary>
            Keep track of the previous node that was quantized
            </summary>
            <param name="node">The node last quantized</param>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree.Palletize(System.Int32)">
            <summary>
            Convert the nodes in the octree to a palette with a maximum of colorCount colors
            </summary>
            <param name="colorCount">The maximum number of colors</param>
            <returns>An arraylist with the palettized colors</returns>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree.GetPaletteIndex(DotNetNuke.Services.GeneratedImage.ImageQuantization.Quantizer.Color32)">
            <summary>
            Get the palette index for the passed color
            </summary>
            <param name="pixel"></param>
            <returns></returns>
        </member>
        <member name="F:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree.mask">
            <summary>
            Mask used when getting the appropriate pixels for a given node
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree._root">
            <summary>
            The root of the octree
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree._leafCount">
            <summary>
            Number of leaves in the tree
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree._reducibleNodes">
            <summary>
            Array of reducible nodes
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree._maxColorBits">
            <summary>
            Maximum number of significant bits in the image
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree._previousNode">
            <summary>
            Store the last node quantized
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree._previousColor">
            <summary>
            Cache the previous color quantized
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree.OctreeNode">
            <summary>
            Class which encapsulates each node in the tree
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree.OctreeNode.#ctor(System.Int32,System.Int32,DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree)">
            <summary>
            Construct the node
            </summary>
            <param name="level">The level in the tree = 0 - 7</param>
            <param name="colorBits">The number of significant color bits in the image</param>
            <param name="octree">The tree to which this node belongs</param>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree.OctreeNode.AddColor(DotNetNuke.Services.GeneratedImage.ImageQuantization.Quantizer.Color32,System.Int32,System.Int32,DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree)">
            <summary>
            Add a color into the tree
            </summary>
            <param name="pixel">The color</param>
            <param name="colorBits">The number of significant color bits</param>
            <param name="level">The level in the tree</param>
            <param name="octree">The tree to which this node belongs</param>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree.OctreeNode.NextReducible">
            <summary>
            Get/Set the next reducible node
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree.OctreeNode.Children">
            <summary>
            Return the child nodes
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree.OctreeNode.Reduce">
            <summary>
            Reduce this node by removing all of its children
            </summary>
            <returns>The number of leaves removed</returns>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree.OctreeNode.ConstructPalette(System.Collections.ArrayList,System.Int32@)">
            <summary>
            Traverse the tree, building up the color palette
            </summary>
            <param name="palette">The palette</param>
            <param name="paletteIndex">The current palette index</param>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree.OctreeNode.GetPaletteIndex(DotNetNuke.Services.GeneratedImage.ImageQuantization.Quantizer.Color32,System.Int32)">
            <summary>
            Return the palette index for the passed color
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree.OctreeNode.Increment(DotNetNuke.Services.GeneratedImage.ImageQuantization.Quantizer.Color32)">
            <summary>
            Increment the pixel count and add to the color information
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree.OctreeNode._leaf">
            <summary>
            Flag indicating that this is a leaf node
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree.OctreeNode._pixelCount">
            <summary>
            Number of pixels in this node
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree.OctreeNode._red">
            <summary>
            Red component
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree.OctreeNode._green">
            <summary>
            Green Component
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree.OctreeNode._blue">
            <summary>
            Blue component
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree.OctreeNode._children">
            <summary>
            Pointers to any child nodes
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree.OctreeNode._nextReducible">
            <summary>
            Pointer to next reducible node
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.GeneratedImage.ImageQuantization.OctreeQuantizer.Octree.OctreeNode._paletteIndex">
            <summary>
            The index of this node in the palette
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.GeneratedImage.ImageQuantization.PaletteQuantizer">
            <summary>
            Summary description for PaletteQuantizer.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.ImageQuantization.PaletteQuantizer.#ctor(System.Collections.ArrayList)">
            <summary>
            Construct the palette quantizer
            </summary>
            <param name="palette">The color palette to quantize to</param>
            <remarks>
            Palette quantization only requires a single quantization step
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.ImageQuantization.PaletteQuantizer.QuantizePixel(DotNetNuke.Services.GeneratedImage.ImageQuantization.Quantizer.Color32)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.ImageQuantization.PaletteQuantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="palette">Any old palette, this is overrwritten</param>
            <returns>The new color palette</returns>
        </member>
        <member name="F:DotNetNuke.Services.GeneratedImage.ImageQuantization.PaletteQuantizer._colorMap">
            <summary>
            Lookup table for colors
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.GeneratedImage.ImageQuantization.PaletteQuantizer._colors">
            <summary>
            List of all colors in the palette
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.GeneratedImage.ImageQuantization.Quantizer">
            <summary>
            Abstarct class for Quantizers
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.ImageQuantization.Quantizer.#ctor(System.Boolean)">
            <summary>
            Construct the quantizer
            </summary>
            <param name="singlePass">If true, the quantization only needs to loop through the source pixels once</param>
            <remarks>
            If you construct this class with a true value for singlePass, then the code will, when quantizing your image,
            only call the 'QuantizeImage' function. If two passes are required, the code will call 'InitialQuantizeImage'
            and then 'QuantizeImage'.
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.ImageQuantization.Quantizer.Quantize(System.Drawing.Image)">
            <summary>
            Quantize an image and return the resulting output bitmap
            </summary>
            <param name="source">The image to quantize</param>
            <returns>A quantized version of the image</returns>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.ImageQuantization.Quantizer.FirstPass(System.Drawing.Imaging.BitmapData,System.Int32,System.Int32)">
            <summary>
            Execute the first pass through the pixels in the image
            </summary>
            <param name="sourceData">The source data</param>
            <param name="width">The width in pixels of the image</param>
            <param name="height">The height in pixels of the image</param>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.ImageQuantization.Quantizer.SecondPass(System.Drawing.Imaging.BitmapData,System.Drawing.Bitmap,System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>
            Execute a second pass through the bitmap
            </summary>
            <param name="sourceData">The source bitmap, locked into memory</param>
            <param name="output">The output bitmap</param>
            <param name="width">The width in pixels of the image</param>
            <param name="height">The height in pixels of the image</param>
            <param name="bounds">The bounding rectangle</param>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.ImageQuantization.Quantizer.InitialQuantizePixel(DotNetNuke.Services.GeneratedImage.ImageQuantization.Quantizer.Color32)">
            <summary>
            Override this to process the pixel in the first pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <remarks>
            This function need only be overridden if your quantize algorithm needs two passes,
            such as an Octree quantizer.
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.ImageQuantization.Quantizer.QuantizePixel(DotNetNuke.Services.GeneratedImage.ImageQuantization.Quantizer.Color32)">
            <summary>
            Override this to process the pixel in the second pass of the algorithm
            </summary>
            <param name="pixel">The pixel to quantize</param>
            <returns>The quantized value</returns>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.ImageQuantization.Quantizer.GetPalette(System.Drawing.Imaging.ColorPalette)">
            <summary>
            Retrieve the palette for the quantized image
            </summary>
            <param name="original">Any old palette, this is overrwritten</param>
            <returns>The new color palette</returns>
        </member>
        <member name="F:DotNetNuke.Services.GeneratedImage.ImageQuantization.Quantizer._singlePass">
            <summary>
            Flag used to indicate whether a single pass or two passes are needed for quantization.
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.GeneratedImage.ImageQuantization.Quantizer.Color32">
            <summary>
            Struct that defines a 32 bpp colour
            </summary>
            <remarks>
            This struct is used to read data from a 32 bits per pixel image
            in memory, and is ordered in this manner as this is the way that
            the data is layed out in memory
            </remarks>
        </member>
        <member name="F:DotNetNuke.Services.GeneratedImage.ImageQuantization.Quantizer.Color32.Blue">
            <summary>
            Holds the blue component of the colour
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.GeneratedImage.ImageQuantization.Quantizer.Color32.Green">
            <summary>
            Holds the green component of the colour
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.GeneratedImage.ImageQuantization.Quantizer.Color32.Red">
            <summary>
            Holds the red component of the colour
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.GeneratedImage.ImageQuantization.Quantizer.Color32.Alpha">
            <summary>
            Holds the alpha component of the colour
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.GeneratedImage.ImageQuantization.Quantizer.Color32.ARGB">
            <summary>
            Permits the color32 to be treated as an int32
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.ImageQuantization.Quantizer.Color32.Color">
            <summary>
            Return the color for this Color32 object
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.GeneratedImage.ImageResizeMode">
            <summary>
            Enumerator that represent the available resize modes
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.GeneratedImage.ImageResizeMode.Fill">
            <summary>
            Resizes the image with the given width or height without maintaing the aspect ratio. 
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.GeneratedImage.ImageResizeMode.Fit">
            <summary>
            Fit mode maintains the aspect ratio of the original image while ensuring that the dimensions of the result
            do not exceed the maximum values for the resize transformation.
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.GeneratedImage.ImageResizeMode.Crop">
            <summary>
            Crop resizes the image and removes parts of it to ensure that the dimensions of the result are exactly 
            as specified by the transformation.
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.GeneratedImage.ImageResizeMode.FitSquare">
            <summary>
            Resizes the image with the given width or height and maintains the aspect ratio. The image will be centered in a 
            square area of the chosen background color
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.GeneratedImage.ImageTransform">
            <summary>
            An abstract ImageTransform class
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.ImageTransform.InterpolationMode">
            <summary>
            Sets the interpolation mode used for resizing images. The default is HighQualityBicubic.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.ImageTransform.SmoothingMode">
            <summary>
            Sets the smoothing mode used for resizing images. The default is HighQuality.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.ImageTransform.PixelOffsetMode">
            <summary>
            Sets the pixel offset mode used for resizing images. The default is HighQuality.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.ImageTransform.CompositingQuality">
            <summary>
            Sets the compositing quality used for resizing images. The default is HighQuality.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.ImageTransform.ProcessImage(System.Drawing.Image)">
            <summary>
            Process an input image applying the image transformation
            </summary>
            <param name="image">Input image</param>
            <returns>Image processed</returns>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.ImageTransform.UniqueString">
            <summary>
            Provides an Unique String for the image transformation
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.ImageTransform.CopyImage(System.IO.Stream)">
            <summary>
            Creates a new image from stream. The created image is independent of the stream.
            </summary>
            <param name="imgStream"></param>
            <returns>Image object</returns>
        </member>
        <member name="T:DotNetNuke.Services.GeneratedImage.ProfileEventHandler">
            <summary>
            this class handles profile changes
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.ProfileEventHandler.ProfileUpdated(System.Object,DotNetNuke.Entities.Profile.ProfileEventArgs)">
            <summary>
            This method add the updated user id into cache to clear image from disk before returning to UI.
            </summary>
            <param name="sender"></param>
            <param name="profileArgs"></param>
        </member>
        <member name="T:DotNetNuke.Services.GeneratedImage.StartTransform.ImageFileTransform">
            <summary>
            Image File ImageTransform class
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.StartTransform.ImageFileTransform.ImageFilePath">
            <summary>
            File path of the image
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.StartTransform.ImageFileTransform.ImageUrl">
            <summary>
            Url of the image
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.StartTransform.ImageFileTransform.EmptyImage">
            <summary>
            Sets the Image to return if no image or error
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.StartTransform.ImageFileTransform.UniqueString">
            <summary>
            Provides an Unique String for the image transformation
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.StartTransform.ImageFileTransform.ProcessImage(System.Drawing.Image)">
            <summary>
            Processes an input image applying a file image transformation.
            This will return an image after read the stream from the File Path  <see cref="P:DotNetNuke.Services.GeneratedImage.StartTransform.ImageFileTransform.ImageFilePath"/> or Url <see cref="P:DotNetNuke.Services.GeneratedImage.StartTransform.ImageFileTransform.ImageUrl"/>
            </summary>
            <param name="image">Input image</param>
            <returns>Image result after file image transformation</returns>
        </member>
        <member name="T:DotNetNuke.Services.GeneratedImage.StartTransform.PlaceholderTransform">
            <summary>
            Placeholder ImageTransform class
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.StartTransform.PlaceholderTransform.Width">
            <summary>
            Sets the width of the placeholder image
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.StartTransform.PlaceholderTransform.Height">
            <summary>
            Sets the Height of the placeholder image
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.StartTransform.PlaceholderTransform.Color">
            <summary>
            Sets the Color of the border and text element
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.StartTransform.PlaceholderTransform.BackColor">
            <summary>
            Sets the backcolor of the placeholder element
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.StartTransform.PlaceholderTransform.Text">
            <summary>
            Sets the text of the placeholder image. if blank dimension will be used
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.StartTransform.PlaceholderTransform.UniqueString">
            <summary>
            Provides an Unique String for the image transformation
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.StartTransform.PlaceholderTransform.ProcessImage(System.Drawing.Image)">
            <summary>
            Processes an input image returning a placeholder image
            </summary>
            <param name="image">Input image</param>
            <returns>Image result after image transformation</returns>
        </member>
        <member name="T:DotNetNuke.Services.GeneratedImage.StartTransform.SecureFileTransform">
            <summary>
            Secure File ImageTransform class
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.StartTransform.SecureFileTransform.SecureFile">
            <summary>
            Set IFileInfo object of given FileId
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.StartTransform.SecureFileTransform.EmptyImage">
            <summary>
            Sets the Image to return if no image or error
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.StartTransform.SecureFileTransform.UniqueString">
            <summary>
            Provides an Unique String for the image transformation
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.StartTransform.SecureFileTransform.ProcessImage(System.Drawing.Image)">
            <summary>
            Processes an input image returing a secure file image
            </summary>
            <param name="image">Input image</param>
            <returns>Image result after image transformation</returns>
            <remarks>
            If the secure file is not an image, it returns an image representing the file extension
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.StartTransform.SecureFileTransform.DoesHaveReadFolderPermission(DotNetNuke.Services.FileSystem.IFolderInfo)">
            <summary>
            Checks if the current user have READ permission on a given folder
            </summary>
            <param name="folder">Folder info object</param>
            <returns>True if the user has READ permission, false otherwise</returns>
        </member>
        <member name="T:DotNetNuke.Services.GeneratedImage.StartTransform.UserProfilePicTransform">
            <summary>
            User Profile Picture ImageTransform class
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.StartTransform.UserProfilePicTransform.UserID">
            <summary>
            Sets the UserID of the profile pic
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.StartTransform.UserProfilePicTransform.UniqueString">
            <summary>
            Provides an Unique String for the image transformation
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.GeneratedImage.StartTransform.UserProfilePicTransform.IsReusable">
            <summary>
            Is reusable
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.StartTransform.UserProfilePicTransform.ProcessImage(System.Drawing.Image)">
            <summary>
            Processes an input image returning the user profile picture
            </summary>
            <param name="image">Input image</param>
            <returns>Image result after image transformation</returns>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.StartTransform.UserProfilePicTransform.GetNoAvatarImage">
            <summary>
            Get the Bitmap of the No Avatar Image
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.GeneratedImage.StartTransform.UserProfilePicTransform.TryGetPhotoFile(DotNetNuke.Services.FileSystem.IFileInfo@)">
            <summary>
            whether current user has permission to view target user's photo.
            </summary>
            <param name="photoFile"></param>
            <returns></returns>
        </member>
        <member name="T:DotNetNuke.Services.Installer.Blocker.IInstallBlocker">
            <summary>
            This interface ...
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Installer.Blocker.InstallBlocker">
            <summary>
            This class ...
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Installer.Dependencies.CoreVersionDependency">
            -----------------------------------------------------------------------------
            <summary>
            The CoreVersionDependency determines whether the CoreVersion is correct
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Dependencies.DependencyBase">
            -----------------------------------------------------------------------------
            <summary>
            The DependencyBase is a base class for Installer Dependencies
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Dependencies.DependencyFactory">
            -----------------------------------------------------------------------------
            <summary>
            The DependencyFactory is a factory class that is used to instantiate the
            appropriate Dependency
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Dependencies.DependencyFactory.GetDependency(System.Xml.XPath.XPathNavigator)">
            -----------------------------------------------------------------------------
            <summary>
            The GetDependency method instantiates (and returns) the relevant Dependency
            </summary>
            <param name="dependencyNav">The manifest (XPathNavigator) for the dependency</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Dependencies.IDependency">
            -----------------------------------------------------------------------------
            <summary>
            The IDependency Interface defines the contract for a Package Dependency
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Dependencies.InvalidDependency">
            -----------------------------------------------------------------------------
            <summary>
            The InvalidDependency signifies a dependency that is always invalid,
            taking the place of dependencies that could not be created
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Dependencies.InvalidDependency.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetNuke.Services.Installer.Dependencies.InvalidDependency" /> class.
            </summary>
            <param name="ErrorMessage">The error message to display.</param>
        </member>
        <member name="T:DotNetNuke.Services.Installer.Dependencies.PackageDependency">
            -----------------------------------------------------------------------------
            <summary>
            The PackageDependency determines whether the dependent package is installed
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Dependencies.PermissionsDependency">
            -----------------------------------------------------------------------------
            <summary>
            The PermissionsDependency determines whether the DotNetNuke site has the
            corretc permissions
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Dependencies.TypeDependency">
            -----------------------------------------------------------------------------
            <summary>
            The TypeDependency determines whether the dependent type is installed
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.JavaScriptFileInstaller.CollectionNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Collection Node ("jsfiles")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.JavaScriptFileInstaller.ItemNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Item Node ("jsfile")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.JavaScriptFileInstaller.AllowableFiles">
            -----------------------------------------------------------------------------
            <summary>
            Gets a list of allowable file extensions (in addition to the Host's List)
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.JavaScriptFileInstaller.ReadCustomManifest(System.Xml.XPath.XPathNavigator)">
            -----------------------------------------------------------------------------
            <summary>
            The ReadCustomManifest method reads the custom manifest items (that subclasses
            of FileInstaller may need)
            </summary>
            <param name="nav">The XPathNavigator representing the node</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.UrlProviderInstaller.AllowableFiles">
            -----------------------------------------------------------------------------
            <summary>
            Gets a list of allowable file extensions (in addition to the Host's List)
            </summary>
            <value>A String</value>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.UrlProviderInstaller.Commit">
            -----------------------------------------------------------------------------
            <summary>
            The Commit method finalises the Install and commits any pending changes.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.UrlProviderInstaller.Install">
            -----------------------------------------------------------------------------
            <summary>
            The Install method installs the UrlProvider component
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.UrlProviderInstaller.ReadManifest(System.Xml.XPath.XPathNavigator)">
            -----------------------------------------------------------------------------
            <summary>
            The ReadManifest method reads the manifest file for the compoent.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.UrlProviderInstaller.Rollback">
            -----------------------------------------------------------------------------
            <summary>
            The Rollback method undoes the installation of the component in the event 
            that one of the other components fails
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.UrlProviderInstaller.UnInstall">
            -----------------------------------------------------------------------------
            <summary>
            The UnInstall method uninstalls the component
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Installers.AssemblyInstaller">
            -----------------------------------------------------------------------------
            <summary>
            The AssemblyInstaller installs Assembly Components to a DotNetNuke site
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.AssemblyInstaller.CollectionNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Collection Node ("assemblies")
            </summary>
            <value>A String</value>
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.AssemblyInstaller.DefaultPath">
            -----------------------------------------------------------------------------
            <summary>
            Gets the default Path for the file - if not present in the manifest
            </summary>
            <value>A String</value>
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.AssemblyInstaller.ItemNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Item Node ("assembly")
            </summary>
            <value>A String</value>
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.AssemblyInstaller.PhysicalBasePath">
            -----------------------------------------------------------------------------
            <summary>
            Gets the PhysicalBasePath for the assemblies
            </summary>
            <value>A String</value>
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.AssemblyInstaller.AllowableFiles">
            -----------------------------------------------------------------------------
            <summary>
            Gets a list of allowable file extensions (in addition to the Host's List)
            </summary>
            <value>A String</value>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.AssemblyInstaller.DeleteFile(DotNetNuke.Services.Installer.InstallFile)">
            -----------------------------------------------------------------------------
            <summary>
            The DeleteFile method deletes a single assembly.
            </summary>
            <param name="file">The InstallFile to delete</param>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.AssemblyInstaller.IsCorrectType(DotNetNuke.Services.Installer.InstallFileType)">
            -----------------------------------------------------------------------------
            <summary>
            Gets a flag that determines what type of file this installer supports
            </summary>
            <param name="type">The type of file being processed</param>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.AssemblyInstaller.InstallFile(DotNetNuke.Services.Installer.InstallFile)">
            -----------------------------------------------------------------------------
            <summary>
            The InstallFile method installs a single assembly.
            </summary>
            <param name="file">The InstallFile to install</param>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.AssemblyInstaller.AddOrUpdateBindingRedirect(DotNetNuke.Services.Installer.InstallFile)">
            <summary>Adds or updates the binding redirect for the assembly file, if the assembly file it strong-named.</summary>
            <param name="file">The assembly file.</param>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.AssemblyInstaller.RemoveBindingRedirect(DotNetNuke.Services.Installer.InstallFile)">
            <summary>Removes the binding redirect for the assembly file, if the assembly is strong-named.</summary>
            <param name="file">The assembly file.</param>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.AssemblyInstaller.ApplyXmlMerge(DotNetNuke.Services.Installer.InstallFile,System.String)">
            <summary>If the <paramref name="file"/> is a strong-named assembly, applies the XML merge.</summary>
            <param name="file">The assembly file.</param>
            <param name="xmlMergeFile">The XML merge file name.</param>
            <returns><c>true</c> if the XML Merge was applied successfully, <c>false</c> if the file was not a strong-named assembly or could not be read.</returns>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.AssemblyInstaller.ReadAssemblyName(System.String)">
            <summary>Reads the file's <see cref="T:System.Reflection.AssemblyName"/>.</summary>
            <param name="assemblyFile">The path for the assembly whose <see cref="T:System.Reflection.AssemblyName"/> is to be returned.</param>
            <returns>An <see cref="T:System.Reflection.AssemblyName"/> or <c>null</c></returns>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.AssemblyInstaller.GetXmlMergeDoc(System.String,System.String,System.String,System.String,System.String)">
            <summary>Gets the XML merge document to create the binding redirect.</summary>
            <param name="xmlMergePath">The path to the template binding redirect XML Merge document.</param>
            <param name="name">The assembly name.</param>
            <param name="publicKeyToken">The assembly's public key token.</param>
            <param name="oldVersion">The old version range.</param>
            <param name="newVersion">The new version.</param>
            <returns>An <see cref="T:System.Xml.XmlDocument"/> instance.</returns>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.AssemblyInstaller.ReplaceInAttributeValue(System.Xml.XmlNode,System.Xml.XmlNamespaceManager,System.String,System.String,System.String)">
            <summary>Replaces the given text in the value of the attribute matched by <paramref name="xpath"/>.</summary>
            <param name="parentNode">The parent node in which to search via the <paramref name="xpath"/> expression.</param>
            <param name="namespaceManager">The namespace manager.</param>
            <param name="xpath">The xpath expression to get the attribute.</param>
            <param name="oldValue">The placeholder value to replace.</param>
            <param name="newValue">The real value with which to replace <paramref name="oldValue"/>.</param>
        </member>
        <member name="T:DotNetNuke.Services.Installer.Installers.AuthenticationInstaller">
            -----------------------------------------------------------------------------
            <summary>
            The AuthenticationInstaller installs Authentication Service Components to a DotNetNuke site
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.AuthenticationInstaller.AllowableFiles">
            -----------------------------------------------------------------------------
            <summary>
            Gets a list of allowable file extensions (in addition to the Host's List)
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.AuthenticationInstaller.DeleteAuthentiation">
            -----------------------------------------------------------------------------
            <summary>
            The DeleteAuthentiation method deletes the Authentication System
            from the data Store.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.AuthenticationInstaller.Commit">
            -----------------------------------------------------------------------------
            <summary>
            The Commit method finalises the Install and commits any pending changes.
            </summary>
            <remarks>In the case of Authentication systems this is not neccessary</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.AuthenticationInstaller.Install">
            -----------------------------------------------------------------------------
            <summary>
            The Install method installs the authentication component
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.AuthenticationInstaller.ReadManifest(System.Xml.XPath.XPathNavigator)">
            -----------------------------------------------------------------------------
            <summary>
            The ReadManifest method reads the manifest file for the Authentication compoent.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.AuthenticationInstaller.Rollback">
            -----------------------------------------------------------------------------
            <summary>
            The Rollback method undoes the installation of the component in the event 
            that one of the other components fails
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.AuthenticationInstaller.UnInstall">
            -----------------------------------------------------------------------------
            <summary>
            The UnInstall method uninstalls the authentication component
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Installers.CleanupInstaller">
            -----------------------------------------------------------------------------
            <summary>
            The CleanupInstaller cleans up (removes) files from previous versions
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.CleanupInstaller.AllowableFiles">
            -----------------------------------------------------------------------------
            <summary>
            Gets a list of allowable file extensions (in addition to the Host's List)
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.CleanupInstaller.CleanupFile(DotNetNuke.Services.Installer.InstallFile)">
            -----------------------------------------------------------------------------
            <summary>
            The CleanupFile method cleansup a single file.
            </summary>
            <param name="insFile">The InstallFile to clean up</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.CleanupInstaller.ProcessFile(DotNetNuke.Services.Installer.InstallFile,System.Xml.XPath.XPathNavigator)">
            -----------------------------------------------------------------------------
            <summary>
            The ProcessFile method determines what to do with parsed "file" node
            </summary>
            <param name="file">The file represented by the node</param>
            <param name="nav">The XPathNavigator representing the node</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.CleanupInstaller.RollbackFile(DotNetNuke.Services.Installer.InstallFile)">
            -----------------------------------------------------------------------------
            <summary>
            The RollbackFile method rolls back the cleanup of a single file.
            </summary>
            <param name="installFile">The InstallFile to commit</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.CleanupInstaller.Commit">
            -----------------------------------------------------------------------------
            <summary>
            The Commit method finalises the Install and commits any pending changes.
            </summary>
            <remarks>In the case of Clenup this is not neccessary</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.CleanupInstaller.Install">
            -----------------------------------------------------------------------------
            <summary>
            The Install method cleansup the files
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.CleanupInstaller.UnInstall">
            -----------------------------------------------------------------------------
            <summary>
            The UnInstall method uninstalls the file component
            </summary>
            <remarks>There is no uninstall for this component</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Installers.ComponentInstallerBase">
            -----------------------------------------------------------------------------
            <summary>
            The ComponentInstallerBase is a base class for all Component Installers
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.ComponentInstallerBase.AllowableFiles">
            -----------------------------------------------------------------------------
            <summary>
            Gets a list of allowable file extensions (in addition to the Host's List)
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.ComponentInstallerBase.Completed">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Completed flag
            </summary>
            <value>A Boolean value</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.ComponentInstallerBase.InstallMode">
            -----------------------------------------------------------------------------
            <summary>
            Gets the InstallMode
            </summary>
            <value>An InstallMode value</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.ComponentInstallerBase.Log">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Logger
            </summary>
            <value>An Logger object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.ComponentInstallerBase.Package">
            -----------------------------------------------------------------------------
            <summary>
            Gets the associated Package
            </summary>
            <value>An PackageInfo object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.ComponentInstallerBase.PackageFiles">
            -----------------------------------------------------------------------------
            <summary>
            Gets a Dictionary of Files that are included in the Package
            </summary>
            <value>A Dictionary(Of String, InstallFile)</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.ComponentInstallerBase.PhysicalSitePath">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Physical Path to the root of the Site (eg D:\Websites\DotNetNuke")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.ComponentInstallerBase.SupportsManifestOnlyInstall">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether the Installer supports Manifest only installs
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.ComponentInstallerBase.Type">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Type of the component
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.ComponentInstallerBase.Version">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Version of the Component
            </summary>
            <value>A System.Version</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Installers.ConfigInstaller">
            -----------------------------------------------------------------------------
            <summary>
            The ConfigInstaller installs Config changes
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.ConfigInstaller.InstallConfig">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Install config changes
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.ConfigInstaller.TargetConfig">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Target Config XmlDocument
            </summary>
            <value>An XmlDocument</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.ConfigInstaller.TargetFile">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Target Config file to change
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.ConfigInstaller.UnInstallConfig">
            -----------------------------------------------------------------------------
            <summary>
            Gets the UnInstall config changes
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.ConfigInstaller.Commit">
            -----------------------------------------------------------------------------
            <summary>
            The Commit method finalises the Install and commits any pending changes.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.ConfigInstaller.Install">
            -----------------------------------------------------------------------------
            <summary>
            The Install method installs the config component
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.ConfigInstaller.ReadManifest(System.Xml.XPath.XPathNavigator)">
            -----------------------------------------------------------------------------
            <summary>
            The ReadManifest method reads the manifest file for the config compoent.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.ConfigInstaller.Rollback">
            -----------------------------------------------------------------------------
            <summary>
            The Rollback method undoes the installation of the file component in the event 
            that one of the other components fails
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.ConfigInstaller.UnInstall">
            -----------------------------------------------------------------------------
            <summary>
            The UnInstall method uninstalls the config component
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Installers.ContainerInstaller">
            -----------------------------------------------------------------------------
            <summary>
            The ContainerInstaller installs Container Components to a DotNetNuke site
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.ContainerInstaller.CollectionNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Collection Node ("containerFiles")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.ContainerInstaller.ItemNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Item Node ("containerFile")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.ContainerInstaller.SkinNameNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the SkinName Node ("containerName")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.ContainerInstaller.SkinRoot">
            -----------------------------------------------------------------------------
            <summary>
            Gets the RootName of the Skin
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.ContainerInstaller.SkinType">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Type of the Skin
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Installers.FileInstaller">
            -----------------------------------------------------------------------------
            <summary>
            The FileInstaller installs File Components to a DotNetNuke site
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.FileInstaller.BasePath">
            -----------------------------------------------------------------------------
            <summary>
            Gets the BasePath for the files
            </summary>
            <remarks>The Base Path is relative to the WebRoot</remarks>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.FileInstaller.CollectionNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Collection Node ("files")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.FileInstaller.Files">
            -----------------------------------------------------------------------------
            <summary>
            Gets a Dictionary of Files that are included in this component
            </summary>
            <value>A Dictionary(Of String, InstallFile)</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.FileInstaller.DefaultPath">
            -----------------------------------------------------------------------------
            <summary>
            Gets the default Path for the file - if not present in the manifest
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.FileInstaller.ItemNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Item Node ("file")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.FileInstaller.PhysicalBasePath">
            -----------------------------------------------------------------------------
            <summary>
            Gets the PhysicalBasePath for the files
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.FileInstaller.DeleteFiles">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the Packages files are deleted when uninstalling the
            package
            </summary>
            <value>A Boolean value</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.FileInstaller.SupportsManifestOnlyInstall">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether the Installer supports Manifest only installs
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.FileInstaller.CommitFile(DotNetNuke.Services.Installer.InstallFile)">
            -----------------------------------------------------------------------------
            <summary>
            The CommitFile method commits a single file.
            </summary>
            <param name="insFile">The InstallFile to commit</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.FileInstaller.DeleteFile(DotNetNuke.Services.Installer.InstallFile)">
            -----------------------------------------------------------------------------
            <summary>
            The DeleteFile method deletes a single file.
            </summary>
            <param name="insFile">The InstallFile to delete</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.FileInstaller.InstallFile(DotNetNuke.Services.Installer.InstallFile)">
            -----------------------------------------------------------------------------
            <summary>
            The InstallFile method installs a single file.
            </summary>
            <param name="insFile">The InstallFile to install</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.FileInstaller.IsCorrectType(DotNetNuke.Services.Installer.InstallFileType)">
            -----------------------------------------------------------------------------
            <summary>
            Gets a flag that determines what type of file this installer supports
            </summary>
            <param name="type">The type of file being processed</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.FileInstaller.ProcessFile(DotNetNuke.Services.Installer.InstallFile,System.Xml.XPath.XPathNavigator)">
            -----------------------------------------------------------------------------
            <summary>
            The ProcessFile method determines what to do with parsed "file" node
            </summary>
            <param name="file">The file represented by the node</param>
            <param name="nav">The XPathNavigator representing the node</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.FileInstaller.ReadCustomManifest(System.Xml.XPath.XPathNavigator)">
            -----------------------------------------------------------------------------
            <summary>
            The ReadCustomManifest method reads the custom manifest items (that subclasses
            of FileInstaller may need)
            </summary>
            <param name="nav">The XPathNavigator representing the node</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.FileInstaller.ReadManifestItem(System.Xml.XPath.XPathNavigator,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            The ReadManifestItem method reads a single node
            </summary>
            <param name="nav">The XPathNavigator representing the node</param>
            <param name="checkFileExists">Flag that determines whether a check should be made</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.FileInstaller.RollbackFile(DotNetNuke.Services.Installer.InstallFile)">
            -----------------------------------------------------------------------------
            <summary>
            The RollbackFile method rolls back the install of a single file.
            </summary>
            <remarks>For new installs this removes the added file.  For upgrades it restores the
            backup file created during install</remarks>
            <param name="installFile">The InstallFile to commit</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.FileInstaller.UnInstallFile(DotNetNuke.Services.Installer.InstallFile)">
            -----------------------------------------------------------------------------
            <summary>
            The UnInstallFile method unInstalls a single file.
            </summary>
            <param name="unInstallFile">The InstallFile to unInstall.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.FileInstaller.Commit">
            -----------------------------------------------------------------------------
            <summary>
            The Commit method finalises the Install and commits any pending changes.
            </summary>
            <remarks>In the case of Files this is not neccessary</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.FileInstaller.Install">
            -----------------------------------------------------------------------------
            <summary>
            The Install method installs the file component
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.FileInstaller.ReadManifest(System.Xml.XPath.XPathNavigator)">
            -----------------------------------------------------------------------------
            <summary>
            The ReadManifest method reads the manifest file for the file compoent.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.FileInstaller.Rollback">
            -----------------------------------------------------------------------------
            <summary>
            The Rollback method undoes the installation of the file component in the event 
            that one of the other components fails
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.FileInstaller.UnInstall">
            -----------------------------------------------------------------------------
            <summary>
            The UnInstall method uninstalls the file component
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Installers.InstallerFactory">
            -----------------------------------------------------------------------------
            <summary>
            The InstallerFactory is a factory class that is used to instantiate the
            appropriate Component Installer
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.InstallerFactory.GetInstaller(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            The GetInstaller method instantiates the relevant Component Installer
            </summary>
            <param name="installerType">The type of Installer</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.InstallerFactory.GetInstaller(System.Xml.XPath.XPathNavigator,DotNetNuke.Services.Installer.Packages.PackageInfo)">
            -----------------------------------------------------------------------------
            <summary>
            The GetInstaller method instantiates the relevant Component Installer
            </summary>
            <param name="manifestNav">The manifest (XPathNavigator) for the component</param>
            <param name="package">The associated PackageInfo instance</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Installers.LanguageInstaller">
            -----------------------------------------------------------------------------
            <summary>
            The LanguageInstaller installs Language Packs to a DotNetNuke site
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.LanguageInstaller.CollectionNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Collection Node ("languageFiles")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.LanguageInstaller.ItemNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Item Node ("languageFile")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.LanguageInstaller.AllowableFiles">
            -----------------------------------------------------------------------------
            <summary>
            Gets a list of allowable file extensions (in addition to the Host's List)
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.LanguageInstaller.DeleteLanguage">
            -----------------------------------------------------------------------------
            <summary>
            The DeleteLanguage method deletes the Language
            from the data Store.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.LanguageInstaller.ReadCustomManifest(System.Xml.XPath.XPathNavigator)">
            -----------------------------------------------------------------------------
            <summary>
            The ReadCustomManifest method reads the custom manifest items
            </summary>
            <param name="nav">The XPathNavigator representing the node</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.LanguageInstaller.Commit">
            -----------------------------------------------------------------------------
            <summary>
            The Commit method finalises the Install and commits any pending changes.
            </summary>
            <remarks>In the case of Modules this is not neccessary</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.LanguageInstaller.Install">
            -----------------------------------------------------------------------------
            <summary>
            The Install method installs the language component
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.LanguageInstaller.Rollback">
            -----------------------------------------------------------------------------
            <summary>
            The Rollback method undoes the installation of the component in the event 
            that one of the other components fails
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.LanguageInstaller.UnInstall">
            -----------------------------------------------------------------------------
            <summary>
            The UnInstall method uninstalls the language component
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Installers.ModuleInstaller">
            -----------------------------------------------------------------------------
            <summary>
            The ModuleInstaller installs Module Components to a DotNetNuke site
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.ModuleInstaller.AllowableFiles">
            -----------------------------------------------------------------------------
            <summary>
            Gets a list of allowable file extensions (in addition to the Host's List)
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.ModuleInstaller.DeleteModule">
            -----------------------------------------------------------------------------
            <summary>
            The DeleteModule method deletes the Module from the data Store.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.ModuleInstaller.Commit">
            -----------------------------------------------------------------------------
            <summary>
            The Commit method finalises the Install and commits any pending changes.
            </summary>
            <remarks>In the case of Modules this is not neccessary</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.ModuleInstaller.Install">
            -----------------------------------------------------------------------------
            <summary>
            The Install method installs the Module component
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.ModuleInstaller.ReadManifest(System.Xml.XPath.XPathNavigator)">
            -----------------------------------------------------------------------------
            <summary>
            The ReadManifest method reads the manifest file for the Module compoent.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.ModuleInstaller.Rollback">
            -----------------------------------------------------------------------------
            <summary>
            The Rollback method undoes the installation of the component in the event 
            that one of the other components fails
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.ModuleInstaller.UnInstall">
            -----------------------------------------------------------------------------
            <summary>
            The UnInstall method uninstalls the Module component
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Installers.PackageInstaller">
            -----------------------------------------------------------------------------
            <summary>
            The PackageInstaller class is an Installer for Packages
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.PackageInstaller.#ctor(DotNetNuke.Services.Installer.Packages.PackageInfo)">
            -----------------------------------------------------------------------------
            <summary>
            This Constructor creates a new PackageInstaller instance
            </summary>
            <param name="package">A PackageInfo instance</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.PackageInstaller.#ctor(System.String,DotNetNuke.Services.Installer.InstallerInfo)">
            -----------------------------------------------------------------------------
            <summary>
            This Constructor creates a new PackageInstaller instance
            </summary>
            <param name="info">An InstallerInfo instance</param>
            <param name="packageManifest">The manifest as a string</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.PackageInstaller.DeleteFiles">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the Packages files are deleted when uninstalling the
            package
            </summary>
            <value>A Boolean value</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.PackageInstaller.IsValid">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether the Package is Valid
            </summary>
            <value>A Boolean value</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.PackageInstaller.CheckSecurity">
            -----------------------------------------------------------------------------
            <summary>
            The CheckSecurity method checks whether the user has the appropriate security
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.PackageInstaller.ReadComponents(System.Xml.XPath.XPathNavigator)">
            -----------------------------------------------------------------------------
            <summary>
            The ReadComponents method reads the components node of the manifest file.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.PackageInstaller.Commit">
            -----------------------------------------------------------------------------
            <summary>
            The Commit method commits the package installation
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.PackageInstaller.Install">
            -----------------------------------------------------------------------------
            <summary>
            The Install method installs the components of the package
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.PackageInstaller.ReadManifest(System.Xml.XPath.XPathNavigator)">
            -----------------------------------------------------------------------------
            <summary>
            The ReadManifest method reads the manifest file and parses it into components.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.PackageInstaller.Rollback">
            -----------------------------------------------------------------------------
            <summary>
            The Rollback method rolls back the package installation
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.PackageInstaller.UnInstall">
            -----------------------------------------------------------------------------
            <summary>
            The Uninstall method uninstalls the components of the package
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Installers.ProviderInstaller">
            -----------------------------------------------------------------------------
            <summary>
            The ProviderInstaller installs Provider Components to a DotNetNuke site
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.ProviderInstaller.AllowableFiles">
            -----------------------------------------------------------------------------
            <summary>
            Gets a list of allowable file extensions (in addition to the Host's List)
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Installers.ResourceFileInstaller">
            -----------------------------------------------------------------------------
            <summary>
            The ResourceFileInstaller installs Resource File Components (zips) to a DotNetNuke site
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.ResourceFileInstaller.CollectionNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Collection Node ("resourceFiles")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.ResourceFileInstaller.ItemNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Item Node ("resourceFile")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.ResourceFileInstaller.Manifest">
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.ResourceFileInstaller.AllowableFiles">
            -----------------------------------------------------------------------------
            <summary>
            Gets a list of allowable file extensions (in addition to the Host's List)
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.ResourceFileInstaller.CommitFile(DotNetNuke.Services.Installer.InstallFile)">
            -----------------------------------------------------------------------------
            <summary>
            The CommitFile method commits a single file.
            </summary>
            <param name="insFile">The InstallFile to commit</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.ResourceFileInstaller.DeleteFile(DotNetNuke.Services.Installer.InstallFile)">
            -----------------------------------------------------------------------------
            <summary>
            The DeleteFile method deletes a single assembly.
            </summary>
            <param name="file">The InstallFile to delete</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.ResourceFileInstaller.InstallFile(DotNetNuke.Services.Installer.InstallFile)">
            -----------------------------------------------------------------------------
            <summary>
              The InstallFile method installs a single assembly.
            </summary>
            <param name = "insFile">The InstallFile to install</param>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.ResourceFileInstaller.IsCorrectType(DotNetNuke.Services.Installer.InstallFileType)">
            -----------------------------------------------------------------------------
            <summary>
            Gets a flag that determines what type of file this installer supports
            </summary>
            <param name="type">The type of file being processed</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.ResourceFileInstaller.ReadManifestItem(System.Xml.XPath.XPathNavigator,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            The ReadManifestItem method reads a single node
            </summary>
            <param name="nav">The XPathNavigator representing the node</param>
            <param name="checkFileExists">Flag that determines whether a check should be made</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.ResourceFileInstaller.RollbackFile(DotNetNuke.Services.Installer.InstallFile)">
            -----------------------------------------------------------------------------
            <summary>
            The RollbackFile method rolls back the install of a single file.
            </summary>
            <remarks>For new installs this removes the added file.  For upgrades it restores the
            backup file created during install</remarks>
            <param name="insFile">The InstallFile to commit</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Installers.ScriptInstaller">
            -----------------------------------------------------------------------------
            <summary>
            The ScriptInstaller installs Script Components to a DotNetNuke site
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.ScriptInstaller.InstallScript">
            -----------------------------------------------------------------------------
            <summary>
            Gets the base Install Script (if present)
            </summary>
            <value>An InstallFile</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.ScriptInstaller.InstallScripts">
            -----------------------------------------------------------------------------
            <summary>
            Gets the collection of Install Scripts
            </summary>
            <value>A List(Of InstallFile)</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.ScriptInstaller.UnInstallScripts">
            -----------------------------------------------------------------------------
            <summary>
            Gets the collection of UnInstall Scripts
            </summary>
            <value>A List(Of InstallFile)</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.ScriptInstaller.CollectionNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Collection Node ("scripts")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.ScriptInstaller.ItemNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Item Node ("script")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.ScriptInstaller.UpgradeScript">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Upgrade Script (if present)
            </summary>
            <value>An InstallFile</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.ScriptInstaller.AllowableFiles">
            -----------------------------------------------------------------------------
            <summary>
            Gets a list of allowable file extensions (in addition to the Host's List)
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.ScriptInstaller.IsCorrectType(DotNetNuke.Services.Installer.InstallFileType)">
            -----------------------------------------------------------------------------
            <summary>
            Gets a flag that determines what type of file this installer supports
            </summary>
            <param name="type">The type of file being processed</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.ScriptInstaller.ProcessFile(DotNetNuke.Services.Installer.InstallFile,System.Xml.XPath.XPathNavigator)">
            -----------------------------------------------------------------------------
            <summary>
            The ProcessFile method determines what to do with parsed "file" node
            </summary>
            <param name="file">The file represented by the node</param>
            <param name="nav">The XPathNavigator representing the node</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.ScriptInstaller.Commit">
            -----------------------------------------------------------------------------
            <summary>
            The Commit method finalises the Install and commits any pending changes.
            </summary>
            <remarks>In the case of Files this is not neccessary</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.ScriptInstaller.Install">
            -----------------------------------------------------------------------------
            <summary>
            The Install method installs the script component
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.ScriptInstaller.Rollback">
            -----------------------------------------------------------------------------
            <summary>
            The Rollback method undoes the installation of the script component in the event 
            that one of the other components fails
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.ScriptInstaller.UnInstall">
            -----------------------------------------------------------------------------
            <summary>
            The UnInstall method uninstalls the script component
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Installers.SkinControlInstaller">
            -----------------------------------------------------------------------------
            <summary>
            The SkinControlInstaller installs SkinControl (SkinObject) Components to a DotNetNuke site
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.SkinControlInstaller.AllowableFiles">
            -----------------------------------------------------------------------------
            <summary>
            Gets a list of allowable file extensions (in addition to the Host's List)
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.SkinControlInstaller.DeleteSkinControl">
            -----------------------------------------------------------------------------
            <summary>
            The DeleteSkinControl method deletes the SkinControl from the data Store.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.SkinControlInstaller.Commit">
            -----------------------------------------------------------------------------
            <summary>
            The Commit method finalises the Install and commits any pending changes.
            </summary>
            <remarks>In the case of Modules this is not neccessary</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.SkinControlInstaller.Install">
            -----------------------------------------------------------------------------
            <summary>
            The Install method installs the Module component
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.SkinControlInstaller.ReadManifest(System.Xml.XPath.XPathNavigator)">
            -----------------------------------------------------------------------------
            <summary>
            The ReadManifest method reads the manifest file for the SkinControl compoent.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.SkinControlInstaller.Rollback">
            -----------------------------------------------------------------------------
            <summary>
            The Rollback method undoes the installation of the component in the event 
            that one of the other components fails
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.SkinControlInstaller.UnInstall">
            -----------------------------------------------------------------------------
            <summary>
            The UnInstall method uninstalls the SkinControl component
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Installers.SkinInstaller">
            -----------------------------------------------------------------------------
            <summary>
            The SkinInstaller installs Skin Components to a DotNetNuke site
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.SkinInstaller.CollectionNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Collection Node ("skinFiles")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.SkinInstaller.ItemNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Item Node ("skinFile")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.SkinInstaller.PhysicalBasePath">
            -----------------------------------------------------------------------------
            <summary>
            Gets the PhysicalBasePath for the skin files
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.SkinInstaller.RootPath">
            -----------------------------------------------------------------------------
            <summary>
            Gets the root folder for the Skin
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.SkinInstaller.SkinFiles">
            -----------------------------------------------------------------------------
            <summary>
            Gets the collection of Skin Files
            </summary>
            <value>A List(Of InstallFile)</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.SkinInstaller.SkinNameNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the SkinName Node ("skinName")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.SkinInstaller.SkinRoot">
            -----------------------------------------------------------------------------
            <summary>
            Gets the RootName of the Skin
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.SkinInstaller.SkinType">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Type of the Skin
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.SkinInstaller.AllowableFiles">
            -----------------------------------------------------------------------------
            <summary>
            Gets a list of allowable file extensions (in addition to the Host's List)
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.SkinInstaller.DeleteSkinPackage">
            -----------------------------------------------------------------------------
            <summary>
            The DeleteSkinPackage method deletes the Skin Package
            from the data Store.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.SkinInstaller.ProcessFile(DotNetNuke.Services.Installer.InstallFile,System.Xml.XPath.XPathNavigator)">
            -----------------------------------------------------------------------------
            <summary>
            The ProcessFile method determines what to do with parsed "file" node
            </summary>
            <param name="file">The file represented by the node</param>
            <param name="nav">The XPathNavigator representing the node</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.SkinInstaller.ReadCustomManifest(System.Xml.XPath.XPathNavigator)">
            -----------------------------------------------------------------------------
            <summary>
            The ReadCustomManifest method reads the custom manifest items
            </summary>
            <param name="nav">The XPathNavigator representing the node</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.SkinInstaller.UnInstallFile(DotNetNuke.Services.Installer.InstallFile)">
            -----------------------------------------------------------------------------
            <summary>
            The UnInstallFile method unInstalls a single file.
            </summary>
            <param name="unInstallFile">The InstallFile to unInstall.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.SkinInstaller.Install">
            -----------------------------------------------------------------------------
            <summary>
            The Install method installs the skin component
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.SkinInstaller.Rollback">
            -----------------------------------------------------------------------------
            <summary>
            The Rollback method undoes the installation of the component in the event 
            that one of the other components fails
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installers.SkinInstaller.UnInstall">
            -----------------------------------------------------------------------------
            <summary>
            The UnInstall method uninstalls the skin component
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Installers.WidgetInstaller">
            -----------------------------------------------------------------------------
            <summary>
            The WidgetInstaller installs Widget Components to a DotNetNuke site
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.WidgetInstaller.CollectionNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Collection Node ("widgetFiles")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.WidgetInstaller.ItemNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Item Node ("widgetFiles")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.WidgetInstaller.PhysicalBasePath">
            -----------------------------------------------------------------------------
            <summary>
            Gets the PhysicalBasePath for the widget files
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installers.WidgetInstaller.AllowableFiles">
            -----------------------------------------------------------------------------
            <summary>
            Gets a list of allowable file extensions (in addition to the Host's List)
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Packages.IPackageController.DeleteExtensionPackage(DotNetNuke.Services.Installer.Packages.PackageInfo)">
            <summary>
            DeleteExtensionPackage is used to remove an Extension Package for the System
            </summary>
            <param name="package">The Package you wish to delete</param>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Packages.IPackageController.GetExtensionPackage(System.Int32,System.Func{DotNetNuke.Services.Installer.Packages.PackageInfo,System.Boolean})">
            <summary>
            GetExtensionPackage is used to retrieve a specific package from the data store.
            </summary>
            <param name="portalId">The Id of the portal.  Most extension packages do not belong to
            a specific portal so in most situations developers will need to pass -1 to indicate this.
            The main situation where the portal Id will have a specific value is for skins which have
            been installed for a spcific portal/site.</param>
            <param name="predicate">The "search criteria" to use to identify the extension package to
            retrieve.  In most cases this will be a simple lambda method e.g. p => p.Name == "Name"</param>
            <returns>The extension package</returns>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Packages.IPackageController.GetExtensionPackage(System.Int32,System.Func{DotNetNuke.Services.Installer.Packages.PackageInfo,System.Boolean},System.Boolean)">
            <summary>
            GetExtensionPackage is used to retrieve a specific package from the data store.
            </summary>
            <param name="portalId">The Id of the portal.  Most extension packages do not belong to
            a specific portal so in most situations developers will need to pass -1 to indicate this.
            The main situation where the portal Id will have a specific value is for skins which have
            been installed for a spcific portal/site.</param>
            <param name="predicate">The "search criteria" to use to identify the extension package to
            retrieve.  In most cases this will be a simple lambda method e.g. p => p.Name == "Name"</param>
            <param name="useCopy">Whether use a copy of the package info object.</param>
            <returns>The extension package</returns>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Packages.IPackageController.GetExtensionPackages(System.Int32)">
            <summary>
            GetExtensionPackages is used to retrieve packages from the data store.
            </summary>
            <param name="portalId">The Id of the portal.  Most extension packages do not belong to
            a specific portal so in most situations developers will need to pass -1 to indicate this.
            The main situation where the portal Id will have a specific value is for skins which have
            been installed for a spcific portal/site.</param>
            <returns>A list of extension packages</returns>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Packages.IPackageController.GetExtensionPackages(System.Int32,System.Func{DotNetNuke.Services.Installer.Packages.PackageInfo,System.Boolean})">
            <summary>
            GetExtensionPackages is used to retrieve packages from the data store.
            </summary>
            <param name="portalId">The Id of the portal.  Most extension packages do not belong to
            a specific portal so in most situations developers will need to pass -1 to indicate this.
            The main situation where the portal Id will have a specific value is for skins which have
            been installed for a spcific portal/site.</param>
            <param name="predicate">The "search criteria" to use to identify the extension packages to
            retrieve.  In most cases this will be a simple lambda method e.g. p => p.PackageType == "Module"</param>
            <returns>A list of extension packages</returns>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Packages.IPackageController.SaveExtensionPackage(DotNetNuke.Services.Installer.Packages.PackageInfo)">
            <summary>
            SaveExtensionPackage is used to save an Extension Package.
            </summary>
            <param name="package">The Package you wish to save</param>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Packages.IPackageController.GetExtensionPackageType(System.Func{DotNetNuke.Services.Installer.Packages.PackageType,System.Boolean})">
            <summary>
            GetExtensionPackage is used to retrieve a specific package type from the data store.
            </summary>
            <param name="predicate">The "search criteria" to use to identify the package type to
            retrieve.  In most cases this will be a simple lambda method e.g. t => t.PackageType == "Modules"</param>
            <returns>A package type</returns>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Packages.IPackageController.GetExtensionPackageTypes">
            <summary>
            GetExtensionPackageTypes is used to retrieve package types from the data store.
            </summary>
            <returns>A list of package types</returns>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Packages.IPackageController.GetPackageDependencies(System.Func{DotNetNuke.Services.Installer.Packages.PackageDependencyInfo,System.Boolean})">
            <summary>
            Get the dependencies for a package
            </summary>
            <returns>A List of PackageDependencyInfo objects</returns>
        </member>
        <member name="T:DotNetNuke.Services.Installer.Packages.PackageController">
            -----------------------------------------------------------------------------
            <summary>
            The PackageController class provides the business class for the packages
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Packages.PackageController.SaveExtensionPackage(DotNetNuke.Services.Installer.Packages.PackageInfo)">
            <summary>
            Save or update the package
            </summary>
            <param name="package"></param> 
        </member>
        <member name="T:DotNetNuke.Services.Installer.Packages.PackageCreatedEventArgs">
            -----------------------------------------------------------------------------
             Project		: DotNetNuke
             Namespace   : DotNetNuke.Services.Installer.Packages
             Class		: PackageCreatedEventArgs
            -----------------------------------------------------------------------------
             <summary>
             PackageCreatedEventArgs provides a custom EventArgs class for a
             Package Created Event.
             </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Packages.PackageCreatedEventArgs.#ctor(DotNetNuke.Services.Installer.Packages.PackageInfo)">
            -----------------------------------------------------------------------------
             <summary>
             Builds a new PackageCreatedEventArgs
             </summary>
             <param name="package">The package associated with this event</param>
             <remarks></remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Packages.PackageCreatedEventArgs.Package">
            -----------------------------------------------------------------------------
             <summary>
             Gets the Package associated with this event
             </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Packages.PackageCreatedEventHandler">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Services.Installer.Packages
            Class:      PackageCreatedEventHandler
            -----------------------------------------------------------------------------
            <summary>
            The PackageCreatedEventHandler delegate defines a custom event handler for a
            PAckage Created Event.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Packages.PackageEditorBase">
            -----------------------------------------------------------------------------
            <summary>
            The PackageEditorBase class provides a Base Classs for Package Editors
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Packages.PackageEditorBase.PackageID">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Package ID
            </summary>
            <value>An Integer</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Packages.PackageEditorBase.IsWizard">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the Editor is in the Wizard
            </summary>
            <value>An Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Packages.PackageEditorBase.Initialize">
            -----------------------------------------------------------------------------
            <summary>
            Used to Initialize the Control
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Packages.PackageEditorBase.UpdatePackage">
            -----------------------------------------------------------------------------
            <summary>
            Used to Update the Package
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Packages.PackageInfo">
            -----------------------------------------------------------------------------
            <summary>
            The PackageInfo class represents a single Installer Package
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Packages.PackageInfo.#ctor(DotNetNuke.Services.Installer.InstallerInfo)">
            -----------------------------------------------------------------------------
            <summary>
            This Constructor creates a new InstallPackage instance as defined by the
            Parameters
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Packages.PackageInfo.#ctor">
            <summary>
            This Constructor creates a new InstallPackage instance
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.Dependencies">
            <summary>Gets the direct dependencies of this package.</summary>
        </member>
        <member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.Email">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Email for this package
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.Description">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Description of this package
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.FileName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the FileName of this package
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.Files">
            -----------------------------------------------------------------------------
            <summary>
            Gets a Dictionary of Files that are included in the Package
            </summary>
            <value>A Dictionary(Of String, InstallFile)</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.FolderName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name (path) of the folder where the package is installed
            </summary>
            <value>A string</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.FriendlyName">
            -----------------------------------------------------------------------------
            <summary>
            Gets and Sets the FriendlyName of this package
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.IconFile">
            -----------------------------------------------------------------------------
            <summary>
            Gets the url for the icon for the package
            </summary>
            <value>A string</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.InstalledVersion">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Installed Version of the Package
            </summary>
            <value>A System.Version</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.InstallerInfo">
            -----------------------------------------------------------------------------
            <summary>
            Gets the associated InstallerInfo
            </summary>
            <value>An InstallerInfo object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.InstallMode">
            -----------------------------------------------------------------------------
            <summary>
            Gets the InstallMode
            </summary>
            <value>An InstallMode value</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.IsSystemPackage">
            -----------------------------------------------------------------------------
            <summary>
            Gets and Sets whether this package is a "system" Package
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.IsValid">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether the Package is Valid
            </summary>
            <value>A Boolean value</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.License">
            -----------------------------------------------------------------------------
            <summary>
            Gets and Sets the License of this package
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.Log">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Logger
            </summary>
            <value>An Logger object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.Manifest">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Manifest of this package
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.Name">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Name of this package
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.Organization">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Organisation for this package
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.Owner">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Owner of this package
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.PackageID">
            -----------------------------------------------------------------------------
            <summary>
            Gets the ID of this package
            </summary>
            <value>An Integer</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.PackageType">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Type of this package
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.PortalID">
            -----------------------------------------------------------------------------
            <summary>
            Gets the ID of this portal
            </summary>
            <value>An Integer</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.ReleaseNotes">
            -----------------------------------------------------------------------------
            <summary>
            Gets and Sets the ReleaseNotes of this package
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.Url">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Url for this package
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Packages.PackageInfo.Version">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Version of this package
            </summary>
            <value>A System.Version</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Packages.PackageInfo.AttachInstallerInfo(DotNetNuke.Services.Installer.InstallerInfo)">
            -----------------------------------------------------------------------------
            <summary>
            The AttachInstallerInfo method attachs an InstallerInfo instance to the Package
            </summary>
            <param name="installer">The InstallerInfo instance to attach</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Packages.PackageInfo.Clone">
            <summary>
            Clone current object.
            </summary>
            <returns></returns>
        </member>
        <member name="T:DotNetNuke.Services.Installer.Packages.PackageTypeMemberNameFixer">
            <summary>
            This class allows PackageType to have a memeber named PackageType
            to remain compatible with the original VB implementation
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Installer.Packages.PackageType">
            -----------------------------------------------------------------------------
            <summary>
            The PackageType class represents a single Installer Package Type
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Packages.WebControls.PackageTypeEditControl">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Services.Installer.Packages.WebControls
            Class:      PackageTypeEditControl
            -----------------------------------------------------------------------------
            <summary>
            The PackageTypeEditControl control provides a standard UI component for editing
            package types.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Packages.WebControls.PackageTypeEditControl.RenderEditMode(System.Web.UI.HtmlTextWriter)">
            -----------------------------------------------------------------------------
            <summary>
            RenderEditMode renders the Edit mode of the control
            </summary>
            <param name="writer">A HtmlTextWriter.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Installer">
            -----------------------------------------------------------------------------
            <summary>
            The Installer class provides a single entrypoint for Package Installation
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installer.#ctor(System.String,System.String,System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            This Constructor creates a new Installer instance from a string representing
            the physical path to the temporary install folder and a string representing 
            the physical path to the root of the site
            </summary>
            <param name="tempFolder">The physical path to the zip file containg the package</param>
            <param name="manifest">The manifest filename</param>
            <param name="physicalSitePath">The physical path to the root of the site</param>
            <param name="loadManifest">Flag that determines whether the manifest will be loaded</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installer.#ctor(System.IO.Stream,System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            This Constructor creates a new Installer instance from a Stream and a
            string representing the physical path to the root of the site
            </summary>
            <param name="inputStream">The Stream to use to create this InstallerInfo instance</param>
            <param name="physicalSitePath">The physical path to the root of the site</param>
            <param name="loadManifest">Flag that determines whether the manifest will be loaded</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installer.#ctor(System.IO.Stream,System.String,System.Boolean,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            This Constructor creates a new Installer instance from a Stream and a
            string representing the physical path to the root of the site
            </summary>
            <param name="inputStream">The Stream to use to create this InstallerInfo instance</param>
            <param name="physicalSitePath">The physical path to the root of the site</param>
            <param name="loadManifest">Flag that determines whether the manifest will be loaded</param>
            <param name="deleteTemp">Whether delete the temp folder.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installer.#ctor(DotNetNuke.Services.Installer.Packages.PackageInfo,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            This Constructor creates a new Installer instance from a PackageInfo object
            </summary>
            <param name="package">The PackageInfo instance</param>
            <param name="physicalSitePath">The physical path to the root of the site</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installer.InstallerInfo">
            -----------------------------------------------------------------------------
            <summary>
            Gets the associated InstallerInfo object
            </summary>
            <value>An InstallerInfo</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installer.IsValid">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether the associated InstallerInfo is valid
            </summary>
            <value>True - if valid, False if not</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installer.Packages">
            -----------------------------------------------------------------------------
            <summary>
            Gets a SortedList of Packages that are included in the Package Zip
            </summary>
            <value>A SortedList(Of Integer, PackageInstaller)</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Installer.TempInstallFolder">
            -----------------------------------------------------------------------------
            <summary>
            Gets 
            </summary>
            <value>A Dictionary(Of String, PackageInstaller)</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installer.InstallPackages(System.Boolean@)">
            -----------------------------------------------------------------------------
            <summary>
            The InstallPackages method installs the packages
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installer.LogInstallEvent(System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Logs the Install event to the Event Log
            </summary>
            <param name="package">The name of the package</param>
            <param name="eventType">Event Type.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installer.ProcessPackages(System.Xml.XPath.XPathNavigator)">
            -----------------------------------------------------------------------------
            <summary>
            The ProcessPackages method processes the packages nodes in the manifest
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installer.Install">
            -----------------------------------------------------------------------------
            <summary>
            The Install method installs the feature.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installer.ReadManifest(System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            The ReadManifest method reads the manifest file and parses it into packages.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Installer.UnInstall(System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            The UnInstall method uninstalls the feature
            </summary>
            <param name="deleteFiles">A flag that indicates whether the files should be
            deleted</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.InstallerInfo">
            -----------------------------------------------------------------------------
            <summary>
            The InstallerInfo class holds all the information associated with a
            Installation.
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.InstallerInfo.#ctor">
            -----------------------------------------------------------------------------
            <summary>
            This Constructor creates a new InstallerInfo instance
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.InstallerInfo.#ctor(System.String,DotNetNuke.Services.Installer.InstallMode)">
            -----------------------------------------------------------------------------
            <summary>
            This Constructor creates a new InstallerInfo instance from a 
            string representing the physical path to the root of the site
            </summary>
            <param name="sitePath">The physical path to the root of the site</param>
            <param name="mode">Install Mode.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.InstallerInfo.#ctor(System.IO.Stream,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            This Constructor creates a new InstallerInfo instance from a Stream and a
            string representing the physical path to the root of the site
            </summary>
            <param name="inputStream">The Stream to use to create this InstallerInfo instance</param>
            <param name="sitePath">The physical path to the root of the site</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.InstallerInfo.#ctor(System.String,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            This Constructor creates a new InstallerInfo instance from a string representing
            the physical path to the temporary install folder and a string representing 
            the physical path to the root of the site
            </summary>
            <param name="tempFolder">The physical path to the zip file containg the package</param>
            <param name="manifest">The manifest filename</param>
            <param name="sitePath">The physical path to the root of the site</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.InstallerInfo.#ctor(DotNetNuke.Services.Installer.Packages.PackageInfo,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            This Constructor creates a new InstallerInfo instance from a PackageInfo object
            </summary>
            <param name="package">The PackageInfo instance</param>
            <param name="sitePath">The physical path to the root of the site</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.InstallerInfo.AllowableFiles">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets a list of allowable file extensions (in addition to the Host's List)
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.InstallerInfo.Files">
            -----------------------------------------------------------------------------
            <summary>
            Gets a Dictionary of Files that are included in the Package
            </summary>
            <value>A Dictionary(Of String, InstallFile)</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.InstallerInfo.HasValidFiles">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether the package contains Valid Files
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.InstallerInfo.IgnoreWhiteList">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the File Extension WhiteList is ignored
            </summary>
            <value>A Boolean value</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.InstallerInfo.Installed">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether the Package is already installed with the same version
            </summary>
            <value>A Boolean value</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.InstallerInfo.InstallMode">
            -----------------------------------------------------------------------------
            <summary>
            Gets the InstallMode
            </summary>
            <value>A InstallMode value</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.InstallerInfo.InvalidFileExtensions">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Invalid File Extensions
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.InstallerInfo.IsLegacyMode">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether the Installer is in legacy mode
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.InstallerInfo.IsValid">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether the InstallerInfo instance is Valid
            </summary>
            <value>A Boolean value</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.InstallerInfo.LegacyError">
            -----------------------------------------------------------------------------
            <summary>
            Gets the associated Logger
            </summary>
            <value>A Logger</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.InstallerInfo.Log">
            -----------------------------------------------------------------------------
            <summary>
            Gets the associated Logger
            </summary>
            <value>A Logger</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.InstallerInfo.ManifestFile">
            -----------------------------------------------------------------------------
            <summary>
            Gets and Sets the Manifest File for the Package
            </summary>
            <value>An InstallFile</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.InstallerInfo.PackageID">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Id of the package after installation (-1 if fail)
            </summary>
            <value>An Integer</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.InstallerInfo.PhysicalSitePath">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Physical Path to the root of the Site (eg D:\Websites\DotNetNuke")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.InstallerInfo.PortalID">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Id of the current portal (-1 if Host)
            </summary>
            <value>An Integer</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.InstallerInfo.RepairInstall">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the Package Install is being repaird
            </summary>
            <value>A Boolean value</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.InstallerInfo.SecurityAccessLevel">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the security Access Level of the user that is calling the INstaller
            </summary>
            <value>A SecurityAccessLevel enumeration</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.InstallerInfo.TempInstallFolder">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Temporary Install Folder used to unzip the archive (and to place the 
            backups of existing files) during InstallMode
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.InstallFile">
            -----------------------------------------------------------------------------
            <summary>
            The InstallFile class represents a single file in an Installer Package
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.InstallFile.#ctor(ICSharpCode.SharpZipLib.Zip.ZipInputStream,ICSharpCode.SharpZipLib.Zip.ZipEntry,DotNetNuke.Services.Installer.InstallerInfo)">
            -----------------------------------------------------------------------------
            <summary>
            This Constructor creates a new InstallFile instance from a ZipInputStream and a ZipEntry
            </summary>
            <remarks>The ZipInputStream is read into a byte array (Buffer), and the ZipEntry is used to
            set up the properties of the InstallFile class.</remarks>
            <param name="zip">The ZipInputStream</param>
            <param name="entry">The ZipEntry</param>
            <param name="info">An INstallerInfo instance</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.InstallFile.#ctor(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            This Constructor creates a new InstallFile instance
            </summary>
            <param name="fileName">The fileName of the File</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.InstallFile.#ctor(System.String,DotNetNuke.Services.Installer.InstallerInfo)">
            -----------------------------------------------------------------------------
            <summary>
            This Constructor creates a new InstallFile instance
            </summary>
            <param name="fileName">The fileName of the File</param>
            <param name="info">An INstallerInfo instance</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.InstallFile.#ctor(System.String,System.String,DotNetNuke.Services.Installer.InstallerInfo)">
            -----------------------------------------------------------------------------
            <summary>
            This Constructor creates a new InstallFile instance
            </summary>
            <param name="fileName">The fileName of the File</param>
            <param name="sourceFileName">Source file name.</param>
            <param name="info">An INstallerInfo instance</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.InstallFile.#ctor(System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            This Constructor creates a new InstallFile instance
            </summary>
            <param name="fileName">The file name of the File</param>
            <param name="filePath">The file path of the file</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.InstallFile.Action">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Action for this file
            </summary>
            <value>A string</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.InstallFile.BackupFileName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the location of the backup file
            </summary>
            <value>A string</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.InstallFile.BackupPath">
            -----------------------------------------------------------------------------
            <summary>
            Gets the location of the backup folder
            </summary>
            <value>A string</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.InstallFile.Extension">
            -----------------------------------------------------------------------------
            <summary>
            Gets the File Extension of the file
            </summary>
            <value>A string</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.InstallFile.FullName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Full Name of the file
            </summary>
            <value>A string</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.InstallFile.InstallerInfo">
            -----------------------------------------------------------------------------
            <summary>
            Gets the associated InstallerInfo
            </summary>
            <value>An InstallerInfo object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.InstallFile.Name">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Name of the file
            </summary>
            <value>A string</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.InstallFile.Path">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Path of the file
            </summary>
            <value>A string</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.InstallFile.SourceFileName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the source file name
            </summary>
            <value>A string</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.InstallFile.TempFileName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the location of the temporary file
            </summary>
            <value>A string</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.InstallFile.Type">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Type of the file
            </summary>
            <value>An InstallFileType Enumeration</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.InstallFile.Version">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Version of the file
            </summary>
            <value>A System.Version</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.InstallFile.ParseFileName(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            The ParseFileName parses the ZipEntry metadata
            </summary>
            <param name="fileName">A String representing the file name</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.InstallFile.ReadZip(ICSharpCode.SharpZipLib.Zip.ZipInputStream,ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            -----------------------------------------------------------------------------
            <summary>
            The ReadZip method reads the zip stream and parses the ZipEntry metadata
            </summary>
            <param name="unzip">A ZipStream containing the file content</param>
            <param name="entry">A ZipEntry containing the file metadata</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.InstallFile.SetVersion(System.Version)">
            -----------------------------------------------------------------------------
            <summary>
            The SetVersion method sets the version of the file
            </summary>
            <param name="version">The version of the file</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.LegacyUtil">
            -----------------------------------------------------------------------------
            <summary>
            The LegacyUtil class is a Utility class that provides helper methods to transfer
            legacy packages to Cambrian's Universal Installer based system
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.LegacyUtil.ProcessLegacyLanguages">
            <summary>
            Process legacy language package (that is based on manifest xml file)
            </summary> 
        </member>
        <member name="M:DotNetNuke.Services.Installer.LegacyUtil.ProcessLegacyModule(DotNetNuke.Entities.Modules.DesktopModuleInfo)">
            <summary>
            Process legacy module version 3 .dnn install file
            </summary>
            <param name="desktopModule"></param> 
        </member>
        <member name="M:DotNetNuke.Services.Installer.LegacyUtil.ProcessLegacySkinControls">
            <summary>
            Process legacy skinobject version 3 .dnn install package
            </summary> 
        </member>
        <member name="T:DotNetNuke.Services.Installer.Log.LogEntry">
            -----------------------------------------------------------------------------
            <summary>
            The LogEntry class provides a single entry for the Installer Log
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Log.LogEntry.#ctor(DotNetNuke.Services.Installer.Log.LogType,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            This Constructor builds a LogEntry from its type and description
            </summary>
            <remarks>
            </remarks>
            <param name="description">The description (detail) of the entry</param>
            <param name="type">The type of LogEntry</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Log.LogEntry.Type">
            -----------------------------------------------------------------------------
            <summary>
            Gets the type of LogEntry
            </summary>
            <value>A LogType</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Log.LogEntry.Description">
            -----------------------------------------------------------------------------
            <summary>
            Gets the description of LogEntry
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Log.Logger">
            -----------------------------------------------------------------------------
            <summary>
            The Logger class provides an Installer Log
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Log.Logger.ErrorClass">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Css Class used for Error Log Entries
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Log.Logger.HighlightClass">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Css Class used for Log Entries that should be highlighted
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Log.Logger.Logs">
            -----------------------------------------------------------------------------
            <summary>
            Gets a List of Log Entries
            </summary>
            <value>A List of LogEntrys</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Log.Logger.NormalClass">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Css Class used for normal Log Entries
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Log.Logger.Valid">
            -----------------------------------------------------------------------------
            <summary>
            Gets a Flag that indicates whether the Installation was Valid
            </summary>
            <value>A List of LogEntrys</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Log.Logger.AddFailure(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            The AddFailure method adds a new LogEntry of type Failure to the Logs collection
            </summary>
            <remarks>This method also sets the Valid flag to false</remarks>
            <param name="failure">The description of the LogEntry</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Log.Logger.AddInfo(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            The AddInfo method adds a new LogEntry of type Info to the Logs collection
            </summary>
            <param name="info">The description of the LogEntry</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Log.Logger.AddWarning(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            The AddWarning method adds a new LogEntry of type Warning to the Logs collection
            </summary>
            <param name="warning">The description of the LogEntry</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Log.Logger.EndJob(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            The EndJob method adds a new LogEntry of type EndJob to the Logs collection
            </summary>
            <param name="job">The description of the LogEntry</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Log.Logger.GetLogsTable">
            -----------------------------------------------------------------------------
            <summary>
            GetLogsTable formats log entries in an HtmlTable
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Log.Logger.StartJob(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            The StartJob method adds a new LogEntry of type StartJob to the Logs collection
            </summary>
            <param name="job">The description of the LogEntry</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Util">
            -----------------------------------------------------------------------------
            <summary>
            The InstallerBase class is a Base Class for all Installer
            classes that need to use Localized Strings.  It provides these strings
            as localized Constants.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Util.StreamToStream(System.IO.Stream,System.IO.Stream)">
            -----------------------------------------------------------------------------
            <summary>
            The StreamToStream method reads a source stream and wrtites it to a destination stream
            </summary>
            <param name="sourceStream">The Source Stream</param>
            <param name="destStream">The Destination Stream</param>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Util.BackupFile(DotNetNuke.Services.Installer.InstallFile,System.String,DotNetNuke.Services.Installer.Log.Logger)">
            -----------------------------------------------------------------------------
            <summary>
            The BackupFile method backs up a file to the backup folder
            </summary>
            <param name="installFile">The file to backup</param>
            <param name="basePath">The basePath to the file</param>
            <param name="log">A Logger to log the result</param>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Util.CopyFile(DotNetNuke.Services.Installer.InstallFile,System.String,DotNetNuke.Services.Installer.Log.Logger)">
            -----------------------------------------------------------------------------
            <summary>
            The CopyFile method copies a file from the temporary extract location.
            </summary>
            <param name="installFile">The file to copy</param>
            <param name="basePath">The basePath to the file</param>
            <param name="log">A Logger to log the result</param>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Util.DeleteFile(DotNetNuke.Services.Installer.InstallFile,System.String,DotNetNuke.Services.Installer.Log.Logger)">
            -----------------------------------------------------------------------------
            <summary>
            The DeleteFile method deletes a file.
            </summary>
            <param name="installFile">The file to delete</param>
            <param name="basePath">The basePath to the file</param>
            <param name="log">A Logger to log the result</param>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Util.DeleteFile(System.String,System.String,DotNetNuke.Services.Installer.Log.Logger)">
            -----------------------------------------------------------------------------
            <summary>
            The DeleteFile method deletes a file.
            </summary>
            <param name="fileName">The file to delete</param>
            <param name="basePath">The basePath to the file</param>
            <param name="log">A Logger to log the result</param>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Util.GetLocalizedString(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            The GetLocalizedString method provides a conveniencewrapper around the
            Localization of Strings
            </summary>
            <param name="key">The localization key</param>
            <returns>The localized string</returns>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Util.InstallURL(System.Int32,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            The InstallURL method provides a utility method to build the correct url
            to install a package (and return to where you came from)
            </summary>
            <param name="tabId">The id of the tab you are on</param>
            <param name="type">The type of package you are installing</param>
            <returns>The localized string</returns>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Util.PackageWriterURL(DotNetNuke.UI.Modules.ModuleInstanceContext,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            The PackageWriterURL method provides a utility method to build the correct url
            to create a package (and return to where you came from)
            </summary>
            <param name="context">The ModuleContext of the module</param>
            <param name="packageId">The id of the package you are packaging</param>
            <returns>The localized string</returns>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Util.RestoreFile(DotNetNuke.Services.Installer.InstallFile,System.String,DotNetNuke.Services.Installer.Log.Logger)">
            -----------------------------------------------------------------------------
            <summary>
            The RestoreFile method restores a file from the backup folder
            </summary>
            <param name="installFile">The file to restore</param>
            <param name="basePath">The basePath to the file</param>
            <param name="log">A Logger to log the result</param>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Util.UnInstallURL(System.Int32,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            The UnInstallURL method provides a utility method to build the correct url
            to uninstall a package (and return to where you came from)
            </summary>
            <param name="tabId">The id of the tab you are on</param>
            <param name="packageId">The id of the package you are uninstalling</param>
            <returns>The localized string</returns>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Util.WriteStream(System.IO.Stream,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            The WriteStream reads a source stream and writes it to a destination file
            </summary>
            <param name="sourceStream">The Source Stream</param>
            <param name="destFileName">The Destination file</param>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Util.TryToCreateAndExecute(System.String,System.Action{System.IO.FileStream},System.Int32)">
            <summary>
            Try to create file and perform an action on a file until a specific amount of time
            </summary>
            <param name="path">Path of the file</param>
            <param name="action">Action to execute on file</param>
            <param name="milliSecondMax">Maimum amount of time to try to do the action</param>
            <returns>true if action occur and false otherwise</returns>
        </member>
        <member name="T:DotNetNuke.Services.Installer.Writers.AssemblyComponentWriter">
            -----------------------------------------------------------------------------
            <summary>
            The AssemblyComponentWriter class handles creating the manifest for Assembly
            Component(s)
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.AssemblyComponentWriter.CollectionNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Collection Node ("assemblies")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.AssemblyComponentWriter.ComponentType">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Component Type ("Assembly")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.AssemblyComponentWriter.ItemNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Item Node ("assembly")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Writers.AuthenticationPackageWriter">
            -----------------------------------------------------------------------------
            <summary>
            The AuthenticationPackageWriter class
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.AuthenticationPackageWriter.AuthSystem">
            -----------------------------------------------------------------------------
            <summary>
            Gets the associated Authentication System
            </summary>
            <value>An AuthenticationInfo object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Writers.CleanupComponentWriter">
            -----------------------------------------------------------------------------
            <summary>
            The CleanupComponentWriter class handles creating the manifest for Cleanup
            Component(s)
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Writers.CleanupComponentWriter.#ctor(System.String,System.Collections.Generic.SortedList{System.String,DotNetNuke.Services.Installer.InstallFile})">
            -----------------------------------------------------------------------------
            <summary>
            Constructs the ContainerComponentWriter
            </summary>
            <param name="basePath">Base Path.</param>
            <param name="files">A Dictionary of files</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Writers.ContainerComponentWriter">
            -----------------------------------------------------------------------------
            <summary>
            The ContainerComponentWriter class handles creating the manifest for Container
            Component(s)
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Writers.ContainerComponentWriter.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.String,DotNetNuke.Services.Installer.InstallFile},DotNetNuke.Services.Installer.Packages.PackageInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Constructs the ContainerComponentWriter
            </summary>
            <param name="containerName">The name of the Container</param>
            <param name="basePath">The Base Path for the files</param>
            <param name="files">A Dictionary of files</param>
            <param name="package"></param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.ContainerComponentWriter.CollectionNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Collection Node ("containerFiles")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.ContainerComponentWriter.ComponentType">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Component Type ("Skin")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.ContainerComponentWriter.ItemNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Item Node ("containerFile")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.ContainerComponentWriter.SkinNameNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the SkinName Node ("containerName")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Writers.ContainerPackageWriter">
            -----------------------------------------------------------------------------
            <summary>
            The ContainerPackageWriter class
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Writers.FileComponentWriter">
            -----------------------------------------------------------------------------
            <summary>
            The FileComponentWriter class handles creating the manifest for File Component(s)
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Writers.FileComponentWriter.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,DotNetNuke.Services.Installer.InstallFile},DotNetNuke.Services.Installer.Packages.PackageInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Constructs the FileComponentWriter
            </summary>
            <param name="basePath">The Base Path for the files</param>
            <param name="files">A Dictionary of files</param>
            <param name="package">Package Info.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.FileComponentWriter.CollectionNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Collection Node ("files")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.FileComponentWriter.ComponentType">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Component Type ("File")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.FileComponentWriter.ItemNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Item Node ("file")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.FileComponentWriter.Log">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Logger
            </summary>
            <value>A Logger</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.FileComponentWriter.Package">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Package
            </summary>
            <value>A PackageInfo</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Writers.FileComponentWriter.WriteCustomManifest(System.Xml.XmlWriter)">
            -----------------------------------------------------------------------------
            <summary>
            The WriteCustomManifest method writes the custom manifest items (that subclasses
            of FileComponentWriter may need)
            </summary>
            <param name="writer">The Xmlwriter to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Writers.LanguageComponentWriter">
            -----------------------------------------------------------------------------
            <summary>
            The LanguageComponentWriter class handles creating the manifest for Language
            Component(s)
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Writers.LanguageComponentWriter.#ctor(DotNetNuke.Services.Localization.Locale,System.String,System.Collections.Generic.Dictionary{System.String,DotNetNuke.Services.Installer.InstallFile},DotNetNuke.Services.Installer.Packages.PackageInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Constructs the LanguageComponentWriter
            </summary>
            <param name="language">Language Info.</param>
            <param name="basePath">Base Path.</param>
            <param name="files">A Dictionary of files</param>
            <param name="package">Package Info.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Writers.LanguageComponentWriter.#ctor(DotNetNuke.Services.Localization.LanguagePackInfo,System.String,System.Collections.Generic.Dictionary{System.String,DotNetNuke.Services.Installer.InstallFile},DotNetNuke.Services.Installer.Packages.PackageInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Constructs the LanguageComponentWriter
            </summary>
            <param name="languagePack">Language Package info.</param>
            <param name="basePath">Base Path.</param>
            <param name="files">A Dictionary of files</param>
            <param name="package">Package Info.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.LanguageComponentWriter.CollectionNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Collection Node ("languageFiles")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.LanguageComponentWriter.ComponentType">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Component Type ("CoreLanguage/ExtensionLanguage")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.LanguageComponentWriter.ItemNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Item Node ("languageFile")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Writers.LanguageComponentWriter.WriteCustomManifest(System.Xml.XmlWriter)">
            -----------------------------------------------------------------------------
            <summary>
            The WriteCustomManifest method writes the custom manifest items
            </summary>
            <param name="writer">The Xmlwriter to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Writers.LanguagePackWriter">
            -----------------------------------------------------------------------------
            <summary>
            The LanguagePackWriter class
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.LanguagePackWriter.Language">
            -----------------------------------------------------------------------------
            <summary>
            Gets the associated Language
            </summary>
            <value>An Locale object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.LanguagePackWriter.LanguagePack">
            -----------------------------------------------------------------------------
            <summary>
            Gets the associated Language Pack
            </summary>
            <value>An LanguagePackInfo object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Writers.LibraryPackageWriter">
            -----------------------------------------------------------------------------
            <summary>
            The LibraryPackageWriter class
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Writers.ModulePackageWriter">
            -----------------------------------------------------------------------------
            <summary>
            The ModulePackageWriter class
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.ModulePackageWriter.DesktopModule">
            -----------------------------------------------------------------------------
            <summary>
            Gets the associated Desktop Module
            </summary>
            <value>A DesktopModuleInfo object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Writers.PackageWriterBase">
            -----------------------------------------------------------------------------
            <summary>
            The PackageWriter class
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.PackageWriterBase.AppCodeFiles">
            -----------------------------------------------------------------------------
            <summary>
            Gets a Dictionary of AppCodeFiles that should be included in the Package
            </summary>
            <value>A Dictionary(Of String, InstallFile)</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.PackageWriterBase.AppCodePath">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Path for the Package's app code files
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.PackageWriterBase.Assemblies">
            -----------------------------------------------------------------------------
            <summary>
            Gets a Dictionary of Assemblies that should be included in the Package
            </summary>
            <value>A Dictionary(Of String, InstallFile)</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.PackageWriterBase.AssemblyPath">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Path for the Package's assemblies
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.PackageWriterBase.BasePath">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Base Path for the Package
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.PackageWriterBase.CleanUpFiles">
            -----------------------------------------------------------------------------
            <summary>
            Gets a Dictionary of CleanUpFiles that should be included in the Package
            </summary>
            <value>A Dictionary(Of String, InstallFile)</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.PackageWriterBase.Files">
            -----------------------------------------------------------------------------
            <summary>
            Gets a Dictionary of Files that should be included in the Package
            </summary>
            <value>A Dictionary(Of String, InstallFile)</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.PackageWriterBase.HasProjectFile">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether a project file is found in the folder
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.PackageWriterBase.IncludeAssemblies">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether to include Assemblies
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.PackageWriterBase.LegacyError">
            <summary>
            Gets and sets whether there are any errors in parsing legacy packages
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.PackageWriterBase.Log">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Logger
            </summary>
            <value>An Logger object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.PackageWriterBase.Package">
            -----------------------------------------------------------------------------
            <summary>
            Gets the associated Package
            </summary>
            <value>An PackageInfo object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.PackageWriterBase.Resources">
            -----------------------------------------------------------------------------
            <summary>
            Gets a Dictionary of Resources that should be included in the Package
            </summary>
            <value>A Dictionary(Of String, InstallFile)</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.PackageWriterBase.Scripts">
            -----------------------------------------------------------------------------
            <summary>
            Gets a Dictionary of Scripts that should be included in the Package
            </summary>
            <value>A Dictionary(Of String, InstallFile)</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.PackageWriterBase.Versions">
            -----------------------------------------------------------------------------
            <summary>
            Gets a List of Versions that should be included in the Package
            </summary>
            <value>A List(Of String)</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Writers.PackageWriterBase.WriteManifest(System.String,System.String)">
            <summary>
            WriteManifest writes an existing manifest
            </summary>
            <param name="manifestName">The name of the manifest file</param>
            <param name="manifest">The manifest</param>
            <remarks>This overload takes a package manifest and writes it to a file</remarks>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Writers.PackageWriterBase.WriteManifest(System.Xml.XmlWriter,System.String)">
            <summary>
            WriteManifest writes a package manifest to an XmlWriter
            </summary>
            <param name="writer">The XmlWriter</param>
            <param name="manifest">The manifest</param>
            <remarks>This overload takes a package manifest and writes it to a Writer</remarks>
        </member>
        <member name="M:DotNetNuke.Services.Installer.Writers.PackageWriterBase.WriteManifest(System.Boolean)">
            <summary>
            WriteManifest writes the manifest assoicated with this PackageWriter to a string
            </summary>
            <param name="packageFragment">A flag that indicates whether to return the package element
            as a fragment (True) or whether to add the outer dotnetnuke and packages elements (False)</param>
            <returns>The manifest as a string</returns>
            <remarks></remarks>
        </member>
        <member name="T:DotNetNuke.Services.Installer.Writers.PackageWriterFactory">
            -----------------------------------------------------------------------------
            <summary>
            The PackageWriterFactory is a factory class that is used to instantiate the
            appropriate Package Writer
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Writers.PackageWriterFactory.GetWriter(DotNetNuke.Services.Installer.Packages.PackageInfo)">
            -----------------------------------------------------------------------------
            <summary>
            The GetWriter method instantiates the relevant PackageWriter Installer
            </summary>
            <param name="package">The associated PackageInfo instance</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Writers.ProviderPackageWriter">
            -----------------------------------------------------------------------------
            <summary>
            The ProviderPackageWriter class
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Writers.ResourceFileComponentWriter">
            -----------------------------------------------------------------------------
            <summary>
            The ResourceFileComponentWriter class handles creating the manifest for Resource
            File Component(s)
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Writers.ResourceFileComponentWriter.#ctor(System.String,System.Collections.Generic.Dictionary{System.String,DotNetNuke.Services.Installer.InstallFile},DotNetNuke.Services.Installer.Packages.PackageInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Constructs the ResourceFileComponentWriter
            </summary>
            <param name="basePath">The Base Path for the files</param>
            <param name="files">A Dictionary of files</param>
            <param name="package"></param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.ResourceFileComponentWriter.CollectionNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Collection Node ("resourceFiles")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.ResourceFileComponentWriter.ComponentType">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Component Type ("ResourceFile")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.ResourceFileComponentWriter.ItemNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Item Node ("resourceFile")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Writers.ScriptComponentWriter">
            -----------------------------------------------------------------------------
            <summary>
            The ScriptComponentWriter class handles creating the manifest for Script
            Component(s)
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.ScriptComponentWriter.CollectionNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Collection Node ("scripts")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.ScriptComponentWriter.ComponentType">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Component Type ("Script")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.ScriptComponentWriter.ItemNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Item Node ("script")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Writers.SkinComponentWriter">
            -----------------------------------------------------------------------------
            <summary>
            The SkinComponentWriter class handles creating the manifest for Skin Component(s)
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Writers.SkinComponentWriter.#ctor(System.String,System.String,System.Collections.Generic.Dictionary{System.String,DotNetNuke.Services.Installer.InstallFile},DotNetNuke.Services.Installer.Packages.PackageInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Constructs the SkinComponentWriter
            </summary>
            <param name="skinName">The name of the Skin</param>
            <param name="basePath">The Base Path for the files</param>
            <param name="files">A Dictionary of files</param>
            <param name="package">Package Info.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.SkinComponentWriter.CollectionNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Collection Node ("skinFiles")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.SkinComponentWriter.ComponentType">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Component Type ("Skin")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.SkinComponentWriter.ItemNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Item Node ("skinFile")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.SkinComponentWriter.SkinNameNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the SkinName Node ("skinName")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.Writers.SkinComponentWriter.WriteCustomManifest(System.Xml.XmlWriter)">
            -----------------------------------------------------------------------------
            <summary>
            The WriteCustomManifest method writes the custom manifest items (that subclasses
            of FileComponentWriter may need)
            </summary>
            <param name="writer">The Xmlwriter to use</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Writers.SkinControlPackageWriter">
            -----------------------------------------------------------------------------
            <summary>
            The SkinControlPackageWriter class
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.SkinControlPackageWriter.SkinControl">
            -----------------------------------------------------------------------------
            <summary>
            Gets the associated SkinControl
            </summary>
            <value>A SkinControlInfo object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Writers.SkinPackageWriter">
            -----------------------------------------------------------------------------
            <summary>
            The SkinPackageWriter class
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Writers.WidgetComponentWriter">
            -----------------------------------------------------------------------------
            <summary>
            The WidgetComponentWriter class handles creating the manifest for Widget Component(s)
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.WidgetComponentWriter.CollectionNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Collection Node ("widgetFiles")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.WidgetComponentWriter.ItemNodeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Item Node ("widgetFiles")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.Writers.WidgetComponentWriter.ComponentType">
            -----------------------------------------------------------------------------
            <summary>
            Gets the name of the Component Type ("Widget")
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.Writers.WidgetPackageWriter">
            -----------------------------------------------------------------------------
            <summary>
            The WidgetPackageWriter class
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Installer.XmlMerge">
            -----------------------------------------------------------------------------
            <summary>
            The XmlMerge class is a utility class for XmlSplicing config files
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.XmlMerge.#ctor(System.String,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Initializes a new instance of the XmlMerge class.
            </summary>
            <param name="version"></param>
            <param name="sender"></param>
            <param name="sourceFileName"></param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.XmlMerge.#ctor(System.IO.Stream,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Initializes a new instance of the XmlMerge class.
            </summary>
            <param name="version"></param>
            <param name="sender"></param>
            <param name="sourceStream"></param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.XmlMerge.#ctor(System.IO.TextReader,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Initializes a new instance of the XmlMerge class.
            </summary>
            <param name="version"></param>
            <param name="sender"></param>
            <param name="sourceReader"></param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.XmlMerge.#ctor(System.Xml.XmlDocument,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Initializes a new instance of the XmlMerge class.
            </summary>
            <param name="version"></param>
            <param name="sender"></param>
            <param name="sourceDoc"></param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.XmlMerge.SourceConfig">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Source for the Config file
            </summary>
            <value>An XmlDocument</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.XmlMerge.Sender">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Sender (source) of the changes to be merged
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.XmlMerge.TargetConfig">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Target Config file
            </summary>
            <value>An XmlDocument</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.XmlMerge.TargetFileName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the File Name of the Target Config file
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.XmlMerge.Version">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Version of the changes to be merged
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Installer.XmlMerge.ConfigUpdateChangedNodes">
            -----------------------------------------------------------------------------
            <summary>
            Gets a value indicating whether the last update performed by this instance resulted in any changes
            </summary>
            <value><c>true</c> if there were changes, <c>false</c> if no changes were made to the target document</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.XmlMerge.UpdateConfig(System.Xml.XmlDocument)">
            -----------------------------------------------------------------------------
            <summary>
            The UpdateConfig method processes the source file and updates the Target
            Config Xml Document.
            </summary>
            <param name="target">An Xml Document represent the Target Xml File</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.XmlMerge.UpdateConfig(System.Xml.XmlDocument,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            The UpdateConfig method processes the source file and updates the Target
            Config file.
            </summary>
            <param name="target">An Xml Document represent the Target Xml File</param>
            <param name="fileName">The fileName for the Target Xml File - relative to the webroot</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Installer.XmlMerge.UpdateConfigs">
            -----------------------------------------------------------------------------
            <summary>
            The UpdateConfigs method processes the source file and updates the various config 
            files
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Localization.LocalizationExtensions.GetLocaleCodeFromFileName(System.String)">
            <summary>
            Gets the name of the locale code from a resource file.
            E.g. My file with.fancy-characters.fr-FR.resx should return "fr-FR".
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>Microsoft compatible locale code</returns>
        </member>
        <member name="M:DotNetNuke.Services.Localization.LocalizationExtensions.GetFileNameFromLocalizedResxFile(System.String)">
            <summary>
            Gets the file name part from localized resource file.
            E.g. My file with.fancy-characters.fr-FR.resx should return "My file with.fancy-characters".
            </summary>
            <param name="fileName">Name of the file.</param>
            <returns>File name stripped of culture code or extension</returns>
        </member>
        <member name="T:DotNetNuke.Services.Localization.ILocalizationProvider">
            <summary>
            Do not implement.  This interface is only implemented by the DotNetNuke core framework. Outside the framework it should used as a type and for unit test purposes only.
            There is no guarantee that this interface will not change.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Localization.ILocalizationProvider.SaveString(System.String,System.String,System.String,System.String,DotNetNuke.Entities.Portals.PortalSettings,DotNetNuke.Services.Localization.LocalizationProvider.CustomizedLocale,System.Boolean,System.Boolean)">
            <summary>
            Saves a string to a resource file.
            </summary>
            <param name="key">The key to save (e.g. "MyWidget.Text").</param>
            <param name="value">The text value for the key.</param>
            <param name="resourceFileRoot">Relative path for the resource file root (e.g. "DesktopModules/Admin/Lists/App_LocalResources/ListEditor.ascx.resx").</param>
            <param name="language">The locale code in lang-region format (e.g. "fr-FR").</param>
            <param name="portalSettings">The current portal settings.</param>
            <param name="resourceType">Specifies whether to save as portal, host or system resource file.</param>
            <param name="addFile">if set to <c>true</c> a new file will be created if it is not found.</param>
            <param name="addKey">if set to <c>true</c> a new key will be created if not found.</param>
            <returns>If the value could be saved then true will be returned, otherwise false.</returns>
            <exception cref="T:System.Exception">Any file io error or similar will lead to exceptions</exception>
        </member>
        <member name="M:DotNetNuke.Services.Localization.ILocalizationProvider.GetCompiledResourceFile(DotNetNuke.Entities.Portals.PortalSettings,System.String,System.String)">
            <summary>
            Gets a compiled resource file for a specific language and portal. This takes the original resource file 
            and overwrites it with any keys found in localized and overridden resource files according to .net and DNN rules.
            </summary>
            <param name="portalSettings">The portal settings for the requesting portal. Only used to retrieve PortalId and DefaultLanguage.</param>
            <param name="resourceFile">The resource file to be retrieved. Relative path from DNN's root starting with /.</param>
            <param name="locale">The requested locale. You should use the thread locale by default.</param>
            <returns>Dictionary of key value pairs where the keys are the localization keys and the values the localized texts.</returns>
        </member>
        <member name="M:DotNetNuke.Services.Localization.Internal.ILocalization.BestCultureCodeBasedOnBrowserLanguages(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Inspect the browser supplied language headers and find the best match from the supplied list
            </summary>
            <param name="cultureCodes">The codes to search for a match</param>
            <param name="fallback">The code to return if no good match is found</param>
            <returns>Best matching culture code, or fallback if no good match found</returns>
        </member>
        <member name="M:DotNetNuke.Services.Localization.Internal.ILocalization.BestCultureCodeBasedOnBrowserLanguages(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Inspect the browser supplied language headers and find the best match from the supplied list
            </summary>
            <param name="cultureCodes">The codes to search for a match</param>
            <returns>Best matching culture code, or SystemLocale if no good match found</returns>
        </member>
        <member name="M:DotNetNuke.Services.Localization.Internal.ILocalization.GetPageLocale(DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>
            Detects the current language for the request.
            The order in which the language is being detect is:
            	1. QueryString
            	2. Cookie
            	3. User profile (if request is authenticated)
            	4. Browser preference (if portal has this option enabled)
            	5. Portal default
            	6. System default (en-US)
            At any point, if a valid language is detected nothing else should be done
            </summary>
            <param name="portalSettings">Current PortalSettings</param>
            <returns>A valid CultureInfo</returns>
        </member>
        <member name="M:DotNetNuke.Services.Localization.Internal.ILocalization.SetThreadCultures(System.Globalization.CultureInfo,DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>
              Sets the culture codes on the current Thread
            </summary>
            <param name = "cultureInfo">Culture Info for the current page</param>
            <param name = "portalSettings">The current portalSettings</param>
            <remarks>
              This method will configure the Thread culture codes.  Any page which does not derive from PageBase should
              be sure to call this method in OnInit to ensure localiztion works correctly.  See the TelerikDialogHandler for an example.
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.Localization.LocalizationProvider.SaveString(System.String,System.String,System.String,System.String,DotNetNuke.Entities.Portals.PortalSettings,DotNetNuke.Services.Localization.LocalizationProvider.CustomizedLocale,System.Boolean,System.Boolean)">
            <summary>
            Saves a string to a resource file.
            </summary>
            <param name="key">The key to save (e.g. "MyWidget.Text").</param>
            <param name="value">The text value for the key.</param>
            <param name="resourceFileRoot">Relative path for the resource file root (e.g. "DesktopModules/Admin/Lists/App_LocalResources/ListEditor.ascx.resx").</param>
            <param name="language">The locale code in lang-region format (e.g. "fr-FR").</param>
            <param name="portalSettings">The current portal settings.</param>
            <param name="resourceType">Specifies whether to save as portal, host or system resource file.</param>
            <param name="createFile">if set to <c>true</c> a new file will be created if it is not found.</param>
            <param name="createKey">if set to <c>true</c> a new key will be created if not found.</param>
            <returns>If the value could be saved then true will be returned, otherwise false.</returns>
            <exception cref="T:System.Exception">Any file io error or similar will lead to exceptions</exception>
        </member>
        <member name="M:DotNetNuke.Services.Localization.LocalizationProvider.AddResourceFileNode(System.Xml.XmlNode@,System.String,System.String,System.String)">
            <summary>
            Adds one of either a "resheader" or "data" element to resxRoot (which should be the root element of the resx file). 
            This function is used to construct new resource files and to add resource keys to an existing file.
            </summary>
            <param name="resxRoot">The RESX root.</param>
            <param name="elementName">Name of the element ("resheader" or "data").</param>
            <param name="nodeName">Name of the node (in case of "data" specify the localization key here, e.g. "MyWidget.Text").</param>
            <param name="nodeValue">The node value (text value to use).</param>
        </member>
        <member name="T:DotNetNuke.Services.Localization.LanguagesListType">
            -----------------------------------------------------------------------------
            <summary>
            Enumeration that determines the type of Languages List
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Localization.Locale">
            <summary>
              <para>The Locale class is a custom business object that represents a locale, which is the language and country combination.</para>
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Localization.LocaleCollection">
            <summary>
            <para>The LocaleCollection class is a collection of Locale objects.  It stores the supported locales.</para>
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Localization.CultureDropDownTypes">
            <summary>
            <para>CultureDropDownTypes allows the user to specify which culture name is displayed in the drop down list that is filled 
            by using one of the helper methods.</para>
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Localization.CultureDropDownTypes.DisplayName">
            <summary>
            Displays the culture name in the format "&lt;languagefull&gt; (&lt;country/regionfull&gt;) in the .NET Framework language
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Localization.CultureDropDownTypes.EnglishName">
            <summary>
            Displays the culture name in the format "&lt;languagefull&gt; (&lt;country/regionfull&gt;) in English
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Localization.CultureDropDownTypes.Lcid">
            <summary>
            Displays the culture identifier
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Localization.CultureDropDownTypes.Name">
            <summary>
            Displays the culture name in the format "&lt;languagecode2&gt; (&lt;country/regioncode2&gt;)
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Localization.CultureDropDownTypes.NativeName">
            <summary>
            Displays the culture name in the format "&lt;languagefull&gt; (&lt;country/regionfull&gt;) in the language that the culture is set to display
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Localization.CultureDropDownTypes.TwoLetterIsoCode">
            <summary>
            Displays the IS0 639-1 two letter code
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Localization.CultureDropDownTypes.ThreeLetterIsoCode">
            <summary>
            Displays the ISO 629-2 three letter code "&lt;languagefull&gt; (&lt;country/regionfull&gt;)
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Localization.Localization">
            <summary>
            Localization class support localization in system.
            </summary>
            <remarks>
            <para>As DNN is used in more and more countries it is very important to provide modules with 
            good support for international users. Otherwise we are limiting our potential user base to 
            that using English as their base language.</para>
            <para>
            You can store the muti language content in resource files and use the api below to get localization content.
            Resouces files named as: Control(Page)Name + Extension (.aspx/.ascx ) + Language + ".resx"
            e.g: Installwizard.aspx.de-DE.resx
            </para>
            </remarks>
            <example>
            <code lang="C#">
            pageCreationProgressArea.Localization.Total = Localization.GetString("TotalLanguages", LocalResourceFile);
            pageCreationProgressArea.Localization.TotalFiles = Localization.GetString("TotalPages", LocalResourceFile);
            pageCreationProgressArea.Localization.Uploaded = Localization.GetString("TotalProgress", LocalResourceFile);
            pageCreationProgressArea.Localization.UploadedFiles = Localization.GetString("Progress", LocalResourceFile);
            pageCreationProgressArea.Localization.CurrentFileName = Localization.GetString("Processing", LocalResourceFile);
            </code>
            </example>
        </member>
        <member name="P:DotNetNuke.Services.Localization.Localization.ApplicationResourceDirectory">
            <summary>
            Returns ~/App_GlobalResources
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Localization.Localization.ExceptionsResourceFile">
            <summary>
            Returns ~/App_GlobalResources/Exceptions.resx
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Localization.Localization.GlobalResourceFile">
            <summary>
            Returns ~/App_GlobalResources/GlobalResources.resx
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Localization.Localization.KeyName">
            -----------------------------------------------------------------------------
            <summary>
            The KeyName property returns and caches the name of the key attribute used to lookup resources.
            This can be configured by setting ResourceManagerKey property in the web.config file. The default value for this property
            is 'key'.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Localization.Localization.ShowMissingKeys">
            -----------------------------------------------------------------------------
            <summary>
            The ShowMissingKeys property returns the web.config setting that determines
            whether to render a visual indicator that a key is missing
            is 'key'.
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Localization.Localization.CurrentCulture">
            -----------------------------------------------------------------------------
            <summary>
            The CurrentCulture returns the current Culture being used
            is 'key'.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Localization.Localization.CurrentUICulture">
            <summary>
            The CurrentUICulture for the Thread
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.ConvertLegacyTimeZoneOffsetToTimeZoneInfo(System.Int32)">
            <summary>
            Converts old TimeZoneOffset to new TimeZoneInfo. 
            </summary>
            <param name="timeZoneOffsetInMinutes">An offset in minutes, e.g. -480 (-8 times 60) for Pasicif Time Zone</param>        
            <returns>TimeZoneInfo is returned if timeZoneOffsetInMinutes is valid, otherwise TimeZoneInfo.Local is returned.</returns>
            <remarks>Initial mapping is based on hard-coded rules. These rules are hard-coded from old standard TimeZones.xml data.
            When offset is not found hard-coded mapping, a lookup is performed in timezones defined in the system. The first found entry is returned.
            When mapping is not found, a default TimeZoneInfo.Local us returned.</remarks>
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.GetPageLocale(DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>
            Detects the current language for the request.
            The order in which the language is being detect is:
            	1. QueryString
            	2. Cookie
            	3. User profile (if request is authenticated)
            	4. Browser preference (if portal has this option enabled)
            	5. Portal default
            	6. System default (en-US)
            At any point, if a valid language is detected nothing else should be done
            </summary>
            <param name="portalSettings">Current PortalSettings</param>
            <returns>A valid CultureInfo</returns>
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.GetCultureFromQs(DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>
            Tries to get a valid language from the querystring
            </summary>
            <param name="portalSettings">Current PortalSettings</param>
            <returns>A valid CultureInfo if any is found</returns>
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.GetCultureFromCookie(DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>
            Tries to get a valid language from the cookie
            </summary>
            <param name="portalSettings">Current PortalSettings</param>
            <returns>A valid CultureInfo if any is found</returns>
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.GetCultureFromProfile(DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>
            Tries to get a valid language from the user profile
            </summary>
            <param name="portalSettings">Current PortalSettings</param>
            <returns>A valid CultureInfo if any is found</returns>
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.GetCultureFromBrowser(DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>
            Tries to get a valid language from the browser preferences if the portal has the setting 
            to use browser languages enabled.
            </summary>
            <param name="portalSettings">Current PortalSettings</param>
            <returns>A valid CultureInfo if any is found</returns>
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.GetCultureFromPortal(DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>
            Tries to get a valid language from the portal default preferences
            </summary>
            <param name="portalSettings">Current PortalSettings</param>
            <returns>A valid CultureInfo if any is found</returns>
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.GetBrowserCulture(System.Int32)">
            <summary>
            Tries to get a valid language from the browser preferences
            </summary>
            <param name="portalId">Id of the current portal</param>
            <returns>A valid CultureInfo if any is found</returns>
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.GetCultureFromString(System.Int32,System.String)">
            <summary>
            Parses the language parameter into a valid and enabled language in the current portal.
            If an exact match is not found (language-region), it will try to find a match for the language only.
            Ex: requested locale is "en-GB", requested language is "en", enabled locale is "en-US", so "en" is a match for "en-US".
            </summary>
            <param name="portalId">Id of current portal</param>
            <param name="language">Language to be parsed</param>
            <returns>A valid and enabled CultureInfo that matches the language passed if any.</returns>
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.GetString(System.String)">
            -----------------------------------------------------------------------------
            <overloads>One of six overloads</overloads>
            <summary>
            GetString gets the localized string corresponding to the resource key
            </summary>
            <param name="key">The resource key to find</param>
            <returns>The localized Text</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.GetString(System.String,DotNetNuke.Entities.Portals.PortalSettings)">
            -----------------------------------------------------------------------------
            <overloads>One of six overloads</overloads>
            <summary>
            GetString gets the localized string corresponding to the resourcekey
            </summary>
            <param name="key">The resourcekey to find</param>
            <param name="portalSettings">The current portals Portal Settings</param>
            <returns>The localized Text</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.GetString(System.String,System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <overloads>One of six overloads</overloads>
            <summary>
            GetString gets the localized string corresponding to the resourcekey
            </summary>
            <param name="key">The resourcekey to find</param>
            <param name="resourceFileRoot">The Local Resource root</param>
            <param name="disableShowMissingKeys">Disable to show missing key.</param>
            <returns>The localized Text</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.GetString(System.String,System.String)">
            -----------------------------------------------------------------------------
            <overloads>One of six overloads</overloads>
            <summary>
            GetString gets the localized string corresponding to the resourcekey
            </summary>
            <param name="key">The resourcekey to find</param>
            <param name="resourceFileRoot">The Resource File Name.</param>
            <returns>The localized Text</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.GetString(System.String,System.String,System.String)">
            -----------------------------------------------------------------------------
            <overloads>One of six overloads</overloads>
            <summary>
            GetString gets the localized string corresponding to the resourcekey
            </summary>
            <param name="key">The resourcekey to find</param>
            <param name="resourceFileRoot">The Local Resource root</param>
            <param name="language">A specific language to lookup the string</param>
            <returns>The localized Text</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.GetString(System.String,System.String,DotNetNuke.Entities.Portals.PortalSettings,System.String)">
            -----------------------------------------------------------------------------
            <overloads>One of six overloads</overloads>
            <summary>
            GetString gets the localized string corresponding to the resourcekey
            </summary>
            <param name="key">The resourcekey to find</param>
            <param name="resourceFileRoot">The Local Resource root</param>
            <param name="portalSettings">The current portals Portal Settings</param>
            <param name="language">A specific language to lookup the string</param>
            <returns>The localized Text</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.GetString(System.String,System.String,DotNetNuke.Entities.Portals.PortalSettings,System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <overloads>One of six overloads</overloads>
            <summary>
            GetString gets the localized string corresponding to the resourcekey
            </summary>
            <param name="key">The resourcekey to find</param>
            <param name="resourceFileRoot">The Local Resource root</param>
            <param name="portalSettings">The current portals Portal Settings</param>
            <param name="language">A specific language to lookup the string</param>
            <param name="disableShowMissingKeys">Disables the show missing keys flag</param>
            <returns>The localized Text</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.GetStringUrl(System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            GetStringUrl gets the localized string corresponding to the resourcekey
            </summary>
            <param name="key">The resourcekey to find</param>
            <param name="resourceFileRoot">The Local Resource root</param>
            <returns>The localized Text</returns>
            <remarks>
            This function should be used to retrieve strings to be used on URLs.
            It is the same as <see cref="M:DotNetNuke.Services.Localization.Localization.GetString(System.String,System.String)">GetString(name,ResourceFileRoot)</see> method
            but it disables the ShowMissingKey flag, so even it testing scenarios, the correct string
            is returned
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.GetSafeJSString(System.String)">
            <summary>
            this function will escape reserved character fields to their "safe" javascript equivalents
            </summary>
            <param name="unsafeString">The string to be parsed for unsafe characters</param>
            <returns>the string that is safe to use in a javascript function</returns>
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.GetSafeJSString(System.String,System.String)">
            <summary>
            this function will escape reserved character fields to their "safe" javascript equivalents
            </summary>
            <param name="key">localization key</param>
            <param name="resourceFileRoot">file for localization key</param>
            <returns>the string that is safe to use in a javascript function</returns>
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.GetSystemMessage(DotNetNuke.Entities.Portals.PortalSettings,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Gets a SystemMessage.
            </summary>
            <param name="portalSettings">The portal settings for the portal to which the message will affect.</param>
            <param name="messageName">The message tag which identifies the SystemMessage.</param>
            <returns>The message body with all tags replaced.</returns>
            <remarks>
            Supported tags:
            - All fields from HostSettings table in the form of: [Host:<b>field</b>]
            - All properties defined in <see cref="T:DotNetNuke.PortalInfo" /> in the form of: [Portal:<b>property</b>]
            - [Portal:URL]: The base URL for the portal
            - All properties defined in <see cref="T:DotNetNuke.UserInfo" /> in the form of: [User:<b>property</b>]
            - All values stored in the user profile in the form of: [Profile:<b>key</b>]
            - [User:VerificationCode]: User verification code for verified registrations
            - [Date:Current]: Current date
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.GetSystemMessage(DotNetNuke.Entities.Portals.PortalSettings,System.String,DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Gets a SystemMessage.
            </summary>
            <param name="portalSettings">The portal settings for the portal to which the message will affect.</param>
            <param name="messageName">The message tag which identifies the SystemMessage.</param>
            <param name="userInfo">Reference to the user used to personalize the message.</param>
            <returns>The message body with all tags replaced.</returns>
            <remarks>
            Supported tags:
            - All fields from HostSettings table in the form of: [Host:<b>field</b>]
            - All properties defined in <see cref="T:DotNetNuke.PortalInfo" /> in the form of: [Portal:<b>property</b>]
            - [Portal:URL]: The base URL for the portal
            - All properties defined in <see cref="T:DotNetNuke.UserInfo" /> in the form of: [User:<b>property</b>]
            - All values stored in the user profile in the form of: [Profile:<b>key</b>]
            - [User:VerificationCode]: User verification code for verified registrations
            - [Date:Current]: Current date
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.GetSystemMessage(System.String,DotNetNuke.Entities.Portals.PortalSettings,System.String,DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
                    /// Gets a SystemMessage.
            </summary>
            <param name="strLanguage">A specific language to get the SystemMessage for.</param>
            <param name="portalSettings">The portal settings for the portal to which the message will affect.</param>
            <param name="messageName">The message tag which identifies the SystemMessage.</param>
            <param name="userInfo">Reference to the user used to personalize the message.</param>
            <returns>The message body with all tags replaced.</returns>
            <remarks>
            Supported tags:
            - All fields from HostSettings table in the form of: [Host:<b>field</b>]
            - All properties defined in <see cref="T:DotNetNuke.PortalInfo" /> in the form of: [Portal:<b>property</b>]
            - [Portal:URL]: The base URL for the portal
            - All properties defined in <see cref="T:DotNetNuke.UserInfo" /> in the form of: [User:<b>property</b>]
            - All values stored in the user profile in the form of: [Profile:<b>key</b>]
            - [User:VerificationCode]: User verification code for verified registrations
            - [Date:Current]: Current date
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.GetSystemMessage(DotNetNuke.Entities.Portals.PortalSettings,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Gets a SystemMessage.
            </summary>
            <param name="portalSettings">The portal settings for the portal to which the message will affect.</param>
            <param name="messageName">The message tag which identifies the SystemMessage.</param>
            <param name="resourceFile">The root name of the Resource File where the localized
              text can be found</param>
            <returns>The message body with all tags replaced.</returns>
            <remarks>
            Supported tags:
            - All fields from HostSettings table in the form of: [Host:<b>field</b>]
            - All properties defined in <see cref="T:DotNetNuke.PortalInfo" /> in the form of: [Portal:<b>property</b>]
            - [Portal:URL]: The base URL for the portal
            - All properties defined in <see cref="T:DotNetNuke.UserInfo" /> in the form of: [User:<b>property</b>]
            - All values stored in the user profile in the form of: [Profile:<b>key</b>]
            - [User:VerificationCode]: User verification code for verified registrations
            - [Date:Current]: Current date
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.GetSystemMessage(DotNetNuke.Entities.Portals.PortalSettings,System.String,DotNetNuke.Entities.Users.UserInfo,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Gets a SystemMessage.
            </summary>
            <param name="portalSettings">The portal settings for the portal to which the message will affect.</param>
            <param name="messageName">The message tag which identifies the SystemMessage.</param>
            <param name="userInfo">Reference to the user used to personalize the message.</param>
            <param name="resourceFile">The root name of the Resource File where the localized
              text can be found</param>
            <returns>The message body with all tags replaced.</returns>
            <remarks>
            Supported tags:
            - All fields from HostSettings table in the form of: [Host:<b>field</b>]
            - All properties defined in <see cref="T:DotNetNuke.PortalInfo" /> in the form of: [Portal:<b>property</b>]
            - [Portal:URL]: The base URL for the portal
            - All properties defined in <see cref="T:DotNetNuke.UserInfo" /> in the form of: [User:<b>property</b>]
            - All values stored in the user profile in the form of: [Profile:<b>key</b>]
            - [User:VerificationCode]: User verification code for verified registrations
            - [Date:Current]: Current date
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.GetSystemMessage(DotNetNuke.Entities.Portals.PortalSettings,System.String,System.String,System.Collections.ArrayList)">
            -----------------------------------------------------------------------------
            <summary>
            Gets a SystemMessage passing extra custom parameters to personalize.
            </summary>
            <param name="portalSettings">The portal settings for the portal to which the message will affect.</param>
            <param name="messageName">The message tag which identifies the SystemMessage.</param>
            <param name="resourceFile">The root name of the Resource File where the localized
              text can be found</param>
            <param name="custom">An ArrayList with replacements for custom tags.</param>
            <returns>The message body with all tags replaced.</returns>
            <remarks>
            Custom tags are of the form <b>[Custom:n]</b>, where <b>n</b> is the zero based index which 
            will be used to find the replacement value in <b>Custom</b> parameter.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.GetSystemMessage(DotNetNuke.Entities.Portals.PortalSettings,System.String,DotNetNuke.Entities.Users.UserInfo,System.String,System.Collections.ArrayList)">
            -----------------------------------------------------------------------------
            <summary>
            Gets a SystemMessage passing extra custom parameters to personalize.
            </summary>
            <param name="portalSettings">The portal settings for the portal to which the message will affect.</param>
            <param name="messageName">The message tag which identifies the SystemMessage.</param>
            <param name="userInfo">Reference to the user used to personalize the message.</param>
            <param name="resourceFile">The root name of the Resource File where the localized
              text can be found</param>
            <param name="custom">An ArrayList with replacements for custom tags.</param>
            <returns>The message body with all tags replaced.</returns>
            <remarks>
            Custom tags are of the form <b>[Custom:n]</b>, where <b>n</b> is the zero based index which 
            will be used to find the replacement value in <b>Custom</b> parameter.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.GetSystemMessage(System.String,DotNetNuke.Entities.Portals.PortalSettings,System.String,DotNetNuke.Entities.Users.UserInfo,System.String,System.Collections.ArrayList)">
            -----------------------------------------------------------------------------
            <summary>
            Gets a SystemMessage passing extra custom parameters to personalize.
            </summary>
            <param name="strLanguage">A specific language to get the SystemMessage for.</param>
            <param name="portalSettings">The portal settings for the portal to which the message will affect.</param>
            <param name="messageName">The message tag which identifies the SystemMessage.</param>
            <param name="userInfo">Reference to the user used to personalize the message.</param>
            <param name="resourceFile">The root name of the Resource File where the localized
              text can be found</param>
            <param name="custom">An ArrayList with replacements for custom tags.</param>
            <returns>The message body with all tags replaced.</returns>
            <remarks>
            Custom tags are of the form <b>[Custom:n]</b>, where <b>n</b> is the zero based index which 
            will be used to find the replacement value in <b>Custom</b> parameter.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.GetSystemMessage(System.String,DotNetNuke.Entities.Portals.PortalSettings,System.String,DotNetNuke.Entities.Users.UserInfo,System.String,System.Collections.ArrayList,System.String,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Gets a SystemMessage passing extra custom parameters to personalize.
            </summary>
            <param name="strLanguage">A specific language to get the SystemMessage for.</param>
            <param name="portalSettings">The portal settings for the portal to which the message will affect.</param>
            <param name="messageName">The message tag which identifies the SystemMessage.</param>
            <param name="userInfo">Reference to the user used to personalize the message.</param>
            <param name="resourceFile">The root name of the Resource File where the localized
              text can be found</param>
            <param name="custom">An ArrayList with replacements for custom tags.</param>
            <param name="customCaption">prefix for custom tags</param>
            <param name="accessingUserID">UserID of the user accessing the system message</param>
            <returns>The message body with all tags replaced.</returns>
            <remarks>
            Custom tags are of the form <b>[Custom:n]</b>, where <b>n</b> is the zero based index which 
            will be used to find the replacement value in <b>Custom</b> parameter.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.GetSystemMessage(System.String,DotNetNuke.Entities.Portals.PortalSettings,System.String,DotNetNuke.Entities.Users.UserInfo,System.String,System.Collections.ArrayList,System.Collections.IDictionary,System.String,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Gets a SystemMessage passing extra custom parameters to personalize.
            </summary>
            <param name="strLanguage">A specific language to get the SystemMessage for.</param>
            <param name="portalSettings">The portal settings for the portal to which the message will affect.</param>
            <param name="messageName">The message tag which identifies the SystemMessage.</param>
            <param name="userInfo">Reference to the user used to personalize the message.</param>
            <param name="resourceFile">The root name of the Resource File where the localized
              text can be found</param>
            <param name="customArray">An ArrayList with replacements for custom tags.</param>
            <param name="customDictionary">An IDictionary with replacements for custom tags.</param>
            <param name="customCaption">prefix for custom tags</param>
            <param name="accessingUserID">UserID of the user accessing the system message</param>
            <returns>The message body with all tags replaced.</returns>
            <remarks>
            Custom tags are of the form <b>[Custom:n]</b>, where <b>n</b> is the zero based index which 
            will be used to find the replacement value in <b>Custom</b> parameter.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.LoadCultureDropDownList(System.Web.UI.WebControls.DropDownList,DotNetNuke.Services.Localization.CultureDropDownTypes,System.String)">
            <summary>
              <para>LoadCultureDropDownList loads a DropDownList with the list of supported cultures
                based on the languages defined in the supported locales file, for the current portal</para>
            </summary>
            <param name = "list">DropDownList to load</param>
            <param name = "displayType">Format of the culture to display. Must be one the CultureDropDownTypes values.
              <see cref = "T:DotNetNuke.Services.Localization.CultureDropDownTypes" /> for list of allowable values</param>
            <param name = "selectedValue">Name of the default culture to select</param>
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.LoadCultureDropDownList(System.Web.UI.WebControls.DropDownList,DotNetNuke.Services.Localization.CultureDropDownTypes,System.String,System.Boolean)">
            <summary>
              <para>LoadCultureDropDownList loads a DropDownList with the list of supported cultures
                based on the languages defined in the supported locales file. </para>
              <para>This overload allows us to display all installed languages. To do so, pass the value True to the Host parameter</para>
            </summary>
            <param name = "list">DropDownList to load</param>
            <param name = "displayType">Format of the culture to display. Must be one the CultureDropDownTypes values.
              <see cref = "T:DotNetNuke.Services.Localization.CultureDropDownTypes" /> for list of allowable values</param>
            <param name = "selectedValue">Name of the default culture to select</param>
            <param name = "loadHost">Boolean that defines wether or not to load host (ie. all available) locales</param>
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.LoadCultureDropDownList(System.Web.UI.WebControls.DropDownList,DotNetNuke.Services.Localization.CultureDropDownTypes,System.String,System.String,System.Boolean)">
            <summary>
              <para>LoadCultureDropDownList loads a DropDownList with the list of supported cultures
                based on the languages defined in the supported locales file</para>
              <para>This overload allows us to filter a language from the dropdown. To do so pass a language code to the Filter parameter</para>
              <para>This overload allows us to display all installed languages. To do so, pass the value True to the Host parameter</para>
            </summary>
            <param name = "list">DropDownList to load</param>
            <param name = "displayType">Format of the culture to display. Must be one the CultureDropDownTypes values.
              <see cref = "T:DotNetNuke.Services.Localization.CultureDropDownTypes" /> for list of allowable values</param>
            <param name = "selectedValue">Name of the default culture to select</param>
            <param name = "filter">String value that allows for filtering out a specific language</param>
            <param name = "host">Boolean that defines wether or not to load host (ie. all available) locales</param>
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.LoadCultureInListItems(DotNetNuke.Services.Localization.CultureDropDownTypes,System.String,System.String,System.Boolean)">
            <summary>
            <para>LoadCultureDropDownList loads a DropDownList with the list of supported cultures
                based on the languages defined in the supported locales file</para>
             <para>This overload allows us to filter a language from the dropdown. To do so pass a language code to the Filter parameter</para>
              <para>This overload allows us to display all installed languages. To do so, pass the value True to the Host parameter</para>
            </summary>
            <param name="displayType"></param>
            <param name="selectedValue"></param>
            <param name="filter"></param>
            <param name="host"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.LocalizeControlTitle(DotNetNuke.UI.Modules.IModuleControl)">
            -----------------------------------------------------------------------------
            <summary>
            Localizes ModuleControl Titles
            </summary>
            <param name="moduleControl">ModuleControl</param>
            <returns>
            Localized control title if found
            </returns>
            <remarks>
            Resource keys are: ControlTitle_[key].Text
            Key MUST be lowercase in the resource file
            Key can also be "blank" for admin/edit controls. These will only be used
            in admin pages
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.LocalizeDataGrid(System.Web.UI.WebControls.DataGrid@,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            LocalizeDataGrid creates localized Headers for a DataGrid
            </summary>
            <param name="grid">Grid to localize</param>
            <param name="resourceFile">The root name of the Resource File where the localized
              text can be found</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.LocalizeDetailsView(System.Web.UI.WebControls.DetailsView@,System.String)">
            <summary>
            Localizes headers and fields on a DetailsView control
            </summary>
            <param name="detailsView"></param>
            <param name="resourceFile">The root name of the resource file where the localized
             texts can be found</param>
            <remarks></remarks>
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.LocalizeGridView(System.Web.UI.WebControls.GridView@,System.String)">
            <summary>
            Localizes headers and fields on a GridView control
            </summary>
            <param name="gridView">Grid to localize</param>
            <param name="resourceFile">The root name of the resource file where the localized
             texts can be found</param>
            <remarks></remarks>
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.LocalizeRole(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Localizes the "Built In" Roles
            </summary>
            <remarks>
            Localizes:
            -DesktopTabs
            -BreadCrumbs
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.SetThreadCultures(System.Globalization.CultureInfo,DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>
              Sets the culture codes on the current Thread
            </summary>
            <param name = "cultureInfo">Culture Info for the current page</param>
            <param name = "portalSettings">The current portalSettings</param>
            <remarks>
              This method will configure the Thread culture codes.  Any page which does not derive from PageBase should
              be sure to call this method in OnInit to ensure localiztion works correctly.  See the TelerikDialogHandler for an example.
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.GetUserUICulture(System.Globalization.CultureInfo,DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>
            When portal allows users to select their preferred UI language, this method
            will return the user ui preferred language if defined. Otherwise defaults
            to the current culture
            </summary>
            <param name="currentCulture">Current culture</param>
            <param name="portalSettings">PortalSettings for the current request</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Localization.Localization.GetCultureLanguageID(System.String)">
            <summary>
            Maps the culture code string into the corresponding language ID in the
            database. In case there is no language defined in the systen with the
            passed code, -1 (<see cref="P:DotNetNuke.Common.Utilities.Null.NullInteger"/>) is returned.
            </summary>
            <param name="cultureCode">The culture to get the language ID for.</param>
            <returns>Language ID integer</returns>
        </member>
        <member name="T:DotNetNuke.Services.Localization.LocaleController">
            <summary>
            LocaleContrller provides method to manage all pages with localization content.
            </summary>
            <remarks>
            Content localization in DotNetNuke will allow you to easily manage your web pages in a primary language 
            and then utilize translators to keep the content synchronized in multiple secondary languages.  
            Whether you are maintaining your site in a single language or dozens of languages, the content localization system 
            will help guide your content editors and translators through the process.  Although content localization required 
            extensive changes to the core platform, we have been able to add this new feature while still improving overall system performance.
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.Localization.LocaleController.CanDeleteLanguage(System.Int32)">
            <summary>
            Determines whether the language can be delete.
            </summary>
            <param name="languageId">The language id.</param>
            <returns>
              <c>true</c> if the language can be delete; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetNuke.Services.Localization.LocaleController.GetCultures(System.Collections.Generic.Dictionary{System.String,DotNetNuke.Services.Localization.Locale})">
            <summary>
            Gets the cultures from local list.
            </summary>
            <param name="locales">The locales.</param>
            <returns>culture list.</returns>
        </member>
        <member name="M:DotNetNuke.Services.Localization.LocaleController.GetCurrentLocale(System.Int32)">
            <summary>
            Gets the current locale for current request to the portal.
            </summary>
            <param name="PortalId">The portal id.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Localization.LocaleController.GetDefaultLocale(System.Int32)">
            <summary>
            Gets the default locale of the portal.
            </summary>
            <param name="portalId">The portal id.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Localization.LocaleController.GetLocale(System.String)">
            <summary>
            Gets the locale by code.
            </summary>
            <param name="code">The code.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Localization.LocaleController.GetLocale(System.Int32,System.String)">
            <summary>
            Gets the locale included in the portal.
            </summary>
            <param name="portalID">The portal ID.</param>
            <param name="code">The code.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Localization.LocaleController.GetLocale(System.Int32)">
            <summary>
            Gets the locale.
            </summary>
            <param name="languageID">The language ID.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Localization.LocaleController.GetLocales(System.Int32)">
            <summary>
            Gets the locales.
            </summary>
            <param name="portalID">The portal ID.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Localization.LocaleController.GetPublishedLocales(System.Int32)">
            <summary>
            Gets the published locales.
            </summary>
            <param name="portalID">The portal ID.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Localization.LocaleController.IsEnabled(System.String@,System.Int32)">
            <summary>
            Determines whether the specified locale code is enabled.
            </summary>
            <param name="localeCode">The locale code.</param>
            <param name="portalId">The portal id.</param>
            <returns>
              <c>true</c> if the specified locale code is enabled; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetNuke.Services.Localization.LocaleController.UpdatePortalLocale(DotNetNuke.Services.Localization.Locale)">
            <summary>
            Updates the portal locale.
            </summary>
            <param name="locale">The locale.</param>
        </member>
        <member name="M:DotNetNuke.Services.Localization.LocaleController.IsDefaultLanguage(System.String)">
            <summary>
            Determines the language whether is default language.
            </summary>
            <param name="code">The code.</param>
            <returns>
              <c>true</c> if the language is default language; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetNuke.Services.Localization.LocaleController.ActivateLanguage(System.Int32,System.String,System.Boolean)">
            <summary>
            Activates the language without publishing it.
            </summary>
            <param name="portalid">The portalid.</param>
            <param name="cultureCode">The culture code.</param>
            <param name="publish">if set to <c>true</c> will publishthe language.</param>
        </member>
        <member name="M:DotNetNuke.Services.Localization.LocaleController.PublishLanguage(System.Int32,System.String,System.Boolean)">
            <summary>
            Publishes the language.
            </summary>
            <param name="portalid">The portalid.</param>
            <param name="cultureCode">The culture code.</param>
            <param name="publish">if set to <c>true</c> will publishthe language.</param>
        </member>
        <member name="T:DotNetNuke.Services.Log.EventLog.IEventLogController">
            <summary>
            Do not implement.  This interface is only implemented by the DotNetNuke core framework. Outside the framework it should used as a type and for unit test purposes only.
            There is no guarantee that this interface will not change.
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.OutputCache.Providers.DatabaseProvider">
            <summary>
            DatabaseProvider implements the OutputCachingProvider for database storage.
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.OutputCache.Providers.DatabaseResponseFilter">
            <summary>
            FileResponseFilter implements the OutputCacheRepsonseFilter to capture the response into database.
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.OutputCache.Providers.FileProvider">
            <summary>
            FileProvider implements the OutputCachingProvider for file storage.
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.OutputCache.Providers.FileResponseFilter">
            <summary>
            FileResponseFilter implements the OutputCacheRepsonseFilter to capture the response into files.
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.OutputCache.Providers.MemoryProvider">
            <summary>
            MemoryResponseFilter implements the OutputCachingProvider for memory storage.
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.OutputCache.Providers.MemoryResponseFilter">
            <summary>
            FileResponseFilter implements the OutputCacheRepsonseFilter to capture the response into memory.
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Search.Controllers.BaseResultController">
            <summary>
            BaseResult to be implemented by the different Crawlers to provide Permission and Url Services 
            </summary>
            <remarks>The abstract methods in this Class will be called by Search Result engine for every Hit found in Search Index.</remarks>
        </member>
        <member name="M:DotNetNuke.Services.Search.Controllers.BaseResultController.HasViewPermission(DotNetNuke.Services.Search.Entities.SearchResult)">
            <summary>
            Does the user in the Context have View Permission on the Document
            </summary>
            <param name="searchResult">Search Result</param>
            <returns>True or False</returns>
        </member>
        <member name="M:DotNetNuke.Services.Search.Controllers.BaseResultController.GetDocUrl(DotNetNuke.Services.Search.Entities.SearchResult)">
            <summary>
            Return a Url that can be shown in search results.
            </summary>
            <param name="searchResult">Search Result</param>
            <returns>Url</returns>
            <remarks>The Query Strings in the Document (if present) should be appended while returning the Url</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Search.Controllers.BaseResultController.LocalizedSearchTypeName">
            <summary>
            Gets the localized search type name.
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Search.Controllers.IModuleSearchResultController">
            <summary>
            Module can optionally specify custom behavior to provide Permission and Url Services. 
            </summary>
            <remarks>This is needed only when Module wants additional capabilities on top of what Core already performs.</remarks>
        </member>
        <member name="M:DotNetNuke.Services.Search.Controllers.IModuleSearchResultController.HasViewPermission(DotNetNuke.Services.Search.Entities.SearchResult)">
            <summary>
            Does the user in the Context have View Permission on the Document
            </summary>
            <param name="searchResult">Search Result</param>
            <returns>True or False</returns>
        </member>
        <member name="M:DotNetNuke.Services.Search.Controllers.IModuleSearchResultController.GetDocUrl(DotNetNuke.Services.Search.Entities.SearchResult)">
            <summary>
            Return a Url that can be shown in search results.
            </summary>
            <param name="searchResult">Search Result</param>
            <returns>Url</returns>
            <remarks>The Query Strings in the Document (if present) should be appended while returning the Url</remarks>
        </member>
        <member name="T:DotNetNuke.Services.Search.Controllers.TabResultController">
            <summary>
            Search Result Controller for Tab Indexer
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:DotNetNuke.Services.Search.Controllers.ModuleResultController">
            <summary>
            Search Result Controller for Module Crawler
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:DotNetNuke.Services.Search.Controllers.UserResultController">
            <summary>
            Search Result Controller for Tab Indexer
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:DotNetNuke.Services.Search.Controllers.ISearchController.SiteSearch(DotNetNuke.Services.Search.Entities.SearchQuery)">
            <summary>
            Get Search Result for the searchQuery at the Site Level
            </summary>
            <param name="searchQuery">SearchQuery object with various search criteria</param>
            <returns>SearchResults</returns>
        </member>
        <member name="M:DotNetNuke.Services.Search.Controllers.ISearchController.ModuleSearch(DotNetNuke.Services.Search.Entities.SearchQuery)">
            <summary>
            Get Search Result for the searchQuery at the Module Level
            </summary>
            <param name="searchQuery">SearchQuery object with various search criteria</param>
            <returns>SearchResults</returns>
            <remarks>SearchTypeIds provided in the searchQuery will be ignored</remarks>
        </member>
        <member name="T:DotNetNuke.Services.Search.Controllers.SearchController">
            <summary>
            Business Layer to manage Search.
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Search.Controllers.SearchControllerImpl">
            -----------------------------------------------------------------------------
            <summary>
              The Impl Controller class for Search
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Search.Entities.SearchDocumentToDelete">
            <summary>
            The document that will be deleted from search Index
            </summary>
            <remarks>This is the base for all search documents (have ccommon properties) that can be used for deleting from the search index)</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchDocumentToDelete.UniqueKey">
            <summary>
            A key to uniquely identify a document in the Index
            </summary>
            <remarks>A value of -1 means this is property is not used.</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchDocumentToDelete.RoleId">
            <summary>
            RoleId (GroupId) for additional filtering [Optional]
            </summary>
            <remarks>This property can be used while under Social Groups.</remarks>
            <remarks>A value of -1 means this is property is not used.</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchDocumentToDelete.PortalId">
            <summary>
            Portal Id
            </summary>
            <remarks>A value of -1 means this is property is not used.</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchDocumentToDelete.TabId">
            <summary>
            Tab Id of the Content [Optional]
            </summary>
            <remarks>A value of -1 means this is property is not used.</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchDocumentToDelete.ModuleDefId">
            <summary>
            Module Definition Id of the Content.
            </summary>
            <remarks>This is needed when SearchTypeId is for a Module</remarks>
            <remarks>A value of -1 means this is property is not used.</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchDocumentToDelete.ModuleId">
            <summary>
            Module Id of the Content
            </summary>
            <remarks>This is needed when SearchTypeId is for a Module</remarks>
            <remarks>A value of -1 means this is property is not used.</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchDocumentToDelete.AuthorUserId">
            <summary>
            User Id of the Author
            </summary>
            <remarks>Author's display name is automatically found and stored. AuthorName can be found in SearchResult.
            However, this may get out of date if Display Name is changed after Index.</remarks>
            <remarks>A value of -1 means this is property is not used.</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchDocumentToDelete.SearchTypeId">
            <summary>
            Search Type Id, e.g. module, file or url
            </summary>
            <remarks>A value of -1 means this is property is not used.</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchDocumentToDelete.QueryString">
            <summary>
            QueryString that may be associated with a Search Document.
            </summary>
            <remarks>This information will be used to creare Url for the document</remarks>
            <remarks>A value of NULL/EMPTY means this is property is not used.</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchDocumentToDelete.Keywords">
            <summary>
            Additional keywords can be specified for Indexing
            </summary>
            <remarks>This is key-value pair, e.g. "AliasName","something"</remarks>
            <remarks>An empty dictionary means this is property is not used.</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchDocumentToDelete.NumericKeys">
            <summary>
            Additional numeric fields can be specified for Indexing
            </summary>
            <remarks>This is key-value pair, e.g. "ItemId","888"</remarks>
            <remarks>An empty dictionary means this is property is not used.</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchDocumentToDelete.CultureCode">
            <summary>
            Culture Code associated with the content.
            </summary>
            <remarks>A value of NULL/EMPTY means this is property is not used.</remarks>
        </member>
        <member name="M:DotNetNuke.Services.Search.Entities.SearchDocumentToDelete.ToString">
            <summary>
            This is overriden to allow saving into DB using object.ToString() as JSON entity
            </summary>
            <returns></returns>
        </member>
        <member name="T:DotNetNuke.Services.Search.Entities.SortDirections">
            <summary>
            Sorting direction to be used for Querying
            </summary>
            <remarks>Does not apply when SortFields.Relevance is specified in SearchQuery.SortField</remarks>
        </member>
        <member name="F:DotNetNuke.Services.Search.Entities.SortDirections.Descending">
            <summary>
            Sort by descending [default] order
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Search.Entities.SortDirections.Ascending">
            <summary>
            Sort by ascending order
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Search.Entities.SearchResults">
            <summary>
            Collection storing Search Results
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchResults.TotalHits">
            <summary>
            Total Hits found in Lucene
            </summary>
            <remarks>This number will generally be larger than count of Results object as Results usually holds 10 items, whereas TotalHits indicates TOTAL hits in entire Lucene for the query supplied.</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchResults.Results">
            <summary>
            Collection of Results
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Search.Entities.SortFields">
            <summary>
            Sorting criteria to be used for Querying
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Search.Entities.SortFields.Relevance">
            <summary>
            Sort by Relevance [default]. Most relevant come first, SortDirection is ignored.
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Search.Entities.SortFields.LastModified">
            <summary>
            Sort by DateTime Modified. Latest come first
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Search.Entities.SortFields.Title">
            <summary>
            Sort by Title.
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Search.Entities.SortFields.Tag">
            <summary>
            Sort by Tag.
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Search.Entities.SortFields.NumericKey">
            <summary>
            Sort by NumericKey (as specified in SearchDocument while indexing). The NumericKeys key-name should be specified in SearchQuery.CustomSortField
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Search.Entities.SortFields.Keyword">
            <summary>
            Sort by Keywords (as specified in SearchDocument while indexing). The Keywords key-name should be specified in SearchQuery.CustomSortField
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Search.Entities.SortFields.CustomNumericField">
            <summary>
            Specify custom numeric field for sorting. Field name should be specified in SearchQuery.CustomSortField
            </summary>
            <remarks>This option should be used when you can't any of the previous options, e.g. AuthorUserId (authorid) or TabId (tab)</remarks>
        </member>
        <member name="F:DotNetNuke.Services.Search.Entities.SortFields.CustomStringField">
            <summary>
            Specify custom string filed for sorting. Field name should be specified in SearchQuery.CustomSortField
            </summary>
            <remarks>This option should be used when you can't any of the previous options, e.g. authorname or UniqueKey (key)</remarks>
        </member>
        <member name="T:DotNetNuke.Services.Search.Entities.SearchResult">
             <summary>
             Search Result to be displayed to end user
            
             Inherited "Body" property from SearchDocument may be purposefully left empty for performance purposes.
             </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchResult.DisplayModifiedTime">
            <summary>
            Time when Content was last modified (in friendly format)
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchResult.Snippet">
            <summary>
            Highlighted snippet from document
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchResult.AuthorName">
            <summary>
            Optional: Display Name of the Author
            </summary>
            <remarks>This may be different form current Display Name when Index was run prior to change in Display Name.</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchResult.Score">
            <summary>
            Lucene's original Score. The score of this document for the query.
            </summary>
            <remarks>This field may not be reliable as most of the time it contains Nan. Use DisplayScore instead</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchResult.DisplayScore">
            <summary>
            Lucene's original Score in String format, e.g. 1.45678 or 0.87642. The score of this document for the query.
            </summary>
            <remarks>This field is more reliable than the float version of Score.</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchResult.SearchContext">
            <summary>
            Context information such as the type of module that initiated the search can be stored here.
            <remarks>This is key-value pair, e.g. "SearchSource","SiteSearch"</remarks>
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Search.Entities.SearchResult.#ctor">
            <summary>
            Empty Constructor
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchType.SearchTypeId">
            <summary>
            Search Type Id
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchType.SearchTypeName">
            <summary>
            Search Type Name
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchType.SearchResultClass">
            <summary>
            A class implementing BaseResultController. This class will be invoked by reflection.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchType.IsPrivate">
            <summary>
            Content from this SearchType will normally be not searched while performing site or module search
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Search.Entities.SearchDocument">
            <summary>
            The document that will be stored in Search Index
            </summary>
            <remarks>Each document is one discrete unit of content to be indexed and is independent from other Documents</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchDocument.Title">
            <summary>
            Content's Title      
            </summary>
            <remarks>
            HTML tags are stripped from this property, but certain HTML attribute values will be retain, ie. alt and title attribute values.
            </remarks>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchDocument.Description">
            <summary>
            Content's Description
            </summary>
            <remarks>
            Description should generally be no more than two sentences. This property is used by RSS Syndication. It is also used in search result when highlighted text is not found during searching.
            HTML tags are stripped from this property, but certain HTML attribute values will be retain, ie. alt and title attribute values.
            </remarks>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchDocument.Body">
             <summary>
            Content's Body
             </summary>
             <remarks>
             HTML tags are stripped from this property, but certain HTML attribute values will be retain, ie. alt and title attribute values.
             </remarks>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchDocument.Url">
            <summary>
            Url for the indexed item.
            </summary>
            <remarks>Usually TabId or ModuleId is enough to generate Document Url in Search Result. However, Url field is used if present in SearchResult</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchDocument.ModifiedTimeUtc">
            <summary>
            Time when Content was last modified (in Utc)
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchDocument.IsActive">
            <summary>
            Flag to indicate if Content is Active or Not. Content will be deleted from Index when IsActive = false. Default is True.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchDocument.Permissions">
             <summary>
             A string representation of roles and users who have view (or denied view) permissions
             </summary>
             <remarks>The Permission property is same as how itï¿½s implement internally in the Platform. Allow or Deny permission can be specified for RoleNamess and / or UserIds. 
             A semicolon must be specified to separate two RoleName or UserId.
                 "!Translator (en-US);![3];[5];Administrators; ContentEditorRole"
                 ! -- identifies denied permission
                 [n] -- identifies UserId
            Above example denies permission to Role ï¿½Translator (en-Us)ï¿½ and UserId 3, but allows permission to Roles ï¿½Administratorsï¿½ and ï¿½ContentEditorRoleï¿½ and UserId</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchDocument.Tags">
            <summary>
            Tags can be specified as additional information
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Search.Entities.SearchQuery">
            <summary>
            Criteria to search for.
            </summary>
            <remarks>This object should be passed to SearchController to search for Content. KeyWords and PortalId must be specified</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchQuery.UniqueKey">
            <summary>
            A key to uniquely identify a document in the Index
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchQuery.KeyWords">
            <summary>
            Keywords to search for.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchQuery.PortalIds">
            <summary>
            A collection of Portal Ids of the Site to perform Search upon. This field must be specified or else Portal 0 will be searched by default.
            </summary>
            <remarks>Search cannot be executed across Sites</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchQuery.SearchTypeIds">
            <summary>
            A collection of Search Type Ids that should be searched upon [Optional]
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchQuery.ModuleDefIds">
            <summary>
            A collection of Module Def Ids that should be searched upon [Optional]. Match is performed only when a SearchTypeId for Module Search Crawler Id
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchQuery.ModuleId">
            <summary>
            Module Id to restrict Search. Value > 0 is used only.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchQuery.RoleId">
            <summary>
            Role Id to restrict Search. Value > 0 is used only.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchQuery.TabId">
            <summary>
            Tab Id to restrict Search. Value > 0 is used only.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchQuery.Locale">
            <summary>
            Locale to restrict Search to. This field can be left empty for single language site
            </summary>
            <remarks>E.g. A value en-US or nl-NL can specified to restrict search to a single locale .</remarks> 
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchQuery.BeginModifiedTimeUtc">
            <summary>
            Begin Date of the time when Content was last modified (in Utc). This field is optional.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchQuery.EndModifiedTimeUtc">
            <summary>
            End Date of the time when Content was last modified (in Utc). This field is optional.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchQuery.Tags">
            <summary>
            Restrict search to specific tags. This field is optional.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchQuery.PageIndex">
            <summary>
            Page Index for the result, e.g. pageIndex=1 and pageSize=10 indicates first 10 hits. Default value is 1
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchQuery.PageSize">
            <summary>
            Page size of the search result. Default value is 10.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchQuery.TitleSnippetLength">
            <summary>
            Maximum length of highlighted title field in the results
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchQuery.BodySnippetLength">
            <summary>
            Maximum length of highlighted title field in the results
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchQuery.CultureCode">
            <summary>
            Culture Code associated with the content.
            </summary>
            <remarks>Culture-Neutral content is always returned even though this value is specfied</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchQuery.SortField">
            <summary>
            Sort option of the search result. This field is optional.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchQuery.SortDirection">
            <summary>
            Sort option of the search result. This field is optional.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchQuery.CustomSortField">
            <summary>
            Name of the custom sort field, works with SortFields.CustomNumericField or SortFields.CustomStringField option.
            </summary>
            <remarks> Enum SortFields can be used to sort on Relevance, LastModified and Title. Additional fields such as one provided under
            SearchDocument.Keywords, SearchDocument.NumericKeys or Tags can be specified.
            can be specified by using CustomSortField property. One needs to ensure that the field name is a valid one.
            </remarks>
            <example>authorid or authorname</example>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchQuery.WildCardSearch">
            <summary>
            Set this to true to perform perform WildCard Search.
            </summary>
            <remarks>This property is not respected when Keywords contain special boolean phrases "~", "*", "\"", "\'", "and", "or", "+", "-".
            When this is enabled, an additional OR is performed, e.g. (keyword OR keyword*). It adds asterisk at then end to find any words starting with the keyword.
            There can be performance implications with this setting turned on.</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchQuery.SearchContext">
            <summary>
            Context information such as the type of module that initiated the search can be stored here.
            <remarks>This is key-value pair, e.g. "SearchSource","SiteSearch"</remarks>
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchQuery.CustomKeywords">
            <summary>
            Restrict search to specific Keywords. This field is optional. Lookup is done in the SearchDocument.Keywords collection.
            </summary>
            <remarks>This is key-value pair, e.g. "AliasName","something"</remarks>
            <remarks>An empty dictionary means this is property is not used.</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchQuery.NumericKeys">
            <summary>
            Restrict search to specific NumericKeys. This field is optional.
            </summary>
            <remarks>This is key-value pair, e.g. "ItemId","888"</remarks>
            <remarks>An empty dictionary means this is property is not used.</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Search.Entities.SearchQuery.AllowLeadingWildcard">
            <summary>
            Set this to true to allow search in word.
            </summary>
            <remarks>When host setting "Search_AllowLeadingWildcard" set to true, it will always allow search in word but ignore this value.</remarks>
        </member>
        <member name="T:DotNetNuke.Services.Search.Internals.Constants">
            <summary>
            Constants
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.ISearchQueryStringParser.GetTags(System.String,System.String@)">
            <summary>
            Gets the list of tags parsing the search keywords
            </summary>
            <param name="keywords">search keywords</param>
            <param name="outputKeywords">output keywords removing the tags</param>
            <returns>List of tags</returns>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.ISearchQueryStringParser.GetLastModifiedDate(System.String,System.String@)">
            <summary>
            Gets the Last Modified Date parsing the search keywords
            </summary>
            <param name="keywords">search keywords</param>
            <param name="outputKeywords">output keywords removing the last modified date</param>
            <returns>Last Modified Date</returns>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.ISearchQueryStringParser.GetSearchTypeList(System.String,System.String@)">
            <summary>
            Gets the list of Search Types parsing the search keywords
            </summary>
            <param name="keywords">search keywords</param>
            <param name="outputKeywords">output keywords removing the Search Type</param>
            <returns>List of Search Types</returns>
        </member>
        <member name="T:DotNetNuke.Services.Search.Internals.SearchQueryAnalyzer">
            <summary>
            This is responsible for the filters chain that analyzes search documents/queries
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Search.Internals.ISearchHelper">
            <summary>
            Internal Search Controller Helper Interface.
            <remarks>This is an Internal interface and should not be used outside of Core.</remarks>
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.ISearchHelper.GetSearchTypes">
            <summary>
            Returns a list of SearchTypes defined in the system
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.ISearchHelper.GetSearchTypeByName(System.String)">
            <summary>
            Gets a SearchType Item for the given name.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.ISearchHelper.GetSynonyms(System.Int32,System.String,System.String)">
            <summary>
            Returns a list of Synonyms for a given word. E.g. leap, hop for jump
            </summary>
            <param name="term">word for which to obtain synonyms</param>
            <param name="portalId">portal id</param> 
            <param name="cultureCode">culture code</param>
            <returns>List of synonyms</returns>
            <remarks>Synonyms must be defined in system first</remarks>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.ISearchHelper.GetSynonymsGroups(System.Int32,System.String)">
            <summary>
            Returns a list of SynonymsGroup defined in the system
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.ISearchHelper.AddSynonymsGroup(System.String,System.Int32,System.String,System.String@)">
            <summary>
            Adds a synonymsgroup to system
            </summary>
            <param name="synonymsTags">synonyms tags seperated by comma, like this: dnn,dotnetnuke</param>
            <param name="portalId"></param>
            <param name="cultureCode">culture code</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.ISearchHelper.UpdateSynonymsGroup(System.Int32,System.String,System.Int32,System.String,System.String@)">
            <summary>
            Updates a sysnonymsGroup
            </summary>
            <param name="synonymsGroupId"></param>
            <param name="synonymsTags">synonyms tags seperated by comma, like this: dnn,dotnetnuke</param>
            <param name="portalId"></param>
            <param name="cultureCode">culture code</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.ISearchHelper.DeleteSynonymsGroup(System.Int32,System.Int32,System.String)">
            <summary>
            Deletes a synonyms group
            </summary>
            <param name="synonymsGroupId"></param>
            <param name="portalId"></param>
            <param name="cultureCode">culture code</param>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.ISearchHelper.GetSearchStopWords(System.Int32,System.String)">
            <summary>
            Gets a search stop words
            </summary>
            <param name="portalId"></param>
            <param name="cultureCode"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.ISearchHelper.AddSearchStopWords(System.String,System.Int32,System.String)">
            <summary>
            Adds a search stop words
            </summary>
            <param name="stopWords"></param>
            <param name="portalId"></param>
            <param name="cultureCode"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.ISearchHelper.UpdateSearchStopWords(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Updates a search stop words
            </summary>
            <param name="stopWordsId"></param>
            <param name="stopWords"></param>
            <param name="portalId"></param>
            <param name="cultureCode"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.ISearchHelper.DeleteSearchStopWords(System.Int32,System.Int32,System.String)">
            <summary>
            Deletes a search stop words
            </summary>
            <param name="stopWordsId"></param>
            <param name="portalId"></param>
            <param name="cultureCode"></param>
        </member>
        <member name="T:DotNetNuke.Services.Search.Internals.SearchHelper">
            <summary>
            Internal Search Controller. This is an Internal class and should not be used outside of Core
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.SearchHelperImpl.IsReindexRequested(System.Int32,System.DateTime)">
            <summary>
            Determines whether there was a request to re-index the site since a specific date/time
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.SearchHelperImpl.GetPortalsToReindex(System.DateTime)">
            <summary>
            Returns a collection of portal ID's to reindex if it was requested since last indexing
            </summary>
            <param name="startDate"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.SearchHelperImpl.GetLastSuccessfulIndexingDateTime(System.Int32)">
            <summary>
            Returns the last time search indexing was completed successfully.
            The returned value in local server time (not UTC).
            Beware that the value stored in teh database is converted to UTC time.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.SearchHelperImpl.SetLastSuccessfulIndexingDateTime(System.Int32,System.DateTime)">
            <summary>
            Stores the last successful time of the system search indexer.
            The passed value should be in local system time; not UTC time.
            Beware that the value stored in teh database is converted to UTC time.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.SearchHelperImpl.RephraseSearchText(System.String,System.Boolean,System.Boolean)">
            <summary>
            Processes and re-phrases the search text by looking into exact-match and wildcard option
            </summary>
            <param name="searchPhrase"></param>
            <param name="useWildCard"></param>
            <param name="allowLeadingWildcard"></param>
            <returns>cleaned and pre-processed search phrase</returns>
        </member>
        <member name="T:DotNetNuke.Services.Search.Internals.LuceneResult">
            <summary>
            Lucene Specific Query Result
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Internals.LuceneResult.Document">
            <summary>
            Lucene's original Document Object
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Internals.LuceneResult.Score">
            <summary>
            Lucene's original Score. The score of this document for the query.
            </summary>
            <remarks>This field may not be reliable as most of the time it contains Nan. Use DisplayScore instead</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Search.Internals.LuceneResult.DisplayScore">
            <summary>
            Lucene's original Score in String format, e.g. 1.45678 or 0.87642. The score of this document for the query.
            </summary>
            <remarks>This field is more reliable than the float version of Score.</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Search.Internals.LuceneResult.TitleSnippet">
            <summary>
            Highlighted Title Snippet. This may be empty for synonym based search
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Internals.LuceneResult.BodySnippet">
            <summary>
            Highlighted Body Snippet. This may be empty for synonym based search
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Internals.LuceneResult.DescriptionSnippet">
            <summary>
            Highlighted Description Snippet. This may be empty for synonym based search
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Internals.LuceneResult.TagSnippet">
            <summary>
            Highlighted Tag Snippet. This may be empty for synonym based search
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Internals.LuceneResult.AuthorSnippet">
            <summary>
            Highlighted Author Snippet. This may be empty for synonym based search
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Internals.LuceneResult.ContentSnippet">
            <summary>
            Highlighted Content Snippet. This may be empty for synonym based search
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Search.Internals.LuceneQuery">
            <summary>
            Lucene Specific Query Object to be passed into Lucene for Search
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Internals.LuceneQuery.Query">
            <summary>
            Lucene's original Query Object
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Internals.LuceneQuery.Sort">
            <summary>
            Lucene's original Sort Object. Default is by Relevance
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Internals.LuceneQuery.PageIndex">
            <summary>
            Page Index for the result, e.g. pageIndex=1 and pageSize=10 indicates first 10 hits. Default value is 1
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Internals.LuceneQuery.PageSize">
            <summary>
            Page size of the search result. Default value is 10.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Internals.LuceneQuery.TitleSnippetLength">
            <summary>
            Maximum length of highlighted title field in the results
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Search.Internals.LuceneQuery.BodySnippetLength">
            <summary>
            Maximum length of highlighted title field in the results
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Search.Internals.SearchQueryStringParser">
            <summary>
            Class responsible to parse the Search Query String parameter
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.SearchQueryStringParser.GetTags(System.String,System.String@)">
            <summary>
            Gets the list of tags parsing the search keywords
            </summary>
            <param name="keywords">search keywords</param>
            <param name="outputKeywords">output keywords removing the tags</param>
            <returns>List of tags</returns>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.SearchQueryStringParser.GetLastModifiedDate(System.String,System.String@)">
            <summary>
            Gets the Last Modified Date parsing the search keywords
            </summary>
            <param name="keywords">search keywords</param>
            <param name="outputKeywords">output keywords removing the last modified date</param>
            <returns>Last Modified Date</returns>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.SearchQueryStringParser.GetSearchTypeList(System.String,System.String@)">
            <summary>
            Gets the list of Search Types parsing the search keywords
            </summary>
            <param name="keywords">search keywords</param>
            <param name="outputKeywords">output keywords removing the Search Type</param>
            <returns>List of Search Types</returns>
        </member>
        <member name="T:DotNetNuke.Services.Search.Internals.SynonymAnalyzer">
            <summary>
            This is responsible for the filters chain that analyzes search documents/queries
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Search.Internals.SynonymFilter">
            <summary>
            SynonymFilter
            </summary>
            <remarks>Implementation is inspired by sample code in Manning Lucene In Action 2nd Edition, pg. 133</remarks>
        </member>
        <member name="T:DotNetNuke.Services.Search.Internals.IInternalSearchController">
            <summary>
            Internal Search Controller Interface.
            <remarks>This is an Internal interface and should not be used outside of Core.</remarks>
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.IInternalSearchController.GetSearchContentSourceList(System.Int32)">
            <summary>
            Get a List of Search Content Source that participate in Search
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.IInternalSearchController.GetSearchStatistics">
            <summary>
            Returns current search indexs general information
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.IInternalSearchController.GetSearchDocumentTypeDisplayName(DotNetNuke.Services.Search.Entities.SearchResult)">
            <summary>
            Get Friendly Display Name for the Search Result
            </summary>
            <remarks>SearchTypeId is used primarily to obtain this value. Multiple SearchTypeId can map to same Display Name, 
            e.g. Tab, Module, Html/Module all map to Pages.
            For SearchTypeId=module, ModuleDefitionId is also used. Module's display name is used unless an entry is found in 
            ~/DesktopModules/Admin/SearchResults/App_LocalResources/SearchableModules.resx for the Module_[MODULENAME].txt is found.</remarks>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.IInternalSearchController.AddSearchDocument(DotNetNuke.Services.Search.Entities.SearchDocument)">
            <summary>
            Add a Search Document to Search Index
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.IInternalSearchController.AddSearchDocuments(System.Collections.Generic.IEnumerable{DotNetNuke.Services.Search.Entities.SearchDocument})">
            <summary>
            Adds the collection of search documents to the search index
            </summary>
            <remarks>
            The controller auto-commits at the end of this method
            </remarks>
            <param name="searchDocumentList"></param>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.IInternalSearchController.DeleteSearchDocument(DotNetNuke.Services.Search.Entities.SearchDocument)">
            <summary>
            Delete a Search Document from the Search Index.
            REQUIRES: searchDocument to have PortalId, UniqueKey, SearchTypeId properties set.
            </summary>
            <param name="searchDocument"></param>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.IInternalSearchController.DeleteSearchDocumentsByModule(System.Int32,System.Int32,System.Int32)">
            <summary>
            Delete all search documents related to a particula module
            </summary>
            <param name="portalId"></param>
            <param name="moduleId"></param>
            <param name="moduleDefId"></param>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.IInternalSearchController.DeleteAllDocuments(System.Int32,System.Int32)">
            <summary>
            Deletes all documents of a specified portal and search type (used for re-index operation)
            </summary>
            <param name="portalId"></param>
            <param name="searchTypeId"></param>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.IInternalSearchController.Commit">
            <summary>
            Commits individually added/deleted documents to the search index
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.IInternalSearchController.OptimizeSearchIndex">
            <summary>
            Optimize the search index files by compacting and removing previously deleted search documents.
            <para>The call will return immediately and the operation runs on a background thread.</para>
            </summary>
            <remarks>
            This is a costly operation which consumes substantial CPU and I/O resources, therefore use it
            judiciously. If your site has a a single server that performs both indexing and searching, then 
            you should consider running the optimize operation after hours or over the weekend so that it
            does not interfere with ongoing search activities.
            </remarks>
            <returns>True is optimization was scheduled to run in the background, false otherwise.</returns>
        </member>
        <member name="T:DotNetNuke.Services.Search.Internals.InternalSearchController">
            <summary>
            Internal Search Controller. This is an Internal class and should not be used outside of Core
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Search.Internals.InternalSearchControllerImpl">
            -----------------------------------------------------------------------------
            <summary>
              The Impl Controller class for Lucene
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.InternalSearchControllerImpl.AddIntField(Lucene.Net.Documents.Document,System.Int32,System.String)">
            <summary>
            Add Field to Doc when supplied fieldValue > 0
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.ILuceneController.Search(DotNetNuke.Services.Search.Internals.LuceneSearchContext)">
            <summary>
            Execute Search
            </summary>
            <param name="luceneSearchContext">Search Context</param>
            <returns>List of matching Documents</returns>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.ILuceneController.Add(Lucene.Net.Documents.Document)">
            <summary>
            Adds Lucene Document in Lucene Index
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.ILuceneController.Delete(Lucene.Net.Search.Query)">
            <summary>
            Delete a Search Document from the Search Index
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.ILuceneController.Commit">
            <summary>
            Commits the added search documents into the search database
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.ILuceneController.OptimizeSearchIndex(System.Boolean)">
            <summary>
            Optimize the search index files by compacting and removing previously deleted search documents.
            </summary>
            <remarks>
            This is a costly operation which consumes substantial CPU and I/O resources, therefore use it
            judiciously. If your site has a a single server that performs both indexing and searching, then 
            you should consider running the optimize operation after hours or over the weekend so that it
            does not interfere with ongoing search activities.
            <para>This means you should expect the size of your index to roughly triple (temporarily)
            during optimization. Once optimization completes, and once you call commit(), disk usage
            will fall back to a lower level than the starting size.</para>
            </remarks>
            <param name="doWait">Whether to run optimization on background thread or wait for optimization to finish.</param>
            <returns>True is optimization was scheduled to run in the background or ran to completion in foreground, false otherwise (due to
            that there were no deletions or the writer was not created yet).</returns>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.ILuceneController.MaxDocsCount">
            <summary>
            Returns number of total documents in the search index (including deleted ones).
            </summary>
            <returns>Number of total documents in the search index (including Deletions).</returns>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.ILuceneController.SearchbleDocsCount">
            <summary>
            Returns number of total searchable documents in the search index.
            </summary>
            <returns>Number of total searchable documents in the search index.</returns>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.ILuceneController.HasDeletions">
            <summary>
            Returns if the current search index has deletions
            </summary>
            <returns>Whther the search index has deletions or not</returns>
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.ILuceneController.GetSearchStatistics">
            <summary>
            Returns current search indexs general information
            </summary>
            <returns><see cref="T:DotNetNuke.Services.Search.Internals.SearchStatistics"/> object or null if the information can not be retrieved.</returns>
        </member>
        <member name="T:DotNetNuke.Services.Search.Internals.LuceneController">
            <summary>
            Low-level APIs to manage Lucene Layer. This is an Internal class and should not be used outside of Core
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Search.Internals.LuceneControllerImpl">
            -----------------------------------------------------------------------------
            <summary>
              The Impl Controller class for Lucene
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Search.Internals.LuceneControllerImpl.GetDisplayScoreFromMatch(System.String)">
            <summary>
            Extract the Score portion of the match.ToString()
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Search.TabIndexer">
            -----------------------------------------------------------------------------
            Namespace:  DotNetNuke.Services.Search
            Project:    DotNetNuke.Search.Index
            Class:      TabIndexer
            -----------------------------------------------------------------------------
            <summary>
            The TabIndexer is an implementation of the abstract IndexingProvider
            class
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Search.TabIndexer.IndexSearchDocuments(System.Int32,DotNetNuke.Services.Scheduling.ScheduleHistoryItem,System.DateTime,System.Action{System.Collections.Generic.IEnumerable{DotNetNuke.Services.Search.Entities.SearchDocument}})">
            -----------------------------------------------------------------------------
            <summary>
            Returns the number of SearchDocuments indexed with Tab MetaData for the given portal.
            </summary>
            <remarks>This replaces "GetSearchIndexItems" as a newer implementation of search.</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Search.UserIndexer">
            -----------------------------------------------------------------------------
            Namespace:  DotNetNuke.Services.Search
            Project:    DotNetNuke.Search.Index
            Class:      TabIndexer
            -----------------------------------------------------------------------------
            <summary>
            The TabIndexer is an implementation of the abstract IndexingProvider
            class
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Search.UserIndexer.IndexSearchDocuments(System.Int32,DotNetNuke.Services.Scheduling.ScheduleHistoryItem,System.DateTime,System.Action{System.Collections.Generic.IEnumerable{DotNetNuke.Services.Search.Entities.SearchDocument}})">
            -----------------------------------------------------------------------------
            <summary>
            Searches for and indexes modified users for the given portal.
            </summary>
            <returns>Count of indexed records</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Search.ModuleIndexer">
            -----------------------------------------------------------------------------
            Namespace:  DotNetNuke.Services.Search
            Project:    DotNetNuke.Search.Index
            Class:      ModuleIndexer
            -----------------------------------------------------------------------------
            <summary>
            The ModuleIndexer is an implementation of the abstract IndexingProvider
            class
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Search.ModuleIndexer.IndexSearchDocuments(System.Int32,DotNetNuke.Services.Scheduling.ScheduleHistoryItem,System.DateTime,System.Action{System.Collections.Generic.IEnumerable{DotNetNuke.Services.Search.Entities.SearchDocument}})">
            -----------------------------------------------------------------------------
            <summary>
            Returns the number of indexed SearchDocuments for the portal.
            </summary>
            <remarks>This replaces "GetSearchIndexItems" as a newer implementation of search.</remarks>
            <returns></returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Search.ModuleIndexer.GetModuleMetaData(System.Int32,System.DateTime)">
            -----------------------------------------------------------------------------
            <summary>
            Returns a collection of SearchDocuments containing module metadata (title, header, footer...) of Searchable Modules.
            </summary>
            <param name="portalId"></param>
            <param name="startDate"></param>
            <returns></returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Search.ModuleIndexer.GetSearchModules(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Gets a list of modules that are listed as "Searchable" from the module definition and check if they
            implement ModuleSearchBase -- which is a newer implementation of search that replaces ISearchable
            </summary>
            <param name="portalId"></param>
            <returns></returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Search.SearchContentModuleInfo">
            -----------------------------------------------------------------------------
            Namespace:  DotNetNuke.Services.Search
            Project:    DotNetNuke.Search.Index
            Class:      SearchContentModuleInfo
            -----------------------------------------------------------------------------
            <summary>
            The SearchContentModuleInfo class represents an extendension (by containment)
            of ModuleInfo to add a parametere that determines whether a module is Searchable
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Search.SearchContentModuleInfoCollection">
            -----------------------------------------------------------------------------
            Namespace:  DotNetNuke.Services.Search
            Project:    DotNetNuke.Search.Index
            Class:      SearchContentModuleInfoCollection
            -----------------------------------------------------------------------------
            <summary>
            Represents a collection of <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfo">SearchContentModuleInfo</see> objects.
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Search.SearchContentModuleInfoCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfoCollection">SearchContentModuleInfoCollection</see> class.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Search.SearchContentModuleInfoCollection.#ctor(DotNetNuke.Services.Search.SearchContentModuleInfoCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfoCollection">SearchContentModuleInfoCollection</see> class containing the elements of the specified source collection.
            </summary>
            <param name="value">A <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfoCollection">SearchContentModuleInfoCollection</see> with which to initialize the collection.</param>
        </member>
        <member name="M:DotNetNuke.Services.Search.SearchContentModuleInfoCollection.#ctor(DotNetNuke.Services.Search.SearchContentModuleInfo[])">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfoCollection">SearchContentModuleInfoCollection</see> class containing the specified array of <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfo">SearchContentModuleInfo</see> objects.
            </summary>
            <param name="value">An array of <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfo">SearchContentModuleInfo</see> objects with which to initialize the collection. </param>
        </member>
        <member name="P:DotNetNuke.Services.Search.SearchContentModuleInfoCollection.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfoCollection">SearchContentModuleInfoCollection</see> at the specified index in the collection.
            <para>
            In VB.Net, this property is the indexer for the <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfoCollection">SearchContentModuleInfoCollection</see> class.
            </para>
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Search.SearchContentModuleInfoCollection.Add(DotNetNuke.Services.Search.SearchContentModuleInfo)">
            <summary>
            Add an element of the specified <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfo">SearchContentModuleInfo</see> to the end of the collection.
            </summary>
            <param name="value">An object of type <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfo">SearchContentModuleInfo</see> to add to the collection.</param>
        </member>
        <member name="M:DotNetNuke.Services.Search.SearchContentModuleInfoCollection.IndexOf(DotNetNuke.Services.Search.SearchContentModuleInfo)">
            <summary>
            Gets the index in the collection of the specified <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfoCollection">SearchContentModuleInfoCollection</see>, if it exists in the collection.
            </summary>
            <param name="value">The <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfoCollection">SearchContentModuleInfoCollection</see> to locate in the collection.</param>
            <returns>The index in the collection of the specified object, if found; otherwise, -1.</returns>
        </member>
        <member name="M:DotNetNuke.Services.Search.SearchContentModuleInfoCollection.Insert(System.Int32,DotNetNuke.Services.Search.SearchContentModuleInfo)">
            <summary>
            Add an element of the specified <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfo">SearchContentModuleInfo</see> to the collection at the designated index.
            </summary>
            <param name="index">An <see cref="T:System.Int32">Integer</see> to indicate the location to add the object to the collection.</param>
            <param name="value">An object of type <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfo">SearchContentModuleInfo</see> to add to the collection.</param>
        </member>
        <member name="M:DotNetNuke.Services.Search.SearchContentModuleInfoCollection.Remove(DotNetNuke.Services.Search.SearchContentModuleInfo)">
            <summary>
            Remove the specified object of type <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfo">SearchContentModuleInfo</see> from the collection.
            </summary>
            <param name="value">An object of type <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfo">SearchContentModuleInfo</see> to remove to the collection.</param>
        </member>
        <member name="M:DotNetNuke.Services.Search.SearchContentModuleInfoCollection.Contains(DotNetNuke.Services.Search.SearchContentModuleInfo)">
            <summary>
            Gets a value indicating whether the collection contains the specified <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfoCollection">SearchContentModuleInfoCollection</see>.
            </summary>
            <param name="value">The <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfoCollection">SearchContentModuleInfoCollection</see> to search for in the collection.</param>
            <returns><b>true</b> if the collection contains the specified object; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:DotNetNuke.Services.Search.SearchContentModuleInfoCollection.AddRange(DotNetNuke.Services.Search.SearchContentModuleInfo[])">
            <summary>
            Copies the elements of the specified <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfo">SearchContentModuleInfo</see> array to the end of the collection.
            </summary>
            <param name="value">An array of type <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfo">SearchContentModuleInfo</see> containing the objects to add to the collection.</param>
        </member>
        <member name="M:DotNetNuke.Services.Search.SearchContentModuleInfoCollection.AddRange(DotNetNuke.Services.Search.SearchContentModuleInfoCollection)">
            <summary>
            Adds the contents of another <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfoCollection">SearchContentModuleInfoCollection</see> to the end of the collection.
            </summary>
            <param name="value">A <see cref="T:DotNetNuke.Services.Search.SearchContentModuleInfoCollection">SearchContentModuleInfoCollection</see> containing the objects to add to the collection. </param>
        </member>
        <member name="M:DotNetNuke.Services.Search.SearchContentModuleInfoCollection.CopyTo(DotNetNuke.Services.Search.SearchContentModuleInfo[],System.Int32)">
            <summary>
            Copies the collection objects to a one-dimensional <see cref="T:System.Array">Array</see> instance beginning at the specified index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array">Array</see> that is the destination of the values copied from the collection.</param>
            <param name="index">The index of the array at which to begin inserting.</param>
        </member>
        <member name="M:DotNetNuke.Services.Search.SearchContentModuleInfoCollection.ToArray">
            <summary>
            Creates a one-dimensional <see cref="T:System.Array">Array</see> instance containing the collection items.
            </summary>
            <returns>Array of type SearchContentModuleInfo</returns>
        </member>
        <member name="T:DotNetNuke.Services.Search.IndexingProvider">
            <summary>A base class for search indexers</summary>
        </member>
        <member name="M:DotNetNuke.Services.Search.IndexingProvider.IndexSearchDocuments(System.Int32,DotNetNuke.Services.Scheduling.ScheduleHistoryItem,System.DateTime,System.Action{System.Collections.Generic.IEnumerable{DotNetNuke.Services.Search.Entities.SearchDocument}})">
            <summary>This method must save search documents in batches to minimize memory usage instead of returning all documents at once.</summary>
            <param name="portalId">ID of the portal for which to index items</param>
            <param name="startDateLocal">Minimum modification date of items that need to be indexed</param>
            <param name="indexer">A delegate function to send the collection of documents to for saving/indexing</param>
            <returns>The number of documents indexed</returns>
        </member>
        <member name="M:DotNetNuke.Services.Search.IndexingProvider.GetLocalTimeOfLastIndexedItem(System.Int32,System.Int32,System.DateTime)">
            <summary>Retrieves the date/time of the last item to be indexed</summary>
            <param name="portalId">The portal ID.</param>
            <param name="scheduleId">The schedule ID.</param>
            <param name="localTime">The local time passed to <see cref="M:DotNetNuke.Services.Search.IndexingProvider.IndexSearchDocuments(System.Int32,DotNetNuke.Services.Scheduling.ScheduleHistoryItem,System.DateTime,System.Action{System.Collections.Generic.IEnumerable{DotNetNuke.Services.Search.Entities.SearchDocument}})" />.</param>
            <returns>Either <paramref name="localTime"/> or the stored index time, whichever is earlier</returns>
        </member>
        <member name="M:DotNetNuke.Services.Search.IndexingProvider.SetLocalTimeOfLastIndexedItem(System.Int32,System.Int32,System.DateTime)">
            <summary>Stores the date/time of the last item to be indexed.</summary>
            <param name="portalId">The portal ID.</param>
            <param name="scheduleId">The schedule ID.</param>
            <param name="localTime">The local time to store.</param>
        </member>
        <member name="M:DotNetNuke.Services.Search.IndexingProvider.GetLastCheckpointData(System.Int32,System.Int32)">
            <summary>Retrieves free format data to help the indexer to perform its job</summary>
            <param name="portalId">The portal ID.</param>
            <param name="scheduleId">The schedule ID.</param>
            <returns>The checkpoint data</returns>
        </member>
        <member name="M:DotNetNuke.Services.Search.IndexingProvider.SetLastCheckpointData(System.Int32,System.Int32,System.String)">
            <summary>Stores free format data to help the indexer to perform its job</summary>
            <param name="portalId">The portal ID.</param>
            <param name="scheduleId">The schedule ID.</param>
            <param name="data">The data to store.</param>
        </member>
        <member name="M:DotNetNuke.Services.Search.IndexingProvider.ScheduleItemSettingKey(System.Int32,System.String)">
            <summary>
            Creates a unique name for the IndexingProvider implementation that can be used
            to save/retrieve scheduler item {key,name} setting pairs per portal and feature.
            </summary>
            <param name="portalId">The ID of the portal</param>
            <param name="propertyId">The name of the property</param>
            <remarks>
            Note that changing the class name in derived classes will cause this key to differ
            from the names stored in the database; therefore, don't change the derived class
            [full] names once these are deployed to market in an actual release version.
            <para>The format of the key is as follows:
            <ol>
            <li>"Search" literal</li>
            <li>Name of the indexer class</li>
            <li>Hash of the full class name of the indexer class (this and the previous will keep the key short and unique)</li>
            <li>Portal ID the setting is related to</li>
            <li>An additional property identifier set by the caller (this allows more items to be saved per indexer per portal)</li>
            </ol>
            </para>
            </remarks>
            <returns>The setting key</returns>
        </member>
        <member name="T:DotNetNuke.Services.Search.SearchEngine">
            -----------------------------------------------------------------------------
            Namespace:  DotNetNuke.Services.Search
            Project:    DotNetNuke
            Class:      SearchEngine
            -----------------------------------------------------------------------------
            <summary>
            The SearchEngine  manages the Indexing of the Portal content
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Search.SearchEngine.IndexContent">
            -----------------------------------------------------------------------------
            <summary>
            Indexes content within the given time farame
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Search.SearchEngine.DeleteOldDocsBeforeReindex">
            <summary>
            Deletes all old documents when re-index was requested, so we start a fresh search.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Search.SearchEngine.DeleteRemovedObjects">
            <summary>
            Deletes all deleted items from the system that are added to deletions table.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Search.SearchEngine.Commit">
            <summary>
            Commits (flushes) all added and deleted content to search engine's disk file
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Search.SearchEngine.GetAndStoreSearchDocuments(DotNetNuke.Services.Search.IndexingProvider)">
            -----------------------------------------------------------------------------
            <summary>
            Gets all the Search Documents for the given timeframe.
            </summary>
            <param name="indexer"></param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Search.SearchEngine.GetAndStoreModuleMetaData(DotNetNuke.Services.Search.ModuleIndexer)">
            -----------------------------------------------------------------------------
            <summary>
            Gets all the Searchable Module MetaData SearchDocuments within the timeframe for all portals
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Search.SearchEngine.StoreSearchDocuments(System.Collections.Generic.IEnumerable{DotNetNuke.Services.Search.Entities.SearchDocument})">
            -----------------------------------------------------------------------------
            <summary>
            Ensures all SearchDocuments have a SearchTypeId
            </summary>
            <param name="searchDocs"></param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Search.SearchEngine.FixedIndexingStartDate(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Adjusts the re-index date/time to account for the portal reindex value
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Search.SearchEngineScheduler">
            -----------------------------------------------------------------------------
            Namespace:  DotNetNuke.Services.Search
            Project:    DotNetNuke
            Class:      SearchEngineScheduler
            -----------------------------------------------------------------------------
            <summary>
            The SearchEngineScheduler implements a SchedulerClient for the Indexing of
            portal content.
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Search.SearchEngineScheduler.DoWork">
            -----------------------------------------------------------------------------
            <summary>
            DoWork runs the scheduled item
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Social.Messaging.IUserPreferencesController">
            <summary>
            This class is responsible to manage the Messaging User Preference
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.IUserPreferencesController.SetUserPreference(DotNetNuke.Services.Social.Messaging.UserPreference)">
            <summary>
            Set the User Messaging Preference
            </summary>
            <param name="userPreference">User Preference</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.IUserPreferencesController.GetUserPreference(DotNetNuke.Entities.Users.UserInfo)">
            <summary>
            Get the User Messaging Preference
            </summary>
            <param name="userinfo">User info</param>
            <returns>User Messaging Preference</returns>
        </member>
        <member name="T:DotNetNuke.Services.Social.Messaging.UserPreference">
            <summary>
            Represents the  Messaging User Preference
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.UserPreference.PortalId">
            <summary>
            Portal where the preference are applied
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.UserPreference.UserId">
            <summary>
            User Identifier
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.UserPreference.MessagesEmailFrequency">
            <summary>
            The Email Delivery Frequency used for Messages
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.UserPreference.NotificationsEmailFrequency">
            <summary>
            The Email Delivery Frequency used for Notifications
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Social.Messaging.Internal.IInternalMessagingController">
            <summary>Interface used for Message Controller behaviors</summary>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Internal.IInternalMessagingController.WaitTimeForNextMessage(DotNetNuke.Entities.Users.UserInfo)">
            <summary>How long a user needs to wait before user is allowed sending the next message</summary>
            <returns>Time in seconds. Returns zero if user has never sent a message</returns>
             <param name="sender">Sender's UserInfo</param>        
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Internal.IInternalMessagingController.GetLastSentMessage(DotNetNuke.Entities.Users.UserInfo)">
            <summary>Last message sent by the User</summary>
            <returns>Message. Null when no message was sent</returns>
             <param name="sender">Sender's UserInfo</param>        
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Internal.IInternalMessagingController.RecipientLimit(System.Int32)">
            <summary>Maximum number of Recipients allowed</summary>        
            <returns>Count. Message to a Role is considered a single Recipient. Each User in the To list is counted as one User each.</returns>
             <param name="portalId">Portal Id</param>        
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Internal.IInternalMessagingController.AttachmentsAllowed(System.Int32)">
            <summary>Are attachments allowed</summary>        
            <returns>True or False</returns>
             <param name="portalId">Portal Id</param>        
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Internal.IInternalMessagingController.IncludeAttachments(System.Int32)">
            <summary>Whether or not to includes the attachment in the email message.</summary>
            <param name="portalId">The portal identifier.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Internal.IInternalMessagingController.DisablePrivateMessage(System.Int32)">
            <summary>Whether disable regular users to send message to user/group, default is false.</summary>        
             <param name="portalId">Portal Id</param>    
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Internal.IInternalMessagingController.ConvertLegacyMessages(System.Int32,System.Int32)">
            <summary>Converts the legacy messages.</summary>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Internal.IInternalMessagingController.CountLegacyMessages">
            <summary>Counts the legacy messages.</summary>
            <returns>A count of messages</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Internal.IInternalMessagingController.GetInbox(System.Int32,System.Int32,System.Int32,System.String,System.Boolean,DotNetNuke.Services.Social.Messaging.MessageReadStatus,DotNetNuke.Services.Social.Messaging.MessageArchivedStatus)">
            <summary>Gets the inbox.</summary>
            <param name="userId">The user identifier.</param>
            <param name="afterMessageId">The after message identifier.</param>
            <param name="numberOfRecords">The number of records.</param>
            <param name="sortColumn">The sort column.</param>
            <param name="ascending">if set to <c>true</c> [ascending].</param>
            <param name="readStatus">The read status.</param>
            <param name="archivedStatus">The archived status.</param>
            <returns>A <see cref="T:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageBoxView"/></returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Internal.IInternalMessagingController.GetInbox(System.Int32,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>Gets the inbox.</summary>
            <param name="userId">The user identifier.</param>
            <param name="afterMessageId">The after message identifier.</param>
            <param name="numberOfRecords">The number of records.</param>
            <param name="sortColumn">The sort column.</param>
            <param name="sortAscending">if set to <c>true</c> [sort ascending].</param>
            <returns>A <see cref="T:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageBoxView"/></returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Internal.IInternalMessagingController.GetRecentInbox(System.Int32)">
            <summary>Gets the recent inbox.</summary>
            <param name="userId">The user identifier.</param>
            <returns>A <see cref="T:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageBoxView"/></returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Internal.IInternalMessagingController.GetRecentInbox(System.Int32,System.Int32,System.Int32)">
            <summary>Gets the recent inbox.</summary>
            <param name="userId">The user identifier.</param>
            <param name="afterMessageId">The after message identifier.</param>
            <param name="numberOfRecords">The number of records.</param>
            <returns>A <see cref="T:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageBoxView"/></returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Internal.IInternalMessagingController.GetSentbox(System.Int32,System.Int32,System.Int32,System.String,System.Boolean,DotNetNuke.Services.Social.Messaging.MessageReadStatus,DotNetNuke.Services.Social.Messaging.MessageArchivedStatus)">
            <summary>Gets the sent box.</summary>
            <param name="userId">The user identifier.</param>
            <param name="afterMessageId">The after message identifier.</param>
            <param name="numberOfRecords">The number of records.</param>
            <param name="sortColumn">The sort column.</param>
            <param name="ascending">if set to <c>true</c> [ascending].</param>
            <param name="readStatus">The read status.</param>
            <param name="archivedStatus">The archived status.</param>
            <returns>A <see cref="T:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageBoxView"/></returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Internal.IInternalMessagingController.GetSentbox(System.Int32,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>Gets the sent box.</summary>
            <param name="userId">The user identifier.</param>
            <param name="afterMessageId">The after message identifier.</param>
            <param name="numberOfRecords">The number of records.</param>
            <param name="sortColumn">The sort column.</param>
            <param name="sortAscending">if set to <c>true</c> [sort ascending].</param>
            <returns>A <see cref="T:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageBoxView"/></returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Internal.IInternalMessagingController.GetRecentSentbox(System.Int32)">
            <summary>Gets the recent sent box.</summary>
            <param name="userId">The user identifier.</param>
            <returns>A <see cref="T:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageBoxView"/></returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Internal.IInternalMessagingController.GetRecentSentbox(System.Int32,System.Int32,System.Int32)">
            <summary>Gets the recent sent box.</summary>
            <param name="userId">The user identifier.</param>
            <param name="afterMessageId">The after message identifier.</param>
            <param name="numberOfRecords">The number of records.</param>
            <returns>A <see cref="T:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageBoxView"/></returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Internal.IInternalMessagingController.GetArchivedMessages(System.Int32,System.Int32,System.Int32)">
            <summary>Gets the archived messages.</summary>
            <param name="userId">The user identifier.</param>
            <param name="afterMessageId">The after message identifier.</param>
            <param name="numberOfRecords">The number of records.</param>
            <returns>A <see cref="T:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageBoxView"/></returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Internal.IInternalMessagingController.GetMessageThread(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Boolean,System.Int32@)">
            <summary>Gets the message thread.</summary>
            <param name="conversationId">The conversation identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="afterMessageId">The after message identifier.</param>
            <param name="numberOfRecords">The number of records.</param>
            <param name="sortColumn">The sort column.</param>
            <param name="ascending">if set to <c>true</c> [ascending].</param>
            <param name="totalRecords">The total records.</param>
            <returns>A <see cref="T:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageThreadsView"/></returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Internal.IInternalMessagingController.GetMessageThread(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>Gets the message thread.</summary>
            <param name="conversationId">The conversation identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="afterMessageId">The after message identifier.</param>
            <param name="numberOfRecords">The number of records.</param>
            <param name="totalRecords">The total records.</param>
            <returns>A <see cref="T:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageThreadsView"/></returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Internal.IInternalMessagingController.GetAttachments(System.Int32)">
            <summary>Gets the attachments for the specified message.</summary>
            <param name="messageId">The message identifier.</param>
            <returns>A list of <see cref="T:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageFileView"/></returns>
        </member>
        <member name="T:DotNetNuke.Services.Social.Messaging.Internal.InternalMessagingController">
            <summary>
            Business Layer to manage Messaging. Also contains CRUD methods.
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Social.Messaging.Internal.InternalMessagingControllerImpl">
            <summary>The Controller class for social Messaging</summary>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Internal.InternalMessagingControllerImpl.WaitTimeForNextMessage(DotNetNuke.Entities.Users.UserInfo)">
            <summary>How long a user needs to wait before sending the next message.</summary>
            <returns>Time in seconds. Returns zero if user is Host, Admin or has never sent a message.</returns>
            <param name="sender">Sender's UserInfo</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Internal.InternalMessagingControllerImpl.GetLastSentMessage(DotNetNuke.Entities.Users.UserInfo)">
            <summary>Last message sent by the User</summary>
            <returns>Message. Null when no message was sent</returns>
             <param name="sender">Sender's UserInfo</param>        
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Internal.InternalMessagingControllerImpl.IncludeAttachments(System.Int32)">
            <summary>Whether or not attachments are included with outgoing email.</summary>
            <param name="portalId">Portal Id</param>
            <returns>True or False</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Internal.InternalMessagingControllerImpl.AttachmentsAllowed(System.Int32)">
            <summary>Are attachments allowed</summary>
            <param name="portalId">Portal Id</param>
            <returns>True or False</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Internal.InternalMessagingControllerImpl.RecipientLimit(System.Int32)">
            <summary>Maximum number of Recipients allowed</summary>        
            <returns>Count. Message to a Role is considered a single Recipient. Each User in the To list is counted as one User each.</returns>
             <param name="portalId">Portal Id</param>        
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Internal.InternalMessagingControllerImpl.DisablePrivateMessage(System.Int32)">
            <summary>Whether disable regular users to send message to user/group, default is false.</summary>        
             <param name="portalId">Portal Id</param>        
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Internal.InternalMessagingControllerImpl.GetAttachments(System.Int32)">
            <summary>Gets the attachments.</summary>
            <param name="messageId">The message identifier.</param>
            <returns>A list of message attachments for the given message</returns>
        </member>
        <member name="T:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageThreadsView">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Entities.Messaging
            Class:      MessageThreadsView
            -----------------------------------------------------------------------------
            <summary>
            The MessageThreadsView class contains collection of MessageThreadView and other meta data
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageThreadsView.TotalThreads">
            <summary>
            Total Number of Threads
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageThreadsView.TotalNewThreads">
            <summary>
            Total Number of New (Unread) Threads
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageThreadsView.TotalArchivedThreads">
            <summary>
            Total Number of Archived Threads
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageThreadsView.Conversations">
            <summary>
            List of Conversations
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageBoxView">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Entities.Messaging.Views
            Class:      MessageBoxView
            -----------------------------------------------------------------------------
            <summary>
            The MessageBoxView contains the View of Inbox, Sent or Archived messages
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageBoxView.TotalConversations">
            <summary>
            Total Number of Coversations
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageBoxView.TotalNewThreads">
            <summary>
            Total Number of New (Unread) Threads
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageBoxView.Conversations">
            <summary>
            List of Conversations
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageFileView">
            <summary>The MessageFileView class contains details about the attachment</summary>
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Entities.Messaging.Views
            Class:      MessageFileView
            -----------------------------------------------------------------------------
            -----------------------------------------------------------------------------
        </member>
        <member name="F:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageFileView._size">
            <summary>The _size</summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageFileView.FileId">
            <summary>Gets or sets the file identifier.</summary>
            <value>The file identifier.</value>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageFileView.Name">
            <summary>Gets or sets the name of the file with extension</summary>
            <value>The name.</value>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageFileView.Size">
            <summary>Gets or sets the size of the File with Unit, e.g. 100 B, 12 KB, 200 MB, etc.</summary>
            <value>The size.</value>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageFileView.Url">
            <summary>
            Gets or sets the url of the file to download
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageThreadView">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Entities.Messaging
            Class:      MessageThreadView
            -----------------------------------------------------------------------------
            <summary>
            The MessageThreadView class contains MessageConversationView and collection of MessageAttachmentView
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageThreadView.Conversation">
            <summary>
            MessageItemView containing consolidated information about the message
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageThreadView.Attachments">
            <summary>
            List of attachments
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageConversationView">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Entities.Messaging.Views
            Class:      MessageConversationView
            -----------------------------------------------------------------------------
            <summary>
            The MessageConversationView class contains details of the latest message in a Conversation.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageConversationView.MessageID">
            <summary>
            MessageID - The primary key
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageConversationView.PortalID">
            <summary>
            portalID for the message
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageConversationView.To">
            <summary>
            To list for the message. This information is saved for faster display of To list in the message
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageConversationView.From">
            <summary>
            Message From
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageConversationView.Subject">
            <summary>
            Message Subject
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageConversationView.Body">
            <summary>
            Message body
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageConversationView.ConversationId">
            <summary>
            Conversation ID of the Message. Each message has at least one ConversationId. Subsequent Replies to a Message get same ConversationId
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageConversationView.ReplyAllAllowed">
            <summary>
            ReplyAllAllowed is a bit value to indicate if the reply to the message can be sent to all the recipients or just the sender
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageConversationView.SenderUserID">
            <summary>
            The UserID of the sender of the message
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageConversationView.DisplayDate">
            <summary>
            A pretty printed string with the time since the message was created
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageConversationView.KeyID">
            <summary>
            IHydratable.KeyID.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageConversationView.RowNumber">
            <summary>
            RowNumber of the message in a set
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageConversationView.AttachmentCount">
            <summary>
            Count of Total Attachments in a Conversation. It is calculated by adding attachments in all the threads for a given conversation.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageConversationView.NewThreadCount">
            <summary>
            Count of Total New (Unread) Threads in a Conversation. It is calculated by inspecting all the threads in a conversation and counting the ones that are not read yet.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageConversationView.ThreadCount">
            <summary>
            Count of Total Threads in a Conversation.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageConversationView.SenderProfileUrl">
            <summary>
            The Sender User Profile URL
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageConversationView.Fill(System.Data.IDataReader)">
            <summary>
            Fill the object with data from database.
            </summary>
            <param name="dr">the data reader.</param>
        </member>
        <member name="T:DotNetNuke.Services.Social.Messaging.MessageSentStatus">
            <summary>
            Sent Status of a Message - Is this a Sent Message or a Received Message
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Social.Messaging.MessageSentStatus.Received">
            <summary>
            This Message was Received
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Social.Messaging.MessageSentStatus.Sent">
            <summary>
            This Message was Sent
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Social.Messaging.MessageSentStatus.Any">
            <summary>
            Any Message Status - Both Sent and Received
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Social.Messaging.MessageArchivedStatus">
            <summary>
            Archived Status of a Message
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Social.Messaging.MessageArchivedStatus.Archived">
            <summary>
            Archived Message Status
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Social.Messaging.MessageArchivedStatus.UnArchived">
            <summary>
            UnArchived Message Status
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Social.Messaging.MessageArchivedStatus.Any">
            <summary>
            Any Message Status - Both Archived and UnArchived
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Social.Messaging.MessageReadStatus">
            <summary>
            Read Status of a Message
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Social.Messaging.MessageReadStatus.Read">
            <summary>
            Read Message Status
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Social.Messaging.MessageReadStatus.UnRead">
            <summary>
            UnRead Message Status
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Social.Messaging.MessageReadStatus.Any">
            <summary>
            Any Message Status - Both Read and UnRead
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler">
            <summary>
            A SchedulerClient instance that handles all the offline messaging actions
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.SettingLastHourlyRun">
            <summary>The setting name for number hours since last hourly digest run</summary>
        </member>
        <member name="F:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.SettingLastDailyRun">
            <summary>The setting name for number hours since last daily digest run</summary>
        </member>
        <member name="F:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.SettingLastWeeklyRun">
            <summary>The setting name for number hours since last weekly digest run</summary>
        </member>
        <member name="F:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.SettingLastMonthlyRun">
            <summary>The setting name for number hours since last monthly digest run</summary>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.#ctor(DotNetNuke.Services.Scheduling.ScheduleHistoryItem)">
            <summary>Initializes a new instance of the <see cref="T:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler"/> class.</summary>
            <param name="objScheduleHistoryItem">The object schedule history item.</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.DoWork">
            <summary>This is the method that kicks off the actual work within the SchedulerClient's subclass</summary>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.IsSendEmailEnable(System.Int32)">
            <summary>Determines whether [is send email enable] [the specified portal identifier].</summary>
            <param name="portalId">The portal identifier.</param>
            <returns>True if mail is enabled in PortalSettings</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.IsUserAbleToReceiveAnEmail(DotNetNuke.Entities.Users.UserInfo)">
            <summary>Determines whether [is user able to receive an email] [the specified recipient user].</summary>
            <param name="recipientUser">The recipient user.</param>
            <returns>True if the user can receive email, otherwise false</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.GetSenderAddress(System.String,System.String)">
            <summary>Gets the sender address.</summary>
            <param name="sender">The sender.</param>
            <param name="fromAddress">From address.</param>
            <returns>The formatted sender address</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.GetEmailBody(System.String,System.String,DotNetNuke.Entities.Portals.PortalSettings,DotNetNuke.Entities.Users.UserInfo)">
            <summary>Gets the email body.</summary>
            <param name="template">The template.</param>
            <param name="messageBody">The message body.</param>
            <param name="portalSettings">The portal settings.</param>
            <param name="recipientUser">The recipient user.</param>
            <returns>A string containing the email body with any tokens replaced</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.GetEmailItemContent(DotNetNuke.Entities.Portals.PortalSettings,DotNetNuke.Services.Social.Messaging.MessageRecipient,System.String)">
            <summary>Gets the content of the email item.</summary>
            <param name="portalSettings">The portal settings.</param>
            <param name="message">The message.</param>
            <param name="itemTemplate">The item template.</param>
            <returns>A string with all email tokens replaced with content.</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.MarkMessagesAsDispatched(System.Collections.Generic.IEnumerable{DotNetNuke.Services.Social.Messaging.MessageRecipient})">
            <summary>Marks the messages as dispatched.</summary>
            <param name="messages">The messages.</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.GetEmailBodyItemTemplate(System.String)">
            <summary>Gets the email body item template.</summary>
            <param name="language">The language.</param>
            <returns>The email body template item from the Global Resource File: EMAIL_MESSAGING_DISPATCH_ITEM</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.GetEmailBodyTemplate(System.String)">
            <summary>Gets the email body template.</summary>
            <param name="language">The language.</param>
            <returns>The email body template from the Global Resource File: EMAIL_MESSAGING_DISPATCH_BODY</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.GetEmailSubjectTemplate(System.String)">
            <summary>Gets the email subject template.</summary>
            <param name="language">The language.</param>
            <returns>The email subject template from the Global Resource File: EMAIL_SUBJECT_FORMAT</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.GetFriendRequestActionsTemplate(System.String)">
            <summary>Gets the friend request actions template.</summary>
            <param name="language">The language.</param>
            <returns>The friend request actions defined in the Global Resource File: EMAIL_SOCIAL_FRIENDREQUESTACTIONS</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.GetFollowRequestActionsTemplate(System.String)">
            <summary>Gets the follow request actions template.</summary>
            <param name="language">The language.</param>
            <returns>The follow request actions defined in the Global Resource File: EMAIL_SOCIAL_FOLLOWREQUESTACTIONS</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.GetSenderName(System.String,System.String)">
            <summary>Gets the name of the sender.</summary>
            <param name="displayName">The display name.</param>
            <param name="portalName">Name of the portal.</param>
            <returns>Either the display name for the sender or the portal name</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.GetProfilePicUrl(DotNetNuke.Entities.Portals.PortalSettings,System.Int32)">
            <summary>Gets the profile pic URL.</summary>
            <param name="portalSettings">The portal settings.</param>
            <param name="userId">The user identifier.</param>
            <returns>The handler url to fetch the picture for the specified userId</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.GetRelationshipAcceptRequestUrl(DotNetNuke.Entities.Portals.PortalSettings,System.Int32,System.String)">
            <summary>Gets the relationship accept request URL.</summary>
            <param name="portalSettings">The portal settings.</param>
            <param name="userId">The user identifier.</param>
            <param name="action">The action.</param>
            <returns>The handler url to fetch the relationship picture for the specified userId</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.GetProfileUrl(DotNetNuke.Entities.Portals.PortalSettings,System.Int32)">
            <summary>Gets the profile URL.</summary>
            <param name="portalSettings">The portal settings.</param>
            <param name="userId">The user identifier.</param>
            <returns>The handler url to fetch the profile picture for the specified userId</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.GetDisplayName(DotNetNuke.Entities.Portals.PortalSettings,System.Int32)">
            <summary>Gets the display name.</summary>
            <param name="portalSettings">The portal settings.</param>
            <param name="userId">The user identifier.</param>
            <returns>The display name for the given user</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.GetNotificationUrl(DotNetNuke.Entities.Portals.PortalSettings,System.Int32)">
            <summary>Gets the notification URL.</summary>
            <param name="portalSettings">The portal settings.</param>
            <param name="userId">The user identifier.</param>
            <returns>The handler url to fetch a notification for the specified userId</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.GetPortalLogoUrl(DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>Gets the portal logo URL.</summary>
            <param name="portalSettings">The portal settings.</param>
            <returns>A Url to the portal logo</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.GetDomainName(DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>Gets the name of the domain.</summary>
            <param name="portalSettings">The portal settings.</param>
            <returns>Resolves the domain name (portal alias) for the specified portal</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.GetPortalHomeUrl(DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>Gets the portal home URL.</summary>
            <param name="portalSettings">The portal settings.</param>
            <returns>The default portal alias url</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.GetSubscriptionsUrl(DotNetNuke.Entities.Portals.PortalSettings,System.Int32)">
            <summary>Gets the subscriptions URL.</summary>
            <param name="portalSettings">The portal settings.</param>
            <param name="userId">The user identifier.</param>
            <returns>The url for viewing subscriptions</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.GetMessageTab(DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>Gets the message tab.</summary>
            <param name="sendingPortal">The sending portal.</param>
            <returns>The tabId for where the Message Center is installed</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.GetMessageTabCallback(DotNetNuke.Common.Utilities.CacheItemArgs)">
            <summary>Gets the message tab callback.</summary>
            <param name="cacheItemArgs">The cache item arguments.</param>
            <returns>The tab Id for the Message Center OR the user profile page tab Id.</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.HandleFrequentDigests(System.Guid,System.Int32)">
            <summary>Handles the frequent digests.</summary>
            <param name="schedulerInstance">The scheduler instance.</param>
            <param name="remainingMessages">The remaining messages.</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.HandleFrequencyDigest(System.DateTime,System.String,DotNetNuke.Services.Social.Messaging.Frequency,System.Guid,System.Int32)">
            <summary>Handles the frequency digest.</summary>
            <param name="dateToCompare">The date to compare.</param>
            <param name="settingKeyLastRunDate">The setting key last run date.</param>
            <param name="frequency">The frequency.</param>
            <param name="schedulerInstance">The scheduler instance.</param>
            <param name="remainingMessages">The remaining messages.</param>
            <returns>The count of messages processed</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.HandleDigest(System.Guid,DotNetNuke.Services.Social.Messaging.Frequency,System.Int32)">
            <summary>Handles the digest.</summary>
            <param name="schedulerInstance">The scheduler instance.</param>
            <param name="frequency">The frequency.</param>
            <param name="remainingMessages">The remaining messages.</param>
            <returns>The count of messages processed</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.SendDigest(System.Collections.Generic.IEnumerable{DotNetNuke.Services.Social.Messaging.MessageRecipient},DotNetNuke.Entities.Portals.PortalSettings,DotNetNuke.Entities.Users.UserInfo,DotNetNuke.Entities.Users.UserInfo)">
            <summary>Sends the digest.</summary>
            <param name="messages">The messages.</param>
            <param name="portalSettings">The portal settings.</param>
            <param name="senderUser">The sender user.</param>
            <param name="recipientUser">The recipient user.</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.GetScheduleItemDateSetting(System.String)">
            <summary>Gets the schedule item date setting.</summary>
            <param name="settingKey">The setting key.</param>
            <returns>The date the schedule was ran</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.HandleInstantMessages(System.Guid)">
            <summary>Handles the sending of messages.</summary>
            <param name="schedulerInstance">The scheduler instance.</param>
            <returns>The count of messages sent</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.SendMessage(DotNetNuke.Services.Social.Messaging.MessageRecipient)">
            <summary>Sends the message and attachments if configured to include them.</summary>
            <param name="messageRecipient">The message recipient.</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Scheduler.CoreMessagingScheduler.CreateAttachments(System.Int32)">
            <summary>Creates list of attachments for the specified message.</summary>
            <param name="messageId">The message identifier.</param>
            <returns>A list of attachments</returns>
        </member>
        <member name="T:DotNetNuke.Services.Social.Messaging.MessagingController">
            -----------------------------------------------------------------------------
            <summary>
              The Controller class for social Messaging
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:DotNetNuke.Services.Social.Messaging.Data.DataService">
            <summary>Data Service component for core messaging functions</summary>
        </member>
        <member name="F:DotNetNuke.Services.Social.Messaging.Data.DataService._provider">
            <summary>The provider instance</summary>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.SaveMessage(DotNetNuke.Services.Social.Messaging.Message,System.Int32,System.Int32)">
            <summary>Saves the message.</summary>
            <param name="message">The message.</param>
            <param name="portalId">The portal identifier.</param>
            <param name="createUpdateUserId">The create update user identifier.</param>
            <returns>The id of the newly created message</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.GetMessage(System.Int32)">
            <summary>Gets the message.</summary>
            <param name="messageId">The message identifier.</param>
            <returns>A <see cref="T:System.Data.IDataReader"/> containing the message data</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.GetLastSentMessage(System.Int32,System.Int32)">
            <summary>Gets the last sent message.</summary>
            <param name="userId">The user identifier.</param>
            <param name="portalId">The portal identifier.</param>
            <returns>A <see cref="T:System.Data.IDataReader"/> containing the last sent message data</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.GetMessagesBySender(System.Int32,System.Int32)">
            <summary>Gets the messages by sender.</summary>
            <param name="messageId">The message identifier.</param>
            <param name="portalId">The portal identifier.</param>
            <returns>A <see cref="T:System.Data.IDataReader"/> containing the messages for a given portal Id</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.DeleteMessage(System.Int32)">
            <summary>Deletes the message.</summary>
            <param name="messageId">The message identifier.</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.DeleteUserFromConversation(System.Int32,System.Int32)">
            <summary>Deletes the user from conversation.</summary>
            <param name="conversationId">The conversation identifier.</param>
            <param name="userId">The user identifier.</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.CreateMessageReply(System.Int32,System.Int32,System.String,System.Int32,System.String,System.Int32)">
            <summary>Creates a message reply.</summary>
            <param name="conversationId">The conversation identifier.</param>
            <param name="portalId">The portal identifier.</param>
            <param name="body">The body.</param>
            <param name="senderUserId">The sender user identifier.</param>
            <param name="fromName">From name.</param>
            <param name="createUpdateUserId">The create update user identifier.</param>
            <returns>The id of the reply created</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.CheckReplyHasRecipients(System.Int32,System.Int32)">
            <summary>
            check if an attempt to reply to an existing mail has valid users
            </summary>
            <param name="conversationId">the particular reply within the message</param>
            <param name="userId">the user sending the message - as they are a recipient they must be excluded from the count</param>
            <returns>The count of recipients</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.GetInBoxView(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Boolean,DotNetNuke.Services.Social.Messaging.MessageReadStatus,DotNetNuke.Services.Social.Messaging.MessageArchivedStatus,DotNetNuke.Services.Social.Messaging.MessageSentStatus)">
            <summary>Gets the in box view.</summary>
            <param name="userId">The user identifier.</param>
            <param name="portalId">The portal identifier.</param>
            <param name="afterMessageId">The after message identifier.</param>
            <param name="numberOfRecords">The number of records.</param>
            <param name="sortColumn">The sort column.</param>
            <param name="sortAscending">if set to <c>true</c> [sort ascending].</param>
            <param name="readStatus">The read status.</param>
            <param name="archivedStatus">The archived status.</param>
            <param name="sentStatus">The sent status.</param>
            <returns>A <see cref="T:System.Data.IDataReader"/> containing the inbox data</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.GetSentBoxView(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>Gets the sent box view.</summary>
            <param name="userId">The user identifier.</param>
            <param name="portalId">The portal identifier.</param>
            <param name="afterMessageId">The after message identifier.</param>
            <param name="numberOfRecords">The number of records.</param>
            <param name="sortColumn">The sort column.</param>
            <param name="sortAscending">if set to <c>true</c> [sort ascending].</param>
            <returns>A <see cref="T:System.Data.IDataReader"/> containing the sent message box data</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.GetArchiveBoxView(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Boolean)">
            <summary>Gets the archive box view.</summary>
            <param name="userId">The user identifier.</param>
            <param name="portalId">The portal identifier.</param>
            <param name="afterMessageId">The after message identifier.</param>
            <param name="numberOfRecords">The number of records.</param>
            <param name="sortColumn">The sort column.</param>
            <param name="sortAscending">if set to <c>true</c> [sort ascending].</param>
            <returns>A <see cref="T:System.Data.IDataReader"/> containing the archived messages data</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.GetMessageThread(System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Boolean,System.Int32@)">
            <summary>Gets the message thread.</summary>
            <param name="conversationId">The conversation identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="afterMessageId">The after message identifier.</param>
            <param name="numberOfRecords">The number of records.</param>
            <param name="sortColumn">The sort column.</param>
            <param name="sortAscending">if set to <c>true</c> [sort ascending].</param>
            <param name="totalRecords">The total records.</param>
            <returns>A <see cref="T:System.Data.IDataReader"/> containing the message thread data</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.UpdateMessageReadStatus(System.Int32,System.Int32,System.Boolean)">
            <summary>Updates the message read status for a given conversation.</summary>
            <param name="conversationId">The conversation identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="read">if read is set to <c>true</c> otherwise false.</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.UpdateMessageArchivedStatus(System.Int32,System.Int32,System.Boolean)">
            <summary>Updates the message archived status.</summary>
            <param name="conversationId">The conversation identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="archived">if set to <c>true</c> archived.</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.CountNewThreads(System.Int32,System.Int32)">
            <summary>Counts the new threads.</summary>
            <param name="userId">The user identifier.</param>
            <param name="portalId">The portal identifier.</param>
            <returns>The count of new threads for a given user</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.CountTotalConversations(System.Int32,System.Int32)">
            <summary>Counts the total conversations.</summary>
            <param name="userId">The user identifier.</param>
            <param name="portalId">The portal identifier.</param>
            <returns>The count of new conversations for a given user</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.CountMessagesByConversation(System.Int32)">
            <summary>Counts the messages by conversation.</summary>
            <param name="conversationId">The conversation identifier.</param>
            <returns>The count of new messages for a given conversation</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.CountArchivedMessagesByConversation(System.Int32)">
            <summary>Counts the archived messages by conversation.</summary>
            <param name="conversationId">The conversation identifier.</param>
            <returns>The count of archived messages for a given conversation</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.CountSentMessages(System.Int32,System.Int32)">
            <summary>Counts the sent messages.</summary>
            <param name="userId">The user identifier.</param>
            <param name="portalId">The portal identifier.</param>
            <returns>The count of messages sent for a given user</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.CountArchivedMessages(System.Int32,System.Int32)">
            <summary>Counts the archived messages.</summary>
            <param name="userId">The user identifier.</param>
            <param name="portalId">The portal identifier.</param>
            <returns>The count of archived messages for a given user</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.CountSentConversations(System.Int32,System.Int32)">
            <summary>Counts the sent conversations.</summary>
            <param name="userId">The user identifier.</param>
            <param name="portalId">The portal identifier.</param>
            <returns>The count of sent conversations for a given user</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.CountArchivedConversations(System.Int32,System.Int32)">
            <summary>Counts the archived conversations.</summary>
            <param name="userId">The user identifier.</param>
            <param name="portalId">The portal identifier.</param>
            <returns>The count of archived conversations for a given user</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.SaveMessageRecipient(DotNetNuke.Services.Social.Messaging.MessageRecipient,System.Int32)">
            <summary>Saves the message recipient.</summary>
            <param name="messageRecipient">The message recipient.</param>
            <param name="createUpdateUserId">The create update user identifier.</param>
            <returns>The new message recipient Id.</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.CreateMessageRecipientsForRole(System.Int32,System.String,System.Int32)">
            <summary>Creates the message recipients for role.</summary>
            <param name="messageId">The message identifier.</param>
            <param name="roleIds">The role ids.</param>
            <param name="createUpdateUserId">The create update user identifier.</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.GetMessageRecipient(System.Int32)">
            <summary>Gets the message recipient.</summary>
            <param name="messageRecipientId">The message recipient identifier.</param>
            <returns>A <see cref="T:System.Data.IDataReader" /> containing the message recipient data</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.GetMessageRecipientsByUser(System.Int32)">
            <summary>Gets the message recipients by user.</summary>
            <param name="userId">The user identifier.</param>
            <returns>A <see cref="T:System.Data.IDataReader" /> containing the message recipient data</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.GetMessageRecipientsByMessage(System.Int32)">
            <summary>Gets the message recipients by message.</summary>
            <param name="messageId">The message identifier.</param>
            <returns>A <see cref="T:System.Data.IDataReader" /> containing the message recipient data</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.GetMessageRecipientByMessageAndUser(System.Int32,System.Int32)">
            <summary>Gets the message recipient by message and user.</summary>
            <param name="messageId">The message identifier.</param>
            <param name="userId">The user identifier.</param>
            <returns>A <see cref="T:System.Data.IDataReader" /> containing the message recipient data</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.DeleteMessageRecipient(System.Int32)">
            <summary>Deletes the message recipient.</summary>
            <param name="messageRecipientId">The message recipient identifier.</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.DeleteMessageRecipientByMessageAndUser(System.Int32,System.Int32)">
            <summary>Deletes the message recipient by message and user.</summary>
            <param name="messageId">The message identifier.</param>
            <param name="userId">The user identifier.</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.SaveMessageAttachment(DotNetNuke.Services.Social.Messaging.MessageAttachment,System.Int32)">
            <summary>Saves the message attachment.</summary>
            <param name="messageAttachment">The message attachment.</param>
            <param name="createUpdateUserId">The create update user identifier.</param>
            <returns>The message attachment Id</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.GetMessageAttachment(System.Int32)">
            <summary>Gets the message attachment.</summary>
            <param name="messageAttachmentId">The message attachment identifier.</param>
            <returns>A <see cref="T:System.Data.IDataReader" /> containing the message attachment data</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.GetMessageAttachmentsByMessage(System.Int32)">
            <summary>Gets the message attachments by message id.</summary>
            <param name="messageId">The message identifier.</param>
            <returns>A list of <see cref="T:DotNetNuke.Services.Social.Messaging.Internal.Views.MessageFileView"/></returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.DeleteMessageAttachment(System.Int32)">
            <summary>Deletes the message attachment.</summary>
            <param name="messageAttachmentId">The message attachment identifier.</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.ConvertLegacyMessages(System.Int32,System.Int32)">
            <summary>Converts the legacy messages.</summary>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.CountLegacyMessages">
            <summary>Counts the legacy messages.</summary>
            <returns>A <see cref="T:System.Data.IDataReader" /> containing the messages data</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.GetNextMessagesForInstantDispatch(System.Guid,System.Int32)">
            <summary>Gets the next messages for instant dispatch.</summary>
            <param name="schedulerInstance">The scheduler instance.</param>
            <param name="batchSize">Size of the batch.</param>
            <returns>A <see cref="T:System.Data.IDataReader" /> containing the messages data</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.GetNextMessagesForDigestDispatch(System.Int32,System.Guid,System.Int32)">
            <summary>Gets the next messages for digest dispatch.</summary>
            <param name="frequecy">The frequency.</param>
            <param name="schedulerInstance">The scheduler instance.</param>
            <param name="batchSize">Size of the batch.</param>
            <returns>A <see cref="T:System.Data.IDataReader" /> containing the messages data</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.MarkMessageAsDispatched(System.Int32,System.Int32)">
            <summary>Marks the message as dispatched.</summary>
            <param name="messageId">The message identifier.</param>
            <param name="recipientId">The recipient identifier.</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.MarkMessageAsSent(System.Int32,System.Int32)">
            <summary>Marks the message as sent.</summary>
            <param name="messageId">The message identifier.</param>
            <param name="recipientId">The recipient identifier.</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.GetUserPreference(System.Int32,System.Int32)">
            <summary>Gets the user preference.</summary>
            <param name="portalId">The portal identifier.</param>
            <param name="userId">The user identifier.</param>
            <returns>A <see cref="T:System.Data.IDataReader" /> containing the user data</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Data.DataService.SetUserPreference(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Sets the user preference.</summary>
            <param name="portalId">The portal identifier.</param>
            <param name="userId">The user identifier.</param>
            <param name="messagesEmailFrequency">The messages email frequency.</param>
            <param name="notificationsEmailFrequency">The notifications email frequency.</param>
        </member>
        <member name="T:DotNetNuke.Services.Social.Messaging.MessageAttachment">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Entities.Messaging
            Class:      MessageAttachment
            -----------------------------------------------------------------------------
            <summary>
            The MessageAttachment class describes the content attachments associated with a message
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.MessageAttachment.MessageAttachmentID">
            <summary>
            MessageAttachmentID - The primary key
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.MessageAttachment.MessageID">
            <summary>
            MessageID of the message that contains this attachment
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.MessageAttachment.FileID">
            <summary>
            The FileID of the attachment (what will be used against the Files table to provide the attachment)
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.MessageAttachment.KeyID">
            <summary>
            IHydratable.KeyID.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.MessageAttachment.Fill(System.Data.IDataReader)">
            <summary>
            Fill the object with data from database.
            </summary>
            <param name="dr">the data reader.</param>
        </member>
        <member name="T:DotNetNuke.Services.Social.Messaging.MessageRecipient">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Entities.Messaging
            Class:      MessageRecipient
            -----------------------------------------------------------------------------
            <summary>
            The MessageRecipient class is used to store the details of all recipients of a particular message
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.MessageRecipient.RecipientID">
            <summary>
            RecipientID - The primary key
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.MessageRecipient.MessageID">
            <summary>
            The messageID of who sent the message to this recipient
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.MessageRecipient.UserID">
            <summary>
            The UserID of the user receiving the message
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.MessageRecipient.Read">
            <summary>
            Is Message read. True: Yes, False: No.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.MessageRecipient.Archived">
            <summary>
            Is Message archived. True: Yes, False: No.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.MessageRecipient.KeyID">
            <summary>
            IHydratable.KeyID.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.MessageRecipient.Fill(System.Data.IDataReader)">
            <summary>
            Fill the object with data from database.
            </summary>
            <param name="dr">the data reader.</param>
        </member>
        <member name="T:DotNetNuke.Services.Social.Messaging.Message">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Entities.Messaging
            Class:      Messages
            -----------------------------------------------------------------------------
            <summary>
            The Message class describes the content of messages sent via the system
            As messaging is system wide process and there may be no portalID context (e.g. a host messaging "all users") the object does not tie to portalID
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Message.MessageID">
            <summary>
            MessageID - The primary key
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Message.PortalID">
            <summary>
            portalID for the message
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Message.To">
            <summary>
            To list for the message. This information is saved for faster display of To list in the message
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Message.From">
            <summary>
            Message From
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Message.Subject">
            <summary>
            Message Subject
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Message.Body">
            <summary>
            Message body
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Message.ConversationId">
            <summary>
            Conversation ID of the Message. Each message has at least one ConversationId. Subsequent Replies to a Message get same ConversationId
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Message.NotificationTypeID">
            <summary>
            NotificationType ID of the Message. Each message is associated with a notification type.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Message.ReplyAllAllowed">
            <summary>
            ReplyAllAllowed is a bit value to indicate if the reply to the message can be sent to all the recipients or just the sender
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Message.SenderUserID">
            <summary>
            The UserID of the sender of the message
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Message.DisplayDate">
            <summary>
            A pretty printed string with the time since the message was created
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Messaging.Message.KeyID">
            <summary>
            IHydratable.KeyID.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Social.Messaging.Message.Fill(System.Data.IDataReader)">
            <summary>
            Fill the object with data from database.
            </summary>
            <param name="dr">the data reader.</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Subscriptions.Data.IDataService.AddSubscriptionType(System.String,System.String,System.Int32)">
            <summary>
            Adds a Subscription Type
            </summary>
            <param name="subscriptionName">Subscription Type Name</param>
            <param name="friendlyName">Subscription Type FriendlyName</param>
            <param name="desktopModuleId">DesktopModule Id</param>
            <returns>Subscription Type Id</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Subscriptions.Data.IDataService.GetSubscriptionTypes">
            <summary>
            Returns all the Subscription Types
            </summary>
            <returns>Subscription types</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Subscriptions.Data.IDataService.DeleteSubscriptionType(System.Int32)">
            <summary>
            Deletes a Subscription Type
            </summary>
            <param name="subscriptionTypeId">Subscription Type Id</param>
            <returns>True if the subscription type has been deleted, false otherwise</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Subscriptions.Data.IDataService.AddSubscription(System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Adds a Subscription
            </summary>
            <param name="userId">User Id</param>
            <param name="portalId">Portal id</param>
            <param name="subscriptionTypeId">Subscription Type Id</param>
            <param name="objectKey">Object Key</param>
            <param name="description">Description</param>
            <param name="moduleId">Module Id</param>
            <param name="tabId">Tab Id</param>
            <param name="objectData">Object Data</param>
            <returns>Suscription Id</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Subscriptions.Data.IDataService.GetSubscriptionsByUser(System.Int32,System.Int32,System.Int32)">
            <summary>
            Returns the User Subscriptions
            </summary>
            <param name="portalId">Portal Id</param>
            <param name="userId">User Id</param>
            <param name="subscriptionTypeId">Subscription Type Id</param>
            <returns>Collection of Subscriptions</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Subscriptions.Data.IDataService.GetSubscriptionsByContent(System.Int32,System.Int32,System.String)">
            <summary>
            Returns the Content Subscriptions
            </summary>
            <param name="portalId">Portal Id</param>
            <param name="subscriptionTypeId">Subscription Type Id</param>
            <param name="objectKey">Object Key</param>
            <returns>Collection of Subscriptions</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Subscriptions.Data.IDataService.IsSubscribed(System.Int32,System.Int32,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Checks if the user is subscribed to an ObjectKey
            </summary>
            <param name="portalId">Portal Id</param>
            <param name="userId">User Id</param>
            <param name="subscriptionTypeId">Subscription Type</param>
            <param name="objectKey">Object Key</param>
            <param name="moduleId">Module Id</param>
            <param name="tabId">Tab Id</param>
            <returns>Subscription</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Subscriptions.Data.IDataService.DeleteSubscription(System.Int32)">
            <summary>
            Deletes a Subscription
            </summary>
            <param name="subscriptionId">Subscription Id</param>
            <returns>True if the subscription has been deleted, false otherwise</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Subscriptions.Data.IDataService.UpdateSubscriptionDescription(System.String,System.Int32,System.String)">
            <summary>
            Updates a Subscription Description
            </summary>
            <param name="objectKey">Subscription Object Key</param>
            <param name="portalId">Subscription Portal Id</param>
            <param name="newDescription">New Subscription Description</param>
            <returns>The number of subscription descriptions that have been updated</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Subscriptions.Data.IDataService.DeleteSubscriptionsByObjectKey(System.Int32,System.String)">
            <summary>
            Deletes all subscriptions matching the specified object key
            </summary>
            <param name="portalId">Portal Id</param>
            <param name="objectKey">Object Key</param>
        </member>
        <member name="T:DotNetNuke.Services.Social.Subscriptions.Entities.Subscription">
            <summary>
            This class represents a Subscription instance.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Subscriptions.Entities.Subscription.SubscriptionId">
            <summary>
            The subscription identifier.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Subscriptions.Entities.Subscription.UserId">
            <summary>
            The user the subscription is associated with.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Subscriptions.Entities.Subscription.PortalId">
            <summary>
            The site the subscription is associated with.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Subscriptions.Entities.Subscription.SubscriptionTypeId">
            <summary>
            The type of subscription.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Subscriptions.Entities.Subscription.ObjectKey">
            <summary>
            Object key that represent the content which user is subscribed to.
            The format of the ObjectKey is up to the consumer. (i.e.: blog:12, where 12 represents the post identifier).
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Subscriptions.Entities.Subscription.ObjectData">
            <summary>
            Object Data that represents metadata to manage the subscription.
            The format of the ObjectData is up to the consumer. (i.e.: destinationModule:486, where 486 represents a extra property called Destination Module).
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Subscriptions.Entities.Subscription.Description">
            <summary>
            Description of the content which user is subscribed to.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Subscriptions.Entities.Subscription.CreatedOnDate">
            <summary>
            The date the user subscribed.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Subscriptions.Entities.Subscription.ModuleId">
            <summary>
            Associates the subscription with an instance of a module.
            If set it uses to apply to Security Trimming. 
            If the user does not have view permission on that module the Subscription won't be retrieved by the SubscriptionController.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Subscriptions.Entities.Subscription.TabId">
            <summary>
            Associates the subscription with a tab. 
            If set it uses to apply to Security Trimming. 
            If the user does not have view permission on that tab the Subscription won't be retrieved by the SubscriptionController.
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Social.Subscriptions.Entities.SubscriptionType">
            <summary>
            This class represents a Subscription Type.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Subscriptions.Entities.SubscriptionType.SubscriptionTypeId">
            <summary>
            The Subscription Type identifier.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Subscriptions.Entities.SubscriptionType.SubscriptionName">
            <summary>
            The Subscription Name.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Subscriptions.Entities.SubscriptionType.FriendlyName">
            <summary>
            The Subscription Friendly Name.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Subscriptions.Entities.SubscriptionType.DesktopModuleId">
            <summary>
            The Desktop Module Id associated with the subscription type. 
            This is an optional field but it should be set if the Subscription Type belongs to a specific module.
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Social.Subscriptions.ISubscriptionController">
            <summary>
            This controller is responsible to manage the user subscriptions
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Social.Subscriptions.ISubscriptionController.GetUserSubscriptions(DotNetNuke.Entities.Users.UserInfo,System.Int32,System.Int32)">
            <summary>
            Returns the User Subscriptions.
            </summary>
            <param name="user">User Info</param>
            <param name="portalId">Portal Id</param>
            <param name="subscriptionTypeId">Subscription Type Id</param>
            <returns>Collection of subscriptions</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Subscriptions.ISubscriptionController.GetContentSubscriptions(System.Int32,System.Int32,System.String)">
            <summary>
            Returns the Content Subscriptions.
            </summary>
            <param name="portalId">Portal Id</param>
            <param name="subscriptionTypeId">Subscription Type Id</param>
            <param name="objectKey">Object Key</param>
            <returns>Collection of subscriptions</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Subscriptions.ISubscriptionController.IsSubscribed(DotNetNuke.Services.Social.Subscriptions.Entities.Subscription)">
            <summary>
            Returns true if a user is subscribed to a Content.
            </summary>
            <param name="subscription">Subscription</param>
            <returns>True if the user is subscribed to the content, false otherwise</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Subscriptions.ISubscriptionController.AddSubscription(DotNetNuke.Services.Social.Subscriptions.Entities.Subscription)">
            <summary>
            Adds a new Subscription.
            If the operation succeed the SubscriptionId property of the Subscription entity will be filled up.
            </summary>
            <param name="subscription">Subscription</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Subscriptions.ISubscriptionController.DeleteSubscription(DotNetNuke.Services.Social.Subscriptions.Entities.Subscription)">
            <summary>
             Deletes a Subscription.
            </summary>
            <param name="subscription">Subscription</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Subscriptions.ISubscriptionController.UpdateSubscriptionDescription(System.String,System.Int32,System.String)">
            <summary>
             Updates a Subscription Description.
            </summary>
            <param name="objectKey">Subscription Object Key</param>
            <param name="portalId">Portal Id</param>
            <param name="newDescription">New Subscription Description</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Subscriptions.ISubscriptionController.DeleteSubscriptionsByObjectKey(System.Int32,System.String)">
            <summary>
            Deletes all subscriptions matching the specified object key
            </summary>
            <param name="portalId">Portal Id</param>
            <param name="objectKey">Object Key</param>
        </member>
        <member name="T:DotNetNuke.Services.Social.Subscriptions.ISubscriptionSecurityController">
            <summary>
            This controller provides permission info about the User Subscription.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Social.Subscriptions.ISubscriptionSecurityController.HasPermission(DotNetNuke.Services.Social.Subscriptions.Entities.Subscription)">
            <summary>
            Check if the User has permission on the Subscription based on the Subscription ModuleId and TabId.
            </summary>
            <param name="subscription">Subscription</param>
            <returns>True if user has permission, false otherwise</returns>
        </member>
        <member name="T:DotNetNuke.Services.Social.Subscriptions.ISubscriptionTypeController">
            <summary>
            This controller is responsible to manage the subscription types.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Social.Subscriptions.ISubscriptionTypeController.AddSubscriptionType(DotNetNuke.Services.Social.Subscriptions.Entities.SubscriptionType)">
            <summary>
            Creates a new Subscription Type.
            If the operation succeed the SubscriptionTypeId property of the Subscription entity will be filled up.
            </summary>
            <param name="subscriptionType">Subscription Type</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Subscriptions.ISubscriptionTypeController.GetSubscriptionType(System.Func{DotNetNuke.Services.Social.Subscriptions.Entities.SubscriptionType,System.Boolean})">
            <summary>
            Retrieves a Single Subscription Type that match the where predicate.
            </summary>
            <param name="predicate">Where Predicate</param>
            <returns>Subscription Type</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Subscriptions.ISubscriptionTypeController.GetSubscriptionTypes">
            <summary>
            Retrieves all the Subscription Type.
            </summary>
            <returns>Subscription Types collection</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Subscriptions.ISubscriptionTypeController.GetSubscriptionTypes(System.Func{DotNetNuke.Services.Social.Subscriptions.Entities.SubscriptionType,System.Boolean})">
            <summary>
            Retrieves a set of Subscription Types specifying a where predicate.
            </summary>
            <param name="predicate">Where predicate</param>
            <returns>Subscription Type collection</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Subscriptions.ISubscriptionTypeController.DeleteSubscriptionType(DotNetNuke.Services.Social.Subscriptions.Entities.SubscriptionType)">
            <summary>
            Deletes a Subscription Type from the system.
            </summary>
            <param name="subscriptionType">Subscription Type</param>
        </member>
        <member name="T:DotNetNuke.Services.Social.Subscriptions.SubscriptionController">
            <summary>
            This controller is responsible to manage the user subscriptions.
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Social.Subscriptions.SubscriptionSecurityController">
            <summary>
            This controller provides permission info about the User Subscription.
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Social.Subscriptions.SubscriptionTypeController">
            <summary>
            This controller is responsible to manage the subscription types.
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Social.Notifications.Notification">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Entities.Notifications
            Class:      Notification
            -----------------------------------------------------------------------------
            <summary>
            The Notification class describes the a notification received by a user as a consecuence of an action
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Social.Notifications.Notification.NotificationID">
            <summary>
            NotificationID - The primary key
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Notifications.Notification.NotificationTypeID">
            <summary>
            The message type identifier.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Notifications.Notification.To">
            <summary>
            To list for the message. This information is saved for faster display of To list in the message
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Notifications.Notification.From">
            <summary>
            Message From
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Notifications.Notification.Subject">
            <summary>
            Message Subject
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Notifications.Notification.Body">
            <summary>
            Message body
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Notifications.Notification.Context">
            <summary>
            Context set by creator of the notification
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Notifications.Notification.SenderUserID">
            <summary>
            The UserID of the sender of the message
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Notifications.Notification.DisplayDate">
            <summary>
            A pretty printed string with the time since the message was created
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Notifications.Notification.ExpirationDate">
            <summary>
            For notifications, this field indicates when it has to be removed (or not displayed)
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Notifications.Notification.KeyID">
            <summary>
            IHydratable.KeyID.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Notifications.Notification.IncludeDismissAction">
            <summary>
            Should this notification support a dismiss action
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Notifications.Notification.SendToast">
            <summary>
            The notification is displayed on the UI as a toast notification
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.Notification.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.Notification.Fill(System.Data.IDataReader)">
            <summary>
            Fill the object with data from database.
            </summary>
            <param name="dr">the data reader.</param>
        </member>
        <member name="T:DotNetNuke.Services.Social.Notifications.NotificationTypeAction">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Services.Social.Notifications
            Class:      NotificationTypeAction
            -----------------------------------------------------------------------------
            <summary>
            The NotificationTypeAction class describes a single notification type action that can be associated to a message.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Social.Notifications.NotificationTypeAction.NotificationTypeActionId">
            <summary>
            The notification type action identifier.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Notifications.NotificationTypeAction.NotificationTypeId">
            <summary>
            The notification type identifier.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Notifications.NotificationTypeAction.NameResourceKey">
            <summary>
            The notification type action name resource key.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Notifications.NotificationTypeAction.DescriptionResourceKey">
            <summary>
            The notification type action description resource key.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Notifications.NotificationTypeAction.ConfirmResourceKey">
            <summary>
            The notification type action confirmation resource key.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Notifications.NotificationTypeAction.Order">
            <summary>
            The notification type action order to be used while displaying the list of available actions.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Notifications.NotificationTypeAction.APICall">
            <summary>
            The Service Framework URL to be called when the action is performed.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Notifications.NotificationTypeAction.KeyID">
            <summary>
            IHydratable.KeyID.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.NotificationTypeAction.Fill(System.Data.IDataReader)">
            <summary>
            Fill the object with data from database.
            </summary>
            <param name="dr">the data reader.</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.Data.DataService.MarkReadyForToast(System.Int32,System.Int32)">
            <summary>
            Mark a Toast ready for sending
            </summary>
            <param name="notificationId">The notification Id </param>
            <param name="userId">The Recipient User Id </param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.Data.DataService.MarkToastSent(System.Int32,System.Int32)">
            <summary>
            Mark Toast being already sent
            </summary>
            <param name="notificationId">The notification Id </param>
            <param name="userId">The Recipient User Id </param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.Data.IDataService.CreateNotificationType(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new Notification Type
            </summary>
            <param name="name">Name of the Notification Type</param>
            <param name="description">Description of the Notification Type</param>
            <param name="timeToLive">Time to live of the Notification Type</param>
            <param name="desktopModuleId">Id of the desktop module to which the Notification Type is associated</param>
            <param name="createUpdateUserId">Id of the user that creates and updates the Notification Type</param>
            <param name="isTask">Whether this Notification Type is task or not</param>
            <returns>Id of the created Notification Type </returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.Data.IDataService.DeleteNotificationType(System.Int32)">
            <summary>
            Deletes an existing Notification Type
            </summary>
            <param name="notificationTypeId">Id of the Notification Type to delete</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.Data.IDataService.GetNotificationType(System.Int32)">
            <summary>
            Gets a Notification Type
            </summary>
            <param name="notificationTypeId">If of the Notification Type to get</param>
            <returns>IDataReader with the retrieved data</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.Data.IDataService.GetNotificationTypeByName(System.String)">
            <summary>
            Gets a Notification Type
            </summary>
            <param name="name">Name of the Notification Type to get</param>
            <returns>IDataReader with the retrieved data</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.Data.IDataService.AddNotificationTypeAction(System.Int32,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Creates a new Notification Type Action
            </summary>
            <param name="notificationTypeId">Id of the Notification Type to which the Notification Type Action is associated</param>
            <param name="nameResourceKey">Resource key used to get the localized name of the Notification Type Action</param>
            <param name="descriptionResourceKey">Resource key used to get the localized description of the Notification Type Action</param>
            <param name="confirmResourceKey">Resource key used to get the localized confirm text of the Notification Type Action</param>
            <param name="apiCall">Relative url to the api that has to be call when selection the Notification Type Action</param>
            <param name="createdByUserId">Id of the user that created the Notification Type Action</param>
            <returns>The created Notification Type Action</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.Data.IDataService.DeleteNotificationTypeAction(System.Int32)">
            <summary>
            Deletes a Notification Type Action
            </summary>
            <param name="notificationTypeActionId">Id of the Notification Type Action to deleted</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.Data.IDataService.GetNotificationTypeAction(System.Int32)">
            <summary>
            Gets a Notification Type Action
            </summary>
            <param name="notificationTypeActionId">Id of the Notification Type Action to get</param>
            <returns>DataReader with the retrieved data</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.Data.IDataService.GetNotificationTypeActionByName(System.Int32,System.String)">
            <summary>
            Gets a Notification Type Action
            </summary>
            <param name="notificationTypeId">Id of the Notification Type to which the Notification Type Action is associated</param>
            <param name="name">Name of the Notification Type Action</param>
            <returns>DataReader with the retrieved data</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.Data.IDataService.GetNotificationTypeActions(System.Int32)">
            <summary>
            Gets all the Notification Type Action of a Notification Type
            </summary>
            <param name="notificationTypeId">Id of the Notification Type from which we want to get the associated Notification Type Actions</param>
            <returns>DataReader with the retrieved data</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.Data.IDataService.SendNotification(DotNetNuke.Services.Social.Notifications.Notification,System.Int32)">
            <summary>
            Send a notification to its receivers
            </summary>
            <param name="notification">Notification to send</param>
            <param name="portalId">Portal id of the Notification</param>
            <returns>Id of the new message</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.Data.IDataService.DeleteNotification(System.Int32)">
            <summary>
            Delete a Notification
            </summary>
            <param name="notificationId">Id of the Notification to delete</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.Data.IDataService.DeleteUserNotifications(System.Int32,System.Int32)">
            <summary>
            Deletes all the Notifications of a user
            </summary>
            <param name="portalID">Portal Id of the user</param>
            <param name="userID">User from who delete all the Notifications</param>
            <returns>Amount of deleted Notifications</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.Data.IDataService.CountNotifications(System.Int32,System.Int32)">
            <summary>
            Gets the amount of Notifications of a user
            </summary>
            <param name="userId">Id of the user from who count the Notifications</param>
            <param name="portalId">Portal Id of the user</param>
            <returns>The amount of Notifications of a user</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.Data.IDataService.GetNotifications(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a paginated list of Notifications
            </summary>
            <param name="userId">Id of the user from get the Notifications</param>
            <param name="portalId">Portal Id of the user</param>
            <param name="afterNotificationId">Id of the Notification after which get the list of Notificationss</param>
            <param name="numberOfRecords">Maximum amount of retrieved Notifications</param>
            <returns>DataReader with the retrieved data</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.Data.IDataService.GetNotification(System.Int32)">
            <summary>
            Gets a Notification
            </summary>
            <param name="notificationId">Id of the Notification to get</param>
            <returns>DataReader with the retrieved data</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.Data.IDataService.GetNotificationByContext(System.Int32,System.String)">
            <summary>
            Gets a Notification
            </summary>
            <param name="notificationTypeId">Id of the Noticationb type of the Notification</param>
            <param name="context">Context of the Notification to get</param>
            <returns>DataReader with the retrieved data</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.Data.IDataService.IsToastPending(System.Int32)">
            <summary>
            Whether a Toast Notification is pending or not
            </summary>
            <param name="notificationId">Id of the Notification to check</param>
            <returns>True if the Toast Notification is pending, False if it is not</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.Data.IDataService.MarkReadyForToast(System.Int32,System.Int32)">
            <summary>
            Mark a Toast ready for sending
            </summary>
            <param name="notificationId">The notification Id </param>
            <param name="userId">The Recipient User Id </param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.Data.IDataService.MarkToastSent(System.Int32,System.Int32)">
            <summary>
            Mark Toast being already sent
            </summary>
            <param name="notificationId">The notification Id </param>
            <param name="userId">The Recipient User Id </param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.Data.IDataService.GetToasts(System.Int32,System.Int32)">
            <summary>
            Get a list of Toast Notifications that have not been delivered yet.
            </summary>
            <param name="userId">Id of the user from who we want to know which Toast Notifications have not been delivered yet.</param>
            <param name="portalId">Portal Id of the user</param>
            <returns>DataReader with the retrieved data</returns>
        </member>
        <member name="T:DotNetNuke.Services.Social.Notifications.INotificationsController">
            <summary>
            Defines the methods to work with Notifications, NotificationTypes, NotificationTypeActions and NotificationActions.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.INotificationsController.CreateNotificationType(DotNetNuke.Services.Social.Notifications.NotificationType)">
            <summary>
            Creates a new notification type.
            </summary>
            <param name="notificationType"> </param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.INotificationsController.DeleteNotificationType(System.Int32)">
            <summary>
            Deletes an existing notification type.
            </summary>
            <param name="notificationTypeId">The notification type identifier.</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.INotificationsController.GetNotificationType(System.Int32)">
            <summary>
            Gets a notification type by identifier.
            </summary>
            <param name="notificationTypeId">The notification type identifier.</param>
            <returns>The notification type with the provided identifier.</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.INotificationsController.GetNotificationType(System.String)">
            <summary>
            Gets a notification type by name.
            </summary>
            <param name="name">The notification type name.</param>
            <returns>The notification type with the provided name.</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.INotificationsController.DeleteNotificationTypeAction(System.Int32)">
            <summary>
            Deletes an existing notification type action.
            </summary>
            <param name="notificationTypeActionId">The notification type action identifier.</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.INotificationsController.GetNotificationTypeAction(System.Int32)">
            <summary>
            Gets a notification type action by identifier.
            </summary>
            <param name="notificationTypeActionId">The notification type action identifier.</param>
            <returns>The notification type action with the provided identifier.</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.INotificationsController.GetNotificationTypeAction(System.Int32,System.String)">
            <summary>
            Gets a notification type action by notification type and name.
            </summary>
            <param name="notificationTypeId">The notification type identifier.</param>
            <param name="name">The notification type action name.</param>
            <returns>The notification type action with the provided notification type and name.</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.INotificationsController.GetNotificationTypeActions(System.Int32)">
            <summary>
            Gets the list of notification type actions for the provided notification type.
            </summary>
            <param name="notificationTypeId">The notification type identifier.</param>
            <returns>An ordered list of notification type actions for the provided notification type.</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.INotificationsController.SetNotificationTypeActions(System.Collections.Generic.IList{DotNetNuke.Services.Social.Notifications.NotificationTypeAction},System.Int32)">
            <summary>
            Set the actions for a NotificationType
            </summary>
            <param name="actions">The actions</param>
            <param name="notificationTypeId">Id of the notification type</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.INotificationsController.SendNotification(DotNetNuke.Services.Social.Notifications.Notification,System.Int32,System.Collections.Generic.IList{DotNetNuke.Security.Roles.RoleInfo},System.Collections.Generic.IList{DotNetNuke.Entities.Users.UserInfo})">
            <summary>
            Creates a new notification and sets is sender as the portal administrator.
            </summary>
            <param name="notification">The notification</param>
            <param name="portalId">The portalId</param>
            <param name="roles">The list of roles to send the notification to. Leave it as null to send only to individual users.</param>
            <param name="users">The list of users to send the notification to. Leave it as null to send only to roles.</param>
            <returns>The new notification.</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.INotificationsController.CountNotifications(System.Int32,System.Int32)">
            <summary>
            Counts the notifications sent to the provided user in the specified portal.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="portalId">The portal identifier.</param>
            <returns>The number of notifications sent to the provided user in the specified portal.</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.INotificationsController.GetNotifications(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a list of notifications sent to the provided user in the specified portal.
            </summary>
            <param name="userId">The user identifier.</param>
            <param name="portalId">The portal identifier.</param>
            <param name="afterNotificationId">The notification identifier of the last notification displayed. Use -1 to start from the beggining of the list.</param>
            <param name="numberOfRecords">The number of results to retrieve.</param>
            <returns>The filtered list of notifications sent to the provided user in the specified portal.</returns>
            <example>For example, if we have the following ordered notification identifiers: 4, 6, 2, 12, 45, and we pass 2 as the afterNotificationId and 2 as the numberOfRecords, the method will return the notifications 12 and 45.</example>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.INotificationsController.DeleteNotification(System.Int32)">
            <summary>
            Deletes an existing notification.
            </summary>
            <remarks>It does not delete NotificationRecipient.</remarks>
            <param name="notificationId">The notification identifier.</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.INotificationsController.DeleteUserNotifications(DotNetNuke.Entities.Users.UserInfo)">
            <summary>
            Deletes all user notifications in a specific portal.
            </summary>
            <param name="user">The user to delete notifications for.</param>
            <returns>Number of deleted notifications</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.INotificationsController.DeleteNotificationRecipient(System.Int32,System.Int32)">
            <summary>
            Deletes an individual notification recipient.
            </summary>
            <remarks>It also deletes the notification if there are no more recipients.</remarks>
            <param name="notificationId">The notification identifier.</param>
            <param name="userId">The user identifier.</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.INotificationsController.DeleteAllNotificationRecipients(System.Int32)">
            <summary>
            Deletes all NotificationRecipient for the NotificationId.
            </summary>
            <remarks>It also deletes the notification.</remarks>
            <param name="notificationId">The notification identifier.</param>        
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.INotificationsController.DeleteNotificationRecipient(System.Int32,System.String,System.Int32)">
            <summary>
            Deletes an individual notification recipient based on NotificationTypeId, Context and UserId.
            </summary>
            <remarks>It also deletes the notification if there are no more recipients.</remarks>
            <param name="notificationTypeId">Id of the notification type</param>
            <param name="context">Context set by creator of the notification.</param>
            <param name="userId">The user identifier.</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.INotificationsController.GetNotification(System.Int32)">
            <summary>
            Get a Notification
            </summary>
            <param name="notificationId">The notificationId</param>
            <returns>A notification</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.INotificationsController.GetNotificationByContext(System.Int32,System.String)">
            <summary>
            Get a Notification by NotificationTypeId and Context
            </summary>
            <param name="notificationTypeId">Id of the notification type</param>
            <param name="context">Context set by creator of the notification.</param>
            <returns>The filtered list of notifications sent to the provided user in the specified portal.</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.INotificationsController.IsToastPending(System.Int32)">
            <summary>
            Is there a Toast that needs to be sent for a Notification
            </summary>
            <param name="notificationId">The Notification Id </param>
            <returns>True if Toast needs to be sent. False otherwise.</returns>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.INotificationsController.MarkReadyForToast(DotNetNuke.Services.Social.Notifications.Notification,DotNetNuke.Entities.Users.UserInfo)">
            <summary>
            Mark a Toast ready for sending
            </summary>
            <param name="notification">The notification Object </param>
            <param name="userInfo">The Recipient User Info Object</param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.INotificationsController.MarkToastSent(System.Int32,System.Int32)">
            <summary>
            Mark Toast being already sent
            </summary>
            <param name="notificationId">The notification Id </param>
            <param name="userId">The Recipient User Id </param>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.INotificationsController.GetToasts(DotNetNuke.Entities.Users.UserInfo)">
            <summary>
            Get a list of Toasts that have not been delivered yet.
            </summary>
            <param name="userInfo">UserInfo object</param>
            <returns>List of Undelivered Toasts for the user specific to the portal</returns>
        </member>
        <member name="T:DotNetNuke.Services.Social.Notifications.NotificationsController">
            <summary>
            Provides the methods to work with Notifications, NotificationTypes, NotificationTypeActions and NotificationActions.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.NotificationsController.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.NotificationsController.#ctor(DotNetNuke.Services.Social.Notifications.Data.IDataService,DotNetNuke.Services.Social.Messaging.Data.IDataService)">
            <summary>
            Constructor from specifict data service
            </summary>
            <param name="dataService">Class with methods to do CRUD in database for the entities of types <see cref="T:DotNetNuke.Services.Social.Notifications.NotificationType"></see>, <see cref="T:DotNetNuke.Services.Social.Notifications.NotificationTypeAction"></see> and <see cref="T:DotNetNuke.Services.Social.Notifications.Notification"></see></param>
            <param name="messagingDataService">Class with methods to do CRUD in database for the entities of types <see cref="T:DotNetNuke.Services.Social.Messaging.Message"></see>, <see cref="T:DotNetNuke.Services.Social.Messaging.MessageRecipient"></see> and <see cref="T:DotNetNuke.Services.Social.Messaging.MessageAttachment"></see> and to interact with the stored procedures regarding messaging</param>
        </member>
        <member name="T:DotNetNuke.Services.Social.Notifications.NotificationType">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.Services.Social.Notifications
            Class:      NotificationType
            -----------------------------------------------------------------------------
            <summary>
            The NotificationType class describes a single notification type that can be associated to a message.
            This message could be a notification or a standard message sent between users.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Social.Notifications.NotificationType.NotificationTypeId">
            <summary>
            The notification type identifier.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Notifications.NotificationType.Name">
            <summary>
            The notification type name.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Notifications.NotificationType.Description">
            <summary>
            The notification type description.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Social.Notifications.NotificationType.TimeToLive">
            <summary>
            The amount of time to add to the creation date of the message to calculate the expiration date.
            </summary>
            <remarks>
            Minutes precision. Seconds won't be considered.
            </remarks>
        </member>
        <member name="P:DotNetNuke.Services.Social.Notifications.NotificationType.DesktopModuleId">
            <summary>
            If the message type is related to a specific module, this field is used to localize actions by getting the resource file from the module folder.
            </summary>
            <remarks>
            The resource file used will be SharedResources by convention.
            </remarks>
        </member>
        <member name="P:DotNetNuke.Services.Social.Notifications.NotificationType.IsTask">
            <summary>
            Is this of a Task type. Default is false.
            </summary>
            <remarks>
            Tasks are primarily notifications where an action must be taken. Dismiss is usually not enough.
            </remarks>
        </member>
        <member name="P:DotNetNuke.Services.Social.Notifications.NotificationType.KeyID">
            <summary>
            IHydratable.KeyID.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Social.Notifications.NotificationType.Fill(System.Data.IDataReader)">
            <summary>
            Fill the object with data from database.
            </summary>
            <param name="dr">the data reader.</param>
        </member>
        <member name="T:DotNetNuke.Services.Tokens.CacheLevel">
            <summary>
            CacheLevel is used to specify the cachability of a string, determined as minimum of the used token cachability
            </summary>
            <remarks>
            CacheLevel is determined as minimum of the used tokens' cachability 
            </remarks>
        </member>
        <member name="F:DotNetNuke.Services.Tokens.CacheLevel.notCacheable">
            <summary>
            Caching of the text is not suitable and might expose security risks
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Tokens.CacheLevel.secureforCaching">
            <summary>
            Caching of the text might result in inaccurate display (e.g. time), but does not expose a security risk
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Tokens.CacheLevel.fullyCacheable">
            <summary>
            Caching of the text can be done without limitations or any risk
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Tokens.Scope">
            <summary>
            Scope informs the property access classes about the planned usage of the token
            </summary>
            <remarks>
            The result of a token replace operation depends on the current context, privacy settings
            and the current scope. The scope should be the lowest scope needed for the current purpose.
            The property access classes should evaluate and use the scope before returning a value.
            </remarks>
        </member>
        <member name="F:DotNetNuke.Services.Tokens.Scope.NoSettings">
            <summary>
            Only access to Date and Time
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Tokens.Scope.Configuration">
            <summary>
            Tokens for Host, Portal, Tab (, Module), user name
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Tokens.Scope.DefaultSettings">
            <summary>
            Configuration, Current User data and user data allowed for registered members
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Tokens.Scope.SystemMessages">
            <summary>
            System notifications to users and adminstrators
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Tokens.Scope.Debug">
            <summary>
            internal debugging, error messages, logs
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Tokens.BaseCustomTokenReplace">
            <summary>
            BaseCustomTokenReplace  allows to add multiple sources implementing <see cref="T:DotNetNuke.Services.Tokens.IPropertyAccess">IPropertyAccess</see>
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.Services.Tokens.BaseCustomTokenReplace.AccessingUser">
            <summary>
            Gets/sets the user object representing the currently accessing user (permission)
            </summary>
            <value>UserInfo oject</value>
        </member>
        <member name="P:DotNetNuke.Services.Tokens.BaseCustomTokenReplace.CurrentAccessLevel">
            <summary>
            Gets/sets the current Access Level controlling access to critical user settings
            </summary>
            <value>A TokenAccessLevel as defined above</value>
        </member>
        <member name="P:DotNetNuke.Services.Tokens.BaseCustomTokenReplace.DebugMessages">
            <summary>
            If DebugMessages are enabled, unknown Tokens are replaced with Error Messages 
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:DotNetNuke.Services.Tokens.BaseCustomTokenReplace.Cacheability(System.String)">
            <summary>
            returns cacheability of the passed text regarding all contained tokens
            </summary>
            <param name="sourceText">the text to parse for tokens to replace</param>
            <returns>cacheability level (not - safe - fully)</returns>
            <remarks>always check cacheability before caching a module!</remarks>
        </member>
        <member name="M:DotNetNuke.Services.Tokens.BaseCustomTokenReplace.ContainsTokens(System.String)">
            <summary>
            Checks for present [Object:Property] tokens
            </summary>
            <param name="strSourceText">String with [Object:Property] tokens</param>
            <returns></returns>
        </member>
        <member name="T:DotNetNuke.Services.Tokens.BaseTokenReplace">
            <summary>
            The BaseTokenReplace class provides the tokenization of tokens formatted  
            [object:property] or [object:property|format|ifEmpty] or [custom:no] within a string
            with the appropriate current property/custom values.
            </summary>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.Services.Tokens.BaseTokenReplace.FormatProvider">
            <summary>
            Gets the Format provider as Culture info from stored language or current culture
            </summary>
            <value>An CultureInfo</value>
        </member>
        <member name="P:DotNetNuke.Services.Tokens.BaseTokenReplace.Language">
            <summary>
            Gets/sets the language to be used, e.g. for date format
            </summary>
            <value>A string, representing the locale</value>
        </member>
        <member name="P:DotNetNuke.Services.Tokens.BaseTokenReplace.TokenizerRegex">
            <summary>
            Gets the Regular expression for the token to be replaced
            </summary>
            <value>A regular Expression</value>   
        </member>
        <member name="T:DotNetNuke.Services.Tokens.EmptyPropertyAccess">
            <summary>
            Returns an Empty String for all Properties
            </summary>
            <remarks></remarks>
        </member>
        <member name="T:DotNetNuke.Services.Tokens.PropertyAccess">
            <summary>
            Property Access to Objects using Relection
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:DotNetNuke.Services.Tokens.PropertyAccess.Boolean2LocalizedYesNo(System.Boolean,System.Globalization.CultureInfo)">
            <summary>
            Boolean2LocalizedYesNo returns the translated string for "yes" or "no" against a given boolean value.
            </summary>
            <param name="value"></param>
            <param name="formatProvider"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:DotNetNuke.Services.Tokens.PropertyAccess.FormatString(System.String,System.String)">
            <summary>
            Returns a formatted String if a format is given, otherwise it returns the unchanged value.
            </summary>
            <param name="value">string to be formatted</param>
            <param name="format">format specification</param>
            <returns>formatted string</returns>
            <remarks></remarks>
        </member>
        <member name="M:DotNetNuke.Services.Tokens.PropertyAccess.GetObjectProperty(System.Object,System.String,System.String,System.Globalization.CultureInfo,System.Boolean@)">
            <summary>
                Returns the localized property of any object as string using reflection
            </summary>
            <param name="objObject">Object to access</param>
            <param name="strPropertyName">Name of property</param>
            <param name="strFormat">Format String</param>
            <param name="formatProvider">specify formatting</param>
            <param name="PropertyNotFound">out: specifies, whether property was found</param>
            <returns>Localized Property</returns>
            <remarks></remarks>
        </member>
        <member name="T:DotNetNuke.Services.Tokens.TokenReplace">
            <summary>
            The TokenReplace class provides the option to replace tokens formatted
            [object:property] or [object:property|format] or [custom:no] within a string
            with the appropriate current property/custom values.
            Example for Newsletter: 'Dear [user:Displayname],' ==> 'Dear Superuser Account,'
            Supported Token Sources: User, Host, Portal, Tab, Module, Membership, Profile,
                                     Row, Date, Ticks, ArrayList (Custom), IDictionary
            </summary>
            <remarks></remarks>
        </member>
        <member name="M:DotNetNuke.Services.Tokens.TokenReplace.#ctor">
            <summary>
            creates a new TokenReplace object for default context
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Tokens.TokenReplace.#ctor(System.Int32)">
            <summary>
            creates a new TokenReplace object for default context and the current module
            </summary>
            <param name="moduleID">ID of the current module</param>
        </member>
        <member name="M:DotNetNuke.Services.Tokens.TokenReplace.#ctor(DotNetNuke.Services.Tokens.Scope)">
            <summary>
            creates a new TokenReplace object for custom context
            </summary>
            <param name="accessLevel">Security level granted by the calling object</param>
        </member>
        <member name="M:DotNetNuke.Services.Tokens.TokenReplace.#ctor(DotNetNuke.Services.Tokens.Scope,System.Int32)">
            <summary>
            creates a new TokenReplace object for custom context
            </summary>
            <param name="accessLevel">Security level granted by the calling object</param>
            <param name="moduleID">ID of the current module</param>
        </member>
        <member name="M:DotNetNuke.Services.Tokens.TokenReplace.#ctor(DotNetNuke.Services.Tokens.Scope,System.String,DotNetNuke.Entities.Portals.PortalSettings,DotNetNuke.Entities.Users.UserInfo)">
            <summary>
            creates a new TokenReplace object for custom context
            </summary>
            <param name="accessLevel">Security level granted by the calling object</param>
            <param name="language">Locale to be used for formatting etc.</param>
            <param name="portalSettings">PortalSettings to be used</param>
            <param name="user">user, for which the properties shall be returned</param>
        </member>
        <member name="M:DotNetNuke.Services.Tokens.TokenReplace.#ctor(DotNetNuke.Services.Tokens.Scope,System.String,DotNetNuke.Entities.Portals.PortalSettings,DotNetNuke.Entities.Users.UserInfo,System.Int32)">
            <summary>
            creates a new TokenReplace object for custom context
            </summary>
            <param name="accessLevel">Security level granted by the calling object</param>
            <param name="language">Locale to be used for formatting etc.</param>
            <param name="portalSettings">PortalSettings to be used</param>
            <param name="user">user, for which the properties shall be returned</param>
            <param name="moduleID">ID of the current module</param>
        </member>
        <member name="P:DotNetNuke.Services.Tokens.TokenReplace.ModuleId">
            <summary>
            Gets/sets the current ModuleID to be used for 'User:' token replacement
            </summary>
            <value>ModuleID (Integer)</value>
        </member>
        <member name="P:DotNetNuke.Services.Tokens.TokenReplace.ModuleInfo">
            <summary>
            Gets/sets the module settings object to use for 'Module:' token replacement
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Tokens.TokenReplace.PortalSettings">
            <summary>
            Gets/sets the portal settings object to use for 'Portal:' token replacement
            </summary>
            <value>PortalSettings oject</value>
        </member>
        <member name="P:DotNetNuke.Services.Tokens.TokenReplace.User">
            <summary>
            Gets/sets the user object to use for 'User:' token replacement
            </summary>
            <value>UserInfo oject</value>
        </member>
        <member name="M:DotNetNuke.Services.Tokens.TokenReplace.InitializePropertySources">
            <summary>
            setup context by creating appropriate objects
            </summary>
            <remarks >
            security is not the purpose of the initialization, this is in the responsibility of each property access class
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.Tokens.TokenReplace.ReplaceEnvironmentTokens(System.String)">
            <summary>
            Replaces tokens in sourceText parameter with the property values
            </summary>
            <param name="sourceText">String with [Object:Property] tokens</param>
            <returns>string containing replaced values</returns>
        </member>
        <member name="M:DotNetNuke.Services.Tokens.TokenReplace.ReplaceEnvironmentTokens(System.String,System.Data.DataRow)">
            <summary>
            Replaces tokens in sourceText parameter with the property values
            </summary>
            <param name="sourceText">String with [Object:Property] tokens</param>
            <param name="row"></param>
            <returns>string containing replaced values</returns>
        </member>
        <member name="M:DotNetNuke.Services.Tokens.TokenReplace.ReplaceEnvironmentTokens(System.String,System.Collections.ArrayList,System.String)">
            <summary>
            Replaces tokens in sourceText parameter with the property values
            </summary>
            <param name="sourceText">String with [Object:Property] tokens</param>
            <param name="custom"></param>
            <param name="customCaption"></param>
            <returns>string containing replaced values</returns>
        </member>
        <member name="M:DotNetNuke.Services.Tokens.TokenReplace.ReplaceEnvironmentTokens(System.String,System.Collections.IDictionary,System.String)">
            <summary>
            Replaces tokens in sourceText parameter with the property values
            </summary>
            <param name="sourceText">String with [Object:Property] tokens</param>
            <param name="custom">NameValueList for replacing [custom:name] tokens, where 'custom' is specified in next param and name is either thekey or the index number in the string </param>
            <param name="customCaption">Token name to be used inside token  [custom:name]</param>
            <returns>string containing replaced values</returns>
        </member>
        <member name="M:DotNetNuke.Services.Tokens.TokenReplace.ReplaceEnvironmentTokens(System.String,System.Collections.IDictionary,System.String[])">
            <summary> 
            Replaces tokens in sourceText parameter with the property values 
            </summary> 
            <param name="sourceText">String with [Object:Property] tokens</param> 
            <param name="custom">NameValueList for replacing [custom:name] tokens, where 'custom' is specified in next param and name is either thekey or the index number in the string </param> 
            <param name="customCaptions">Token names to be used inside token [custom:name], where 'custom' is one of the values in the string array </param> 
            <returns>string containing replaced values</returns> 
        </member>
        <member name="M:DotNetNuke.Services.Tokens.TokenReplace.ReplaceEnvironmentTokens(System.String,System.Collections.ArrayList,System.String,System.Data.DataRow)">
            <summary>
            Replaces tokens in sourceText parameter with the property values
            </summary>
            <param name="sourceText">String with [Object:Property] tokens</param>
            <param name="custom">NameValueList for replacing [custom:name] tokens, where 'custom' is specified in next param and name is either thekey or the index number in the string </param>
            <param name="customCaption">Token name to be used inside token  [custom:name]</param>
            <param name="row">DataRow, from which field values shall be used for replacement</param>
            <returns>string containing replaced values</returns>
        </member>
        <member name="M:DotNetNuke.Services.Tokens.TokenReplace.ReplaceTokens(System.String)">
            <summary>
            Replaces tokens in sourceText parameter with the property values, skipping environment objects
            </summary>
            <param name="sourceText">String with [Object:Property] tokens</param>
            <returns>string containing replaced values</returns>
        </member>
        <member name="T:DotNetNuke.Services.Upgrade.DnnInstallLogger">
            <summary>
            This class is used to write log into separate installer log file.
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Upgrade.Internals.IInstallController">
            -----------------------------------------------------------------------------
            <summary>
              Interface for InstallController. This Interface is meant for Internal use only
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Internals.IInstallController.GetInstallConfig">
            <summary>
            GetInstallConfig - Returns configuration stored in DotNetNuke.Install.Config
            </summary>
            <returns>ConnectionConfig object. Null if information is not present in the config file</returns>
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Internals.IInstallController.SetInstallConfig(DotNetNuke.Services.Upgrade.Internals.InstallConfiguration.InstallConfig)">
            <summary>
            SetInstallConfig - Saves configuration n DotNetNuke.Install.Config
            </summary>        
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Internals.IInstallController.RemoveFromInstallConfig(System.String)">
            <summary>
            RemoveFromInstallConfig - Removes the specified XML Node from the InstallConfig
            </summary>
            <param name="xmlNodePath"></param>
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Internals.IInstallController.GetConnectionFromWebConfig">
            <summary>
            GetConnectionFromWebConfig - Returns Connection Configuration in web.config file
            </summary>
            <returns>ConnectionConfig object. Null if information is not present in the config file</returns>
        </member>
        <member name="T:DotNetNuke.Services.Upgrade.Internals.InstallConfiguration.ConnectionConfig">
            -----------------------------------------------------------------------------
            <summary>
            ConnectionConfig - A class that represents Install/DotNetNuke.Install.Config/Connection
            </summary>
            -----------------------------------------------------------------------------    
        </member>
        <member name="T:DotNetNuke.Services.Upgrade.Internals.InstallConfiguration.HostSettingConfig">
            -----------------------------------------------------------------------------
            <summary>
            HostSettingConfig - A class that represents Install/DotNetNuke.Install.Config/Settings
            </summary>
            -----------------------------------------------------------------------------    
        </member>
        <member name="T:DotNetNuke.Services.Upgrade.Internals.InstallConfiguration.PortalConfig">
            -----------------------------------------------------------------------------
            <summary>
            PortalConfig - A class that represents Install/DotNetNuke.Install.Config/Portals/Portal
            </summary>
            -----------------------------------------------------------------------------    
        </member>
        <member name="T:DotNetNuke.Services.Upgrade.Internals.InstallConfiguration.LicenseConfig">
            -----------------------------------------------------------------------------
            <summary>
            LicenseConfig - A class that represents Install/DotNetNuke.Install.Config/LicenseActivation
            </summary>
            -----------------------------------------------------------------------------    
        </member>
        <member name="T:DotNetNuke.Services.Upgrade.Internals.InstallConfiguration.InstallConfig">
            -----------------------------------------------------------------------------
            <summary>
            InstallConfig - A class that represents DotNetNuke.Install.Config XML configuration file
            TODO This class may not capture all the details from the config file
            </summary>
            -----------------------------------------------------------------------------    
        </member>
        <member name="T:DotNetNuke.Services.Upgrade.Internals.InstallConfiguration.SuperUserConfig">
            -----------------------------------------------------------------------------
            <summary>
            SuperUserConfig - A class that represents Install/DotNetNuke.Install.Config/SuperUser
            </summary>
            -----------------------------------------------------------------------------    
        </member>
        <member name="T:DotNetNuke.Services.Upgrade.Internals.InstallController">
            <summary>
            Business Layer to manage Messaging. Also contains CRUD methods.
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Upgrade.Internals.InstallControllerImpl">
            -----------------------------------------------------------------------------
            <summary>
              The Controller class for Installer
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Internals.InstallControllerImpl.GetConnectionFromWebConfig">
            <summary>
            GetConnectionFromWebConfig - Returns Connection Configuration in web.config file
            </summary>
            <returns>ConnectionConfig object. Null if information is not present in the config file</returns>
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Internals.InstallControllerImpl.SetInstallConfig(DotNetNuke.Services.Upgrade.Internals.InstallConfiguration.InstallConfig)">
            <summary>
            SetInstallConfig - Saves configuration n DotNetNuke.Install.Config
            </summary>        
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Internals.InstallControllerImpl.GetInstallConfig">
            <summary>
            GetInstallConfig - Returns configuration stored in DotNetNuke.Install.Config
            </summary>
            <returns>ConnectionConfig object. Null if information is not present in the config file</returns>
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Internals.InstallControllerImpl.TestDatabaseConnection(DotNetNuke.Services.Upgrade.Internals.InstallConfiguration.ConnectionConfig)">
            <summary>
            Tests the Database Connection using the database connection config
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:DotNetNuke.Services.Upgrade.Internals.Steps.AddFcnModeStep">
            ------------------------------------------------------------------------------------------------
            <summary>
            AddFcnModeVerificationStep - Step that performs FcnMode verification checks prior to installation
            </summary>
            ------------------------------------------------------------------------------------------------  
        </member>
        <member name="T:DotNetNuke.Services.Upgrade.Internals.Steps.BaseInstallationStep">
            -----------------------------------------------------------------------------
            <summary>
            BaseInstallationStep - Abstract class to perform common tasks for the various installation steps
            </summary>
            -----------------------------------------------------------------------------    
        </member>
        <member name="P:DotNetNuke.Services.Upgrade.Internals.Steps.BaseInstallationStep.Details">
            <summary>
            Any details of the task while it's executing
            </summary>        
        </member>
        <member name="P:DotNetNuke.Services.Upgrade.Internals.Steps.BaseInstallationStep.Percentage">
            <summary>
            Percentage done
            </summary>        
        </member>
        <member name="P:DotNetNuke.Services.Upgrade.Internals.Steps.BaseInstallationStep.Status">
            <summary>
            Step Status
            </summary>        
        </member>
        <member name="P:DotNetNuke.Services.Upgrade.Internals.Steps.BaseInstallationStep.Errors">
            <summary>
            List of Errors
            </summary>        
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Internals.Steps.BaseInstallationStep.Execute">
            <summary>
            Main method to execute the step
            </summary>        
        </member>
        <member name="E:DotNetNuke.Services.Upgrade.Internals.Steps.BaseInstallationStep.Activity">
            <summary>
            This event gets fired when any activity gets recorded
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Upgrade.Internals.Steps.InstallVersionStep">
            ------------------------------------------------------------------------------------------------
            <summary>
            DatabaseVerificationStep - Step that performs database verification checks prior to installation
            </summary>
            ------------------------------------------------------------------------------------------------  
        </member>
        <member name="T:DotNetNuke.Services.Upgrade.Internals.Steps.IISVerificationStep">
            <summary>
            Performs verifications about the IIS environment.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Internals.Steps.IISVerificationStep.Execute">
            <summary>
            Executes verifications on the IIS environment.
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Upgrade.Internals.Steps.ActivateLicenseStep">
            ------------------------------------------------------------------------------------------------
            <summary>
            DatabaseVerificationStep - Step that performs database verification checks prior to installation
            </summary>
            ------------------------------------------------------------------------------------------------  
        </member>
        <member name="T:DotNetNuke.Services.Upgrade.Internals.Steps.StepStatus">
            <summary>
            Status of an Installation Step
            </summary>
            -----------------------------------------------------------------------------        
        </member>
        <member name="F:DotNetNuke.Services.Upgrade.Internals.Steps.StepStatus.NotStarted">
            <summary>
            Step not Started yet.
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Upgrade.Internals.Steps.StepStatus.Running">
            <summary>
            Step is running.
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Upgrade.Internals.Steps.StepStatus.Done">
            <summary>
            Step is done and was successful. 
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Upgrade.Internals.Steps.StepStatus.Retry">
            <summary>
            Step failed. Retry the existing step.
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Upgrade.Internals.Steps.StepStatus.Abort">
            <summary>
            Step failed. Abort the next step.
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Upgrade.Internals.Steps.StepStatus.AppRestart">
            <summary>
            Step resulted in Application Restart. You should redirect to the same page.
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Upgrade.Internals.Steps.ActivityEventHandler">
            <summary>
            This event gets fired when any activity gets recorded
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Upgrade.Internals.Steps.IInstallationStep">
            <summary>
            Interface for an Installation Step
            </summary>
            -----------------------------------------------------------------------------    
        </member>
        <member name="P:DotNetNuke.Services.Upgrade.Internals.Steps.IInstallationStep.Details">
            <summary>
            Any details of the task while it's executing
            </summary>        
        </member>
        <member name="P:DotNetNuke.Services.Upgrade.Internals.Steps.IInstallationStep.Percentage">
            <summary>
            Percentage done
            </summary>        
        </member>
        <member name="P:DotNetNuke.Services.Upgrade.Internals.Steps.IInstallationStep.Status">
            <summary>
            Step Status
            </summary>        
        </member>
        <member name="P:DotNetNuke.Services.Upgrade.Internals.Steps.IInstallationStep.Errors">
            <summary>
            List of Errors
            </summary>        
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Internals.Steps.IInstallationStep.Execute">
            <summary>
            Main method to execute the step
            </summary>        
        </member>
        <member name="E:DotNetNuke.Services.Upgrade.Internals.Steps.IInstallationStep.Activity">
            <summary>
            This event gets fired when any activity gets recorded
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Upgrade.InternalController.Steps.InitializeHostSettingsStep">
            -----------------------------------------------------------------------------
            <summary>
            InstallSuperUserStep - Step that installs SuperUser Account
            </summary>
            -----------------------------------------------------------------------------    
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.InternalController.Steps.InitializeHostSettingsStep.Execute">
            <summary>
            Main method to execute the step
            </summary>        
        </member>
        <member name="T:DotNetNuke.Services.Upgrade.InternalController.Steps.SynchConnectionStringStep">
            -----------------------------------------------------------------------------
            <summary>
            SynchConnectionStringStep - Step that synchs connection string between DotNetNuke.Install.Config and Web.Config
            The connection information stored in DotNetNuke.Install.Config takes precendence (if present)
            Synchornization only happens when settings are different
            </summary>
            -----------------------------------------------------------------------------    
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.InternalController.Steps.SynchConnectionStringStep.Execute">
            <summary>
            Main method to execute the step
            </summary>        
        </member>
        <member name="T:DotNetNuke.Services.Upgrade.InternalController.Steps.InstallDatabaseStep">
            -----------------------------------------------------------------------------
            <summary>
            InstallDatabaseStep - Step that installs Database
            </summary>
            -----------------------------------------------------------------------------    
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.InternalController.Steps.InstallDatabaseStep.Execute">
            <summary>
            Main method to execute the step
            </summary>        
        </member>
        <member name="T:DotNetNuke.Services.Upgrade.InternalController.Steps.InstallSiteStep">
            -----------------------------------------------------------------------------
            <summary>
            InstallSiteStep - Step that installs Website
            </summary>
            -----------------------------------------------------------------------------    
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.InternalController.Steps.InstallSiteStep.Execute">
            <summary>
            Main method to execute the step
            </summary>        
        </member>
        <member name="T:DotNetNuke.Services.Upgrade.InternalController.Steps.InstallSuperUserStep">
            -----------------------------------------------------------------------------
            <summary>
            InstallSuperUserStep - Step that installs SuperUser Account
            </summary>
            -----------------------------------------------------------------------------    
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.InternalController.Steps.InstallSuperUserStep.Execute">
            <summary>
            Main method to execute the step
            </summary>        
        </member>
        <member name="T:DotNetNuke.Services.Upgrade.InternalController.Steps.InstallExtensionsStep">
            -----------------------------------------------------------------------------
            <summary>
            InstallExtensionsStep - Step that installs all the Extensions
            </summary>
            -----------------------------------------------------------------------------    
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.InternalController.Steps.InstallExtensionsStep.Execute">
            <summary>
            Main method to execute the step
            </summary>        
        </member>
        <member name="T:DotNetNuke.Services.Upgrade.InternalController.Steps.FilePermissionCheckStep">
            -----------------------------------------------------------------------------
            <summary>
            FilePermissionCheck - Step that performs file permission checks prior to installation
            </summary>
            -----------------------------------------------------------------------------    
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.InternalController.Steps.FilePermissionCheckStep.Execute">
            <summary>
            Main method to execute the step
            </summary>        
        </member>
        <member name="T:DotNetNuke.Services.Upgrade.InternalController.Steps.UpdateLanguagePackStep">
            -----------------------------------------------------------------------------
            <summary>
            UpdateLanguagePackStep - Step that downloads and installs language pack
            </summary>
            -----------------------------------------------------------------------------    
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.InternalController.Steps.UpdateLanguagePackStep.Execute">
            <summary>
            Main method to execute the step
            </summary>        
        </member>
        <member name="T:DotNetNuke.Services.Upgrade.Upgrade">
            -----------------------------------------------------------------------------
            <summary>
              The Upgrade class provides Shared/Static methods to Upgrade/Install
              a DotNetNuke Application
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddAdminPages(System.String,System.String,System.String,System.String,System.Boolean,System.Int32,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            AddAdminPages adds an Admin Page and an associated Module to all configured Portals
            </summary>
            <param name="tabName">The Name to give this new Tab</param>
            <param name="description">Description.</param>
            <param name="tabIconFile">The Icon for this new Tab</param>
            <param name="tabIconFileLarge">The large Icon for this new Tab</param>
            <param name="isVisible">A flag indicating whether the tab is visible</param>
            <param name="moduleDefId">The Module Deinition Id for the module to be aded to this tab</param>
            <param name="moduleTitle">The Module's title</param>
            <param name="moduleIconFile">The Module's icon</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddModuleControl(System.Int32,System.String,System.String,System.String,System.String,DotNetNuke.Security.SecurityAccessLevel,System.Int32,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            AddModuleControl adds a new Module Control to the system
            </summary>
            <remarks>
            </remarks>
            <param name="moduleDefId">The Module Definition Id</param>
            <param name="controlKey">The key for this control in the Definition</param>
            <param name="controlTitle">The title of this control</param>
            <param name="controlSrc">Te source of ths control</param>
            <param name="iconFile">The icon file</param>
            <param name="controlType">The type of control</param>
            <param name="viewOrder">The vieworder for this module</param>
            <param name="helpURL">The Help Url</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddModuleDefinition(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            AddModuleDefinition adds a new Core Module Definition to the system
            </summary>
            <remarks>
            This overload allows the caller to determine whether the module has a controller
            class
            </remarks>
            <param name="desktopModuleName">The Friendly Name of the Module to Add</param>
            <param name="description">Description of the Module</param>
            <param name="moduleDefinitionName">The Module Definition Name</param>
            <param name="premium">A flag representing whether the module is a Premium module</param>
            <param name="admin">A flag representing whether the module is an Admin module</param>
            <returns>The Module Definition Id of the new Module</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddModuleDefinition(System.String,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            AddModuleDefinition adds a new Core Module Definition to the system
            </summary>
            <remarks>
            This overload allows the caller to determine whether the module has a controller
            class
            </remarks>
            <param name="desktopModuleName">The Friendly Name of the Module to Add</param>
            <param name="description">Description of the Module</param>
            <param name="moduleDefinitionName">The Module Definition Name</param>
            <param name="businessControllerClass">Business Control Class.</param>
            <param name="isPortable">Whether the module is enable for portals.</param>
            <param name="premium">A flag representing whether the module is a Premium module</param>
            <param name="admin">A flag representing whether the module is an Admin module</param>
            <returns>The Module Definition Id of the new Module</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddModuleToPage(DotNetNuke.Entities.Tabs.TabInfo,System.Int32,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            AddModuleToPage adds a module to a Page
            </summary>
            <remarks>
            This overload assumes ModulePermissions will be inherited
            </remarks>
            <param name="page">The Page to add the Module to</param>
            <param name="moduleDefId">The Module Deinition Id for the module to be aded to this tab</param>
            <param name="moduleTitle">The Module's title</param>
            <param name="moduleIconFile">The Module's icon</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddPage(DotNetNuke.Entities.Tabs.TabInfo,System.String,System.String,System.String,System.String,System.Boolean,DotNetNuke.Security.Permissions.TabPermissionCollection,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            AddPage adds a Tab Page
            </summary>
            <remarks>
            Adds a Tab to a parentTab
            </remarks>
            <param name="parentTab">The Parent Tab</param>
            <param name="tabName">The Name to give this new Tab</param>
            <param name="description">Description.</param>
            <param name="tabIconFile">The Icon for this new Tab</param>
            <param name="tabIconFileLarge">The Large Icon for this new Tab</param>
            <param name="isVisible">A flag indicating whether the tab is visible</param>
            <param name="permissions">Page Permissions Collection for this page</param>
            <param name="isAdmin">Is an admin page</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddPage(System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Boolean,DotNetNuke.Security.Permissions.TabPermissionCollection,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            AddPage adds a Tab Page
            </summary>
            <param name="portalId">The Id of the Portal</param>
            <param name="parentId">The Id of the Parent Tab</param>
            <param name="tabName">The Name to give this new Tab</param>
            <param name="description">Description.</param>
            <param name="tabIconFile">The Icon for this new Tab</param>
            <param name="tabIconFileLarge">The large Icon for this new Tab</param>
            <param name="isVisible">A flag indicating whether the tab is visible</param>
            <param name="permissions">Page Permissions Collection for this page</param>
            <param name="isAdmin">Is and admin page</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddPagePermission(DotNetNuke.Security.Permissions.TabPermissionCollection,System.String,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            AddPagePermission adds a TabPermission to a TabPermission Collection
            </summary>
            <param name="permissions">Page Permissions Collection for this page</param>
            <param name="key">The Permission key</param>
            <param name="roleId">The role given the permission</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddSearchResults(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            AddSearchResults adds a top level Hidden Search Results Page
            </summary>
            <param name="moduleDefId">The Module Deinition Id for the Search Results Module</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddSkinControl(System.String,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            AddSkinControl adds a new Module Control to the system
            </summary>
            <remarks>
            </remarks>
            <param name="controlKey">The key for this control in the Definition</param>
            <param name="packageName">Package Name.</param>
            <param name="controlSrc">Te source of ths control</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.CoreModuleExists(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            CoreModuleExists determines whether a Core Module exists on the system
            </summary>
            <remarks>
            </remarks>
            <param name="desktopModuleName">The Friendly Name of the Module</param>
            <returns>True if the Module exists, otherwise False</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.ExecuteScript(System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            ExecuteScript executes a SQl script file
            </summary>
            <remarks>
            </remarks>
            <param name="scriptFile">The script to Execute</param>
            <param name="writeFeedback">Need to output feedback message.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.GetModuleDefinition(System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            GetModuleDefinition gets the Module Definition Id of a module
            </summary>
            <param name="desktopModuleName">The Friendly Name of the Module to Add</param>
            <param name="moduleDefinitionName">The Module Definition Name</param>
            <returns>The Module Definition Id of the Module (-1 if no module definition)</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.HostTabExists(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            HostTabExists determines whether a tab of a given name exists under the Host tab
            </summary>
            <remarks>
            </remarks>
            <param name="tabName">The Name of the Tab</param>
            <returns>True if the Tab exists, otherwise False</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.InstallMemberRoleProvider(System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            InstallMemberRoleProvider - Installs the MemberRole Provider Db objects
            </summary>
            <remarks>
            </remarks>
            <param name="providerPath">The Path to the Provider Directory</param>
            <param name="writeFeedback">Whether need to output feedback message.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.InstallMemberRoleProviderScript(System.String,System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            InstallMemberRoleProviderScript - Installs a specific MemberRole Provider script
            </summary>
            <remarks>
            </remarks>
            <param name="providerPath">The Path to the Provider Directory</param>
            <param name="scriptFile">The Name of the Script File</param>
            <param name="writeFeedback">Whether or not to echo results</param>
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.ParseFiles(System.Xml.XmlNode,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            ParseFiles parses the Host Template's Files node
            </summary>
            <remarks>
            </remarks>
            <param name="node">The Files node</param>
            <param name="portalId">The PortalId (-1 for Host Files)</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.RemoveCoreModule(System.String,System.String,System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            RemoveCoreModule removes a Core Module from the system
            </summary>
            <remarks>
            </remarks>
            <param name="desktopModuleName">The Friendly Name of the Module to Remove</param>
            <param name="parentTabName">The Name of the parent Tab/Page for this module</param>
            <param name="tabName">The Name to tab that contains the Module</param>
            <param name="removeTab">A flag to determine whether to remove the Tab if it has no
            other modules</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddAdminPages(System.String,System.String,System.String,System.String,System.Boolean,System.Int32,System.String,System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
              AddAdminPages adds an Admin Page and an associated Module to all configured Portals
            </summary>
            <param name = "tabName">The Name to give this new Tab</param>
            <param name="description"></param>
            <param name = "tabIconFile">The Icon for this new Tab</param>
            <param name="tabIconFileLarge"></param>
            <param name = "isVisible">A flag indicating whether the tab is visible</param>
            <param name = "moduleDefId">The Module Deinition Id for the module to be aded to this tab</param>
            <param name = "moduleTitle">The Module's title</param>
            <param name = "moduleIconFile">The Module's icon</param>
            <param name = "inheritPermissions">Modules Inherit the Pages View Permisions</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddAdminPage(DotNetNuke.Entities.Portals.PortalInfo,System.String,System.String,System.String,System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
              AddAdminPage adds an Admin Tab Page
            </summary>
            <param name = "portal">The Portal</param>
            <param name = "tabName">The Name to give this new Tab</param>
            <param name="description"></param>
            <param name = "tabIconFile">The Icon for this new Tab</param>
            <param name="tabIconFileLarge"></param>
            <param name = "isVisible">A flag indicating whether the tab is visible</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddHostPage(System.String,System.String,System.String,System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
              AddHostPage adds a Host Tab Page
            </summary>
            <param name = "tabName">The Name to give this new Tab</param>
            <param name="description"></param>
            <param name = "tabIconFile">The Icon for this new Tab</param>
            <param name="tabIconFileLarge"></param>
            <param name = "isVisible">A flag indicating whether the tab is visible</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddModuleControl(System.Int32,System.String,System.String,System.String,System.String,DotNetNuke.Security.SecurityAccessLevel,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
              AddModuleControl adds a new Module Control to the system
            </summary>
            <remarks>
            </remarks>
            <param name = "moduleDefId">The Module Definition Id</param>
            <param name = "controlKey">The key for this control in the Definition</param>
            <param name = "controlTitle">The title of this control</param>
            <param name = "controlSrc">Te source of ths control</param>
            <param name = "iconFile">The icon file</param>
            <param name = "controlType">The type of control</param>
            <param name = "viewOrder">The vieworder for this module</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddModuleDefinition(System.String,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
              AddModuleDefinition adds a new Core Module Definition to the system
            </summary>
            <remarks>
              This overload asumes the module is an Admin module and not a Premium Module
            </remarks>
            <param name = "desktopModuleName">The Friendly Name of the Module to Add</param>
            <param name = "description">Description of the Module</param>
            <param name = "moduleDefinitionName">The Module Definition Name</param>
            <returns>The Module Definition Id of the new Module</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddModuleToPage(DotNetNuke.Entities.Tabs.TabInfo,System.Int32,System.String,System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
              AddModuleToPage adds a module to a Page
            </summary>
            <remarks>
            </remarks>
            <param name = "page">The Page to add the Module to</param>
            <param name = "moduleDefId">The Module Deinition Id for the module to be aded to this tab</param>
            <param name = "moduleTitle">The Module's title</param>
            <param name = "moduleIconFile">The Module's icon</param>
            <param name = "inheritPermissions">Inherit the Pages View Permisions</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddPortal(System.Xml.XmlNode,System.Boolean,System.Int32,DotNetNuke.Entities.Users.UserInfo)">
            -----------------------------------------------------------------------------
            <summary>
              AddPortal manages the Installation of a new DotNetNuke Portal
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.AddPortal(System.Xml.XmlNode,System.Boolean,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
              Obsolete, AddPortal manages the Installation of a new DotNetNuke Portal
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.CheckUpgrade">
            -----------------------------------------------------------------------------
            <summary>
              CheckUpgrade checks whether there are any possible upgrade issues
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.DeleteInstallerFiles">
            -----------------------------------------------------------------------------
            <summary>
              DeleteInstallerFiles - clean up install config and installwizard files
              If installwizard is ran again this will be recreated via the dotnetnuke.install.config.resources file
            </summary>
            <remarks>
            uses FileSystemUtils.DeleteFile as it checks for readonly attribute status
            and changes it if required, as well as verifying file exists.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.DeleteFiles(System.String,System.Version,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
              DeleteFiles - clean up deprecated files and folders
            </summary>
            <remarks>
            </remarks>
            <param name="providerPath">Path to provider</param>
            <param name = "version">The Version being Upgraded</param>
            <param name="writeFeedback">Display status in UI?</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.ExecuteScripts(System.String)">
            -----------------------------------------------------------------------------
            <summary>
              ExecuteScripts manages the Execution of Scripts from the Install/Scripts folder.
              It is also triggered by InstallDNN and UpgradeDNN
            </summary>
            <remarks>
            </remarks>
            <param name = "strProviderPath">The path to the Data Provider</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.ExecuteScript(System.String)">
            -----------------------------------------------------------------------------
            <summary>
              ExecuteScript executes a special script
            </summary>
            <remarks>
            </remarks>
            <param name = "file">The script file to execute</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.GetInstallTemplate(System.Xml.XmlDocument)">
            -----------------------------------------------------------------------------
            <summary>
              GetInstallTemplate retrieves the Installation Template as specifeid in web.config
            </summary>
            <remarks>
            </remarks>
            <param name = "xmlDoc">The Xml Document to load</param>
            <returns>A string which contains the error message - if appropriate</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.SetInstallTemplate(System.Xml.XmlDocument)">
            <summary>
             SetInstalltemplate saves the XmlDocument back to Installation Template specified in web.config
            </summary>
            <param name="xmlDoc">The Xml Document to save</param>
            <returns>A string which contains the error massage - if appropriate</returns>
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.GetInstallVersion(System.Xml.XmlDocument)">
            -----------------------------------------------------------------------------
            <summary>
              GetInstallVersion retrieves the Base Instal Version as specifeid in the install
              template
            </summary>
            <remarks>
            </remarks>
            <param name = "xmlDoc">The Install Template</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.GetLogFile(System.String,System.Version)">
            -----------------------------------------------------------------------------
            <summary>
              GetLogFile gets the filename for the version's log file
            </summary>
            <remarks>
            </remarks>
            <param name = "providerPath">The path to the Data Provider</param>
            <param name = "version">The Version</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.GetScriptFile(System.String,System.Version)">
            -----------------------------------------------------------------------------
            <summary>
              GetScriptFile gets the filename for the version
            </summary>
            <remarks>
            </remarks>
            <param name = "providerPath">The path to the Data Provider</param>
            <param name = "version">The Version</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.GetStringVersion(System.Version)">
            -----------------------------------------------------------------------------
            <summary>
              GetStringVersion gets the Version String (xx.xx.xx) from the Version
            </summary>
            <remarks>
            </remarks>
            <param name = "version">The Version</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.GetSuperUser(System.Xml.XmlDocument,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
              GetSuperUser gets the superuser from the Install Template
            </summary>
            <remarks>
            </remarks>
            <param name = "xmlTemplate">The install Templae</param>
            <param name = "writeFeedback">a flag to determine whether to output feedback</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.GetUpgradeScripts(System.String,System.Version)">
            -----------------------------------------------------------------------------
            <summary>
              GetUpgradeScripts gets an ArrayList of the Scripts required to Upgrade to the
              current Assembly Version
            </summary>
            <remarks>
            </remarks>
            <param name = "providerPath">The path to the Data Provider</param>
            <param name = "databaseVersion">The current Database Version</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.InitialiseHostSettings(System.Xml.XmlDocument,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
              InitialiseHostSettings gets the Host Settings from the Install Template
            </summary>
            <remarks>
            </remarks>
            <param name = "xmlTemplate">The install Templae</param>
            <param name = "writeFeedback">a flag to determine whether to output feedback</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.InstallDatabase(System.Version,System.String,System.Xml.XmlDocument,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
              InstallDatabase runs all the "scripts" identifed in the Install Template to
              install the base version
            </summary>
            <remarks>
            </remarks>
            <param name="providerPath"></param>
            <param name = "xmlDoc">The Xml Document to load</param>
            <param name = "writeFeedback">A flag that determines whether to output feedback to the Response Stream</param>
            <param name="version"></param>
            <returns>A string which contains the error message - if appropriate</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.InstallDNN(System.String)">
            -----------------------------------------------------------------------------
            <summary>
              InstallDNN manages the Installation of a new DotNetNuke Application
            </summary>
            <remarks>
            </remarks>
            <param name = "strProviderPath">The path to the Data Provider</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.InstallFiles(System.Xml.XmlDocument,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
              InstallFiles intsalls any files listed in the Host Install Configuration file
            </summary>
            <remarks>
            </remarks>
            <param name = "xmlDoc">The Xml Document to load</param>
            <param name = "writeFeedback">A flag that determines whether to output feedback to the Response Stream</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.GetInstallPackages">
            <summary>
            Gets a ist of installable extensions sorted to ensure dependencies are installed first
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.UpgradeApplication">
            -----------------------------------------------------------------------------
            <summary>
              UpgradeApplication - This overload is used for general application upgrade operations.
            </summary>
            <remarks>
              Since it is not version specific and is invoked whenever the application is
              restarted, the operations must be re-executable.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.UpgradeApplication(System.String,System.Version,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
              UpgradeApplication - This overload is used for version specific application upgrade operations.
            </summary>
            <remarks>
              This should be used for file system modifications or upgrade operations which
              should only happen once. Database references are not recommended because future
              versions of the application may result in code incompatibilties.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.UpgradeDNN(System.String,System.Version)">
            -----------------------------------------------------------------------------
            <summary>
              UpgradeDNN manages the Upgrade of an exisiting DotNetNuke Application
            </summary>
            <remarks>
            </remarks>
            <param name = "providerPath">The path to the Data Provider</param>
            <param name = "dataBaseVersion">The current Database Version</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.UpgradeVersion(System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
              UpgradeVersion upgrades a single version
            </summary>
            <remarks>
            </remarks>
            <param name = "scriptFile">The upgrade script file</param>
            <param name="writeFeedback">Write status to Response Stream?</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Upgrade.Upgrade.UpgradeVersion(System.String,System.Boolean,System.Boolean@)">
            -----------------------------------------------------------------------------
            <summary>
              UpgradeVersion upgrades a single version
            </summary>
            <remarks>
            </remarks>
            <param name="scriptFile">The upgrade script file</param>
            <param name="writeFeedback">Write status to Response Stream?</param>
             <param name="scriptExecuted">Identity whether the script file executed.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Cache.CachingProvider">
            <summary>
            CachingProvider provides basic component of cache system, by default it will use HttpRuntime.Cache.
            </summary>
            <remarks>
            <para>Using cache will speed up the application to a great degree, we recommend to use cache for whole modules,
            but sometimes cache also make confuse for user, if we didn't take care of how to make cache expired when needed,
            such as if a data has already been deleted but the cache arn't clear, it will cause un expected errors.
            so you should choose a correct performance setting type when you trying to cache some stuff, and always remember
            update cache immediately after the data changed.</para>
            </remarks>
            <example>
            <code lang="C#">
            public static void ClearCache(string cachePrefix)
            {
                CachingProvider.Instance().Clear("Prefix", GetDnnCacheKey(cachePrefix));
            }
            </code>
            </example>
        </member>
        <member name="P:DotNetNuke.Services.Cache.CachingProvider.Cache">
            <summary>
            Gets the default cache provider.
            </summary>
            <value>HttpRuntime.Cache</value>
        </member>
        <member name="P:DotNetNuke.Services.Cache.CachingProvider.CacheExpirationDisable">
            <summary>
            Whether current caching provider disabled to expire cache.
            </summary>
            <remarks>This setting shouldn't affect current server, cache should always expire in current server even this setting set to True.</remarks>
        </member>
        <member name="M:DotNetNuke.Services.Cache.CachingProvider.CleanCacheKey(System.String)">
            <summary>
            Cleans the cache key by remove cache key prefix.
            </summary>
            <param name="CacheKey">The cache key.</param>
            <returns>cache key without prefix.</returns>
            <exception cref="T:System.ArgumentException">cache key is empty.</exception>
        </member>
        <member name="M:DotNetNuke.Services.Cache.CachingProvider.GetCacheKey(System.String)">
            <summary>
            Gets the cache key with key prefix.
            </summary>
            <param name="CacheKey">The cache key.</param>
            <returns>CachePrefix + CacheKey</returns>
            <exception cref="T:System.ArgumentException">Cache key is empty.</exception>
        </member>
        <member name="M:DotNetNuke.Services.Cache.CachingProvider.Instance">
            <summary>
            Instances of  caching provider.
            </summary>
            <returns>The Implemments provider of cache system defind in web.config.</returns>
        </member>
        <member name="M:DotNetNuke.Services.Cache.CachingProvider.DisableCacheExpiration">
            <summary>
            Disable Cache Expirataion. This control won't affect core caching provider, its behavior determined by extended caching provider.
            This property designed for when process long time action, extended caching provider should not sync cache between web servers to improve performance.
            </summary>
            <seealso cref="P:DotNetNuke.Services.Cache.CachingProvider.CacheExpirationDisable"/>
        </member>
        <member name="M:DotNetNuke.Services.Cache.CachingProvider.EnableCacheExpiration">
            <summary>
            Enable Cache Expirataion. This control won't affect core caching provider, its behavior determined by extended caching provider.
            This property designed for when process long time action, extended caching provider should not sync cache between web servers to improve performance.
            </summary>
            <seealso cref="P:DotNetNuke.Services.Cache.CachingProvider.CacheExpirationDisable"/>
        </member>
        <member name="M:DotNetNuke.Services.Cache.CachingProvider.ClearCacheInternal(System.String,System.String,System.Boolean)">
            <summary>
            Clears the cache internal.
            </summary>
            <param name="cacheType">Type of the cache.</param>
            <param name="data">The data.</param>
            <param name="clearRuntime">if set to <c>true</c> clear runtime cache.</param>
        </member>
        <member name="M:DotNetNuke.Services.Cache.CachingProvider.RemoveInternal(System.String)">
            <summary>
            Removes the internal.
            </summary>
            <param name="cacheKey">The cache key.</param>
        </member>
        <member name="M:DotNetNuke.Services.Cache.CachingProvider.Clear(System.String,System.String)">
            <summary>
            Clears the specified type.
            </summary>
            <param name="type">The type.</param>
            <param name="data">The data.</param>
        </member>
        <member name="M:DotNetNuke.Services.Cache.CachingProvider.GetItem(System.String)">
            <summary>
            Gets the item.
            </summary>
            <param name="cacheKey">The cache key.</param>
            <returns>cache content</returns>
        </member>
        <member name="M:DotNetNuke.Services.Cache.CachingProvider.Insert(System.String,System.Object)">
            <summary>
            Inserts the specified cache key.
            </summary>
            <param name="cacheKey">The cache key.</param>
            <param name="itemToCache">The object.</param>
        </member>
        <member name="M:DotNetNuke.Services.Cache.CachingProvider.Insert(System.String,System.Object,DotNetNuke.Services.Cache.DNNCacheDependency)">
            <summary>
            Inserts the specified cache key.
            </summary>
            <param name="cacheKey">The cache key.</param>
            <param name="itemToCache">The object.</param>
            <param name="dependency">The dependency.</param>
        </member>
        <member name="M:DotNetNuke.Services.Cache.CachingProvider.Insert(System.String,System.Object,DotNetNuke.Services.Cache.DNNCacheDependency,System.DateTime,System.TimeSpan)">
            <summary>
            Inserts the specified cache key.
            </summary>
            <param name="cacheKey">The cache key.</param>
            <param name="itemToCache">The object.</param>
            <param name="dependency">The dependency.</param>
            <param name="absoluteExpiration">The absolute expiration.</param>
            <param name="slidingExpiration">The sliding expiration.</param>
        </member>
        <member name="M:DotNetNuke.Services.Cache.CachingProvider.Insert(System.String,System.Object,DotNetNuke.Services.Cache.DNNCacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)">
            <summary>
            Inserts the specified cache key.
            </summary>
            <param name="cacheKey">The cache key.</param>
            <param name="itemToCache">The value.</param>
            <param name="dependency">The dependency.</param>
            <param name="absoluteExpiration">The absolute expiration.</param>
            <param name="slidingExpiration">The sliding expiration.</param>
            <param name="priority">The priority.</param>
            <param name="onRemoveCallback">The on remove callback.</param>
        </member>
        <member name="M:DotNetNuke.Services.Cache.CachingProvider.IsWebFarm">
            <summary>
            Determines whether is web farm.
            </summary>
            <returns>
              <c>true</c> if is web farm; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:DotNetNuke.Services.Cache.CachingProvider.PurgeCache">
            <summary>
            Purges the cache.
            </summary>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Cache.CachingProvider.Remove(System.String)">
            <summary>
            Removes the specified cache key.
            </summary>
            <param name="CacheKey">The cache key.</param>
        </member>
        <member name="T:DotNetNuke.Services.Cache.DNNCacheDependency">
            <summary>
            DNNCacheDependency provides dependency policies of cache system.
            </summary>
            <remarks>
            The CacheDependency class monitors the dependency relationships so that when any of them changes, the cached item will be automatically removed.
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.Cache.DNNCacheDependency.#ctor(System.Web.Caching.CacheDependency)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetNuke.Services.Cache.DNNCacheDependency"/> class.
            </summary>
            <param name="systemCacheDependency">The system cache dependency.</param>
        </member>
        <member name="M:DotNetNuke.Services.Cache.DNNCacheDependency.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetNuke.Services.Cache.DNNCacheDependency"/> class that monitors a file or directory for changes.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:DotNetNuke.Services.Cache.DNNCacheDependency.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetNuke.Services.Cache.DNNCacheDependency"/> class that monitors an array of paths (to files or directories) for changes.
            </summary>
            <param name="filenames">set the cache depend on muti files.</param>
        </member>
        <member name="M:DotNetNuke.Services.Cache.DNNCacheDependency.#ctor(System.String[],System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetNuke.Services.Cache.DNNCacheDependency"/> class that monitors an array of paths
             (to files or directories) for changes and specifies a time when change monitoring begins.
            </summary>
            <param name="filenames">The filenames.</param>
            <param name="start">The start.</param>
        </member>
        <member name="M:DotNetNuke.Services.Cache.DNNCacheDependency.#ctor(System.String[],System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetNuke.Services.Cache.DNNCacheDependency"/> class that monitors an array of paths (to files or directories), 
            an array of cache keys, or both for changes.
            </summary>
            <param name="filenames">The filenames.</param>
            <param name="cachekeys">The cachekeys.</param>
        </member>
        <member name="M:DotNetNuke.Services.Cache.DNNCacheDependency.#ctor(System.String,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetNuke.Services.Cache.DNNCacheDependency"/> class that monitors a file or directory for changes.
            </summary>
            <param name="filename">The filename.</param>
            <param name="start">The start.</param>
        </member>
        <member name="M:DotNetNuke.Services.Cache.DNNCacheDependency.#ctor(System.String[],System.String[],System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetNuke.Services.Cache.DNNCacheDependency"/> class that monitors an array of paths (to files or directories), 
            an array of cache keys, or both for changes.
            </summary>
            <param name="filenames">The filenames.</param>
            <param name="cachekeys">The cachekeys.</param>
            <param name="start">The start.</param>
        </member>
        <member name="M:DotNetNuke.Services.Cache.DNNCacheDependency.#ctor(System.String[],System.String[],DotNetNuke.Services.Cache.DNNCacheDependency)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetNuke.Services.Cache.DNNCacheDependency"/> classthat monitors an array of paths (to files or directories), 
            an array of cache keys, or both for changes. It also makes itself dependent upon a separate instance of the <see cref="T:DotNetNuke.Services.Cache.DNNCacheDependency"/> class.
            </summary>
            <param name="filenames">The filenames.</param>
            <param name="cachekeys">The cachekeys.</param>
            <param name="dependency">The dependency.</param>
        </member>
        <member name="M:DotNetNuke.Services.Cache.DNNCacheDependency.#ctor(System.String[],System.String[],DotNetNuke.Services.Cache.DNNCacheDependency,System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:DotNetNuke.Services.Cache.DNNCacheDependency"/> class that monitors an array of paths (to files or directories), 
            an array of cache keys, or both for changes. 
            It also makes itself dependent upon another instance of the <see cref="T:DotNetNuke.Services.Cache.DNNCacheDependency"/> class and a time when the change monitoring begins.
            </summary>
            <param name="filenames">The filenames.</param>
            <param name="cachekeys">The cachekeys.</param>
            <param name="dependency">The dependency.</param>
            <param name="start">The start.</param>
        </member>
        <member name="P:DotNetNuke.Services.Cache.DNNCacheDependency.CacheKeys">
            <summary>
            Gets the cache keys.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Cache.DNNCacheDependency.FileNames">
            <summary>
            Gets the file names.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Cache.DNNCacheDependency.HasChanged">
            <summary>
            Gets a value indicating whether this instance has changed.
            </summary>
            <value>
            	<c>true</c> if this instance has changed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:DotNetNuke.Services.Cache.DNNCacheDependency.CacheDependency">
            <summary>
            Gets the cache dependency.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Cache.DNNCacheDependency.StartTime">
            <summary>
            Gets the start time.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Cache.DNNCacheDependency.SystemCacheDependency">
            <summary>
            Gets the system cache dependency.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Cache.DNNCacheDependency.UtcLastModified">
            <summary>
            Gets the UTC last modified.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Cache.DNNCacheDependency.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Journal.Content.CreateContentItem(DotNetNuke.Services.Journal.JournalItem,System.Int32,System.Int32)">
            <summary>
            This should only run after the Post exists in the data store. 
            </summary>
            <returns>The newly created ContentItemID from the data store.</returns>
            <remarks>This is for the first question in the thread. Not for replies or items with ParentID > 0.</remarks>
        </member>
        <member name="M:DotNetNuke.Services.Journal.Content.UpdateContentItem(DotNetNuke.Services.Journal.JournalItem,System.Int32,System.Int32)">
            <summary>
            This is used to update the content in the ContentItems table. Should be called when a question is updated.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Journal.Content.DeleteContentItem(System.Int32)">
            <summary>
            This removes a content item associated with a question/thread from the data store. Should run every time an entire thread is deleted.
            </summary>
            <param name="contentItemID"></param>
        </member>
        <member name="M:DotNetNuke.Services.Journal.Content.GetContentTypeID(System.String)">
            <summary>
            This is used to determine the ContentTypeID (part of the Core API) based on this module's content type. If the content type doesn't exist yet for the module, it is created.
            </summary>
            <returns>The primary key value (ContentTypeID) from the core API's Content Types table.</returns>
        </member>
        <member name="M:DotNetNuke.Services.Journal.Content.CreateContentType(System.String)">
            <summary>
            Creates a Content Type (for taxonomy) in the data store.
            </summary>
            <returns>The primary key value of the new ContentType.</returns>
        </member>
        <member name="M:DotNetNuke.Services.Journal.Content.GetContentBody(DotNetNuke.Services.Journal.JournalItem)">
            <summary>
            Creates the content text
            </summary>
            <param name="objJournalItem"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Journal.IJournalController.GetJournalType(System.String)">
            <summary>
            Get journal type by name.
            </summary>
            <param name="journalType">type name.</param>
            <returns>Journal type object.</returns>
            
        </member>
        <member name="M:DotNetNuke.Services.Journal.IJournalController.GetJournalTypeById(System.Int32)">
            <summary>
            Get journal type by type id.
            </summary>
            <param name="journalTypeId">Type id.</param>
            <returns>Journal type object.</returns>
            
        </member>
        <member name="M:DotNetNuke.Services.Journal.IJournalController.GetJournalItemByKey(System.Int32,System.String)">
            <summary>
            Get journal item by object key.
            </summary>
            <param name="portalId">Id of portal.</param>
            <param name="objectKey">The object key.</param>
            <returns>Journal object.</returns>
            
        </member>
        <member name="M:DotNetNuke.Services.Journal.IJournalController.GetJournalItemByKey(System.Int32,System.String,System.Boolean)">
            <summary>
            Get journal item by object key.
            </summary>
            <param name="portalId">Id of portal.</param>
            <param name="objectKey">The object key.</param>
            <param name="includeAllItems">Whether include deleted items.</param>
            <returns></returns>
            
        </member>
        <member name="M:DotNetNuke.Services.Journal.IJournalController.GetJournalItemByKey(System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Get journal item by object key.
            </summary>
            <param name="portalId">Id of portal.</param>
            <param name="objectKey">The object key.</param>
            <param name="includeAllItems">Whether include deleted items.</param>
            <param name="isDeleted">Whether get deleted item.</param>
            <returns></returns>
            
        </member>
        <member name="M:DotNetNuke.Services.Journal.IJournalController.GetJournalItem(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get journal info.
            </summary>
            <param name="portalId">Id of portal.</param>
            <param name="userId">Id of current user, if securityCheck set as True, will check whether this user has permission to view the journal.</param>
            <param name="journalId">Id of Journal.</param>
            <returns>Journal Object.</returns>
            
        </member>
        <member name="M:DotNetNuke.Services.Journal.IJournalController.GetJournalItem(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get journal info.
            </summary>
            <param name="portalId">Id of portal.</param>
            <param name="userId">Id of current user, if securityCheck set as True, will check whether this user has permission to view the journal.</param>
            <param name="journalId">Id of Journal.</param>
            <param name="includeAllItems">Whether include deleted items.</param>
            <returns>Journal Object.</returns>
            
        </member>
        <member name="M:DotNetNuke.Services.Journal.IJournalController.GetJournalItem(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Get journal info.
            </summary>
            <param name="portalId">Id of portal.</param>
            <param name="userId">Id of current user, if securityCheck set as True, will check whether this user has permission to view the journal.</param>
            <param name="journalId">Id of Journal.</param>
            <param name="includeAllItems">Whether include deleted items.</param>
            <param name="isDeleted">Whether get deleted item.</param>
            <returns>Journal Object.</returns>
            
        </member>
        <member name="M:DotNetNuke.Services.Journal.IJournalController.GetJournalItem(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get journal info.
            </summary>
            <param name="portalId">Id of portal.</param>
            <param name="userId">Id of current user, if securityCheck set as True, will check whether this user has permission to view the journal.</param>
            <param name="journalId">Id of Journal.</param>
            <param name="includeAllItems">Whether include deleted items.</param>
            <param name="isDeleted">Whether get deleted item.</param>
            <param name="securityCheck">Whether check current user has permission to get journal.</param>
            <returns>Journal Object.</returns>
            
        </member>
        <member name="M:DotNetNuke.Services.Journal.IJournalController.GetJournalTypes(System.Int32)">
            <summary>
            Get all journal types in portal.
            </summary>
            <param name="portalId">Id of portal.</param>
            <returns>Enumerable JournalTypeInfo object list.</returns>
        </member>
        <member name="M:DotNetNuke.Services.Journal.IJournalController.SaveJourmalFile(DotNetNuke.Entities.Modules.ModuleInfo,DotNetNuke.Entities.Users.UserInfo,System.String,System.IO.Stream)">
            <summary>
            Save an uploaded file 
            </summary>
            <param name="module">Module where the file is uploaded</param>
            <param name="userInfo">User who uploads the file</param>
            <param name="fileName">File Name</param>
            <param name="fileContent">File content</param>
            <returns>A FileInfo object corresponding to the saved file</returns>
        </member>
        <member name="M:DotNetNuke.Services.Journal.IJournalController.SaveJournalItem(DotNetNuke.Services.Journal.JournalItem,DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            Save the journal object into database.
            </summary>
            <param name="journalItem">Journal object.</param>
            <param name="module">The module info of journal item context.</param>
            
        </member>
        <member name="M:DotNetNuke.Services.Journal.IJournalController.UpdateJournalItem(DotNetNuke.Services.Journal.JournalItem,DotNetNuke.Entities.Modules.ModuleInfo)">
            <summary>
            Update the journal info in database.
            </summary>
            <param name="journalItem">Journal object.</param>
            <param name="module">The module info of journal item context.</param>
            
        </member>
        <member name="M:DotNetNuke.Services.Journal.IJournalController.DeleteJournalItem(System.Int32,System.Int32,System.Int32)">
            <summary>
            Hard delete journal item by journal id.
            </summary>
            <param name="portalId">Id of portal.</param>
            <param name="userId">Id of current user.</param>
            <param name="journalId">Id of the journal want to delete.</param>
            
        </member>
        <member name="M:DotNetNuke.Services.Journal.IJournalController.DeleteJournalItemByGroupId(System.Int32,System.Int32)">
            <summary>
            Hard delete journal items based on group Id
            </summary>
            <param name="portalId">Id of portal.</param>
            <param name="groupId">Id of social group.</param>
            
        </member>
        <member name="M:DotNetNuke.Services.Journal.IJournalController.DeleteJournalItemByKey(System.Int32,System.String)">
            <summary>
            Hard delete journal item by object key.
            </summary>
            <param name="portalId">Id of portal.</param>
            <param name="objectKey">Object key.</param>
            
        </member>
        <member name="M:DotNetNuke.Services.Journal.IJournalController.SoftDeleteJournalItem(System.Int32,System.Int32,System.Int32)">
            <summary>
            Soft delete journal item by journal id.
            </summary>
            <param name="portalId">Id of portal.</param>
            <param name="userId">Id of current user.</param>
            <param name="journalId">Id of the journal want to delete.</param>
            
        </member>
        <member name="M:DotNetNuke.Services.Journal.IJournalController.SoftDeleteJournalItemByGroupId(System.Int32,System.Int32)">
            <summary>
            Soft delete journal items based on group Id
            </summary>
            <param name="portalId">Id of portal.</param>
            <param name="groupId">Id of social group.</param>
            
        </member>
        <member name="M:DotNetNuke.Services.Journal.IJournalController.SoftDeleteJournalItemByKey(System.Int32,System.String)">
            <summary>
            Soft delete journal item by object key.
            </summary>
            <param name="portalId">Id of portal.</param>
            <param name="objectKey">Object key.</param>
            
        </member>
        <member name="M:DotNetNuke.Services.Journal.IJournalController.DisableComments(System.Int32,System.Int32)">
            <summary>
            Disable comment on a journal item.
            </summary>
            <param name="portalId">Id of portal.</param>
            <param name="journalId">Id of the journal want to disable comment.</param>
            
        </member>
        <member name="M:DotNetNuke.Services.Journal.IJournalController.HideComments(System.Int32,System.Int32)">
            <summary>
            Hide comments on a journal item.
            </summary>
            <param name="portalId">Id of portal.</param>
            <param name="journalId">Id of the journal want to hide comments.</param>
            
        </member>
        <member name="M:DotNetNuke.Services.Journal.IJournalController.EnableComments(System.Int32,System.Int32)">
            <summary>
            Enable comment on a journal item.
            </summary>
            <param name="portalId">Id of portal.</param>
            <param name="journalId">Id of the journal want to enable comment.</param>
            
        </member>
        <member name="M:DotNetNuke.Services.Journal.IJournalController.ShowComments(System.Int32,System.Int32)">
            <summary>
            Show comments on a  journal item.
            </summary>
            <param name="portalId">Id of portal.</param>
            <param name="journalId">Id of the journal want to show comment.</param>
            
        </member>
        <member name="M:DotNetNuke.Services.Journal.IJournalController.GetCommentsByJournalIds(System.Collections.Generic.List{System.Int32})">
            <summary>
            Get all comments in the given journal items.
            </summary>
            <param name="journalIdList">Id list of journal items.</param>
            <returns>CommentInfo object list.</returns>
            
        </member>
        <member name="M:DotNetNuke.Services.Journal.IJournalController.LikeJournalItem(System.Int32,System.Int32,System.String)">
            <summary>
            Save a like on journal item.
            </summary>
            <param name="journalId">Id of journal item.</param>
            <param name="userId">Id of current user.</param>
            <param name="displayName">User's display name.</param>
            
        </member>
        <member name="M:DotNetNuke.Services.Journal.IJournalController.SaveComment(DotNetNuke.Services.Journal.CommentInfo)">
            <summary>
            Save comment info object into database.
            </summary>
            <param name="ci">Comment info object.</param>
            
        </member>
        <member name="M:DotNetNuke.Services.Journal.IJournalController.GetComment(System.Int32)">
            <summary>
            Get comment info object by comment id.
            </summary>
            <param name="commentId">Id of the comment.</param>
            <returns>Comment info object.</returns>
            
        </member>
        <member name="M:DotNetNuke.Services.Journal.IJournalController.DeleteComment(System.Int32,System.Int32)">
            <summary>
            Delete a comment by id.
            </summary>
            <param name="journalId">Id of journal.</param>
            <param name="commentId">Id of comment.</param>
            
        </member>
        <member name="M:DotNetNuke.Services.Journal.JournalControllerImpl.DeleteJournalItem(System.Int32,System.Int32,System.Int32)">
            <summary>
            HARD deletes journal items.
            </summary>
            <param name="portalId"></param>
            <param name="currentUserId"></param>
            <param name="journalId"></param>
        </member>
        <member name="M:DotNetNuke.Services.Journal.JournalControllerImpl.DeleteJournalItemByKey(System.Int32,System.String)">
            <summary>
            HARD deletes journal items based on item key
            </summary>
            <param name="portalId"></param>
            <param name="objectKey"></param>
        </member>
        <member name="M:DotNetNuke.Services.Journal.JournalControllerImpl.DeleteJournalItemByGroupId(System.Int32,System.Int32)">
            <summary>
            HARD deletes journal items based on group Id
            </summary>
            <param name="portalId"></param>
            <param name="groupId"></param>
        </member>
        <member name="M:DotNetNuke.Services.Journal.JournalControllerImpl.SoftDeleteJournalItem(System.Int32,System.Int32,System.Int32)">
            <summary>
            SOFT deletes journal items.
            </summary>
            <param name="portalId"></param>
            <param name="currentUserId"></param>
            <param name="journalId"></param>
        </member>
        <member name="M:DotNetNuke.Services.Journal.JournalControllerImpl.SoftDeleteJournalItemByKey(System.Int32,System.String)">
            <summary>
            SOFT deletes journal items based on item key
            </summary>
            <param name="portalId"></param>
            <param name="objectKey"></param>
        </member>
        <member name="M:DotNetNuke.Services.Journal.JournalControllerImpl.SoftDeleteJournalItemByGroupId(System.Int32,System.Int32)">
            <summary>
            SOFT deletes journal items based on group Id
            </summary>
            <param name="portalId"></param>
            <param name="groupId"></param>
        </member>
        <member name="P:DotNetNuke.Services.Journal.JournalItem.KeyID">
            <summary>
            Gets or sets the key ID.
            </summary>
            <value>
            The key ID.
            </value>
            <remarks>
            If you derive class has its own key id, please override this property and set the value to your own key id.
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.ModuleCache.FileProvider.GetCacheFolder(System.Int32)">
            <summary>
            [jmarino]  2011-06-16 Check for ContainsKey for a write added
            </summary>
            <param name="portalId"></param>
            <returns></returns>
        </member>
        <member name="P:DotNetNuke.Services.Scheduling.Scheduler.CoreScheduler.FreeThreads">
            <summary>
            tracks how many threads we have free to work with at any given time.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Scheduling.Scheduler.CoreScheduler.AddToScheduleInProgress(DotNetNuke.Services.Scheduling.ScheduleHistoryItem)">
            <summary>
            adds an item to the collection of schedule items in progress.
            </summary>
            <param name="scheduleHistoryItem">Item to add</param>
            <remarks>Thread Safe</remarks>
        </member>
        <member name="M:DotNetNuke.Services.Scheduling.Scheduler.CoreScheduler.RemoveFromScheduleInProgress(DotNetNuke.Services.Scheduling.ScheduleItem)">
            <summary>
            Removes an item from the collection of schedule items in progress.
            </summary>
            <param name="scheduleItem"></param>
            <remarks>Thread Safe</remarks>
        </member>
        <member name="M:DotNetNuke.Services.Scheduling.Scheduler.CoreScheduler.GetScheduleItemFromScheduleInProgress(DotNetNuke.Services.Scheduling.ScheduleItem)">
            <summary>
            Gets a schedulehistory item from the collection of schedule items in progress.
            </summary>
            <param name="scheduleItem"></param>
            <remarks>Thread Safe</remarks>
        </member>
        <member name="M:DotNetNuke.Services.Scheduling.Scheduler.CoreScheduler.AddToScheduleQueue(DotNetNuke.Services.Scheduling.ScheduleHistoryItem)">
            <summary>
            Adds an item to the collection of schedule items in queue.
            </summary>
            <param name="scheduleHistoryItem"></param>
            <remarks>Thread Safe</remarks>
        </member>
        <member name="M:DotNetNuke.Services.Scheduling.Scheduler.CoreScheduler.GetScheduleInProgress">
            <summary>
            Gets a copy of the collection of schedule items in progress.
            </summary>
            <returns>Copy of the schedule items currently in progress</returns>
            <remarks>This is a snapshot of the collection scheduled items could start or complete at any time</remarks>
        </member>
        <member name="M:DotNetNuke.Services.Scheduling.Scheduler.CoreScheduler.GetScheduleInProgressCount">
            <summary>
            Gets the number of items in the collection of schedule items in progress.
            </summary>
            <returns>Number of items in progress</returns>
            <remarks>Thread Safe
            This count is a snapshot and may change at any time
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.Scheduling.Scheduler.CoreScheduler.GetScheduleQueue">
            <summary>
            Gets a copy of collection of all schedule items in queue.
            </summary>
            <returns>A copy of the ScheduleQueue</returns>
            <remarks>Thread Safe
            The returned collection is a snapshot in time the real ScheduleQueue may change at any time.
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.Scheduling.Scheduler.CoreScheduler.GetScheduleQueueCount">
            <summary>
            Gets the number of items in the collection of schedule items in progress.
            </summary>
            <returns>Number of items in progress</returns>
            <remarks>Thread Safe
            This count is a snapshot and may change at any time
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.Scheduling.Scheduler.CoreScheduler.Halt(System.String)">
            <summary>
            Halt the Scheduler
            </summary>
            <param name="sourceOfHalt">Initiator of Halt</param>
        </member>
        <member name="M:DotNetNuke.Services.Scheduling.Scheduler.CoreScheduler.RemoveFromScheduleQueue(DotNetNuke.Services.Scheduling.ScheduleItem)">
            <summary>
            Removes an item from the collection of schedule items in queue.
            </summary>
            <param name="scheduleItem">Item to remove</param>
        </member>
        <member name="T:DotNetNuke.Services.Scheduling.ScheduleHistorySortStartDate">
            -----------------------------------------------------------------------------
            <summary>
            The ScheduleHistorySortStartDate Class is a custom IComparer Implementation
            used to sort the Schedule Items
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Scheduling.SchedulerClient">
            <summary>
            This class is inherited by any class that wants to run tasks in the scheduler.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Scheduling.SchedulerClient.DoWork">
            '''''''''''''''''''''''''''''''''''''''''''''''''''
            <summary>
            This is the sub that kicks off the actual
            work within the SchedulerClient's subclass
            </summary>
            '''''''''''''''''''''''''''''''''''''''''''''''''''
        </member>
        <member name="T:DotNetNuke.Services.Scheduling.ScheduleStatusSortRemainingTimeDescending">
            -----------------------------------------------------------------------------
            <summary>
            The ScheduleStatusSortRemainingTimeDescending Class is a custom IComparer Implementation
            used to sort the Schedule Items
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.Services.Scheduling.SchedulingProvider.DelayAtAppStart">
            <summary>
            The number of seconds since application start where no timer-initiated
            schedulers are allowed to run before. This safeguards against ovelapped
            application re-starts. See "Disable Ovelapped Recycling" under Recycling
            of IIS Manager Application Pool's Advanced Settings.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Sitemap.CoreSitemapProvider.GetUrls(System.Int32,DotNetNuke.Entities.Portals.PortalSettings,System.String)">
            <summary>
              Includes page urls on the sitemap
            </summary>
            <remarks>
              Pages that are included:
              - are not deleted
              - are not disabled
              - are normal pages (not links,...)
              - are visible (based on date and permissions)
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.Sitemap.CoreSitemapProvider.GetPageUrl(DotNetNuke.Entities.Tabs.TabInfo,System.String,DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>
              Return the sitemap url node for the page
            </summary>
            <param name = "objTab">The page being indexed</param>
            <param name="language">Culture code to use in the URL</param>
            <returns>A SitemapUrl object for the current page</returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.Sitemap.CoreSitemapProvider.GetPriority(DotNetNuke.Entities.Tabs.TabInfo)">
            <summary>
              When page level priority is used, the priority for each page will be computed from 
              the hierarchy level of the page. 
              Top level pages will have a value of 1, second level 0.9, third level 0.8, ...
            </summary>
            <param name = "objTab">The page being indexed</param>
            <returns>The priority assigned to the page</returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.Sitemap.SitemapBuilder.#ctor(DotNetNuke.Entities.Portals.PortalSettings)">
            <summary>
              Creates an instance of the sitemap builder class
            </summary>
            <param name = "ps">Current PortalSettings for the portal being processed</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.Sitemap.SitemapBuilder.BuildSiteMap(System.IO.TextWriter)">
            <summary>
              Builds the complete portal sitemap
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.Sitemap.SitemapBuilder.GetSitemapIndexFile(System.String,System.IO.TextWriter)">
            <summary>
              Returns the sitemap file that is part of a sitemapindex.
            </summary>
            <param name = "index">Index of the sitemap to return</param>
            <param name = "output">The output stream</param>
            <remarks>
              The file should already exist since when using sitemapindexes the files are all cached to disk
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.Sitemap.SitemapBuilder.WriteSitemap(System.Boolean,System.IO.TextWriter,System.Int32,System.Collections.Generic.List{DotNetNuke.Services.Sitemap.SitemapUrl})">
            <summary>
              Generates a sitemap file
            </summary>
            <param name = "cached">Wheter the generated file should be cached or not</param>
            <param name = "output">The output stream</param>
            <param name = "index">For sitemapindex files the number of the file being generated, 0 otherwise</param>
            <param name = "allUrls">The list of urls to be included in the file</param>
            <remarks>
              If the output should be cached it will generate a file under the portal directory (portals\[portalid]\sitemaps\) with 
              the result of the generation. If the file is part of a sitemap, <paramref name = "index">index</paramref> will be appended to the
              filename cached on disk ("sitemap_1.xml")
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.Sitemap.SitemapBuilder.WriteSitemapIndex(System.IO.TextWriter,System.Int32)">
            <summary>
              Generates a sitemapindex file
            </summary>
            <param name = "output">The output stream</param>
            <param name = "totalFiles">Number of files that are included in the sitemap index</param>
        </member>
        <member name="M:DotNetNuke.Services.Sitemap.SitemapBuilder.AddURL(DotNetNuke.Services.Sitemap.SitemapUrl,System.Xml.XmlWriter)">
            <summary>
              Adds a new url to the sitemap
            </summary>
            <param name = "sitemapUrl">The url to be included in the sitemap</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.Sitemap.SitemapBuilder.CacheIsValid">
            <summary>
              Is sitemap is cached, verifies is the cached file exists and is still valid
            </summary>
            <returns>True is the cached file exists and is still valid, false otherwise</returns>
        </member>
        <member name="M:DotNetNuke.Services.Sitemap.SitemapBuilder.WriteSitemapFileToOutput(System.String,System.IO.TextWriter)">
            <summary>
              When the sitemap is cached, reads the sitemap file and writes to the output stream
            </summary>
            <param name="file">File name</param>
            <param name = "output">The output stream</param>
        </member>
        <member name="T:DotNetNuke.Services.Analytics.GoogleAnalyticsController">
            -----------------------------------------------------------------------------
            Namespace:  DotNetNuke.Services.Analytics
            Module:     GoogleAnalytics
            -----------------------------------------------------------------------------
            <summary>
              Controller class definition for GoogleAnalytics which handles upgrades
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Analytics.GoogleAnalyticsController.UpgradeModule(System.String)">
            -----------------------------------------------------------------------------
            <summary>
              Handles module upgrades includes a new Google Analytics Asychronous script.
            </summary>
            <param name = "Version"></param>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Analytics.GoogleAnalyticsController.GetConfigFile">
            -----------------------------------------------------------------------------
            <summary>
              Retrieves the Google Analytics config file, "SiteAnalytics.config".
            </summary>
            <returns></returns>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.ClientCapability.FacebookRequestController">
            <summary>
            Make modules that are aware of Facebookâs signed_request â a parameter that is POSTed to the web page being loaded in the iFrame, 
            giving it variables such as if the Page has been Liked, and the age range of the user.
            
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.ClientCapability.FacebookRequestController.Base64UrlDecode(System.String)">
            <summary>
            Converts the base 64 url encoded string to standard base 64 encoding.
            </summary>
            <param name="encodedValue">The encoded value.</param>
            <returns>The base 64 string.</returns>
        </member>
        <member name="M:DotNetNuke.Services.ClientCapability.FacebookRequestController.ConvertToTimestamp(System.Int64)">
            <summary>
            method for converting a System.DateTime value to a UNIX Timestamp
            </summary>
            <param name="value">date to convert</param>
            <returns></returns>
        </member>
        <member name="T:DotNetNuke.Services.ClientCapability.FacebookRequest">
            <summary>
            Make modules that are aware of Facebookâs signed_request â a parameter that is POSTed to the web page being loaded in the iFrame, 
            giving it variables such as if the Page has been Liked, and the age range of the user.
            
            For more details visit http://developers.facebook.com/docs/authentication/signed_request/
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.FacebookRequest.Algorithm">
            <summary>
             Mechanism used to sign the request
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.FacebookRequest.OauthToken">
            <summary>
             Token you can pass to the Graph API or the Legacy REST API.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.FacebookRequest.Expires">
            <summary>
             DateTime when the oauth_token expires
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.FacebookRequest.IssuedAt">
            <summary>
             DateTime when the request was signed.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.FacebookRequest.UserID">
            <summary>
             Facebook user identifier (UID) of the current user.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.FacebookRequest.UserLocale">
            <summary>
             User's locale.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.FacebookRequest.UserCountry">
            <summary>
             User's country.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.FacebookRequest.UserMinAge">
            <summary>
             User's minimum age range.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.FacebookRequest.UserMaxAge">
            <summary>
             User's maximum age range.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.FacebookRequest.PageId">
            <summary>
            Page's Id. Only available if your app is an iframe loaded in a Page tab.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.FacebookRequest.PageLiked">
            <summary>
             Has the user has liked the page. Only available if your app is an iframe loaded in a Page tab.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.FacebookRequest.PageUserAdmin">
            <summary>
             Is the page user Admin of the page. Only available if your app is an iframe loaded in a Page tab.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.FacebookRequest.ProfileId">
            <summary>
            Page ID if your app is loaded within. Only available if your app is written in FBML and loaded in a Page tab.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.FacebookRequest.AppData">
            <summary>
            Content of a query string parameter also called app_data. Usually specified when the application built the link to pass some data to itself. Only available if your app is an iframe loaded in a Page tab.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.FacebookRequest.RawSignedRequest">
            <summary>
            Raw signed request coming from FaceBook in Post
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.FacebookRequest.IsValid">
            <summary>
            Is this a valid FaceBook Request. Check this value prior to accessing any other property
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.ClientCapability.IClientCapabilityProvider.GetClientCapability(System.String)">
            <summary>
              Returns ClientCapability based on userAgent
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.ClientCapability.IClientCapabilityProvider.GetClientCapabilityById(System.String)">
            <summary>
              Returns ClientCapability based on ClientCapabilityId
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.ClientCapability.IClientCapabilityProvider.GetAllClientCapabilityValues">
            <summary>
            Returns available Capability Values for every  Capability Name
            </summary>
            <returns>
            Dictionary of Capability Name along with List of possible values of the Capability
            </returns>
            <example>Capability Name = mobile_browser, value = Safari, Andriod Webkit </example>
        </member>
        <member name="M:DotNetNuke.Services.ClientCapability.IClientCapabilityProvider.GetAllClientCapabilities">
            <summary>
            Returns All available Client Capabilities present
            </summary>
            <returns>
            List of IClientCapability present
            </returns>        
        </member>
        <member name="M:DotNetNuke.Services.ClientCapability.IClientCapabilityProvider.GetClientCapability(System.Web.HttpRequest)">
            <summary>
              Returns ClientCapability based on HttpRequest
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.ClientCapability.ClientCapability">
            <summary>
            Default Implementation of IClientCapability
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.ClientCapability.ClientCapability.#ctor">
            <summary>
              Default Constructor.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.ClientCapability.ID">
            <summary>
              Unique ID of the client making request.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.ClientCapability.UserAgent">
            <summary>
              User Agent of the client making request
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.ClientCapability.IsMobile">
            <summary>
              Is request coming from a mobile device.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.ClientCapability.IsTablet">
            <summary>
              Is request coming from a tablet device.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.ClientCapability.IsTouchScreen">
            <summary>
              Does the requesting device supports touch screen.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.ClientCapability.FacebookRequest">
            <summary>
              FacebookRequest property is filled when request is coming though Facebook iFrame (e.g. fan pages).
            </summary>
            <remarks>
              FacebookRequest property is populated based on data in "signed_request" headers coming from Facebook.  
              In order to ensure request is coming from Facebook, FacebookRequest.IsValidSignature method should be called with the secrety key provided by Facebook.
            </remarks>         
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.ClientCapability.ScreenResolutionWidthInPixels">
            <summary>
              ScreenResolution Width of the requester in Pixels.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.ClientCapability.ScreenResolutionHeightInPixels">
            <summary>
              ScreenResolution Height of the requester in Pixels.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.ClientCapability.SupportsFlash">
            <summary>
              Does requester support Flash.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.ClientCapability.Capabilities">
            <summary>
            A key-value collection containing all capabilities supported by requester
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.ClientCapability.BrowserName">
            <summary>
            Represents the name of the broweser in the request
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.ClientCapability.HtmlPreferedDTD">
            <summary>
            Returns the request prefered HTML DTD
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.ClientCapability.SSLOffload">
            <summary>
              Http server variable used for SSL offloading - if this value is empty offloading is not enabled
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.ClientCapability.Item(System.String)">
            <summary>
            Get client capability value by property name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.ClientCapabilityProvider.SupportsTabletDetection">
            <summary>
            Support detect the device whether is a tablet.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.ClientCapability.ClientCapabilityProvider.GetClientCapability(System.String)">
            <summary>
              Returns ClientCapability based on userAgent
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.ClientCapability.ClientCapabilityProvider.GetClientCapabilityById(System.String)">
            <summary>
              Returns ClientCapability based on ClientCapabilityId
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.ClientCapability.ClientCapabilityProvider.GetAllClientCapabilityValues">
            <summary>
            Returns available Capability Values for every  Capability Name
            </summary>
            <returns>
            Dictionary of Capability Name along with List of possible values of the Capability
            </returns>
            <example>Capability Name = mobile_browser, value = Safari, Andriod Webkit </example>
        </member>
        <member name="M:DotNetNuke.Services.ClientCapability.ClientCapabilityProvider.GetAllClientCapabilities">
            <summary>
            Returns All available Client Capabilities present
            </summary>
            <returns>
            List of IClientCapability present
            </returns>        
        </member>
        <member name="M:DotNetNuke.Services.ClientCapability.ClientCapabilityProvider.GetClientCapability(System.Web.HttpRequest)">
            <summary>
              Returns ClientCapability based on HttpRequest
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.ClientCapability.IClientCapability">
            <summary>
              ClientCapability provides capabilities supported by the http requester (e.g. Mobile Device, TV, Desktop)
            </summary>
            <remarks>
              The capabilities are primarily derived based on UserAgent.  
            </remarks>          
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.IClientCapability.ID">
            <summary>
              Unique ID of the client making request.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.IClientCapability.UserAgent">
            <summary>
              User Agent of the client making request
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.IClientCapability.IsMobile">
            <summary>
              Is request coming from a mobile device.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.IClientCapability.IsTablet">
            <summary>
              Is request coming from a tablet device.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.IClientCapability.IsTouchScreen">
            <summary>
              Does the requesting device supports touch screen.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.IClientCapability.FacebookRequest">
            <summary>
              FacebookRequest property is filled when request is coming though Facebook iFrame (e.g. fan pages).
            </summary>
            <remarks>
              FacebookRequest property is populated based on data in "signed_request" headers coming from Facebook.  
              In order to ensure request is coming from Facebook, FacebookRequest.IsValidSignature method should be called with the secrety key provided by Facebook.
              Most of the properties in IClientCapability doesnot apply to Facebook
            </remarks>                
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.IClientCapability.ScreenResolutionWidthInPixels">
            <summary>
              ScreenResolution Width of the requester in Pixels.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.IClientCapability.ScreenResolutionHeightInPixels">
            <summary>
              ScreenResolution Height of the requester in Pixels.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.IClientCapability.BrowserName">
            <summary>
            Represents the name of the broweser in the request
            </summary>        
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.IClientCapability.SupportsFlash">
            <summary>
              Does requester support Flash.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.IClientCapability.Capabilities">
            <summary>
            A key-value collection containing all capabilities supported by requester
            </summary>    
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.IClientCapability.HtmlPreferedDTD">
            <summary>
            Returns the request prefered HTML DTD
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.IClientCapability.SSLOffload">
            <summary>
              Http server variable used for SSL offloading - if this value is empty offloading is not enabled
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.ClientCapability.IClientCapability.Item(System.String)">
            <summary>
            Get client capability value by property name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.IMatchRule.Id">
            <summary>
            Primary Id.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.IMatchRule.Capability">
            <summary>
            capbility name.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.IMatchRule.Expression">
            <summary>
            reg expression to match the request
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.MatchRule.Id">
            <summary>
            Match rule's primary key.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.MatchRule.Capability">
            <summary>
            Capability's name.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.MatchRule.Expression">
            <summary>
            The value to match the capability from request.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.MatchRule.KeyID">
            <summary>
            IHydratable.KeyID.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Mobile.MatchRule.Fill(System.Data.IDataReader)">
            <summary>
            Fill the object with data from database.
            </summary>
            <param name="dr">the data reader.</param>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.PreviewProfile.Id">
            <summary>
            Primary key.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.PreviewProfile.PortalId">
            <summary>
            the profiles' effected portal.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.PreviewProfile.Name">
            <summary>
            profile's name.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.PreviewProfile.Width">
            <summary>
            the preview device's width.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.PreviewProfile.Height">
            <summary>
            the preview device's height.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.PreviewProfile.UserAgent">
            <summary>
            the preview device's user agent.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.PreviewProfile.SortOrder">
            <summary>
            Profile's sort order.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.PreviewProfile.KeyID">
            <summary>
            IHydratable.KeyID.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Mobile.PreviewProfile.Fill(System.Data.IDataReader)">
            <summary>
            Fill the object with data from database.
            </summary>
            <param name="dr">the data reader.</param>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.IRedirection.Id">
            <summary>
            Primary ID.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.IRedirection.PortalId">
            <summary>
            Portal Id.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.IRedirection.Name">
            <summary>
            Redirection name.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.IRedirection.SourceTabId">
            <summary>
            if redirect by visit the whole portal, this value should be -1; 
            otherwise should be the exactly page id for redirection.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.IRedirection.IncludeChildTabs">
            <summary>
            This value will be available when SourceTabId have a specific value, in that way when this value is true, page will rediect
            to target when request source tab and all child tabs under source tab.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.IRedirection.Type">
            <summary>
            The redirection type: should be Mobile, Tablet, Both of mobile and tablet, and all other unknown devices.
            if this value is Other, should use MatchRules to match the special request need to redirect.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.IRedirection.MatchRules">
            <summary>
            request match rules.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.IRedirection.TargetType">
            <summary>
            Redirection target type.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.IRedirection.TargetValue">
            <summary>
            Redirection target value, can a portal id, tab id or a specific url.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.IRedirection.Enabled">
            <summary>
            Enabled the Redirection.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.IRedirection.SortOrder">
            <summary>
            Redirection's Order
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Mobile.PreviewProfileController">
            <summary>
            The business of mobile preview profiles.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Mobile.PreviewProfileController.Save(DotNetNuke.Services.Mobile.IPreviewProfile)">
            <summary>
            save a preview profile. If profile.Id equals Null.NullInteger(-1), that means need to add a new profile;
            otherwise will update the profile by profile.Id.
            </summary>
            <param name="profile">profile object.</param>
        </member>
        <member name="M:DotNetNuke.Services.Mobile.PreviewProfileController.Delete(System.Int32,System.Int32)">
            <summary>
            delete a preview profile.
            </summary>
            <param name="portalId">Portal's id.</param>
            <param name="id">the profile's id.</param>
        </member>
        <member name="M:DotNetNuke.Services.Mobile.PreviewProfileController.GetProfilesByPortal(System.Int32)">
            <summary>
            get a preview profiles list for portal.
            </summary>
            <param name="portalId">portal id.</param>
            <returns>List of preview profile.</returns>
        </member>
        <member name="M:DotNetNuke.Services.Mobile.PreviewProfileController.GetProfileById(System.Int32,System.Int32)">
            <summary>
            get a specific preview profile by id.
            </summary>
            <param name="portalId">the profile belong's portal.</param>
            <param name="id">profile's id.</param>
            <returns>profile object.</returns>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.Redirection.Id">
            <summary>
            Redirection's primary key.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.Redirection.PortalId">
            <summary>
            The portal Redirection is belong to.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.Redirection.Name">
            <summary>
            Redirection name.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.Redirection.SourceTabId">
            <summary>
            The redirection's match source tab. if this value is Null.NullInteger(-1) means should redirect when request the whole current portal;
            otherwise means this redirection will be available for the specific tab.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.Redirection.IncludeChildTabs">
            <summary>
            This value will be available when SourceTabId have a specific value, in that way when this value is true, page will rediect
            to target when request source tab and all child tabs under source tab.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.Redirection.Type">
            <summary>
            Redirection Type: Mobile, Tablet, Both or Other.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.Redirection.MatchRules">
            <summary>
            When redirection type is RedirectionType.Other, should use this collection to match the request by capability info.
            </summary>        
        </member>
        <member name="P:DotNetNuke.Services.Mobile.Redirection.TargetType">
            <summary>
            Redirection's target type, should be: Portal, Tab, Url
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.Redirection.TargetValue">
            <summary>
            the redirection's target value, this value will determine by TargetType as:
            <list type="bullet">
            <item>TargetType.Portal: this value should be a portal id.</item>
            <item>TargetType.Tab: this value should be a tab id.</item>
            <item>TargetType.Url: this value should be a valid url.</item>
            </list>
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.Redirection.Enabled">
            <summary>
            Whether this redirection is available.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.Redirection.SortOrder">
            <summary>
            Redirection's piority.
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mobile.Redirection.KeyID">
            <summary>
            IHydratable.KeyID.
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.Mobile.Redirection.Fill(System.Data.IDataReader)">
            <summary>
            Fill the object with data from database.
            </summary>
            <param name="dr">the data reader.</param>
        </member>
        <member name="M:DotNetNuke.Services.Mobile.RedirectionController.IsRedirectAllowedForTheSession(System.Web.HttpApplication)">
            <summary>
            Is Redirection Allowed for the session. Method analyzes the query string for special parameters to enable / disable redirects.
            Cookie is created to temporarily store those parameters so that they remain available till the interactions are active.
            </summary>
            <returns>boolean - True if redirection </returns>
            <param name="app">app - HttpApplication. Request and Response properties are used</param>
        </member>
        <member name="M:DotNetNuke.Services.Mobile.RedirectionController.GetRedirectUrl(System.String)">
            <summary>
            Get Redirection Url based on UserAgent.         
            </summary>
            <returns>string - Empty if redirection rules are not defined or no match found</returns>
            <param name="userAgent">User Agent - used for client capability detection.</param>
        </member>
        <member name="M:DotNetNuke.Services.Mobile.RedirectionController.GetRedirectUrl(System.String,System.Int32,System.Int32)">
            <summary>
            Get Redirection Url based on Http Context and Portal Id.         
            </summary>
            <returns>string - Empty if redirection rules are not defined or no match found</returns>
            <param name="userAgent">User Agent - used for client capability detection.</param>
            <param name="portalId">Portal Id from which Redirection Rules should be applied.</param>
            <param name="currentTabId">Current Tab Id that needs to be evaluated.</param>        
        </member>
        <member name="M:DotNetNuke.Services.Mobile.RedirectionController.GetFullSiteUrl">
            <summary>
            Get Url for the equivalent full site based on the current page of the mobile site
            </summary>
            <returns>string - Empty if redirection rules are not defined or no match found</returns>
        </member>
        <member name="M:DotNetNuke.Services.Mobile.RedirectionController.GetFullSiteUrl(System.Int32,System.Int32)">
            <summary>
            Get Url for the equivalent full site based on the current page of the mobile site
            </summary>
            <returns>string - Empty if redirection rules are not defined or no match found</returns>        
            <param name="portalId">Portal Id from which Redirection Rules should be applied.</param>
            <param name="currentTabId">Current Tab Id that needs to be evaluated.</param>        
        </member>
        <member name="M:DotNetNuke.Services.Mobile.RedirectionController.GetMobileSiteUrl">
            <summary>
            Get Url for the equivalent mobile site based on the current page of the full site
            </summary>
            <returns>string - Empty if redirection rules are not defined or no match found</returns>
        </member>
        <member name="M:DotNetNuke.Services.Mobile.RedirectionController.GetMobileSiteUrl(System.Int32,System.Int32)">
            <summary>
            Get Url for the equivalent mobile site based on the current page of the full site
            </summary>
            <returns>string - Empty if redirection rules are not defined or no match found</returns>        
            <param name="portalId">Portal Id from which Redirection Rules should be applied.</param>
            <param name="currentTabId">Current Tab Id that needs to be evaluated.</param>        
        </member>
        <member name="M:DotNetNuke.Services.Mobile.RedirectionController.Save(DotNetNuke.Services.Mobile.IRedirection)">
            <summary>
            save a redirection. If redirection.Id equals Null.NullInteger(-1), that means need to add a new redirection;
            otherwise will update the redirection by redirection.Id.
            </summary>
            <param name="redirection">redirection object.</param>
        </member>
        <member name="M:DotNetNuke.Services.Mobile.RedirectionController.PurgeInvalidRedirections(System.Int32)">
            <summary>
            Deletes all redirection rules that were set for pages that have been soft or hard deleted.
            </summary>
            <param name="portalId"></param>
        </member>
        <member name="M:DotNetNuke.Services.Mobile.RedirectionController.Delete(System.Int32,System.Int32)">
            <summary>
            delete a redirection.
            </summary>
            <param name="portalId">Portal's id.</param>
            <param name="id">the redirection's id.</param>
        </member>
        <member name="M:DotNetNuke.Services.Mobile.RedirectionController.DeleteRule(System.Int32,System.Int32,System.Int32)">
            <summary>
            delete a redirection's match rule.
            </summary>
            <param name="portalId">Portal's id.</param>
            <param name="redirectionId">the redirection's id.</param>
            <param name="ruleId">the rule's id.</param>
        </member>
        <member name="M:DotNetNuke.Services.Mobile.RedirectionController.GetAllRedirections">
            <summary>
            get all redirections defined in system.
            </summary>        
            <returns>List of redirection.</returns>
        </member>
        <member name="M:DotNetNuke.Services.Mobile.RedirectionController.GetRedirectionsByPortal(System.Int32)">
            <summary>
            get a redirection list for portal.
            </summary>
            <param name="portalId">redirection id.</param>
            <returns>List of redirection.</returns>
        </member>
        <member name="M:DotNetNuke.Services.Mobile.RedirectionController.GetRedirectionById(System.Int32,System.Int32)">
            <summary>
            get a specific redirection by id.
            </summary>
            <param name="portalId">the redirection belong's portal.</param>
            <param name="id">redirection's id.</param>
            <returns>redirection object.</returns>
        </member>
        <member name="M:DotNetNuke.Services.Mobile.RedirectionController.GetRedirectUrlFromRule(DotNetNuke.Services.Mobile.IRedirection,System.Int32,System.Int32)">
            <summary>
            returns a target URL for the specific redirection
            </summary>
            <param name="redirection"></param>
            <param name="portalId"></param>
            <param name="currentTabId"></param>
            <returns></returns>
        </member>
        <member name="F:DotNetNuke.Services.Mobile.RedirectionType.MobilePhone">
            <summary>
            Redirect when request from a mobile phone
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Mobile.RedirectionType.Tablet">
            <summary>
            Redirect when request from a tablet
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Mobile.RedirectionType.AllMobile">
            <summary>
            Redirect when request from either a mobile phone or a tablet
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Mobile.RedirectionType.Other">
            <summary>
            Redirect when request from some unknown device, should be determine by match rules; 
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Mobile.RedirectionType.SmartPhone">
            <summary>
            Redirect when request from a smart phone
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Mobile.TargetType.Portal">
            <summary>
            Redirect when request from a mobile
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Mobile.TargetType.Tab">
            <summary>
            Redirect when request from a tablet
            </summary>
        </member>
        <member name="F:DotNetNuke.Services.Mobile.TargetType.Url">
            <summary>
            Redirect when request from some unknown device, should be determine by match rules; 
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.SystemDateTime.SystemDateTime">
            <summary>
            The SystemDateTime provides static method to obtain System's Time.
            </summary>
            <remarks>
            DateTime information is collected from Database. The methods are created to find one unified timestamp from database
            as opposed to depending on web server's timestamp. This method becomes more relevant in a web farm configuration
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.SystemDateTime.SystemDateTime.GetCurrentTime">
            -----------------------------------------------------------------------------
            <summary>
            GetCurrentTime get current time from database
            </summary>
            <returns>DateTime</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.EventQueue.EventMessageProcessorBase">
            <summary>
            Basic class of EventMessageProcessor.
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.EventQueue.EventQueueController">
            <summary>
            EventQueueController provides business layer of event queue.
            </summary>
            <remarks>
            Sometimes when your module running in DotNetNuke,and contains some operats didn't want to execute immediately.
            e.g: after your module installed into system, and some component you want to registed when the application restart, 
            you can send an 'Application_Start' message, so your specific operation will be executed when application has been restart.
            </remarks>
            <example>
            <code lang="C#">
            var oAppStartMessage = new EventMessage
            {
                Sender = sender,
                Priority = MessagePriority.High,
                ExpirationDate = DateTime.Now.AddYears(-1),
                SentDate = DateTime.Now,
                Body = "",
                ProcessorType = "DotNetNuke.Entities.Modules.EventMessageProcessor, DotNetNuke",
                ProcessorCommand = "UpdateSupportedFeatures"
            };
            oAppStartMessage.Attributes.Add("BusinessControllerClass", desktopModuleInfo.BusinessControllerClass);
            oAppStartMessage.Attributes.Add("DesktopModuleId", desktopModuleInfo.DesktopModuleID.ToString());
            EventQueueController.SendMessage(oAppStartMessage, "Application_Start");
            if ((forceAppRestart))
            {
                Config.Touch();
            }
            </code>
            </example>
        </member>
        <member name="M:DotNetNuke.Services.EventQueue.EventQueueController.GetMessages(System.String)">
            <summary>
            Gets the messages.
            </summary>
            <param name="eventName">Name of the event.</param>
            <returns>event message collection.</returns>
        </member>
        <member name="M:DotNetNuke.Services.EventQueue.EventQueueController.GetMessages(System.String,System.String)">
            <summary>
            Gets the messages.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="subscriberId">The subscriber id.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.EventQueue.EventQueueController.ProcessMessages(System.String)">
            <summary>
            Processes the messages.
            </summary>
            <param name="eventName">Name of the event.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.EventQueue.EventQueueController.ProcessMessages(System.String,System.String)">
            <summary>
            Processes the messages.
            </summary>
            <param name="eventName">Name of the event.</param>
            <param name="subscriberId">The subscriber id.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.EventQueue.EventQueueController.ProcessMessages(DotNetNuke.Services.EventQueue.EventMessageCollection)">
            <summary>
            Processes the messages.
            </summary>
            <param name="eventMessages">The event messages.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.EventQueue.EventQueueController.SendMessage(DotNetNuke.Services.EventQueue.EventMessage,System.String)">
            <summary>
            Sends the message.
            </summary>
            <param name="message">The message.</param>
            <param name="eventName">Name of the event.</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Mail.Mail.SendMail(DotNetNuke.Entities.Users.UserInfo,DotNetNuke.Services.Mail.MessageType,DotNetNuke.Entities.Portals.PortalSettings)">
            -----------------------------------------------------------------------------
            <summary>
            <summary>Send an email notification</summary>
            </summary>
            <param name="user">The user to whom the message is being sent</param>
            <param name="msgType">The type of message being sent</param>
            <param name="settings">Portal Settings</param>
            <returns></returns>
            <remarks></remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Mail.Mail.SendMail(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            <summary>Send a simple email.</summary>
            </summary>
            <param name="mailFrom"></param>
            <param name="mailTo"></param>
            <param name="bcc"></param>
            <param name="subject"></param>
            <param name="body"></param>
            <param name="attachment"></param>
            <param name="bodyType"></param>
            <param name="smtpServer"></param>
            <param name="smtpAuthentication"></param>
            <param name="smtpUsername"></param>
            <param name="smtpPassword"></param>
            <returns></returns>
            <remarks></remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Mail.Mail.SendMail(System.String,System.String,System.String,System.String,DotNetNuke.Services.Mail.MailPriority,System.String,DotNetNuke.Services.Mail.MailFormat,System.Text.Encoding,System.String,System.String,System.String,System.String,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>Send a simple email.</summary>
            <param name="mailFrom"></param>
            <param name="mailTo"></param>
            <param name="cc"></param>
            <param name="bcc"></param>
            <param name="priority"></param>
            <param name="subject"></param>
            <param name="bodyFormat"></param>
            <param name="bodyEncoding"></param>
            <param name="body"></param>
            <param name="attachment"></param>
            <param name="smtpServer"></param>
            <param name="smtpAuthentication"></param>
            <param name="smtpUsername"></param>
            <param name="smtpPassword"></param>
            <returns></returns>
            <remarks></remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.Services.Mail.Mail.SendMail(System.String,System.String,System.String,System.String,System.String,DotNetNuke.Services.Mail.MailPriority,System.String,DotNetNuke.Services.Mail.MailFormat,System.Text.Encoding,System.String,System.String[],System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Sends an email based on params.
            </summary>
            <param name="mailFrom">Email sender</param>
            <param name="mailTo">Recipients, can be more then one separated by semi-colons</param>
            <param name="cc">CC-recipients, can be more then one separated by semi-colons</param>
            <param name="bcc">BCC-recipients, can be more then one separated by semi-colons</param>
            <param name="replyTo">Reply-to email to be displayed for recipients</param>
            <param name="priority"><see cref="T:DotNetNuke.Services.Mail.MailPriority"/></param>
            <param name="subject">Subject of email</param>
            <param name="bodyFormat"><see cref="T:DotNetNuke.Services.Mail.MailFormat"/></param>
            <param name="bodyEncoding">Email Encoding from System.Text.Encoding</param>
            <param name="body">Body of email</param>
            <param name="attachments">List of filenames to attach to email</param>
            <param name="smtpServer">IP or ServerName of the SMTP server. When empty or null, then it takes from the HostSettings</param>
            <param name="smtpAuthentication">SMTP authentication method. Can be "0" - anonymous, "1" - basic, "2" - NTLM. When empty or null, then it takes from the HostSettings.</param>
            <param name="smtpUsername">SMTP authentication UserName. When empty or null, then it takes from the HostSettings.</param>
            <param name="smtpPassword">SMTP authentication Password. When empty or null, then it takes from the HostSettings.</param>
            <param name="smtpEnableSSL">Enable or disable SSL.</param>
            <returns>Returns an empty string on success mail sending. Otherwise returns an error description.</returns>
            <example>SendMail(	"admin@email.com",
            					"user@email.com",
            					"user1@email.com;user2@email.com",
            					"user3@email.com",
            					"no-reply@email.com",
            					MailPriority.Low,
            					"This is test email",
            					MailFormat.Text,
            					Encoding.UTF8,
            					"Test body. Test body. Test body.",
            					new string[] {"d:\documents\doc1.doc","d:\documents\doc2.doc"},
            					"mail.email.com",
            					"1",
            					"admin@email.com",
            					"AdminPassword",
            					false);
            </example>
        </member>
        <member name="T:DotNetNuke.Services.Mail.MailFormat">
            <summary>
            Enum MailFormat, possible values: Text and Html
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Mail.MailPriority">
            <summary>
            Enum MailPriority, there are 3 levels of priorities: Normal, Low or High
            </summary>
        </member>
        <member name="T:DotNetNuke.Services.Mail.SendTokenizedBulkEmail">
            -----------------------------------------------------------------------------
            <summary>
            SendTokenizedBulkEmail Class is a class to manage the sending of bulk mails
            that contains tokens, which might be replaced with individual user properties
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.AddressMethods">
            <summary>
            Addressing Methods (personalized or hidden)
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.Priority">
            <summary>
            Priority of emails to be sent
            </summary>
        </member>
        <member name="P:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.Subject">
            <summary>
            Subject of the emails to be sent
            </summary>
            <remarks>may contain tokens</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.Body">
            <summary>
            body text of the email to be sent
            </summary>
            <remarks>may contain HTML tags and tokens. Side effect: sets BodyFormat autmatically</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.BodyFormat">
            <summary>format of body text for the email to be sent.</summary>
            <remarks>by default activated, if tokens are found in Body and subject.</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.AddressMethod">
            <summary>address method for the email to be sent (TO or BCC)</summary>
            <remarks>TO is default value</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.PortalAlias">
            <summary>portal alias http path to be used for links to images, ...</summary>
        </member>
        <member name="P:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.SendingUser">
            <summary>UserInfo of the user sending the mail</summary>
            <remarks>if not set explicitely, currentuser will be used</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.ReplyTo">
            <summary>email of the user to be shown in the mail as replyTo address</summary>
            <remarks>if not set explicitely, sendingUser will be used</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.RemoveDuplicates">
            <summary>shall duplicate email addresses be ignored? (default value: false)</summary>
            <remarks>Duplicate Users (e.g. from multiple role selections) will always be ignored.</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.SuppressTokenReplace">
            <summary>Shall automatic TokenReplace be prohibited?</summary>
            <remarks>default value: false</remarks>
        </member>
        <member name="P:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.ReportRecipients">
            <summary>Shall List of recipients appended to confirmation report?</summary>
            <remarks>enabled by default.</remarks>
        </member>
        <member name="M:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.Initialize">
            <summary>internal method to initialize used objects, depending on parameters of construct method</summary>
        </member>
        <member name="M:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.SendConfirmationMail(System.Int32,System.Int32,System.Int32,System.String,System.String,System.String,System.String)">
            <summary>Send bulkmail confirmation to admin</summary>
            <param name="numRecipients">number of email recipients</param>
            <param name="numMessages">number of messages sent, -1 if not determinable</param>
            <param name="numErrors">number of emails not sent</param>
            <param name="subject">Subject of BulkMail sent (to be used as reference)</param>
            <param name="startedAt">date/time, sendout started</param>
            <param name="mailErrors">mail error texts</param>
            <param name="recipientList">List of recipients as formatted string</param>
            <remarks></remarks>
        </member>
        <member name="M:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.MatchLanguageFilter(System.String)">
            <summary>check, if the user's language matches the current language filter</summary>
            <param name="userLanguage">Language of the user</param>
            <returns>userlanguage matches current languageFilter</returns>
            <remarks>if filter not set, true is returned</remarks>
        </member>
        <member name="M:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.ConditionallyAddUser(DotNetNuke.Entities.Users.UserInfo,System.Collections.Generic.List{System.String}@,System.Collections.Generic.List{DotNetNuke.Entities.Users.UserInfo}@)">
            <summary>add a user to the userlist, if it is not already in there</summary>
            <param name="user">user to add</param>
            <param name="keyList">list of key (either email addresses or userid's)</param>
            <param name="userList">List of users</param>
            <remarks>for use by Recipients method only</remarks>
        </member>
        <member name="M:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.SetSMTPServer(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>Specify SMTP server to be used</summary>
            <param name="smtpServer">name of the SMTP server</param>
            <param name="smtpAuthentication">authentication string (0: anonymous, 1: basic, 2: NTLM)</param>
            <param name="smtpUsername">username to log in SMTP server</param>
            <param name="smtpPassword">password to log in SMTP server</param>
            <param name="smtpEnableSSL">SSL used to connect tp SMTP server</param>
            <returns>always true</returns>
            <remarks>if not called, values will be taken from host settings</remarks>
        </member>
        <member name="M:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.AddAttachment(System.String)">
            <summary>Add a single attachment file to the email</summary>
            <param name="localPath">path to file to attach</param>
            <remarks>only local stored files can be added with a path</remarks>
        </member>
        <member name="M:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.AddAddressedUser(DotNetNuke.Entities.Users.UserInfo)">
            <summary>Add a single recipient</summary>
            <param name="recipient">userinfo of user to add</param>
            <remarks>emaiol will be used for addressing, other properties might be used for TokenReplace</remarks>
        </member>
        <member name="M:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.AddAddressedRole(System.String)">
            <summary>Add all members of a role to recipient list</summary>
            <param name="roleName">name of a role, whose members shall be added to recipients</param>
            <remarks>emaiol will be used for addressing, other properties might be used for TokenReplace</remarks>
        </member>
        <member name="M:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.Recipients">
            <summary>All bulk mail recipients, derived from role names and individual adressees </summary>
            <returns>List of userInfo objects, who receive the bulk mail </returns>
            <remarks>user.Email used for sending, other properties might be used for TokenReplace</remarks>
        </member>
        <member name="M:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.SendMails">
            <summary>Send bulkmail to all recipients according to settings</summary>
            <returns>Number of emails sent, null.integer if not determinable</returns>
            <remarks>Detailed status report is sent by email to sending user</remarks>
        </member>
        <member name="M:DotNetNuke.Services.Mail.SendTokenizedBulkEmail.Send">
            <summary>Wrapper for Function SendMails</summary>
        </member>
        <member name="T:DotNetNuke.Services.Messaging.Data.Message">
            -----------------------------------------------------------------------------
            <summary>
              The Info class for Messaging
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.Services.Personalization.Personalization.GetProfile(System.String,System.String)">
            <summary>
            load users profile and extract value base on naming container and key
            </summary>
            <param name="namingContainer">Container for related set of values</param>
            <param name="key">Individual profile key</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Personalization.Personalization.GetProfile(DotNetNuke.Services.Personalization.PersonalizationInfo,System.String,System.String)">
            <summary>
            extract value base on naming container and key from PersonalizationInfo object
            </summary>
            <param name="personalization">Object containing user personalization info</param>
            <param name="namingContainer">Container for related set of values</param>
            <param name="key">Individual profile key</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Personalization.Personalization.GetSecureProfile(System.String,System.String)">
            <summary>
            load users profile and extract secure value base on naming container and key
            </summary>
            <param name="namingContainer">Container for related set of values</param>
            <param name="key">Individual profile key</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Personalization.Personalization.GetSecureProfile(DotNetNuke.Services.Personalization.PersonalizationInfo,System.String,System.String)">
            <summary>
            extract value base on naming container and key from PersonalizationInfo object
            function will automatically decrypt value to plaintext
            </summary>
            <param name="personalization">Object containing user personalization info</param>
            <param name="namingContainer">Container for related set of values</param>
            <param name="key">Individual profile key</param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.Services.Personalization.Personalization.RemoveProfile(System.String,System.String)">
            <summary>
            remove value from profile
            uses namingcontainer and key to locate approriate value
            </summary>
            <param name="namingContainer">Container for related set of values</param>
            <param name="key">Individual profile key</param>
        </member>
        <member name="M:DotNetNuke.Services.Personalization.Personalization.RemoveProfile(DotNetNuke.Services.Personalization.PersonalizationInfo,System.String,System.String)">
            <summary>
            remove value from users PersonalizationInfo object (if it exists)
            uses namingcontainer and key to locate approriate value
            </summary>
            <param name="personalization">Object containing user personalization info</param>
            <param name="namingContainer">Container for related set of values</param>
            <param name="key">Individual profile key</param>
        </member>
        <member name="M:DotNetNuke.Services.Personalization.Personalization.SetProfile(System.String,System.String,System.Object)">
            <summary>
            persist profile value -use naming container and key to orgainize
            </summary>
            <param name="namingContainer">Container for related set of values</param>
            <param name="key">Individual profile key</param>
            <param name="value">Individual profile value</param>
        </member>
        <member name="M:DotNetNuke.Services.Personalization.Personalization.SetProfile(DotNetNuke.Services.Personalization.PersonalizationInfo,System.String,System.String,System.Object)">
            <summary>
            persist value stored in PersonalizationInfo obhect - use naming container and key to organize
            </summary>
            <param name="personalization">Object containing user personalization info</param>
            <param name="namingContainer">Container for related set of values</param>
            <param name="key">Individual profile key</param>
            <param name="value">Individual profile value</param>
        </member>
        <member name="M:DotNetNuke.Services.Personalization.Personalization.SetSecureProfile(System.String,System.String,System.Object)">
            <summary>
            persist profile value -use naming container and key to orgainize
            function calls an overload which automatically encrypts the value
            </summary>
            <param name="namingContainer">Object containing user personalization info</param>
            <param name="key">Individual profile key</param>
            <param name="value">Individual profile value</param>
        </member>
        <member name="M:DotNetNuke.Services.Personalization.Personalization.SetSecureProfile(DotNetNuke.Services.Personalization.PersonalizationInfo,System.String,System.String,System.Object)">
            <summary>
            persist profile value from PersonalizationInfo object, using naming container and key to organise 
            function will automatically encrypt the value to plaintext
            </summary>
            <param name="personalization">Object containing user personalization info</param>
            <param name="namingContainer">Container for related set of values</param>
            <param name="key">Individual profile key</param>
            <param name="value">Individual profile value</param>
        </member>
        <member name="M:DotNetNuke.Services.Syndication.RssHandler.PopulateChannel(System.String,System.String)">
            <summary>
            This method
            </summary>
            <param name="channelName"></param>
            <param name="userName"></param>
            <remarks></remarks>
        </member>
        <member name="M:DotNetNuke.Services.Syndication.RssHandler.GetRssItem(DotNetNuke.Services.Search.Entities.SearchResult)">
            <summary>
            Creates an RSS Item
            </summary>
            <param name="searchResult"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:DotNetNuke.Services.Syndication.RssHandler.OnPreRender(System.EventArgs)">
            <summary>
            The PreRender event is used to set the Caching Policy for the Feed.  This mimics the behavior from the 
            OutputCache directive in the old Rss.aspx file.  @OutputCache Duration="60" VaryByParam="moduleid" 
            </summary>
            <param name="ea">Event Args.</param>
            <remarks></remarks>
        </member>
        <member name="M:DotNetNuke.Services.UserProfile.UserProfilePageHandler.ProcessRequest(System.Web.HttpContext)">
            -----------------------------------------------------------------------------
            <summary>
              This handler handles requests for LinkClick.aspx, but only those specifc
              to file serving
            </summary>
            <param name = "context">System.Web.HttpContext)</param>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.Services.UserRequest.IPAddressFamily">
            <summary>
            IP address family
            </summary>
        </member>
        <member name="M:DotNetNuke.Services.UserRequest.IUserRequestIPAddressController.GetUserRequestIPAddress(System.Web.HttpRequestBase)">
            <summary>
             To retrieve IPv4 of user making request to application.
            </summary>
            <param name="request"></param>
            <returns>IP address</returns>
        </member>
        <member name="M:DotNetNuke.Services.UserRequest.IUserRequestIPAddressController.GetUserRequestIPAddress(System.Web.HttpRequestBase,DotNetNuke.Services.UserRequest.IPAddressFamily)">
            <summary>
             To retrieve IPv4/IPv6 of user making request to application
            </summary>
            <param name="request"></param>
            <param name="ipFamily"></param>
            <returns>IP address</returns>
        </member>
        <member name="T:DotNetNuke.Services.Zip.SharpZipLibRedirect">
             <summary>
             This class contains a fix for a breaking upgrade in DNN 9.2 regarding the ZIP.
             It is in charge of fixing an assembly rename which was necessary when DNN
             upgraded from an older SharpZipLib with a different DLL name. 
             </summary>
             <remarks>
             The class in this folder will be used by.net when an assembly is missing.
             It will then check if .net was looking for SharpZipLib, and if necessary,
             redirect it to the correct (new) assembly.
            
             Once this remapping has been completed, this code will not be used again until the next
             restart of the DNN application. 
             
             final solution taken from https://raw.githubusercontent.com/2sic/2sxc/master/2sxc%20Dnn/Dnn920/SharpZipLibRedirect.cs
             </remarks>
        </member>
        <member name="M:DotNetNuke.Services.Zip.SharpZipLibRedirect.RegisterSharpZipLibRedirect">
            <summary>
            Registration call - should only be called once
            Has extra security to prevent it from running multiple times
            </summary>
        </member>
        <member name="T:DotNetNuke.UI.Containers.ActionBase">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.UI.Containers
            Class	 : ActionBase
            -----------------------------------------------------------------------------
            <summary>
            ActionBase is an abstract base control for Action objects that inherit from UserControl.
            </summary>
            <remarks>
            ActionBase inherits from UserControl, and implements the IActionControl Interface
            </remarks>
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionBase.Actions">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Actions Collection
            </summary>
            <returns>A ModuleActionCollection</returns>
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionBase.ActionRoot">
            -----------------------------------------------------------------------------
            <summary>
            Gets the ActionRoot
            </summary>
            <returns>A ModuleActionCollection</returns>
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionBase.ModuleContext">
            -----------------------------------------------------------------------------
            <summary>
            Gets the ModuleContext
            </summary>
            <returns>A ModuleInstanceContext</returns>
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionBase.PortalSettings">
            -----------------------------------------------------------------------------
            <summary>
            Gets the PortalSettings
            </summary>
            <returns>A PortalSettings object</returns>
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionBase.ActionManager">
            -----------------------------------------------------------------------------
            <summary>
            Gets the ActionManager instance for this Action control
            </summary>
            <returns>An ActionManager object</returns>
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionBase.ModuleControl">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the ModuleControl instance for this Action control
            </summary>
            <returns>An IModuleControl object</returns>
        </member>
        <member name="M:DotNetNuke.UI.Containers.ActionBase.DisplayControl(DotNetNuke.UI.WebControls.DNNNodeCollection)">
            -----------------------------------------------------------------------------
            <summary>
            DisplayControl determines whether the control should be displayed
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.Containers.ActionBase.OnAction(DotNetNuke.Entities.Modules.Actions.ActionEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnAction raises the Action Event for this control
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.Containers.ActionBase.ProcessAction(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            ProcessAction processes the action event
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.Containers.ActionBase.OnLoad(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Page_Load runs when the class is loaded
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:DotNetNuke.UI.Containers.ActionButton">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.UI.Containers
            Class	 : ActionButton
            -----------------------------------------------------------------------------
            <summary>
              ActionButton provides a button (or group of buttons) for action(s).
            </summary>
            <remarks>
              ActionBase inherits from UserControl, and implements the IActionControl Interface.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionButton.CommandName">
            -----------------------------------------------------------------------------
            <summary>
              Gets or sets the Command Name
            </summary>
            <remarks>
              Maps to ModuleActionType in DotNetNuke.Entities.Modules.Actions
            </remarks>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionButton.CssClass">
            -----------------------------------------------------------------------------
            <summary>
              Gets or sets the CSS Class
            </summary>
            <remarks>
              Defaults to 'CommandButton'
            </remarks>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionButton.DisplayLink">
            -----------------------------------------------------------------------------
            <summary>
              Gets or sets whether the link is displayed
            </summary>
            <remarks>
              Defaults to True
            </remarks>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionButton.DisplayIcon">
            -----------------------------------------------------------------------------
            <summary>
              Gets or sets whether the icon is displayed
            </summary>
            <remarks>
              Defaults to False
            </remarks>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionButton.IconFile">
            -----------------------------------------------------------------------------
            <summary>
              Gets or sets the Icon used
            </summary>
            <remarks>
              Defaults to the icon defined in Action
            </remarks>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionButton.ButtonSeparator">
            -----------------------------------------------------------------------------
            <summary>
              Gets or sets the Separator between Buttons
            </summary>
            <remarks>
              Defaults to 2 non-breaking spaces
            </remarks>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Containers.ActionButton.Action_Click(System.Object,DotNetNuke.Entities.Modules.Actions.ActionEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
              Action_Click responds to an Action Event in the contained actionButtonList
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Containers.ActionButton.CreateChildControls">
            -----------------------------------------------------------------------------
            <summary>
              CreateChildControls builds the control tree
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.Containers.ActionButtonList">
            <summary>
            ActionButtonList provides a list of buttons for a group of actions of the same type.
            </summary>
            <remarks>
            ActionButtonList inherits from CompositeControl, and implements the IActionControl
            Interface.  It uses a single ActionCommandButton for each Action.
            </remarks>
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionButtonList.ModuleActions">
            -----------------------------------------------------------------------------
            <summary>
            Gets the ModuleActionCollection to bind to the list
            </summary>
            <value>A ModuleActionCollection</value>
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionButtonList.ButtonSeparator">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets the Separator between Buttons
            </summary>
            <remarks>Defaults to 2 non-breaking spaces</remarks>
            <value>A String</value>
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionButtonList.CommandName">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets the Command Name
            </summary>
            <remarks>Maps to ModuleActionType in DotNetNuke.Entities.Modules.Actions</remarks>
            <value>A String</value>
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionButtonList.DisplayIcon">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets whether the icon is displayed
            </summary>
            <remarks>Defaults to False</remarks>
            <value>A Boolean</value>
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionButtonList.DisplayLink">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets whether the link is displayed
            </summary>
            <remarks>Defaults to True</remarks>
            <value>A Boolean</value>
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionButtonList.ImageURL">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets the Icon used
            </summary>
            <remarks>Defaults to the icon defined in Action</remarks>
            <value>A String</value>
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionButtonList.ActionManager">
            -----------------------------------------------------------------------------
            <summary>
            Gets the ActionManager instance for this Action control
            </summary>
            <returns>An ActionManager object</returns>
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionButtonList.ModuleControl">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the ModuleControl instance for this Action control
            </summary>
            <returns>An IModuleControl object</returns>
        </member>
        <member name="M:DotNetNuke.UI.Containers.ActionButtonList.OnAction(DotNetNuke.Entities.Modules.Actions.ActionEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnAction raises the Action Event
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.Containers.ActionButtonList.OnLoad(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnLoad runs when the control is loaded into the Control Tree
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.Containers.ActionButtonList.ActionButtonClick(System.Object,DotNetNuke.Entities.Modules.Actions.ActionEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            ActionButtonClick handles the Action event of the contained ActionCommandButton(s)
            </summary>
        </member>
        <member name="T:DotNetNuke.UI.Containers.ActionCommandButton">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.UI.Containers
            Class	 : ActionCommandButton
            -----------------------------------------------------------------------------
            <summary>
            ActionCommandButton provides a button for a single action.
            </summary>
            <remarks>
            ActionBase inherits from CommandButton, and implements the IActionControl Interface.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionCommandButton.ModuleAction">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the ModuleAction for this Action control
            </summary>
            <returns>A ModuleAction object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionCommandButton.ActionManager">
            -----------------------------------------------------------------------------
            <summary>
            Gets the ActionManager instance for this Action control
            </summary>
            <returns>An ActionManager object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionCommandButton.ModuleControl">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the ModuleControl instance for this Action control
            </summary>
            <returns>An IModuleControl object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Containers.ActionCommandButton.CreateChildControls">
            -----------------------------------------------------------------------------
            <summary>
            CreateChildControls builds the control tree
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Containers.ActionCommandButton.OnAction(DotNetNuke.Entities.Modules.Actions.ActionEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnAction raises the Action Event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Containers.ActionCommandButton.OnButtonClick(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnButtonClick runs when the underlying CommandButton is clicked
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Containers.ActionCommandButton.OnPreRender(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnPreRender runs when just before the Render phase of the Page Lifecycle
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.Containers.ActionManager">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.UI.Containers
            Class	 : ActionManager
            -----------------------------------------------------------------------------
            <summary>
            ActionManager is a helper class that provides common Action Behaviours that can
            be used by any IActionControl implementation
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Containers.ActionManager.#ctor(DotNetNuke.UI.Containers.IActionControl)">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a new ActionManager
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionManager.ActionControl">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Action Control that is connected to this ActionManager instance
            </summary>
            <returns>An IActionControl object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionManager.ModuleContext">
            -----------------------------------------------------------------------------
            <summary>
            Gets the ModuleInstanceContext instance that is connected to this ActionManager 
            instance
            </summary>
            <returns>A ModuleInstanceContext object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Containers.ActionManager.DisplayControl(DotNetNuke.UI.WebControls.DNNNodeCollection)">
            -----------------------------------------------------------------------------
            <summary>
            DisplayControl determines whether the associated Action control should be 
            displayed
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Containers.ActionManager.GetAction(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            GetAction gets the action associated with the commandName
            </summary>
            <param name="commandName">The command name</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Containers.ActionManager.GetAction(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetAction gets the action associated with the id
            </summary>
            <param name="id">The Id</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Containers.ActionManager.GetClientScriptURL(DotNetNuke.Entities.Modules.Actions.ModuleAction,System.Web.UI.WebControls.WebControl)">
            -----------------------------------------------------------------------------
            <summary>
            GetClientScriptURL gets the client script to attach to the control's client 
            side onclick event
            </summary>
            <param name="action">The Action</param>
            <param name="control">The Control</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Containers.ActionManager.IsVisible(DotNetNuke.Entities.Modules.Actions.ModuleAction)">
            -----------------------------------------------------------------------------
            <summary>
            IsVisible determines whether the action control is Visible
            </summary>
            <param name="action">The Action</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Containers.ActionManager.ProcessAction(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            ProcessAction processes the action
            </summary>
            <param name="id">The Id of the Action</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Containers.ActionManager.ProcessAction(DotNetNuke.Entities.Modules.Actions.ModuleAction)">
            -----------------------------------------------------------------------------
            <summary>
            ProcessAction processes the action
            </summary>
            <param name="action">The Action</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.Containers.ActionsMenu">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.UI.Containers
            Class	 : ActionsMenu
            -----------------------------------------------------------------------------
            <summary>
            ActionsMenu provides a menu for a collection of actions.
            </summary>
            <remarks>
            ActionsMenu inherits from CompositeControl, and implements the IActionControl
            Interface. It uses the Navigation Providers to implement the Menu.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionsMenu.ActionRoot">
            -----------------------------------------------------------------------------
            <summary>
            Gets the ActionRoot
            </summary>
            <returns>A ModuleActionCollection</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionsMenu.ProviderControl">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Provider Control
            </summary>
            <returns>A NavigationProvider</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionsMenu.ExpandDepth">
            -----------------------------------------------------------------------------
            <summary>
            Gets and Sets the Expansion Depth for the Control
            </summary>
            <returns>An Integer</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionsMenu.PathSystemScript">
            -----------------------------------------------------------------------------
            <summary>
            Gets and Sets the Path to the Script Library for the provider
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionsMenu.PopulateNodesFromClient">
            -----------------------------------------------------------------------------
            <summary>
            Gets and Sets whether the Menu should be populated from the client
            </summary>
            <returns>A Boolean</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionsMenu.ProviderName">
            -----------------------------------------------------------------------------
            <summary>
            Gets and Sets the Name of the provider to use
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionsMenu.ActionManager">
            -----------------------------------------------------------------------------
            <summary>
            Gets the ActionManager instance for this Action control
            </summary>
            <returns>An ActionManager object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Containers.ActionsMenu.ModuleControl">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the ModuleControl instance for this Action control
            </summary>
            <returns>An IModuleControl object</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Containers.ActionsMenu.BindMenu(DotNetNuke.UI.WebControls.DNNNodeCollection)">
            -----------------------------------------------------------------------------
            <summary>
            BindMenu binds the Navigation Provider to the Node Collection
            </summary>
            <param name="objNodes">The Nodes collection to bind</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Containers.ActionsMenu.ProcessNodes(DotNetNuke.UI.WebControls.DNNNode)">
            -----------------------------------------------------------------------------
            <summary>
            ProcessNodes proceses a single node and its children
            </summary>
            <param name="objParent">The Node to process</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Containers.ActionsMenu.SetMenuDefaults">
            -----------------------------------------------------------------------------
            <summary>
            SetMenuDefaults sets up the default values
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Containers.ActionsMenu.BindMenu">
            -----------------------------------------------------------------------------
            <summary>
            BindMenu binds the Navigation Provider to the Node Collection
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Containers.ActionsMenu.OnAction(DotNetNuke.Entities.Modules.Actions.ActionEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnAction raises the Action Event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Containers.ActionsMenu.OnInit(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnInit runs during the controls initialisation phase
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Containers.ActionsMenu.OnLoad(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnLoad runs during the controls load phase
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Containers.ActionsMenu.OnPreRender(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnPreRender runs during the controls pre-render phase
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Containers.ActionsMenu.MenuItem_Click(DotNetNuke.Modules.NavigationProvider.NavigationEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            MenuItem_Click handles the Menu Click event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Containers.ActionsMenu.ProviderControl_PopulateOnDemand(DotNetNuke.Modules.NavigationProvider.NavigationEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            ProviderControl_PopulateOnDemand handles the Populate On Demand Event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.Containers.Container">
            <summary>
            Container is the base for the Containers
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:DotNetNuke.UI.Containers.Container.ContentPane">
            <summary>
            Gets the Content Pane Control (Id="ContentPane")
            </summary>
            <returns>An HtmlContainerControl</returns>
        </member>
        <member name="P:DotNetNuke.UI.Containers.Container.PortalSettings">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Portal Settings for the current Portal
            </summary>
            <returns>A PortalSettings object</returns>
        </member>
        <member name="P:DotNetNuke.UI.Containers.Container.ModuleControl">
            -----------------------------------------------------------------------------
            <summary>
            Gets the ModuleControl object that this container is displaying
            </summary>
            <returns>A ModuleHost object</returns>
        </member>
        <member name="P:DotNetNuke.UI.Containers.Container.ModuleConfiguration">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the ModuleInfo object that this container is displaying
            </summary>
            <returns>A ModuleInfo object</returns>
        </member>
        <member name="P:DotNetNuke.UI.Containers.Container.ModuleHost">
            -----------------------------------------------------------------------------
            <summary>
            Gets the ModuleHost object that this container is displaying
            </summary>
            <returns>A ModuleHost object</returns>
        </member>
        <member name="P:DotNetNuke.UI.Containers.Container.ParentSkin">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Parent Container for this container
            </summary>
            <returns>A String</returns>
        </member>
        <member name="P:DotNetNuke.UI.Containers.Container.ContainerPath">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Path for this container
            </summary>
            <returns>A String</returns>
        </member>
        <member name="P:DotNetNuke.UI.Containers.Container.ContainerSrc">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Source for this container
            </summary>
            <returns>A String</returns>
        </member>
        <member name="M:DotNetNuke.UI.Containers.Container.ProcessChildControls(System.Web.UI.Control)">
            -----------------------------------------------------------------------------
            <summary>
            ProcessChildControls parses all the controls in the container, and if the
            control is an action (IActionControl) it attaches the ModuleControl (IModuleControl)
            and an EventHandler to respond to the Actions Action event.  If the control is a
            Container Object (IContainerControl) it attaches the ModuleControl.
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.Containers.Container.ProcessContentPane">
            -----------------------------------------------------------------------------
            <summary>
            ProcessContentPane processes the ContentPane, setting its style and other
            attributes.
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.Containers.Container.ProcessFooter">
            -----------------------------------------------------------------------------
            <summary>
            ProcessFooter adds an optional footer (and an End_Module comment)..
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.Containers.Container.ProcessHeader">
            -----------------------------------------------------------------------------
            <summary>
            ProcessHeader adds an optional header (and a Start_Module_ comment)..
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.Containers.Container.ProcessModule">
            -----------------------------------------------------------------------------
            <summary>
            ProcessModule processes the module which is attached to this container
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.Containers.Container.ProcessStylesheets(System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            ProcessStylesheets processes the Module and Container stylesheets and adds
            them to the Page.
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.Containers.Container.OnInit(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnInit runs when the Container is initialised.
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.Containers.Container.OnLoad(System.EventArgs)">
            <summary>
            OnLoad runs when the Container is loaded.
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.Containers.Container.OnPreRender(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnLoad runs just before the Container is rendered.
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.Containers.Container.OnUnload(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnUnLoad runs when the Container is unloaded.
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.Containers.Container.ModuleActionClick(System.Object,DotNetNuke.Entities.Modules.Actions.ActionEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            ModuleAction_Click runs when a ModuleAction is clicked.
            </summary>
            <remarks>The Module Action must be configured to fire an event (it may be configured 
            to redirect to a new url).  The event handler finds the Parent Container and invokes each
            registered ModuleActionEventListener delegate.
            
            Note: with the refactoring of this to the Container, this could be handled at the container level.
            However, for legacy purposes this is left this way, as many modules would have registered their
            listeners on the Container directly, rather than through the helper method in PortalModuleBase.</remarks>
        </member>
        <member name="T:DotNetNuke.UI.Containers.EventListeners.ContainerEventArgs">
            -----------------------------------------------------------------------------
             <summary>
             ContainerEventArgs provides a custom EventARgs class for Container Events
             </summary>
             <remarks></remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.Containers.EventListeners.ContainerEventHandler">
            -----------------------------------------------------------------------------
            <summary>
            The ContainerEventHandler delegate defines a custom event handler for a Container
            Event.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.Containers.EventListeners.ContainerEventType">
            -----------------------------------------------------------------------------
             <summary>
             ContainerEventType provides a custom enum for Container event types
             </summary>
             <remarks></remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.Containers.IActionControl">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.UI.Containers
            Class	 : IActionControl
            -----------------------------------------------------------------------------
            <summary>
            IActionControl provides a common INterface for Action Controls
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.ControlPanels.ControlPanelBase">
            -----------------------------------------------------------------------------
            <summary>
            The ControlPanel class defines a custom base class inherited by all
            ControlPanel controls.
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.ControlPanels.ControlPanelBase.IsVisible">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether the ControlPanel is Visible
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.ControlPanels.ControlPanelBase.PortalSettings">
            -----------------------------------------------------------------------------
            <summary>
            Gets the current Portal Settings
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.ControlPanels.ControlPanelBase.UserMode">
            -----------------------------------------------------------------------------
            <summary>
            Gets the User mode of the Control Panel
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.ControlPanels.ControlPanelBase.LocalResourceFile">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Local ResourceFile for the Control Panel
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.ControlPanels.ControlPanelBase.AddModulePermission(DotNetNuke.Entities.Modules.ModuleInfo,DotNetNuke.Security.Permissions.PermissionInfo,System.Int32,System.Int32,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            Adds a Module Permission
            </summary>
            <param name="objModule">Module Info</param>
            <param name="permission">The permission to add</param>
            <param name="roleId">The Id of the role to add the permission for.</param>
            <param name="userId">Operator</param>
            <param name="allowAccess">Whether allow to access the module</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.ControlPanels.ControlPanelBase.AddExistingModule(System.Int32,System.Int32,System.String,System.Int32,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Adds an Existing Module to a Pane
            </summary>
            <param name="align">The alignment for the Modue</param>
            <param name="moduleId">The Id of the existing module</param>
            <param name="tabId">The id of the tab</param>
            <param name="paneName">The pane to add the module to</param>
            <param name="position">The relative position within the pane for the module</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.ControlPanels.ControlPanelBase.AddNewModule(System.String,System.Int32,System.String,System.Int32,DotNetNuke.UI.ControlPanels.ControlPanelBase.ViewPermissionType,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Adds a New Module to a Pane
            </summary>
            <param name="align">The alignment for the Modue</param>
            <param name="desktopModuleId">The Id of the DesktopModule</param>
            <param name="permissionType">The View Permission Type for the Module</param>
            <param name="title">The Title for the resulting module</param>
            <param name="paneName">The pane to add the module to</param>
            <param name="position">The relative position within the pane for the module</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.ControlPanels.ControlPanelBase.BuildURL(System.Int32,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Builds a URL
            </summary>
            <param name="FriendlyName">The friendly name of the Module</param>
            <param name="PortalID">The ID of the portal</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.ControlPanels.ControlPanelBase.SetUserMode(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Sets the UserMode
            </summary>
            <param name="userMode">The userMode to set</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.ControlPanels.ControlPanelBase.SetVisibleMode(System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            Sets the current Visible Mode
            </summary>
            <param name="isVisible">A flag indicating whether the Control Panel should be visible</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.ControlUtilities.LoadControl``1(System.Web.UI.TemplateControl,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            LoadControl loads a control and returns a reference to the control
            </summary>
            <typeparam name="T">The type of control to Load</typeparam>
            <param name="containerControl">The parent Container Control</param>
            <param name="ControlSrc">The source for the control.  This can either be a User Control (.ascx) or a compiled
            control.</param>
            <returns>A Control of type T</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.Internals.FavIcon">
            <summary>
            Manages the FavIcon of a portal
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.Internals.FavIcon.#ctor(System.Int32)">
            <summary>
            Initializes a FavIcon instance
            </summary>
            <param name="portalId">The id of the portal</param>
        </member>
        <member name="M:DotNetNuke.UI.Internals.FavIcon.GetSettingPath">
            <summary>
            Get the path of the favicon file relative to the portal root
            </summary>
            <remarks>This relative path is only relevant to use with Host/Portal Settings the path is not guaranteed any 
            physical relevance in the local file system</remarks>
            <returns>Path to the favicon file relative to portal root, or empty string when there is no favicon set</returns>
        </member>
        <member name="M:DotNetNuke.UI.Internals.FavIcon.Update(System.Int32)">
            <summary>
            Update the file to use for a favIcon
            </summary>
            <param name="fileId">The file id or Null.NullInteger for none</param>
        </member>
        <member name="M:DotNetNuke.UI.Internals.FavIcon.GetHeaderLink(System.Int32)">
            <summary>
            Get the HTML for a favicon link
            </summary>
            <param name="portalId">The portal id</param>
            <returns>The HTML for the favicon link for the portal, or an empty string if there is no favicon</returns>
        </member>
        <member name="T:DotNetNuke.UI.Modules.CachedModuleControl">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.UI.Modules
            Class	 : CachedModuleControl
            -----------------------------------------------------------------------------
            <summary>
            CachedModuleControl represents a cached "ModuleControl".  It inherits from
            Literal and implements the IModuleControl interface
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Modules.CachedModuleControl.#ctor(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a new CachedModuleControl
            </summary>
            <param name="cachedContent">The cached Content for this control</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Modules.CachedModuleControl.Control">
            -----------------------------------------------------------------------------
            <summary>
            Gets the underlying base control for this ModuleControl
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Modules.CachedModuleControl.ControlPath">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Path for this control (used primarily for UserControls)
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Modules.CachedModuleControl.ControlName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Name for this control
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Modules.CachedModuleControl.LocalResourceFile">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the local resource file for this control
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Modules.CachedModuleControl.ModuleContext">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Module Context for this control
            </summary>
            <returns>A ModuleInstanceContext</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.Modules.IModuleControl">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.UI.Modules
            Class	 : IModuleControl
            -----------------------------------------------------------------------------
            <summary>
            IModuleControl provides a common Interface for Module Controls
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.Modules.ISettingsControl">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.UI.Modules
            Class	 : ISettingsControl
            -----------------------------------------------------------------------------
            <summary>
            ISettingsControl provides a common Interface for Module Settings Controls
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.Modules.ModuleCachingType">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.UI.Modules
            Class	 : ModuleCachingType
            -----------------------------------------------------------------------------
            <summary>
            ModuleCachingType is an enum that provides the caching types for Module Content
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.Modules.ModuleControlBase">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.UI.Modules
            Class	 : ModuleControlBase
            -----------------------------------------------------------------------------
            <summary>
            ModuleControlBase is a base class for Module Controls that inherits from the
            Control base class.  As with all MontrolControl base classes it implements
            IModuleControl.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Modules.ModuleControlBase.Control">
            -----------------------------------------------------------------------------
            <summary>
            Gets the underlying base control for this ModuleControl
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Modules.ModuleControlBase.ControlPath">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Path for this control (used primarily for UserControls)
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Modules.ModuleControlBase.ControlName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Name for this control
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Modules.ModuleControlBase.LocalResourceFile">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the local resource file for this control
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Modules.ModuleControlBase.ModuleContext">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Module Context for this control
            </summary>
            <returns>A ModuleInstanceContext</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.Modules.ModuleHost">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.UI.Modules
            Class	 : ModuleHost
            -----------------------------------------------------------------------------
            <summary>
            ModuleHost hosts a Module Control (or its cached Content).
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.Modules.ModuleHost.#ctor(DotNetNuke.Entities.Modules.ModuleInfo,DotNetNuke.UI.Skins.Skin,DotNetNuke.UI.Containers.Container)">
            -----------------------------------------------------------------------------
            <summary>
            Creates a Module Host control using the ModuleConfiguration for the Module
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:DotNetNuke.UI.Modules.ModuleHost.ModuleControl">
            -----------------------------------------------------------------------------
            <summary>
            Gets the attached ModuleControl
            </summary>
            <returns>An IModuleControl</returns>
        </member>
        <member name="P:DotNetNuke.UI.Modules.ModuleHost.PortalSettings">
            -----------------------------------------------------------------------------
            <summary>
            Gets the current POrtal Settings
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.Modules.ModuleHost.DisplayContent">
            ----------------------------------------------------------------------------
            <summary>
            Gets a flag that indicates whether the Module Content should be displayed
            </summary>
            <returns>A Boolean</returns>
        </member>
        <member name="M:DotNetNuke.UI.Modules.ModuleHost.IsViewMode(DotNetNuke.Entities.Modules.ModuleInfo,DotNetNuke.Entities.Portals.PortalSettings)">
            -----------------------------------------------------------------------------
            <summary>
            Gets a flag that indicates whether the Module is in View Mode
            </summary>
            <returns>A Boolean</returns>
        </member>
        <member name="M:DotNetNuke.UI.Modules.ModuleHost.LoadModuleControl">
            -----------------------------------------------------------------------------
            <summary>
            LoadModuleControl loads the ModuleControl (PortalModuelBase)
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.Modules.ModuleHost.LoadUpdatePanel">
            <summary>
            LoadUpdatePanel optionally loads an AJAX Update Panel
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.Modules.ModuleHost.SupportsCaching">
            -----------------------------------------------------------------------------
            <summary>
            Gets a flag that indicates whether the Module Instance supports Caching
            </summary>
            <returns>A Boolean</returns>
        </member>
        <member name="M:DotNetNuke.UI.Modules.ModuleHost.TryLoadCached">
            -----------------------------------------------------------------------------
            <summary>
            Trys to load previously cached Module Content
            </summary>
            <returns>A Boolean that indicates whether the cahed content was loaded</returns>
        </member>
        <member name="M:DotNetNuke.UI.Modules.ModuleHost.RestoreCachedClientResourceRegistrations(System.String)">
            <summary>
            Restores client resource registrations from the <paramref name="cachedContent"/>.
            These are registrations that originated from <c>DnnJsInclude</c>, <c>DnnCssInclude</c>, and <c>JavaScriptLibraryInclude</c> controls.
            </summary>
            <param name="cachedContent">The HTML text of the cached module.</param>
        </member>
        <member name="M:DotNetNuke.UI.Modules.ModuleHost.CreateChildControls">
            -----------------------------------------------------------------------------
            <summary>
            CreateChildControls builds the control tree
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.Modules.ModuleHost.RenderContents(System.Web.UI.HtmlTextWriter)">
            -----------------------------------------------------------------------------
            <summary>
            RenderContents renders the contents of the control to the output stream
            </summary>
        </member>
        <member name="T:DotNetNuke.UI.Modules.ModuleInstanceContext">
            <summary>
            Provides context data for a particular instance of a module
            </summary>
        </member>
        <member name="P:DotNetNuke.UI.Modules.ModuleInstanceContext.Actions">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Actions for this module context
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Modules.ModuleInstanceContext.Configuration">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Module Configuration (ModuleInfo) for this context
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Modules.ModuleInstanceContext.EditMode">
            -----------------------------------------------------------------------------
            <summary>
            The EditMode property is used to determine whether the user is in the
            Administrator role
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Modules.ModuleInstanceContext.HelpURL">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the HelpUrl for this context
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Modules.ModuleInstanceContext.IsEditable">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether the module is Editable (in Admin mode)
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Modules.ModuleInstanceContext.ModuleId">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the module ID for this context
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Modules.ModuleInstanceContext.Settings">
            -----------------------------------------------------------------------------
            <summary>
            Gets the settings for this context
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Modules.ModuleInstanceContext.TabId">
            -----------------------------------------------------------------------------
            <summary>
            Gets the tab ID for this context
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Modules.ModuleInstanceContext.TabModuleId">
            -----------------------------------------------------------------------------
            <summary>
            Gets the tabnmodule ID for this context
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Modules.ModuleInstanceContext.AddHelpActions">
            -----------------------------------------------------------------------------
            <summary>
            AddHelpActions Adds the Help actions to the Action Menu
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Modules.ModuleInstanceContext.AddMenuMoveActions">
            -----------------------------------------------------------------------------
            <summary>
            AddMenuMoveActions Adds the Move actions to the Action Menu
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Modules.ModuleInstanceContext.GetActionsCount(System.Int32,DotNetNuke.Entities.Modules.Actions.ModuleActionCollection)">
            -----------------------------------------------------------------------------
            <summary>
            GetActionsCount gets the current number of actions
            </summary>
            <param name="actions">The actions collection to count.</param>
            <param name="count">The current count</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Modules.ModuleInstanceContext.LoadActions(System.Web.HttpRequest)">
            -----------------------------------------------------------------------------
            <summary>
            LoadActions loads the Actions collections
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.Modules.ModuleUserControlBase">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.UI.Modules
            Class	 : ModuleUserControlBase
            -----------------------------------------------------------------------------
            <summary>
            ModuleUserControlBase is a base class for Module Controls that inherits from the
            UserControl base class.  As with all MontrolControl base classes it implements
            IModuleControl.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Modules.ModuleUserControlBase.Control">
            -----------------------------------------------------------------------------
            <summary>
            Gets the underlying base control for this ModuleControl
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Modules.ModuleUserControlBase.ControlPath">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Path for this control (used primarily for UserControls)
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Modules.ModuleUserControlBase.ControlName">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Name for this control
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Modules.ModuleUserControlBase.LocalResourceFile">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the local resource file for this control
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Modules.ModuleUserControlBase.ModuleContext">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Module Context for this control
            </summary>
            <returns>A ModuleInstanceContext</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Navigation.AddChildActions(DotNetNuke.Entities.Modules.Actions.ModuleAction,DotNetNuke.UI.WebControls.DNNNode,DotNetNuke.UI.WebControls.DNNNode,DotNetNuke.UI.Containers.IActionControl,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Recursive function to add module's actions to the DNNNodeCollection based off of passed in ModuleActions
            </summary>
            <param name="parentAction">Parent action</param>
            <param name="parentNode">Parent node</param>
            <param name="rootNode">Root Node.</param>
            <param name="actionControl">ActionControl to base actions off of</param>
            <param name="intDepth">How many levels deep should be populated</param>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Navigation.AddNode(DotNetNuke.Entities.Tabs.TabInfo,DotNetNuke.UI.WebControls.DNNNodeCollection,System.Collections.Hashtable,DotNetNuke.Entities.Portals.PortalSettings,DotNetNuke.UI.Navigation.ToolTipSource,System.Collections.Generic.IDictionary{System.String,DotNetNuke.UI.WebControls.DNNNode})">
            -----------------------------------------------------------------------------
            <summary>
            Assigns common properties from passed in tab to newly created DNNNode that is added to the passed in DNNNodeCollection
            </summary>
            <param name="objTab">Tab to base DNNNode off of</param>
            <param name="objNodes">Node collection to append new node to</param>
            <param name="objBreadCrumbs">Hashtable of breadcrumb IDs to efficiently determine node's BreadCrumb property</param>
            <param name="objPortalSettings">Portal settings object to determine if node is selected</param>
            <param name="eToolTips"></param>
            <remarks>
            Logic moved to separate sub to make GetNavigationNodes cleaner
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Navigation.GetActionNode(System.String,System.String,DotNetNuke.Entities.Modules.Actions.ModuleAction,System.Web.UI.Control)">
            -----------------------------------------------------------------------------
            <summary>
            Allows for DNNNode object to be easily obtained based off of passed in ID
            </summary>
            <param name="strID">NodeID to retrieve</param>
            <param name="strNamespace">Namespace for node collection (usually control's ClientID)</param>
            <param name="objActionRoot">Root Action object used in searching</param>
            <param name="objControl">ActionControl to base actions off of</param>
            <returns>DNNNode</returns>
            <remarks>
            Primary purpose of this is to obtain the DNNNode needed for the events exposed by the NavigationProvider
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Navigation.GetActionNodes(DotNetNuke.Entities.Modules.Actions.ModuleAction,System.Web.UI.Control)">
            -----------------------------------------------------------------------------
            <summary>
            This function provides a central location to obtain a generic node collection of the actions associated
            to a module based off of the current user's context
            </summary>
            <param name="objActionRoot">Root module action</param>
            <param name="objControl">ActionControl to base actions off of</param>
            <returns></returns>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Navigation.GetActionNodes(DotNetNuke.Entities.Modules.Actions.ModuleAction,System.Web.UI.Control,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            This function provides a central location to obtain a generic node collection of the actions associated 
            to a module based off of the current user's context
            </summary>
            <param name="objActionRoot">Root module action</param>
            <param name="objControl">ActionControl to base actions off of</param>
            <param name="intDepth">How many levels deep should be populated</param>
            <returns></returns>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Navigation.GetActionNodes(DotNetNuke.Entities.Modules.Actions.ModuleAction,DotNetNuke.UI.WebControls.DNNNode,System.Web.UI.Control,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            This function provides a central location to obtain a generic node collection of the actions associated 
            to a module based off of the current user's context
            </summary>
            <param name="objActionRoot">Root module action</param>
            <param name="objRootNode">Root node on which to populate children</param>
            <param name="objControl">ActionControl to base actions off of</param>
            <param name="intDepth">How many levels deep should be populated</param>
            <returns></returns>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Navigation.GetNavigationNode(System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Allows for DNNNode object to be easily obtained based off of passed in ID
            </summary>
            <param name="strID">NodeID to retrieve</param>
            <param name="strNamespace">Namespace for node collection (usually control's ClientID)</param>
            <returns>DNNNode</returns>
            <remarks>
            Primary purpose of this is to obtain the DNNNode needed for the events exposed by the NavigationProvider
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Navigation.GetNavigationNodes(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            This function provides a central location to obtain a generic node collection of the pages/tabs included in
            the current context's (user) navigation hierarchy
            </summary>
            <param name="strNamespace">Namespace (typically control's ClientID) of node collection to create</param>
            <returns>Collection of DNNNodes</returns>
            <remarks>
            Returns all navigation nodes for a given user
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Navigation.GetNavigationNodes(System.String,DotNetNuke.UI.Navigation.ToolTipSource,System.Int32,System.Int32,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            This function provides a central location to obtain a generic node collection of the pages/tabs included in
            the current context's (user) navigation hierarchy
            </summary>
            <param name="strNamespace">Namespace (typically control's ClientID) of node collection to create</param>
            <param name="eToolTips">Enumerator to determine what text to display in the tooltips</param>
            <param name="intStartTabId">If using Populate On Demand, then this is the tab id of the root element to retrieve (-1 for no POD)</param>
            <param name="intDepth">If Populate On Demand is enabled, then this parameter determines the number of nodes to retrieve beneath the starting tab passed in (intStartTabId) (-1 for no POD)</param>
            <param name="intNavNodeOptions">Bitwise integer containing values to determine what nodes to display (self, siblings, parent)</param>
            <returns>Collection of DNNNodes</returns>
            <remarks>
            Returns a subset of navigation nodes based off of passed in starting node id and depth
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Navigation.GetNavigationNodes(DotNetNuke.UI.WebControls.DNNNode,DotNetNuke.UI.Navigation.ToolTipSource,System.Int32,System.Int32,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            This function provides a central location to obtain a generic node collection of the pages/tabs included in
            the current context's (user) navigation hierarchy
            </summary>
            <param name="objRootNode">Node in which to add children to</param>
            <param name="eToolTips">Enumerator to determine what text to display in the tooltips</param>
            <param name="intStartTabId">If using Populate On Demand, then this is the tab id of the root element to retrieve (-1 for no POD)</param>
            <param name="intDepth">If Populate On Demand is enabled, then this parameter determines the number of nodes to retrieve beneath the starting tab passed in (intStartTabId) (-1 for no POD)</param>
            <param name="intNavNodeOptions">Bitwise integer containing values to determine what nodes to display (self, siblings, parent)</param>
            <returns>Collection of DNNNodes</returns>
            <remarks>
            Returns a subset of navigation nodes based off of passed in starting node id and depth
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Controls.LanguagePropertyAccess.GetQsParams(System.String,System.Boolean)">
            <summary>
            getQSParams builds up a new querystring. This is necessary
            in order to prep for navigateUrl.
            we don't ever want a tabid, a ctl and a language parameter in the qs
            also, the portalid param is not allowed when the tab is a supertab
            (because NavigateUrl adds the portalId param to the qs)
            </summary>
            <param name="newLanguage">Language to switch into</param>
            <param name="isLocalized"></param>
            <returns></returns>
        </member>
        <member name="M:DotNetNuke.UI.Skins.Controls.LanguagePropertyAccess.NewUrl(System.String)">
            <summary>
            newUrl returns the new URL based on the new language.
            Basically it is just a call to NavigateUrl, with stripped qs parameters
            </summary>
            <param name="newLanguage"></param>
        </member>
        <member name="T:DotNetNuke.UI.Skins.Controls.ModuleMessage">
            <summary></summary>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.UI.Skins.Controls.ModuleMessage.IsModuleMessage">
            <summary>
            Check this message is shown as page message or module message.
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.Skins.Controls.ModuleMessage.OnLoad(System.EventArgs)">
            <summary>
            The Page_Load server event handler on this page is used
            to populate the role information for the page
            </summary>
        </member>
        <member name="T:DotNetNuke.UI.Skins.Controls.SkinsEditControl">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.Skins.Controls
            Class:      SkinsEditControl
            -----------------------------------------------------------------------------
            <summary>
            The SkinsEditControl control provides a standard UI component for editing
            skins.
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Controls.SkinsEditControl.#ctor">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a SkinsEditControl
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Controls.SkinsEditControl.#ctor(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a SkinsEditControl
            </summary>
            <param name="type">The type of the property</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Skins.Controls.SkinsEditControl.DictionaryValue">
            -----------------------------------------------------------------------------
            <summary>
            DictionaryValue returns the Dictionary(Of Integer, String) representation of the Value
            </summary>
            <value>A Dictionary(Of Integer, String) representing the Value</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Skins.Controls.SkinsEditControl.OldDictionaryValue">
            -----------------------------------------------------------------------------
            <summary>
            OldDictionaryValue returns the Dictionary(Of Integer, String) representation of the OldValue
            </summary>
            <value>A Dictionary(Of Integer, String) representing the OldValue</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Skins.Controls.SkinsEditControl.OldStringValue">
            -----------------------------------------------------------------------------
            <summary>
            OldStringValue returns the String representation of the OldValue
            </summary>
            <value>A String representing the OldValue</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Skins.Controls.SkinsEditControl.StringValue">
            -----------------------------------------------------------------------------
            <summary>
            StringValue is the value of the control expressed as a String
            </summary>
            <value>A string representing the Value</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Controls.SkinsEditControl.OnDataChanged(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnDataChanged runs when the PostbackData has changed.  It raises the ValueChanged
            Event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Controls.SkinsEditControl.OnPreRender(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnPreRender runs just before the control is due to be rendered
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Controls.SkinsEditControl.RenderEditMode(System.Web.UI.HtmlTextWriter)">
            -----------------------------------------------------------------------------
            <summary>
            RenderEditMode renders the Edit mode of the control
            </summary>
            <param name="writer">A HtmlTextWriter.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Controls.SkinsEditControl.RenderViewMode(System.Web.UI.HtmlTextWriter)">
            -----------------------------------------------------------------------------
            <summary>
            RenderViewMode renders the View (readonly) mode of the control
            </summary>
            <param name="writer">A HtmlTextWriter.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.Skins.EventListeners.SkinEventArgs">
            -----------------------------------------------------------------------------
             <summary>
             SkinEventArgs provides a custom EventARgs class for Skin Events
             </summary>
             <remarks></remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.Skins.EventListeners.SkinEventHandler">
            -----------------------------------------------------------------------------
            <summary>
            The SkinEventHandler delegate defines a custom event handler for a Skin
            Event.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.Skins.EventListeners.SkinEventType">
            -----------------------------------------------------------------------------
             <summary>
             SkinEventType provides a custom enum for skin event types
             </summary>
             <remarks></remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.Skins.Pane">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.UI.Skins
            Class	 : Pane
            -----------------------------------------------------------------------------
            <summary>
            The Pane class represents a Pane within the Skin
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Pane.#ctor(System.Web.UI.HtmlControls.HtmlContainerControl)">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a new Pane object from the Control in the Skin
            </summary>
            <param name="pane">The HtmlContainerControl in the Skin.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Pane.#ctor(System.String,System.Web.UI.HtmlControls.HtmlContainerControl)">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a new Pane object from the Control in the Skin
            </summary>
            <param name="name">The name (ID) of the HtmlContainerControl</param>
            <param name="pane">The HtmlContainerControl in the Skin.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Skins.Pane.Containers">
            -----------------------------------------------------------------------------
            <summary>
            Gets a Dictionary of Containers.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Skins.Pane.Name">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the name (ID) of the Pane
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Skins.Pane.PaneControl">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the HtmlContainerControl
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Skins.Pane.PortalSettings">
            -----------------------------------------------------------------------------
            <summary>
            Gets the PortalSettings of the Portal
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Pane.LoadContainerByPath(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            LoadContainerByPath gets the Container from its Url(Path)
            </summary>
            <param name="containerPath">The Url to the Container control</param>
            <returns>A Container</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Pane.LoadContainerFromCookie(System.Web.HttpRequest)">
            -----------------------------------------------------------------------------
            <summary>
            LoadModuleContainer gets the Container for cookie
            </summary>
            <param name="request">Current Http Request.</param>
            <returns>A Container</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Pane.ModuleMoveToPanePostBack(DotNetNuke.UI.Utilities.ClientAPIPostBackEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            ModuleMoveToPanePostBack excutes when a module is moved by Drag-and-Drop
            </summary>
            <param name="args">A ClientAPIPostBackEventArgs object</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Pane.InjectModule(DotNetNuke.Entities.Modules.ModuleInfo)">
            -----------------------------------------------------------------------------
            <summary>
            InjectModule injects a Module (and its container) into the Pane
            </summary>
            <param name="module">The Module</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Pane.ProcessPane">
            -----------------------------------------------------------------------------
            <summary>
            ProcessPane processes the Attributes for the PaneControl
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.Skins.Skin">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.UI.Skins
            Class	 : Skin
            -----------------------------------------------------------------------------
            <summary>
            Skin is the base for the Skins
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Skins.Skin.ControlPanel">
            -----------------------------------------------------------------------------
            <summary>
            Gets the ControlPanel container.
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Skins.Skin.Communicator">
            -----------------------------------------------------------------------------
            <summary>
            Gets the ModuleCommunicate instance for the skin
            </summary>
            <returns>The ModuleCommunicate instance for the Skin</returns>
        </member>
        <member name="P:DotNetNuke.UI.Skins.Skin.Panes">
            -----------------------------------------------------------------------------
            <summary>
            Gets a Dictionary of Panes.
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Skins.Skin.ActionEventListeners">
            -----------------------------------------------------------------------------
            <summary>
            Gets an ArrayList of ActionEventListeners
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Skins.Skin.SkinPath">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Path for this skin
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Skins.Skin.SkinSrc">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Source for this skin
            </summary>
            <returns>A String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Skin.HandleAccesDenied(System.Boolean)">
            <summary>
            Handle access denied errors by displaying an error message 
            or by performing a redirect to a predefined "access denied URL"
            </summary>
            <param name="redirect"></param>
        </member>
        <member name="M:DotNetNuke.UI.Skins.Skin.OnInit(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnInit runs when the Skin is initialised.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Skin.OnLoad(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnLoad runs when the Skin is loaded.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Skin.OnPreRender(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnLoad runs just before the Skin is rendered.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Skin.OnUnload(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnUnLoad runs when the Skin is unloaded.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Skin.AddModuleMessage(System.Web.UI.Control,System.String,DotNetNuke.UI.Skins.Controls.ModuleMessage.ModuleMessageType)">
            -----------------------------------------------------------------------------
            <summary>
            AddModuleMessage adds a Moduel Message control to the Skin
            </summary>
            <param name="message">The Message Text</param>
            <param name="control">The current control</param>
            <param name="moduleMessageType">The type of the message</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Skin.AddModuleMessage(System.Web.UI.Control,System.String,System.String,DotNetNuke.UI.Skins.Controls.ModuleMessage.ModuleMessageType)">
            -----------------------------------------------------------------------------
            <summary>
            AddModuleMessage adds a Moduel Message control to the Skin
            </summary>
            <param name="heading">The Message Heading</param>
            <param name="message">The Message Text</param>
            <param name="control">The current control</param>
            <param name="moduleMessageType">The type of the message</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Skin.AddPageMessage(System.Web.UI.Page,System.String,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            AddPageMessage adds a Page Message control to the Skin
            </summary>
            <param name="heading">The Message Heading</param>
            <param name="iconSrc">The Icon to diplay</param>
            <param name="message">The Message Text</param>
            <param name="page">The Page</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Skin.AddPageMessage(DotNetNuke.UI.Skins.Skin,System.String,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            AddPageMessage adds a Page Message control to the Skin
            </summary>
            <param name="heading">The Message Heading</param>
            <param name="iconSrc">The Icon to diplay</param>
            <param name="message">The Message Text</param>
            <param name="skin">The skin</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Skin.AddPageMessage(DotNetNuke.UI.Skins.Skin,System.String,System.String,DotNetNuke.UI.Skins.Controls.ModuleMessage.ModuleMessageType)">
            -----------------------------------------------------------------------------
            <summary>
            AddPageMessage adds a Page Message control to the Skin
            </summary>
            <param name="heading">The Message Heading</param>
            <param name="message">The Message Text</param>
            <param name="skin">The skin</param>
            <param name="moduleMessageType">The type of the message</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Skin.AddPageMessage(System.Web.UI.Page,System.String,System.String,DotNetNuke.UI.Skins.Controls.ModuleMessage.ModuleMessageType)">
            -----------------------------------------------------------------------------
            <summary>
            AddPageMessage adds a Page Message control to the Skin
            </summary>
            <param name="heading">The Message Heading</param>
            <param name="message">The Message Text</param>
            <param name="page">The Page</param>
            <param name="moduleMessageType">The type of the message</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Skin.GetModuleMessageControl(System.String,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            GetModuleMessageControl gets an existing Message Control and sets its properties
            </summary>
            <param name="heading">The Message Heading</param>
            <param name="message">The Message Text</param>
            <param name="iconImage">The Message Icon</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Skin.GetModuleMessageControl(System.String,System.String,DotNetNuke.UI.Skins.Controls.ModuleMessage.ModuleMessageType)">
            -----------------------------------------------------------------------------
            <summary>
            GetModuleMessageControl gets an existing Message Control and sets its properties
            </summary>
            <param name="heading">The Message Heading</param>
            <param name="message">The Message Text</param>
            <param name="moduleMessageType">The type of message</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Skin.GetModuleMessageControl(System.String,System.String,DotNetNuke.UI.Skins.Controls.ModuleMessage.ModuleMessageType,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            GetModuleMessageControl gets an existing Message Control and sets its properties
            </summary>
            <param name="heading">The Message Heading</param>
            <param name="message">The Message Text</param>
            <param name="iconImage">The Message Icon</param>
            <param name="moduleMessageType">The type of message</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Skin.GetParentSkin(DotNetNuke.Entities.Modules.PortalModuleBase)">
            -----------------------------------------------------------------------------
            <summary>
            GetParentSkin gets the Parent Skin for a control
            </summary>
            <param name="module">The control whose Parent Skin is requested</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Skin.GetParentSkin(System.Web.UI.Control)">
            -----------------------------------------------------------------------------
            <summary>
            GetParentSkin gets the Parent Skin for a control
            </summary>
            <param name="control">The control whose Parent Skin is requested</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Skin.GetPopUpSkin(DotNetNuke.Framework.PageBase)">
            -----------------------------------------------------------------------------
            <summary>
            GetPopUpSkin gets the Skin that is used in modal popup.
            </summary>
            <param name="page">The Page</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Skin.GetSkin(DotNetNuke.Framework.PageBase)">
            -----------------------------------------------------------------------------
            <summary>
            GetSkin gets the Skin
            </summary>
            <param name="page">The Page</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Skin.InjectModule(DotNetNuke.UI.Skins.Pane,DotNetNuke.Entities.Modules.ModuleInfo)">
            -----------------------------------------------------------------------------
            <summary>
            InjectModule injects the module into the Pane
            </summary>
            <param name="module">The module to inject</param>
            <param name="pane">The pane</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.Skin.RegisterModuleActionEvent(System.Int32,DotNetNuke.Entities.Modules.Actions.ActionEventHandler)">
            -----------------------------------------------------------------------------
            <summary>
            RegisterModuleActionEvent registers a Module Action Event
            </summary>
            <param name="moduleId">The ID of the module</param>
            <param name="e">An Action Event Handler</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.SkinControl.OnLoad(System.EventArgs)">
            <summary>
            The Page_Load server event handler on this page is used
            to populate the role information for the page
            </summary>
        </member>
        <member name="T:DotNetNuke.UI.Skins.SkinController">
             -----------------------------------------------------------------------------
             Project	 : DotNetNuke
             Class	 : SkinController
            
             -----------------------------------------------------------------------------
             <summary>
                 Handles the Business Control Layer for Skins
             </summary>
             <remarks>
             </remarks>
             -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.SkinController.FormatSkinName(System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            format skin name
            </summary>
            <remarks>
            </remarks>
            <param name="skinFolder">The Folder Name</param>
            <param name="skinFile">The File Name without extension</param>
        </member>
        <member name="M:DotNetNuke.UI.Skins.SkinController.IsGlobalSkin(System.String)">
            <summary>
            Determines if a given skin is defined as a global skin
            </summary>
            <param name="skinSrc">This is the app relative path and filename of the skin to be checked.</param>
            <returns>True if the skin is located in the HostPath child directories.</returns>
            <remarks>This function performs a quick check to detect the type of skin that is
            passed as a parameter.  Using this method abstracts knowledge of the actual location
            of skins in the file system.
            </remarks>
        </member>
        <member name="T:DotNetNuke.UI.Skins.SkinFileProcessor">
             -----------------------------------------------------------------------------
             Project	 : DotNetNuke
             Class	 : SkinFileProcessor
            
             -----------------------------------------------------------------------------
             <summary>
                 Handles processing of a list of uploaded skin files into a working skin.
             </summary>
             <remarks>
             </remarks>
             -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.SkinFileProcessor.#ctor(System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
                SkinFileProcessor class constructor.
            </summary>
            <remarks>
                This constructor parses a memory based skin
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.SkinFileProcessor.#ctor(System.String,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
                SkinFileProcessor class constructor.
            </summary>
            <param name="SkinPath">File path to the portals upload directory.</param>
            <param name="SkinRoot">Specifies type of skin (Skins or Containers)</param>
            <param name="SkinName">Name of folder in which skin will reside (Zip file name)</param>
            <remarks>
                The constructor primes the file processor with path information and
                control data that should only be retrieved once.  It checks for the
                existentce of a skin level attribute file and read it in, if found.
                It also sorts through the complete list of controls and creates
                a hashtable which contains only the skin objects and their source paths.
                These are recognized by their ControlKey's which are formatted like
                tokens ("[TOKEN]").  The hashtable is required for speed as it will be
                processed for each token found in the source file by the Control Parser.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.SkinFileProcessor.ProcessList(System.Collections.ArrayList)">
            -----------------------------------------------------------------------------
            <summary>
                Perform processing on list of files to generate skin.
            </summary>
            <param name="FileList">ArrayList of files to be processed.</param>
            <returns>HTML formatted string of informational messages.</returns>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.Skins.SkinFileProcessor.ControlParser">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Class	 : SkinFileProcessor.ControlParser
            
            -----------------------------------------------------------------------------
            <summary>
                Parsing functionality for token replacement in new skin files.
            </summary>
            <remarks>
                This class encapsulates the data and methods necessary to appropriately
                handle all the token parsing needs for new skin files (which is appropriate
                only for HTML files).  The parser accomodates some ill formatting of tokens
                (ignoring whitespace and casing) and allows for naming of token instances
                if more than one instance of a particular control is desired on a skin.  The
                proper syntax for an instance is: "[TOKEN:INSTANCE]" where the instance can
                be any alphanumeric string.  Generated control ID's all take the
                form of "TOKENINSTANCE".
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.SkinFileProcessor.ControlParser.#ctor(System.Collections.Hashtable)">
            -----------------------------------------------------------------------------
            <summary>
                ControlParser class constructor.
            </summary>
            <remarks>
                The constructor processes accepts a hashtable of skin objects to process against.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Skins.SkinFileProcessor.ControlParser.Registrations">
            -----------------------------------------------------------------------------
            <summary>
                Registration directives generated as a result of the Parse method.
            </summary>
            <returns>ArrayList of formatted registration directives.</returns>
            <remarks>
                In addition to the updated file contents, the Parse method also
                creates this list of formatted registration directives which can
                be processed later.  They are not performed in place during the
                Parse method in order to preserve the formatting of the input file
                in case additional parsing might not anticipate the formatting of
                those directives.  Since they are properly formatted, it is better
                to exclude them from being subject to parsing.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.SkinFileProcessor.ControlParser.Parse(System.String@,System.Xml.XmlDocument)">
            -----------------------------------------------------------------------------
            <summary>
                Perform parsing on the specified source file using the specified attributes.
            </summary>
            <param name="Source">Pointer to Source string to be parsed.</param>
            <param name="Attributes">XML document containing token attribute information (can be empty).</param>
            <remarks>
                This procedure invokes a handler for each match of a formatted token.
                The attributes are first set because they will be referenced by the
                match handler.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.SkinFileProcessor.ControlParser.TokenMatchHandler(System.Text.RegularExpressions.Match)">
            -----------------------------------------------------------------------------
            <summary>
                Process regular expression matches.
            </summary>
            <param name="m">Regular expression match for token which requires processing.</param>
            <returns>Properly formatted token.</returns>
            <remarks>
                The handler is invoked by the Regex.Replace method once for each match that
                it encounters.  The returned value of the handler is substituted for the
                original match.  So the handler properly formats the replacement for the
                token and returns it instead.  If an unknown token is encountered, the token
                is unmodified.  This can happen if a token is used for a skin object which
                has not yet been installed.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.Skins.SkinFileProcessor.ObjectParser">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Class	 : SkinFileProcessor.ObjectParser
            
            -----------------------------------------------------------------------------
            <summary>
                Parsing functionality for token replacement in new skin files.
            </summary>
            <remarks>
                This class encapsulates the data and methods necessary to appropriately
                handle all the object parsing needs for new skin files (which is appropriate
                only for HTML files).  The parser accomodates some ill formatting of objects
                (ignoring whitespace and casing) and allows for naming of object instances
                if more than one instance of a particular control is desired on a skin.  The
                proper syntax for an instance is: "[OBJECT:INSTANCE]" where the instance can
                be any alphanumeric string.  Generated control ID's all take the
                form of "OBJECTINSTANCE".
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.SkinFileProcessor.ObjectParser.#ctor(System.Collections.Hashtable)">
            -----------------------------------------------------------------------------
            <summary>
                ControlParser class constructor.
            </summary>
            <remarks>
                The constructor processes accepts a hashtable of skin objects to process against.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Skins.SkinFileProcessor.ObjectParser.Registrations">
            -----------------------------------------------------------------------------
            <summary>
                Registration directives generated as a result of the Parse method.
            </summary>
            <returns>ArrayList of formatted registration directives.</returns>
            <remarks>
                In addition to the updated file contents, the Parse method also
                creates this list of formatted registration directives which can
                be processed later.  They are not performed in place during the
                Parse method in order to preserve the formatting of the input file
                in case additional parsing might not anticipate the formatting of
                those directives.  Since they are properly formatted, it is better
                to exclude them from being subject to parsing.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.SkinFileProcessor.ObjectParser.Parse(System.String@)">
            -----------------------------------------------------------------------------
            <summary>
                Perform parsing on the specified source file.
            </summary>
            <param name="Source">Pointer to Source string to be parsed.</param>
            <remarks>
                This procedure invokes a handler for each match of a formatted object.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.SkinFileProcessor.ObjectParser.ObjectMatchHandler(System.Text.RegularExpressions.Match)">
            -----------------------------------------------------------------------------
            <summary>
                Process regular expression matches.
            </summary>
            <param name="m">Regular expression match for object which requires processing.</param>
            <returns>Properly formatted token.</returns>
            <remarks>
                The handler is invoked by the Regex.Replace method once for each match that
                it encounters.  The returned value of the handler is substituted for the
                original match.  So the handler properly formats the replacement for the
                object and returns it instead.  If an unknown object is encountered, the object
                is unmodified.  This can happen if an object is a client-side object or 
                has not yet been installed.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.Skins.SkinFileProcessor.PathParser">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Class	 : SkinFileProcessor.PathParser
            
            -----------------------------------------------------------------------------
            <summary>
                Parsing functionality for path replacement in new skin files.
            </summary>
            <remarks>
                This class encapsulates the data and methods necessary to appropriately
                handle all the path replacement parsing needs for new skin files. Parsing
                supported for CSS syntax and HTML syntax (which covers ASCX files also). 
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Skins.SkinFileProcessor.PathParser.HTMLList">
            -----------------------------------------------------------------------------
            <summary>
                List of regular expressions for processing HTML syntax.
            </summary>
            <returns>ArrayList of Regex objects formatted for the Parser method.</returns>
            <remarks>
                Additional patterns can be added to this list (if necessary) if properly
                formatted to return <tag/>, <content/> and <endtag/> groups.  For future
                consideration, this list could be imported from a configuration file to
                provide for greater flexibility.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Skins.SkinFileProcessor.PathParser.CSSList">
            -----------------------------------------------------------------------------
            <summary>
                List of regular expressions for processing CSS syntax.
            </summary>
            <returns>ArrayList of Regex objects formatted for the Parser method.</returns>
            <remarks>
                Additional patterns can be added to this list (if necessary) if properly
                formatted to return <tag/>, <content/> and <endtag/> groups.  For future
                consideration, this list could be imported from a configuration file to
                provide for greater flexibility.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.SkinFileProcessor.PathParser.Parse(System.String@,System.Collections.ArrayList,System.String,DotNetNuke.UI.Skins.SkinParser)">
            -----------------------------------------------------------------------------
            <summary>
                Perform parsing on the specified source file.
            </summary>
            <param name="Source">Pointer to Source string to be parsed.</param>
            <param name="RegexList">ArrayList of properly formatted regular expression objects.</param>
            <param name="SkinPath">Path to use in replacement operation.</param>
            <param name="ParseOption">Parse Opition.</param>
            <remarks>
                This procedure iterates through the list of regular expression objects
                and invokes a handler for each match which uses the specified path.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.SkinFileProcessor.PathParser.MatchHandler(System.Text.RegularExpressions.Match)">
            -----------------------------------------------------------------------------
            <summary>
                Process regular expression matches.
            </summary>
            <param name="m">Regular expression match for path information which requires processing.</param>
            <returns>Properly formatted path information.</returns>
            <remarks>
                The handler is invoked by the Regex.Replace method once for each match that
                it encounters.  The returned value of the handler is substituted for the
                original match.  So the handler properly formats the path information and
                returns it in favor of the improperly formatted match.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.Skins.SkinFileProcessor.SkinFile">
            -----------------------------------------------------------------------------
            <summary>
                Utility class for processing of skin files.
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.SkinFileProcessor.SkinFile.#ctor(System.String,System.Xml.XmlDocument)">
            -----------------------------------------------------------------------------
            <summary>
                SkinFile class constructor.
            </summary>
            <param name="SkinContents"></param>
            <param name="SkinAttributes"></param>
            <remarks>
                The constructor primes the utility class with basic file information.
                It also checks for the existentce of a skinfile level attribute file
                and read it in, if found.  
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.SkinFileProcessor.SkinFile.#ctor(System.String,System.String,System.Xml.XmlDocument)">
            -----------------------------------------------------------------------------
            <summary>
                SkinFile class constructor.
            </summary>
            <param name="SkinRoot"></param>
            <param name="FileName"></param>
            <param name="SkinAttributes"></param>
            <remarks>
                The constructor primes the utility class with basic file information.
                It also checks for the existentce of a skinfile level attribute file
                and read it in, if found.  
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.SkinFileProcessor.SkinFile.PrependASCXDirectives(System.Collections.ArrayList)">
            -----------------------------------------------------------------------------
            <summary>
                Prepend ascx control directives to file contents.
            </summary>
            <param name="Registrations">ArrayList of registration directives.</param>
            <remarks>
                This procedure formats the @Control directive and prepends it and all
                registration directives to the file contents.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.Skins.SkinInfo">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Class	 : SkinInfo
            
            -----------------------------------------------------------------------------
            <summary>
                Handles the Business Object for Skins
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.Skins.SkinObjectBase">
            -----------------------------------------------------------------------------
            <summary>
            The SkinObject class defines a custom base class inherited by all
            skin and container objects within the Portal.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Skins.SkinObjectBase.PortalSettings">
            -----------------------------------------------------------------------------
            <summary>
            Gets the portal Settings for this Skin Control
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Skins.SkinObjectBase.AdminMode">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether we are in Admin Mode
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.Skins.SkinObjectBase.ModuleControl">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the associated ModuleControl for this SkinControl
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.Skins.SkinPackageInfo">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Class	 : SkinPackageInfo
            
            -----------------------------------------------------------------------------
            <summary>
                Handles the Business Object for Skins
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.Skins.SkinThumbNailControl">
            -----------------------------------------------------------------------------
            <summary>
            SkinThumbNailControl is a user control that provides that displays the skins
            as a Radio ButtonList with Thumbnail Images where available
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.SkinThumbNailControl.AddDefaultSkin">
            -----------------------------------------------------------------------------
            <summary>
            AddDefaultSkin adds the not-specified skin to the radio button list
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.SkinThumbNailControl.AddSkin(System.String,System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            AddSkin adds the skin to the radio button list
            </summary>
            <remarks>
            </remarks>
            <param name="root">Root Path.</param>
            <param name="strFolder">The Skin Folder</param>
            <param name="strFile">The Skin File</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.SkinThumbNailControl.FormatSkinName(System.String,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            format skin name
            </summary>
            <remarks>
            </remarks>
            <param name="strSkinFolder">The Folder Name</param>
            <param name="strSkinFile">The File Name without extension</param>
        </member>
        <member name="M:DotNetNuke.UI.Skins.SkinThumbNailControl.CreateThumbnail(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            CreateThumbnail creates a thumbnail of the Preview Image
            </summary>
            <remarks>
            </remarks>
            <param name="strImage">The Image File Name</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.SkinThumbNailControl.Clear">
            -----------------------------------------------------------------------------
            <summary>
            Clear clears the radio button list
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.SkinThumbNailControl.LoadAllSkins(System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            LoadAllSkins loads all the available skins (Host and Site) to the radio button list
            </summary>
            <remarks>
            </remarks>
            <param name="includeNotSpecified">Optionally include the "Not Specified" option</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.SkinThumbNailControl.LoadHostSkins(System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            LoadHostSkins loads all the available Host skins to the radio button list
            </summary>
            <remarks>
            </remarks>
            <param name="includeNotSpecified">Optionally include the "Not Specified" option</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.SkinThumbNailControl.LoadPortalSkins(System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            LoadHostSkins loads all the available Site/Portal skins to the radio button list
            </summary>
            <remarks>
            </remarks>
            <param name="includeNotSpecified">Optionally include the "Not Specified" option</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.Skins.SkinThumbNailControl.LoadSkins(System.String,System.String,System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            LoadSkins loads all the available skins in a specific folder to the radio button list
            </summary>
            <remarks>
            </remarks>
            <param name="strFolder">The folder to search for skins</param>
            <param name="skinType">A string that identifies whether the skin is Host "[G]" or Site "[L]"</param>
            <param name="includeNotSpecified">Optionally include the "Not Specified" option</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.UserControls.Address">
            <summary>
            The Address UserControl is used to manage User Addresses
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.UI.UserControls.Address.Localize">
            <summary>
            Localize correctly sets up the control for US/Canada/Other Countries
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.UI.UserControls.Address.ShowRequiredFields">
            <summary>
            ShowRequiredFields sets up displaying which fields are required
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.UI.UserControls.Address.UpdateRequiredFields">
            <summary>
            UpdateRequiredFields updates which fields are required
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.UI.UserControls.Address.OnLoad(System.EventArgs)">
            <summary>
            Page_Load runs when the control is loaded
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.UI.UserControls.DualListControl.OnLoad(System.EventArgs)">
            <summary>The Page_Load server event handler on this page is used to populate the role information for the page</summary>
        </member>
        <member name="M:DotNetNuke.UI.UserControls.Help.OnLoad(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Page_Load runs when the control is loaded.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.UI.UserControls.Help.cmdCancel_Click(System.Object,System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            cmdCancel_Click runs when the cancel Button is clicked
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:DotNetNuke.UI.UserControls.HelpButtonControl">
            -----------------------------------------------------------------------------
            <summary>
            HelpButtonControl is a user control that provides all the server code to display
            field level help button.
            </summary>
            <remarks>
            To implement help, the control uses the ClientAPI interface.  In particular
             the javascript function __dnn_Help_OnClick()
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.UserControls.HelpButtonControl.ControlName">
            -----------------------------------------------------------------------------
            <summary>
            ControlName is the Id of the control that is associated with the label
            </summary>
            <value>A string representing the id of the associated control</value>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.UserControls.HelpButtonControl.HelpKey">
            -----------------------------------------------------------------------------
            <summary>
            HelpKey is the Resource Key for the Help Text
            </summary>
            <value>A string representing the Resource Key for the Help Text</value>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.UserControls.HelpButtonControl.HelpText">
            -----------------------------------------------------------------------------
            <summary>
            HelpText is value of the Help Text if no ResourceKey is provided
            </summary>
            <value>A string representing the Text</value>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.UserControls.HelpButtonControl.ResourceKey">
            -----------------------------------------------------------------------------
            <summary>
            ResourceKey is the Resource Key for the Help Text
            </summary>
            <value>A string representing the Resource Key for the Label Text</value>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.UserControls.HelpButtonControl.OnLoad(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Page_Load runs when the control is loaded
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.UserControls.LabelControl">
            <summary>
            LabelControl is a user control that provides all the server code to manage a
            label, including localization, 508 support and help.
            </summary>
            <remarks>
            To implement help, the control uses the ClientAPI interface.  In particular
             the javascript function __dnn_Help_OnClick()
            </remarks>
        </member>
        <member name="P:DotNetNuke.UI.UserControls.LabelControl.ControlName">
            <summary>
            ControlName is the Id of the control that is associated with the label
            </summary>
            <value>A string representing the id of the associated control</value>
            <remarks>
            </remarks>
        </member>
        <member name="P:DotNetNuke.UI.UserControls.LabelControl.AssociateFormat">
            <summary>
            Set the associate control id format, combined used with ControlName for controls
             which have child edit control and want that child control focus when click label.
            </summary>
        </member>
        <member name="P:DotNetNuke.UI.UserControls.LabelControl.CssClass">
            <summary>
            Css style applied to the asp:label control
            </summary>
            <value>A string representing css class name</value>
            <remarks>
            </remarks>
        </member>
        <member name="P:DotNetNuke.UI.UserControls.LabelControl.HelpKey">
            <summary>
            HelpKey is the Resource Key for the Help Text
            </summary>
            <value>A string representing the Resource Key for the Help Text</value>
            <remarks>
            </remarks>
        </member>
        <member name="P:DotNetNuke.UI.UserControls.LabelControl.HelpText">
            <summary>
            HelpText is value of the Help Text if no ResourceKey is provided
            </summary>
            <value>A string representing the Text</value>
            <remarks>
            </remarks>                                   
        </member>
        <member name="P:DotNetNuke.UI.UserControls.LabelControl.ResourceKey">
            <summary>
            ResourceKey is the Resource Key for the Label Text
            </summary>
            <value>A string representing the Resource Key for the Label Text</value>
            <remarks>
            </remarks>
        </member>
        <member name="P:DotNetNuke.UI.UserControls.LabelControl.Suffix">
            <summary>
            Suffix is Optional Text that appears after the Localized Label Text
            </summary>
            <value>A string representing the Optional Text</value>
            <remarks>
            </remarks>
        </member>
        <member name="P:DotNetNuke.UI.UserControls.LabelControl.Text">
            <summary>
            Text is value of the Label Text if no ResourceKey is provided
            </summary>
            <value>A string representing the Text</value>
            <remarks>
            </remarks>
        </member>
        <member name="P:DotNetNuke.UI.UserControls.LabelControl.Width">
            <summary>
            Width is value of the Label Width
            </summary>
            <value>A string representing the Text</value>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.UI.UserControls.LabelControl.OnLoad(System.EventArgs)">
            <summary>
            Page_Load runs when the control is loaded
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:DotNetNuke.UI.UserControls.SectionHeadControl">
            -----------------------------------------------------------------------------
            <summary>
            SectionHeadControl is a user control that provides all the server code to allow a
            section to be collapsed/expanded, using user provided images for the button.
            </summary>
            <remarks>
            To use this control the user must provide somewhere in the asp page the
            implementation of the javascript required to expand/collapse the display.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.UserControls.SectionHeadControl.CssClass">
            -----------------------------------------------------------------------------
            <summary>
            CssClass determines the Css Class used for the Title Text
            </summary>
            <value>A string representing the name of the css class</value>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.UserControls.SectionHeadControl.IncludeRule">
            -----------------------------------------------------------------------------
            <summary>
            IncludeRule determines whether there is a horizontal rule displayed under the
            header text
            </summary>
            <value>A string representing true or false</value>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.UserControls.SectionHeadControl.IsExpanded">
            -----------------------------------------------------------------------------
            <summary>
            IsExpanded determines whether the section is expanded or collapsed.
            </summary>
            <value>Boolean value that determines whether the panel is expanded (true)
            or collapsed (false).  The default is true.</value>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.UserControls.SectionHeadControl.JavaScript">
            -----------------------------------------------------------------------------
            <summary>
            JavaScript is the name of the javascript function implementation.
            </summary>
            <value>A string representing the name of the javascript function implementation</value>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.UserControls.SectionHeadControl.MaxImageUrl">
            -----------------------------------------------------------------------------
            <summary>
            The MaxImageUrl is the url of the image displayed when the contained panel is
            collapsed.
            </summary>
            <value>A string representing the url of the Max Image</value>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.UserControls.SectionHeadControl.MinImageUrl">
            -----------------------------------------------------------------------------
            <summary>
            The MinImageUrl is the url of the image displayed when the contained panel is
            expanded.
            </summary>
            <value>A string representing the url of the Min Image</value>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.UserControls.SectionHeadControl.ResourceKey">
            -----------------------------------------------------------------------------
            <summary>
            The ResourceKey is the key used to identify the Localization Resource for the
            title text.
            </summary>
            <value>A string representing the ResourceKey.</value>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.UserControls.SectionHeadControl.Section">
            -----------------------------------------------------------------------------
            <summary>
            The Section is the Id of the DHTML object  that contains the xection content
            title text.
            </summary>
            <value>A string representing the Section.</value>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.UserControls.SectionHeadControl.Text">
            -----------------------------------------------------------------------------
            <summary>
            The Text is the name or title of the section
            </summary>
            <value>A string representing the Title Text.</value>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.UserControls.SectionHeadControl.OnLoad(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Assign resource key to label for localization
            </summary>
            <param name="e"></param>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.UserControls.SectionHeadControl.OnPreRender(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Renders the SectionHeadControl
            </summary>
            <param name="e"></param>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.UserControls.TextEditor">
            -----------------------------------------------------------------------------
            Class:  TextEditor
            Project: DotNetNuke
            -----------------------------------------------------------------------------
            <summary>
            TextEditor is a user control that provides a wrapper for the HtmlEditor providers
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.UserControls.TextEditor.ChooseMode">
            <summary>Enables/Disables the option to allow the user to select between Rich/Basic Mode, Default is true.</summary>
        </member>
        <member name="P:DotNetNuke.UI.UserControls.TextEditor.ChooseRender">
            <summary>Determines wether or not the Text/Html button is rendered for Basic mode, Default is True</summary>
        </member>
        <member name="P:DotNetNuke.UI.UserControls.TextEditor.DefaultMode">
            <summary>Gets/Sets the Default mode of the control, either "RICH" or "BASIC", Defaults to Rich</summary>
        </member>
        <member name="P:DotNetNuke.UI.UserControls.TextEditor.Height">
            <summary>Gets/Sets the Height of the control</summary>
        </member>
        <member name="P:DotNetNuke.UI.UserControls.TextEditor.HtmlEncode">
            <summary>Turns on HtmlEncoding of text.  If this option is on the control will assume, it is being passed encoded text and will decode.</summary>
        </member>
        <member name="P:DotNetNuke.UI.UserControls.TextEditor.Mode">
            <summary>The current mode of the control "RICH",  "BASIC"</summary>
        </member>
        <member name="P:DotNetNuke.UI.UserControls.TextEditor.Text">
            <summary>Gets/Sets the Text of the control</summary>
        </member>
        <member name="P:DotNetNuke.UI.UserControls.TextEditor.TextRenderMode">
            <summary>Sets the render mode for Basic mode.  {Raw | HTML | Text}</summary>
        </member>
        <member name="P:DotNetNuke.UI.UserControls.TextEditor.Width">
            <summary>Gets/Sets the Width of the control</summary>
        </member>
        <member name="P:DotNetNuke.UI.UserControls.TextEditor.RichText">
            <summary>Allows public access ot the HtmlEditorProvider</summary>
        </member>
        <member name="P:DotNetNuke.UI.UserControls.TextEditor.BasicTextEditor">
            <summary>Allows public access of the BasicTextEditor</summary>
        </member>
        <member name="M:DotNetNuke.UI.UserControls.TextEditor.Decode(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Decodes the html
            </summary>
            <remarks>
            </remarks>
            <param name="strHtml">Html to decode</param>
            <returns>The decoded html</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.UserControls.TextEditor.Encode(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Encodes the html
            </summary>
            <remarks>
            </remarks>
            <param name="strHtml">Html to encode</param>
            <returns>The encoded html</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.UserControls.TextEditor.PopulateLists">
            -----------------------------------------------------------------------------
            <summary>
            Builds the radio button lists
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.UserControls.TextEditor.SetPanels">
            -----------------------------------------------------------------------------
            <summary>
            Sets the Mode displayed
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.UserControls.TextEditor.OnLoad(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Page_Load runs when the control is loaded
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.UserControls.TextEditor.OptRenderSelectedIndexChanged(System.Object,System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            optRender_SelectedIndexChanged runs when Basic Text Box mode is changed
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.UserControls.TextEditor.OptViewSelectedIndexChanged(System.Object,System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            optView_SelectedIndexChanged runs when Editor Mode is changed
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.UserControls.User">
            -----------------------------------------------------------------------------
            <summary>
            The User UserControl is used to manage User Details
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.UserControls.User.OnLoad(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Page_Load runs when the control is loaded
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.UserControls.LocaleSelectorControl">
            -----------------------------------------------------------------------------
            <summary>
              LocaleSelectorControl is a user control that provides all the server code to manage
              localisation selection
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.Utilities.DNNClientAPI">
             -----------------------------------------------------------------------------
             Project	 : DotNetNuke
             Class	 : ClientAPI
            
             -----------------------------------------------------------------------------
             <summary>
             Library responsible for interacting with DNN Client API.
             </summary>
             <remarks>
             </remarks>
        </member>
        <member name="M:DotNetNuke.UI.Utilities.DNNClientAPI.EnableContainerDragAndDrop(System.Web.UI.Control,System.Web.UI.Control,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Allows any module to have drag and drop functionality enabled
            </summary>
            <param name="objTitle">Title element that responds to the click and dragged</param>
            <param name="objContainer">Container</param>
            <param name="ModuleID">Module ID</param>
            <remarks>
            This sub also will send down information to notify the client of the panes that have been defined in the current skin.
            </remarks>
        </member>
        <member name="M:DotNetNuke.UI.Utilities.DNNClientAPI.EnableMinMax(System.Web.UI.Control,System.Web.UI.Control,System.Boolean,DotNetNuke.UI.Utilities.DNNClientAPI.MinMaxPersistanceType)">
            -----------------------------------------------------------------------------
            <summary>
            Allows a button and a content area to support client side min/max functionality
            </summary>
            <param name="objButton">Control that when clicked causes content area to be hidden/shown</param>
            <param name="objContent">Content area that is hidden/shown</param>
            <param name="blnDefaultMin">If content area is to be defaulted to minimized pass in true</param>
            <param name="ePersistanceType">How to store current state of min/max.  Cookie, Page, None</param>
            <remarks>
            This method's purpose is to provide a higher level of abstraction between the ClientAPI and the module developer.
            </remarks>
        </member>
        <member name="M:DotNetNuke.UI.Utilities.DNNClientAPI.EnableMinMax(System.Web.UI.Control,System.Web.UI.Control,System.Int32,System.Boolean,System.String,System.String,DotNetNuke.UI.Utilities.DNNClientAPI.MinMaxPersistanceType)">
            -----------------------------------------------------------------------------
            <summary>
            Allows a button and a content area to support client side min/max functionality
            </summary>
            <param name="objButton">Control that when clicked causes content area to be hidden/shown</param>
            <param name="objContent">Content area that is hidden/shown</param>
            <param name="intModuleId">Module id of button/content, used only for persistance type of Cookie</param>
            <param name="blnDefaultMin">If content area is to be defaulted to minimized pass in true</param>
            <param name="strMinIconLoc">Location of minimized icon</param>
            <param name="strMaxIconLoc">Location of maximized icon</param>
            <param name="ePersistanceType">How to store current state of min/max.  Cookie, Page, None</param>
            <remarks>
            This method's purpose is to provide a higher level of abstraction between the ClientAPI and the module developer.
            </remarks>
        </member>
        <member name="T:DotNetNuke.UI.WebControls.ActionLink">
            -----------------------------------------------------------------------------
            Project	 : DotNetNuke
            Namespace: DotNetNuke.UI.WebControls
            Class	 : ActionLink
            -----------------------------------------------------------------------------
            <summary>
            ActionLink provides a button for a single action.
            </summary>
            <remarks>
            ActionBase inherits from HyperLink
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.ActionLink.CreateChildControls">
            -----------------------------------------------------------------------------
            <summary>
            CreateChildControls builds the control tree
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.ActionLink.OnPreRender(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnPreRender runs when just before the Render phase of the Page Lifecycle
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.CaptchaControl">
            <summary>
            The CaptchaControl control provides a Captcha Challenge control
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CaptchaControl.BackGroundColor">
            <summary>
            Gets and sets the BackGroundColor
            </summary>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CaptchaControl.BackGroundImage">
            <summary>
            Gets and sets the BackGround Image
            </summary>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CaptchaControl.CaptchaChars">
            <summary>
            Gets and sets the list of characters
            </summary>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CaptchaControl.CaptchaHeight">
            <summary>
            Gets and sets the height of the Captcha image
            </summary>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CaptchaControl.CaptchaLength">
            <summary>
            Gets and sets the length of the Captcha string
            </summary>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CaptchaControl.CaptchaWidth">
            <summary>
            Gets and sets the width of the Captcha image
            </summary>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CaptchaControl.EnableViewState">
            <summary>
            Gets and sets whether the Viewstate is enabled
            </summary>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CaptchaControl.ErrorMessage">
            <summary>
            Gets and sets the ErrorMessage to display if the control is invalid
            </summary>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CaptchaControl.ErrorStyle">
            <summary>
            Gets and sets the BackGroundColor
            </summary>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CaptchaControl.Expiration">
            <summary>
            Gets and sets the Expiration time in seconds
            </summary>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CaptchaControl.IsValid">
            <summary>
            Gets whether the control is valid
            </summary>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CaptchaControl.RenderUrl">
            <summary>
            Gets and sets the Url to use to render the control
            </summary>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CaptchaControl.Text">
            <summary>
            Gets and sets the Help Text to use
            </summary>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CaptchaControl.TextBoxStyle">
            <summary>
            Gets the Style to use for the Text Box
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CaptchaControl.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
            -----------------------------------------------------------------------------
            <summary>
            LoadPostData loads the Post Back Data and determines whether the value has change
            </summary>
            <param name="postDataKey">A key to the PostBack Data to load</param>
            <param name="postCollection">A name value collection of postback data</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CaptchaControl.RaisePostDataChangedEvent">
            -----------------------------------------------------------------------------
            <summary>
            RaisePostDataChangedEvent runs when the PostBackData has changed. 
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CaptchaControl.GetUrl">
            <summary>
            Builds the url for the Handler
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CaptchaControl.EncodeTicket">
            <summary>
            Encodes the querystring to pass to the Handler
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CaptchaControl.CreateImage(System.Int32,System.Int32)">
            <summary>
            Creates the Image
            </summary>
            <param name="width">The width of the image</param>
            <param name="height">The height of the image</param>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CaptchaControl.CreateText(System.String,System.Int32,System.Int32,System.Drawing.Graphics)">
            <summary>
            Creates the Text
            </summary>
            <param name="text">The text to display</param>
            <param name="width">The width of the image</param>
            <param name="height">The height of the image</param>
            <param name="g">Graphic draw context.</param>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CaptchaControl.Decrypt(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Decrypts the CAPTCHA Text
            </summary>
            <param name="encryptedContent">The encrypted text</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CaptchaControl.DistortImage(System.Drawing.Bitmap@,System.Double)">
            -----------------------------------------------------------------------------
            <summary>
            DistortImage distorts the captcha image
            </summary>
            <param name="b">The Image to distort</param>
            <param name="distortion">Distortion.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CaptchaControl.Encrypt(System.String,System.DateTime)">
            -----------------------------------------------------------------------------
            <summary>
            Encrypts the CAPTCHA Text
            </summary>
            <param name="content">The text to encrypt</param>
            <param name="expiration">The time the ticket expires</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CaptchaControl.GenerateImage(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            GenerateImage generates the Captch Image
            </summary>
            <param name="encryptedText">The Encrypted Text to display</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CaptchaControl.GetFont">
            -----------------------------------------------------------------------------
            <summary>
            GetFont gets a random font to use for the Captcha Text
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CaptchaControl.RandomPoint(System.Int32,System.Int32,System.Int32,System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            Generates a random point
            </summary>
            <param name="xmin">The minimum x value</param>
            <param name="xmax">The maximum x value</param>
            <param name="ymin">The minimum y value</param>
            <param name="ymax">The maximum y value</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CaptchaControl.WarpText(System.Drawing.Drawing2D.GraphicsPath@,System.Drawing.Rectangle)">
            -----------------------------------------------------------------------------
            <summary>
            Warps the Text
            </summary>
            <param name="textPath">The Graphics Path for the text</param>
            <param name="rect">a rectangle which defines the image</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CaptchaControl.CreateChildControls">
            <summary>
            Creates the child controls
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CaptchaControl.GetNextCaptcha">
            <summary>
            Gets the next Captcha
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CaptchaControl.LoadViewState(System.Object)">
            <summary>
            Loads the previously saved Viewstate
            </summary>
            <param name="savedState">The saved state</param>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CaptchaControl.OnPreRender(System.EventArgs)">
            <summary>
            Runs just before the control is to be rendered
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CaptchaControl.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Render the  control
            </summary>
            <param name="writer">An Html Text Writer</param>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CaptchaControl.SaveViewState">
            <summary>
            Save the controls Voewstate
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CaptchaControl.Validate(System.String)">
            <summary>
            Validates the posted back data
            </summary>
            <param name="userData">The user entered data</param>
        </member>
        <member name="T:DotNetNuke.UI.WebControls.CaptchaHandler">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      CaptchaHandler
            -----------------------------------------------------------------------------
            <summary>
            The CaptchaHandler control provides a validator to validate a CAPTCHA Challenge
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.CommandButton">
            -----------------------------------------------------------------------------
            Namespace:  DotNetNuke.UI.WebControls
            Project:    DotNetNuke
            Class:      CommandButton
            -----------------------------------------------------------------------------
            <summary>
            The CommandButton Class provides an enhanced Button control for DotNetNuke
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CommandButton.ButtonSeparator">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets the Separator between Buttons
            </summary>
            <remarks>Defaults to 1 non-breaking spaces</remarks>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CommandButton.CausesValidation">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets whether the control causes Validation to occur
            </summary>
            <remarks>Defaults to True</remarks>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CommandButton.CommandArgument">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets the command argument for this command button
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CommandButton.CommandName">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets the command name for this command button
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CommandButton.DisplayLink">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets whether the link is displayed
            </summary>
            <remarks>Defaults to True</remarks>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CommandButton.DisplayIcon">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets whether the icon is displayed
            </summary>
            <remarks>Defaults to True</remarks>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CommandButton.ImageUrl">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets the Image used for the Icon
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CommandButton.IconKey">
            -----------------------------------------------------------------------------
            <summary>
            The Icon Key to obtain ImageURL
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CommandButton.IconSize">
            -----------------------------------------------------------------------------
            <summary>
            The Icon Siz to obtain ImageURL
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CommandButton.IconStyle">
            -----------------------------------------------------------------------------
            <summary>
            The Icon Style to obtain ImageURL
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CommandButton.OnClick">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets the "onClick" Attribute
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CommandButton.OnClientClick">
            -----------------------------------------------------------------------------
            <summary>
              Gets or sets the "OnClientClick" Property
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CommandButton.ResourceKey">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets the Resource Key used for the Control
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CommandButton.Text">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets the Text used for the Control
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CommandButton.ToolTipKey">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets the tooltip resource key used for the Control
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CommandButton.ValidationGroup">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets the Validation Group that this control "validates"
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CommandButton.CreateChildControls">
            -----------------------------------------------------------------------------
            <summary>
            CreateChildControls overrides the Base class's method to correctly build the
            control based on the configuration
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CommandButton.OnButtonClick(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnButtonClick raises the CommandButton control's Click event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CommandButton.OnCommand(System.Web.UI.WebControls.CommandEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnCommand raises the CommandButton control's Command event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CommandButton.OnPreRender(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnPreRender runs just before the Render phase of the Page Life Cycle
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CommandButton.RaiseClick(System.Object,System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            RaiseClick runs when one of the contained Link buttons is clciked
            </summary>
            <remarks>It raises a Click Event.
            </remarks>
            <param name="sender"> The object that triggers the event</param>
            <param name="e">An EventArgs object</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CommandButton.RaiseCommand(System.Object,System.Web.UI.WebControls.CommandEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            RaiseCommand runs when one of the contained Link buttons is clicked
            </summary>
            <remarks>It raises a Command Event.
            </remarks>
            <param name="sender"> The object that triggers the event</param>
            <param name="e">An CommandEventArgs object</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CommandButton.RaiseImageClick(System.Object,System.Web.UI.ImageClickEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            RaiseImageClick runs when the Image button is clicked
            </summary>
            <remarks>It raises a Command Event.
            </remarks>
            <param name="sender"> The object that triggers the event</param>
            <param name="e">An ImageClickEventArgs object</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.CheckBoxColumn">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      CheckBoxColumn
            -----------------------------------------------------------------------------
            <summary>
            The CheckBoxColumn control provides a Check Box column for a Data Grid
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CheckBoxColumn.#ctor">
            -----------------------------------------------------------------------------
            <summary>
            Constructs the CheckBoxColumn
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CheckBoxColumn.#ctor(System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            Constructs the CheckBoxColumn, with an optional AutoPostBack (where each change
            of state of a check box causes a Post Back)
            </summary>
            <param name="autoPostBack">Optional set the checkboxes to postback</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CheckBoxColumn.AutoPostBack">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the column fires a postback when any check box is 
            changed
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CheckBoxColumn.Checked">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the checkbox is checked (unless DataBound) 
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CheckBoxColumn.DataField">
            -----------------------------------------------------------------------------
            <summary>
            The Data Field that the column should bind to
            changed
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CheckBoxColumn.Enabled">
            -----------------------------------------------------------------------------
            <summary>
            An flag that indicates whether the checkboxes are enabled (this is overridden if
            the EnabledField is set)
            changed
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CheckBoxColumn.EnabledField">
            -----------------------------------------------------------------------------
            <summary>
            The Data Field that determines whether the checkbox is Enabled
            changed
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CheckBoxColumn.HeaderCheckBox">
            -----------------------------------------------------------------------------
            <summary>
            A flag that indicates whether there is a checkbox in the Header that sets all
            the checkboxes
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CheckBoxColumn.CreateTemplate(System.Web.UI.WebControls.ListItemType)">
            -----------------------------------------------------------------------------
            <summary>
            Creates a CheckBoxColumnTemplate
            </summary>
            <returns>A CheckBoxColumnTemplate</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CheckBoxColumn.OnCheckedChanged(System.Object,DotNetNuke.UI.WebControls.DNNDataGridCheckChangedEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Centralised Event that is raised whenever a check box is changed.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CheckBoxColumn.Initialize">
            -----------------------------------------------------------------------------
            <summary>
            Initialises the Column
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.CheckBoxColumnTemplate">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      CheckBoxColumnTemplate
            -----------------------------------------------------------------------------
            <summary>
            The CheckBoxColumnTemplate provides a Template for the CheckBoxColumn
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CheckBoxColumnTemplate.AutoPostBack">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the column fires a postback when any check box is
            changed
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CheckBoxColumnTemplate.Checked">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the checkbox is checked (unless DataBound)
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CheckBoxColumnTemplate.DataField">
            -----------------------------------------------------------------------------
            <summary>
            The Data Field that the column should bind to
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CheckBoxColumnTemplate.DesignMode">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets the Design Mode of the Column
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CheckBoxColumnTemplate.Enabled">
            -----------------------------------------------------------------------------
            <summary>
            An flag that indicates whether the hcekboxes are enabled (this is overridden if
            the EnabledField is set
            changed
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CheckBoxColumnTemplate.EnabledField">
            -----------------------------------------------------------------------------
            <summary>
            The Data Field that determines whether the checkbox is Enabled
            changed
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CheckBoxColumnTemplate.HeaderCheckBox">
            -----------------------------------------------------------------------------
            <summary>
            A flag that indicates whether there is a checkbox in the Header that sets all
            the checkboxes
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CheckBoxColumnTemplate.ItemType">
            -----------------------------------------------------------------------------
            <summary>
            The type of Template to Create
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CheckBoxColumnTemplate.Text">
            -----------------------------------------------------------------------------
            <summary>
            The Text to display in a Header Template
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CheckBoxColumnTemplate.InstantiateIn(System.Web.UI.Control)">
            -----------------------------------------------------------------------------
            <summary>
            InstantiateIn is called when the Template is instantiated by the parent control
            </summary>
            <param name="container">The container control</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CheckBoxColumnTemplate.Item_DataBinding(System.Object,System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Called when the template item is Data Bound
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CheckBoxColumnTemplate.OnCheckChanged(System.Object,System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Centralised Event that is raised whenever a check box's state is modified
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.DNNDataGrid">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      DNNDataGrid
            -----------------------------------------------------------------------------
            <summary>
            The DNNDataGrid control provides an Enhanced Data Grid, that supports other
            column types
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.DNNDataGrid.OnItemCheckedChanged(System.Object,DotNetNuke.UI.WebControls.DNNDataGridCheckChangedEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Centralised Event that is raised whenever a check box is changed.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.DNNDataGrid.OnDataBinding(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Called when the grid is Data Bound
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.DNNDataGridCheckChangedEventArgs">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      DNNDataGrid
            -----------------------------------------------------------------------------
            <summary>
            The DNNDataGridCheckChangedEventArgs class is a cusom EventArgs class for
            handling Event Args from the CheckChanged event in a CheckBox Column
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumn">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      DNNMultiStateBoxColumn
            -----------------------------------------------------------------------------
            <summary>
            The DNNMultiStateBoxColumn control provides a DNNMultiState Box column for a Data Grid
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumn.#ctor">
            -----------------------------------------------------------------------------
            <summary>
            Constructs the DNNMultiStateBoxColumn
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumn.#ctor(System.Boolean)">
            -----------------------------------------------------------------------------
            <summary>
            Constructs the MultiStateBoxColumn, with an optional AutoPostBack (where each change
            of state of the control causes a Post Back)
            </summary>
            <param name="autoPostBack">Optional set the control to postback</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumn.AutoPostBack">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the column fires a postback when the control changes
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumn.SelectedStateKey">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the selected state of the DNNMultiStateBox (unless DataBound) 
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumn.DataField">
            -----------------------------------------------------------------------------
            <summary>
            The Data Field that the column should bind to
            changed
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumn.Enabled">
            -----------------------------------------------------------------------------
            <summary>
            An flag that indicates whether the control is enabled (this is overridden if
            the EnabledField is set)
            changed
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumn.EnabledField">
            -----------------------------------------------------------------------------
            <summary>
            The Data Field that determines whether the control is Enabled
            changed
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumn.ImagePath">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the image path of the DNNMultiStateBox 
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumn.States">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the state collection of the DNNMultiStateBox 
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumn.CreateTemplate(System.Web.UI.WebControls.ListItemType)">
            -----------------------------------------------------------------------------
            <summary>
            Creates a DNNMultiStateBoxColumnTemplate
            </summary>
            <returns>A DNNMultiStateBoxColumnTemplate</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumn.Initialize">
            -----------------------------------------------------------------------------
            <summary>
            Initialises the Column
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumnTemplate">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      DNNMultiStateBoxColumnTemplate
            -----------------------------------------------------------------------------
            <summary>
            The DNNMultiStateBoxColumnTemplate provides a Template for the DNNMultiStateBoxColumn
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumnTemplate.AutoPostBack">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the column fires a postback when the control changes
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumnTemplate.SelectedStateKey">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the selected state of the DNNMultiStateBox (unless DataBound)
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumnTemplate.DataField">
            -----------------------------------------------------------------------------
            <summary>
            The Data Field that the column should bind to
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumnTemplate.DesignMode">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets the Design Mode of the Column
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumnTemplate.Enabled">
            -----------------------------------------------------------------------------
            <summary>
            An flag that indicates whether the control is enabled (this is overridden if
            the EnabledField is set
            changed
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumnTemplate.EnabledField">
            -----------------------------------------------------------------------------
            <summary>
            The Data Field that determines whether the control is Enabled
            changed
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumnTemplate.ItemType">
            -----------------------------------------------------------------------------
            <summary>
            The type of Template to Create
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumnTemplate.Text">
            -----------------------------------------------------------------------------
            <summary>
            The Text to display in a Header Template
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumnTemplate.ImagePath">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the image path of the DNNMultiStateBox
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumnTemplate.States">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the state collection of the DNNMultiStateBox
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumnTemplate.InstantiateIn(System.Web.UI.Control)">
            -----------------------------------------------------------------------------
            <summary>
            InstantiateIn is called when the Template is instantiated by the parent control
            </summary>
            <param name="container">The container control</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.DNNMultiStateBoxColumnTemplate.Item_DataBinding(System.Object,System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Called when the template item is Data Bound
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.ImageCommandColumn">
            <summary>
            The ImageCommandColumn control provides an Image Command (or Hyperlink) column
            for a Data Grid
            </summary>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.ImageCommandColumn.CommandName">
            <summary>
            Gets or sets the CommandName for the Column
            </summary>
            <value>A String</value>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.ImageCommandColumn.EditMode">
            <summary>
            EditMode for the Column
            </summary>
            <value>A String</value>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.ImageCommandColumn.ImageURL">
            <summary>
            Gets or sets the URL of the Image
            </summary>
            <value>A String</value>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.ImageCommandColumn.IconKey">
            <summary>
            The Icon Key to obtain ImageURL
            </summary>
            <value>A String</value>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.ImageCommandColumn.IconSize">
            <summary>
            The Icon Siz to obtain ImageURL
            </summary>
            <value>A String</value>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.ImageCommandColumn.IconStyle">
            <summary>
            The Icon Style to obtain ImageURL
            </summary>
            <value>A String</value>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.ImageCommandColumn.KeyField">
            <summary>
            The Key Field that provides a Unique key to the data Item
            </summary>
            <value>A String</value>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.ImageCommandColumn.NavigateURL">
            <summary>
            Gets or sets the URL of the Link (unless DataBinding through KeyField)
            </summary>
            <value>A String</value>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.ImageCommandColumn.NavigateURLFormatString">
            <summary>
            Gets or sets the URL Formatting string
            </summary>
            <value>A String</value>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.ImageCommandColumn.OnClickJS">
            <summary>
            Javascript text to attach to the OnClick Event
            </summary>
            <value>A String</value>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.ImageCommandColumn.ShowImage">
            <summary>
            Gets or sets whether an Image is displayed
            </summary>
            <remarks>Defaults to True</remarks>
            <value>A Boolean</value>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.ImageCommandColumn.Text">
            <summary>
            Gets or sets the Text (for Header/Footer Templates)
            </summary>
            <value>A String</value>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.ImageCommandColumn.VisibleField">
            <summary>
            An flag that indicates whether the buttons are visible.
            </summary>
            <value>A Boolean</value>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.ImageCommandColumn.CreateTemplate(System.Web.UI.WebControls.ListItemType)">
            <summary>
            Creates a ImageCommandColumnTemplate
            </summary>
            <returns>A ImageCommandColumnTemplate</returns>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.ImageCommandColumn.Initialize">
            <summary>
            Initialises the Column
            </summary>
        </member>
        <member name="T:DotNetNuke.UI.WebControls.ImageCommandColumnEditMode">
            -----------------------------------------------------------------------------
            Namespace:  DotNetNuke.UI.WebControls
            Project:    DotNetNuke
            Enum:       ImageCommandColumnEditMode
            -----------------------------------------------------------------------------
            <summary>
            The ImageCommandColumnEditMode Enum provides an enumeration of the types
            for how the Grid responds to an Edit Command
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      ImageCommandColumnTemplate
            -----------------------------------------------------------------------------
            <summary>
            The ImageCommandColumnTemplate provides a Template for the ImageCommandColumn
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.CommandName">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets the CommandName for the Column
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.DesignMode">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets the Design Mode of the Column
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.EditMode">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets the CommandName for the Column
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.ImageURL">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets the URL of the Image
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.ItemType">
            -----------------------------------------------------------------------------
            <summary>
            The type of Template to Create
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.KeyField">
            -----------------------------------------------------------------------------
            <summary>
            The Key Field that provides a Unique key to the data Item
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.NavigateURL">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets the URL of the Link (unless DataBinding through KeyField)
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.NavigateURLFormatString">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets the URL Formatting string
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.OnClickJS">
            -----------------------------------------------------------------------------
            <summary>
            Javascript text to attach to the OnClick Event
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.ShowImage">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets whether an Image is displayed
            </summary>
            <remarks>Defaults to True</remarks>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.Text">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets the Text (for Header/Footer Templates)
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.Visible">
            -----------------------------------------------------------------------------
            <summary>
            An flag that indicates whether the buttons are visible (this is overridden if
            the VisibleField is set)
            changed
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.VisibleField">
            -----------------------------------------------------------------------------
            <summary>
            An flag that indicates whether the buttons are visible.
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.InstantiateIn(System.Web.UI.Control)">
            -----------------------------------------------------------------------------
            <summary>
            InstantiateIn instantiates the template (implementation of ITemplate)
            </summary>
            <remarks>
            </remarks>
            <param name="container">The parent container (DataGridItem)</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.GetIsVisible(System.Web.UI.WebControls.DataGridItem)">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether theButton is visible
            </summary>
            <param name="container">The parent container (DataGridItem)</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.GetValue(System.Web.UI.WebControls.DataGridItem)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value of the key
            </summary>
            <param name="container">The parent container (DataGridItem)</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.ImageCommandColumnTemplate.Item_DataBinding(System.Object,System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Item_DataBinding runs when an Item of type ListItemType.Item is being data-bound
            </summary>
            <remarks>
            </remarks>
            <param name="sender"> The object that triggers the event</param>
            <param name="e">An EventArgs object</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.Internal.PermissionTriState">
            <summary>
            A TriState permission control built specifically for use in the PermissionGrid control
            This control is not general in any way shape of form and should NOT be used outside 
            of the PermissionGrid
            </summary>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.RolesSelectionGrid.SelectedRoleNames">
            <summary>
            List of the Names of the selected Roles
            </summary>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.RolesSelectionGrid.ResourceFile">
            <summary>
            Gets and Sets the ResourceFile to localize permissions
            </summary>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.RolesSelectionGrid.ShowUnauthenticatedUsers">
            <summary>
            Enable ShowAllUsers to display the virtuell "Unauthenticated Users" role
            </summary>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.RolesSelectionGrid.ShowAllUsers">
            <summary>
            Enable ShowAllUsers to display the virtuell "All Users" role
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.RolesSelectionGrid.BindData">
            <summary>
            Bind the data to the controls
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.RolesSelectionGrid.BindRolesGrid">
            <summary>
            Bind the Roles data to the Grid
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.RolesSelectionGrid.GetRoles">
            <summary>
            Gets the roles from the Database and loads them into the Roles property
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.RolesSelectionGrid.SetUpRolesGrid">
            <summary>
            Sets up the columns for the Grid
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.RolesSelectionGrid.LoadViewState(System.Object)">
            <summary>
            Load the ViewState
            </summary>
            <param name="savedState">The saved state</param>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.RolesSelectionGrid.SaveViewState">
            <summary>
            Saves the ViewState
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.RolesSelectionGrid.CreateChildControls">
            <summary>
            Creates the Child Controls
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.RolesSelectionGrid.OnPreRender(System.EventArgs)">
            <summary>
            Overrides the base OnPreRender method to Bind the Grid to the Permissions
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.RolesSelectionGrid.UpdateSelection(System.String,System.Boolean)">
            <summary>
            Updates a Selection
            </summary>
            <param name="roleName">The name of the role</param>
            <param name="Selected"></param>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.RolesSelectionGrid.UpdateSelections">
            <summary>
            Updates the Selections
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.RolesSelectionGrid.UpdateRoleSelections">
            <summary>
            Updates the permissions
            </summary>
        </member>
        <member name="T:DotNetNuke.UI.WebControls.TextColumn">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      TextColumn
            -----------------------------------------------------------------------------
            <summary>
            The TextColumn control provides a custom Text Column
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.TextColumn.DataField">
            -----------------------------------------------------------------------------
            <summary>
            The Data Field is the field that binds to the Text Column
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.TextColumn.Text">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets the Text (for Header/Footer Templates)
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.TextColumn.Width">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets the Width of the Column
            </summary>
            <value>A Unit</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.TextColumn.CreateTemplate(System.Web.UI.WebControls.ListItemType)">
            -----------------------------------------------------------------------------
            <summary>
            Creates a TextColumnTemplate
            </summary>
            <returns>A TextColumnTemplate</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.TextColumn.Initialize">
            -----------------------------------------------------------------------------
            <summary>
            Initialises the Column
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.TextColumnTemplate">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      TextColumnTemplate
            -----------------------------------------------------------------------------
            <summary>
            The TextColumnTemplate provides a Template for the TextColumn
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.TextColumnTemplate.DataField">
            -----------------------------------------------------------------------------
            <summary>
            The Data Field is the field that binds to the Text Column
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.TextColumnTemplate.DesignMode">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets the Design Mode of the Column
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.TextColumnTemplate.ItemType">
            -----------------------------------------------------------------------------
            <summary>
            The type of Template to Create
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.TextColumnTemplate.Text">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets the Text (for Header/Footer Templates)
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.TextColumnTemplate.Width">
            -----------------------------------------------------------------------------
            <summary>
            Gets or sets the Width of the Column
            </summary>
            <value>A Unit</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.TextColumnTemplate.InstantiateIn(System.Web.UI.Control)">
            -----------------------------------------------------------------------------
            <summary>
            InstantiateIn instantiates the template (implementation of ITemplate)
            </summary>
            <remarks>
            </remarks>
            <param name="container">The parent container (DataGridItem)</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.TextColumnTemplate.GetValue(System.Web.UI.WebControls.DataGridItem)">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value of the Data Field
            </summary>
            <param name="container">The parent container (DataGridItem)</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.TextColumnTemplate.Item_DataBinding(System.Object,System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Item_DataBinding runs when an Item of type ListItemType.Item is being data-bound
            </summary>
            <remarks>
            </remarks>
            <param name="sender"> The object that triggers the event</param>
            <param name="e">An EventArgs object</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DualListBox.AvailableListBoxStyle">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value of the Available List Box Style
            </summary>
            <value>A Style object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DualListBox.ButtonStyle">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value of the Button Style
            </summary>
            <value>A Style object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DualListBox.ContainerStyle">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value of the Container Style
            </summary>
            <value>A Style object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DualListBox.HeaderStyle">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value of the Header Style
            </summary>
            <value>A Style object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DualListBox.SelectedListBoxStyle">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value of the Selected List Box Style
            </summary>
            <value>A Style object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.DualListBoxEventArgs">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      DualListBoxEventArgs
            -----------------------------------------------------------------------------
            <summary>
            The DualListBoxEventArgs class is a cusom EventArgs class for
            handling Event Args in the DualListBox.
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.DualListBoxEventArgs.#ctor(System.Collections.Generic.List{System.String})">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a new DualListBoxEventArgs
            </summary>
            <param name="items">The items</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DualListBoxEventArgs.Items">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Items
            </summary>
            <value>A List(Of String)</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.LanguageSelector">
            <summary>
            Language Selector control
            </summary>
        </member>
        <member name="T:DotNetNuke.UI.WebControls.LanguageSelector.LanguageSelectionMode">
            <summary>
            Language Selection mode, offered to the user: single select or multiple select.
            </summary>
        </member>
        <member name="T:DotNetNuke.UI.WebControls.LanguageSelector.LanguageSelectionObject">
            <summary>
            Selection object: Language ("de", "en") or Locale ("de-DE", "en-US")
            </summary>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.LanguageSelector.SelectionMode">
            <summary>
            Gets or sets selection mode (single, multiple)
            </summary>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.LanguageSelector.SelectionObject">
            <summary>
            Gets or sets the type of objects to be selectable: NeutralCulture ("de") or SpecificCulture ("de-DE")
            </summary>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.LanguageSelector.ItemStyle">
            <summary>
            Gets or sets the style of the language items
            </summary>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.LanguageSelector.ListDirection">
            <summary>
            Gets or sets the direction of the language list
            </summary>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.LanguageSelector.SelectedLanguages">
            <summary>
            Gets or sets the list of selected languages
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.LanguageSelector.CreateChildControls">
            <summary>
            Create Child Controls
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.LanguageSelector.GetCultures(System.Boolean)">
            <summary>
            retrieve the cultures, currently supported by the portal
            </summary>
            <param name="specific">true: locales, false: neutral languages</param>
            <returns>Array of cultures</returns>
        </member>
        <member name="T:DotNetNuke.UI.WebControls.NavDataPageHierarchicalEnumerable">
            <summary>A collection of PageHierarchyData objects</summary>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.NavDataPageHierarchicalEnumerable.GetHierarchyData(System.Object)">
            <summary>
            Handles enumeration
            </summary>
            <param name="enumeratedItem"></param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.NavDataPageHierarchyData.ImageUrl">
            <summary>
            Returns nodes image
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.NavDataPageHierarchyData.HasChildren">
            <summary>
            Indicates whether the hierarchical data node that the IHierarchyData object represents has any child nodes.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.NavDataPageHierarchyData.Path">
            <summary>
            Gets the hierarchical path of the node.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.NavDataPageHierarchyData.Item">
            <summary>
            Gets the hierarchical data node that the IHierarchyData object represents.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.NavDataPageHierarchyData.Type">
            <summary>
            Gets the name of the type of Object contained in the Item property.
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.NavDataPageHierarchyData.GetChildren">
            <summary>
            Gets an enumeration object that represents all the child nodes of the current hierarchical node.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.NavDataPageHierarchyData.GetParent">
            <summary>
            Gets an enumeration object that represents the parent node of the current hierarchical node.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.NavDataPageHierarchyData.Name">
            <summary>
            Returns node name
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.NavDataPageHierarchyData.Value">
            <summary>
            Returns value path of node
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.NavDataPageHierarchyData.NavigateUrl">
            <summary>
            Returns node navigation url
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.NavDataPageHierarchyData.Description">
            <summary>
            Returns Node description
            </summary>
            <value></value>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.NavDataPageHierarchyData.GetSafeValue(System.String,System.String)">
            <summary>
            Helper function to handle cases where property is null (Nothing)
            </summary>
            <param name="Value">Value to evaluate for null</param>
            <param name="Def">If null, return this default</param>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.NavDataPageHierarchyData.GetValuePath(DotNetNuke.UI.WebControls.DNNNode)">
            <summary>
            Computes valuepath necessary for ASP.NET controls to guarantee uniqueness
            </summary>
            <param name="objNode"></param>
            <returns>ValuePath</returns>
            <remarks>Not sure if it is ok to hardcode the "\" separator, but also not sure where I would get it from</remarks>
        </member>
        <member name="T:DotNetNuke.UI.WebControls.NavDataSourceView">
            <summary>The NavDataSourceView class encapsulates the capabilities of the NavDataSource data source control.</summary>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.NavDataSourceView.Select">
            <summary>
            Starting with the rootNode, recursively build a list of
            PageInfo nodes, create PageHierarchyData
            objects, add them all to the PageHierarchicalEnumerable,
            and return the list.
            </summary>
            <returns></returns>
            <remarks></remarks>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.PagingControl.GetLink(System.Int32)">
            <summary>
            GetLink returns the page number links for paging.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.PagingControl.GetPreviousLink">
            <summary>
            GetPreviousLink returns the link for the Previous page for paging.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.PagingControl.GetNextLink">
            <summary>
            GetNextLink returns the link for the Next Page for paging.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.PagingControl.GetFirstLink">
            <summary>
            GetFirstLink returns the First Page link for paging.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.PagingControl.GetLastLink">
            <summary>
            GetLastLink returns the Last Page link for paging.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:DotNetNuke.UI.WebControls.PagingControlMode">
            -----------------------------------------------------------------------------
            Namespace:  DotNetNuke.UI.WebControls
            Project:    DotNetNuke
            Enum:       PagingControlMode
            -----------------------------------------------------------------------------
            <summary>
            The PagingControlMode Enum provides an enumeration of the modes of the Paging
            Control
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.CollectionEditorInfoAdapter">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      CollectionEditorInfoFactory
            -----------------------------------------------------------------------------
            <summary>
            The CollectionEditorInfoAdapter control provides an Adapter for Collection Onjects
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CollectionEditorInfoAdapter.GetEditorInfo">
            -----------------------------------------------------------------------------
            <summary>
            GetEditorInfo builds an EditorInfo object for a propoerty
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.IEditorInfoAdapter">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      IEditorInfoAdapter
            -----------------------------------------------------------------------------
            <summary>
            The IEditorInfoAdapter control provides an Adapter Interface for datasources 
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.SettingsEditorInfoAdapter">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      SettingsEditorInfoAdapter
            -----------------------------------------------------------------------------
            <summary>
            The SettingsEditorInfoAdapter control provides a factory for creating the
            appropriate EditInfo object
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.StandardEditorInfoAdapter">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      StandardEditorInfoAdapter
            -----------------------------------------------------------------------------
            <summary>
            The StandardEditorInfoAdapter control provides an Adapter for standard datasources
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.StandardEditorInfoAdapter.GetEditorInfo(System.Object,System.Reflection.PropertyInfo)">
            -----------------------------------------------------------------------------
            <summary>
            GetEditorInfo builds an EditorInfo object for a propoerty
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.StandardEditorInfoAdapter.GetProperty(System.Object,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            GetProperty returns the property that is being "bound" to
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.CollectionEditorControl">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      CollectionEditorControl
            -----------------------------------------------------------------------------
            <summary>
            The CollectionEditorControl control provides a Control to display Collection
            Properties.
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CollectionEditorControl.UnderlyingDataSource">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Underlying DataSource
            </summary>
            <value>An IEnumerable</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CollectionEditorControl.CategoryDataField">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the value of the Category
            </summary>
            <value>A string representing the Category of the Field</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CollectionEditorControl.EditorDataField">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the value of the Editor Type to use
            </summary>
            <value>A string representing the Editor Type of the Field</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CollectionEditorControl.LengthDataField">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the value of the Field that determines the length
            </summary>
            <value>A string representing the Name of the Field</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CollectionEditorControl.NameDataField">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the value of the Field that is bound to the Label
            </summary>
            <value>A string representing the Name of the Field</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CollectionEditorControl.RequiredDataField">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the value of the Field that determines whether an item is required
            </summary>
            <value>A string representing the Name of the Field</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CollectionEditorControl.TypeDataField">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the value of the Field that is bound to the EditControl
            </summary>
            <value>A string representing the Name of the Field</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CollectionEditorControl.ValidationExpressionDataField">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the value of the Field that is bound to the EditControl's 
            Expression DynamicContentValidator
            </summary>
            <value>A string representing the Name of the Field</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CollectionEditorControl.ValueDataField">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the value of the Field that is bound to the EditControl
            </summary>
            <value>A string representing the Name of the Field</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CollectionEditorControl.VisibleDataField">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the value of the Field that determines whether the control is visible
            </summary>
            <value>A string representing the Name of the Field</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.CollectionEditorControl.VisibilityDataField">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the value of the Field that determines the visibility
            </summary>
            <value>A string representing the Name of the Field</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CollectionEditorControl.GetCategory(System.Object)">
            -----------------------------------------------------------------------------
            <summary>
            GetCategory gets the Category of an object
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CollectionEditorControl.GetGroups(System.Collections.IEnumerable)">
            -----------------------------------------------------------------------------
            <summary>
            GetGroups gets an array of Groups/Categories from the DataSource
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.CollectionEditorControl.GetRowVisibility(System.Object)">
            -----------------------------------------------------------------------------
            <summary>
            GetRowVisibility determines the Visibility of a row in the table
            </summary>
            <param name="obj">The property</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.AutoCompleteControl">
            <summary>
            The AutoCompleteControl is the same as a TextEditControl but it looks up similar values
            in the profile of other users in the same portal and offers those in a dropdown under the text
            box where the user is entering the value. So if you'd use this as the input control
            for "City" it will find all entered cities and look up values as the user types the city in
            the textbox. Selection is not enforced and if a user enters a new city it is added to the list.
            </summary>
        </member>
        <member name="T:DotNetNuke.UI.WebControls.CheckEditControl">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      TrueFalseEditControl
            -----------------------------------------------------------------------------
            <summary>
            The TrueFalseEditControl control provides a standard UI component for editing
            true/false (boolean) properties.
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.DateEditControl">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      DateEditControl
            -----------------------------------------------------------------------------
            <summary>
            The DateEditControl control provides a standard UI component for editing
            date properties.
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DateEditControl.DateValue">
            -----------------------------------------------------------------------------
            <summary>
            DateValue returns the Date representation of the Value
            </summary>
            <value>A Date representing the Value</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DateEditControl.DefaultFormat">
            -----------------------------------------------------------------------------
            <summary>
            DefaultDateFormat is a string that will be used to format the date in the absence of a
            FormatAttribute
            </summary>
            <value>A String representing the default format to use to render the date</value>
            <returns>A Format String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DateEditControl.Format">
            -----------------------------------------------------------------------------
            <summary>
            Format is a string that will be used to format the date in View mode
            </summary>
            <value>A String representing the format to use to render the date</value>
            <returns>A Format String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DateEditControl.OldDateValue">
            -----------------------------------------------------------------------------
            <summary>
            OldDateValue returns the Date representation of the OldValue
            </summary>
            <value>A Date representing the OldValue</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DateEditControl.StringValue">
            <summary>
            The Value expressed as a String
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.DateEditControl.OnDataChanged(System.EventArgs)">
            <summary>
            OnDataChanged is called by the PostBack Handler when the Data has changed
            </summary>
            <param name="e">An EventArgs object</param>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.DateEditControl.RenderEditMode(System.Web.UI.HtmlTextWriter)">
            <summary>
            RenderEditMode is called by the base control to render the control in Edit Mode
            </summary>
            <param name="writer"></param>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.DateEditControl.RenderViewMode(System.Web.UI.HtmlTextWriter)">
            -----------------------------------------------------------------------------
            <summary>
            RenderViewMode renders the View (readonly) mode of the control
            </summary>
            <param name="writer">A HtmlTextWriter.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.DateTimeEditControl">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      DateTimeEditControl
            -----------------------------------------------------------------------------
            <summary>
            The DateTimeEditControl control provides a standard UI component for editing
            date and time properties.
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DateTimeEditControl.DefaultFormat">
            -----------------------------------------------------------------------------
            <summary>
            DefaultFormat is a string that will be used to format the date in the absence of a 
            FormatAttribute
            </summary>
            <value>A String representing the default format to use to render the date</value>
            <returns>A Format String</returns>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.DNNCountryEditControl">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      DNNCountryEditControl
            -----------------------------------------------------------------------------
            <summary>
            The DNNCountryEditControl control provides a standard UI component for editing
            Countries
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.DNNCountryEditControl.#ctor">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a DNNCountryEditControl
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.DNNListEditControl">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      DNNListEditControl
            -----------------------------------------------------------------------------
            <summary>
            The DNNListEditControl control provides a standard UI component for selecting
            from Lists
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DNNListEditControl.AutoPostBack">
            -----------------------------------------------------------------------------
            <summary>
            Determines whether the List Auto Posts Back
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DNNListEditControl.SortAlphabetically">
            -----------------------------------------------------------------------------
            <summary>
            If true the list will be sorted on the value of Text before rendering
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DNNListEditControl.IntegerValue">
            -----------------------------------------------------------------------------
            <summary>
            IntegerValue returns the Integer representation of the Value
            </summary>
            <value>An integer representing the Value</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DNNListEditControl.ListEntries">
            <summary>
            Gets the ListEntryInfo objects associated witht the control
            </summary>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DNNListEditControl.ListName">
            -----------------------------------------------------------------------------
            <summary>
            ListName is the name of the List to display
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DNNListEditControl.OldIntegerValue">
            -----------------------------------------------------------------------------
            <summary>
            OldIntegerValue returns the Integer representation of the OldValue
            </summary>
            <value>An integer representing the OldValue</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DNNListEditControl.ParentKey">
            <summary>
            The parent key of the List to display
            </summary>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DNNListEditControl.TextField">
            <summary>
            The field to display in the combo
            </summary>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DNNListEditControl.ValueField">
            <summary>
            The field to use as the combo item values
            </summary>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DNNListEditControl.OldStringValue">
            -----------------------------------------------------------------------------
            <summary>
            OldStringValue returns the Boolean representation of the OldValue
            </summary>
            <value>A String representing the OldValue</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DNNListEditControl.StringValue">
            -----------------------------------------------------------------------------
            <summary>
            StringValue is the value of the control expressed as a String
            </summary>
            <value>A string representing the Value</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.DNNListEditControl.OnAttributesChanged">
            -----------------------------------------------------------------------------
            <summary>
            OnAttributesChanged runs when the CustomAttributes property has changed.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.DNNListEditControl.OnDataChanged(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnDataChanged runs when the PostbackData has changed.  It raises the ValueChanged
            Event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.DNNListEditControl.OnItemChanged(DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnItemChanged runs when the Item has changed
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.DNNListEditControl.RenderViewMode(System.Web.UI.HtmlTextWriter)">
            -----------------------------------------------------------------------------
            <summary>
            RenderViewMode renders the View (readonly) mode of the control
            </summary>
            <param name="writer">A HtmlTextWriter.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.DNNListEditControl.RenderEditMode(System.Web.UI.HtmlTextWriter)">
            -----------------------------------------------------------------------------
            <summary>
            RenderEditMode renders the Edit mode of the control
            </summary>
            <param name="writer">A HtmlTextWriter.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.DNNLocaleEditControl">
            <summary>
            The DNNLocaleEditControl control provides a standard UI component for selecting
            a Locale
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.DNNLocaleEditControl.OnAttributesChanged">
            <summary>
            OnAttributesChanged runs when the CustomAttributes property has changed.
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.DNNLocaleEditControl.RenderViewMode(System.Web.UI.HtmlTextWriter)">
            <summary>
            RenderViewMode renders the View (readonly) mode of the control
            </summary>
            <param name="writer">A HtmlTextWriter.</param>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.DNNLocaleEditControl.RenderEditMode(System.Web.UI.HtmlTextWriter)">
            <summary>
            RenderEditMode renders the Edit mode of the control
            </summary>
            <param name="writer">A HtmlTextWriter.</param>
        </member>
        <member name="T:DotNetNuke.UI.WebControls.DNNPageEditControl">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      DNNPageEditControl
            -----------------------------------------------------------------------------
            <summary>
            The DNNPageEditControl control provides a standard UI component for selecting
            a DNN Page
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.DNNPageEditControl.RenderEditMode(System.Web.UI.HtmlTextWriter)">
            -----------------------------------------------------------------------------
            <summary>
            RenderEditMode renders the Edit mode of the control
            </summary>
            <param name="writer">A HtmlTextWriter.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.DNNPageEditControl.RenderViewMode(System.Web.UI.HtmlTextWriter)">
            -----------------------------------------------------------------------------
            <summary>
            RenderViewMode renders the View mode of the control
            </summary>
            <param name="writer">A HtmlTextWriter.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.DNNRegionEditControl">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      DNNRegionEditControl
            -----------------------------------------------------------------------------
            <summary>
            The DNNRegionEditControl control provides a standard UI component for editing
            Regions
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DNNRegionEditControl.ParentKey">
            <summary>
            The parent key of the List to display
            </summary>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.DNNRegionEditControl.ListEntries">
            <summary>
            Gets the ListEntryInfo objects associated witht the control
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.DNNRegionEditControl.OnAttributesChanged">
            -----------------------------------------------------------------------------
            <summary>
            OnAttributesChanged runs when the CustomAttributes property has changed.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.DNNRichTextEditControl">
            <summary>
            The DNNRichTextEditControl control provides a standard UI component for editing
            RichText
            </summary>
        </member>
        <member name="T:DotNetNuke.UI.WebControls.EditControl">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      EditControl
            -----------------------------------------------------------------------------
            <summary>
            The EditControl control provides a standard UI component for editing 
            properties.
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.EditControl.CustomAttributes">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Custom Attributes for this Control
            </summary>
            <value>An array of Attributes</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.EditControl.EditMode">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Edit Mode of the Editor
            </summary>
            <value>A boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.EditControl.IsValid">
            -----------------------------------------------------------------------------
            <summary>
            Returns whether the
            </summary>
            <value>A boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.EditControl.LocalResourceFile">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Local Resource File for the Control
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.EditControl.Name">
            -----------------------------------------------------------------------------
            <summary>
            Name is the name of the field as a string
            </summary>
            <value>A string representing the Name of the property</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.EditControl.Category">
            -----------------------------------------------------------------------------
            <summary>
            The Category to which this edit control belongs
            </summary>
            <value>A string representing the Category of the property</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.EditControl.OldValue">
            -----------------------------------------------------------------------------
            <summary>
            OldValue is the initial value of the field
            </summary>
            <value>The initial Value of the property</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.EditControl.Required">
            -----------------------------------------------------------------------------
            <summary>
            gets and sets whether the Property is required
            </summary>
            <value>The initial Value of the property</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.EditControl.SystemType">
            -----------------------------------------------------------------------------
            <summary>
            SystemType is the System Data Type for the property
            </summary>
            <value>A string representing the Type of the property</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.EditControl.Value">
            -----------------------------------------------------------------------------
            <summary>
            Value is the value of the control
            </summary>
            <value>The Value of the property</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.EditControl.DataField">
            <summary>
            Set Data Field of the control.
            </summary>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.EditControl.StringValue">
            -----------------------------------------------------------------------------
            <summary>
            StringValue is the value of the control expressed as a String
            </summary>
            <value>A string representing the Value</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.EditControl.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
            -----------------------------------------------------------------------------
            <summary>
            LoadPostData loads the Post Back Data and determines whether the value has change
            </summary>
            <param name="postDataKey">A key to the PostBack Data to load</param>
            <param name="postCollection">A name value collection of postback data</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.EditControl.RaisePostDataChangedEvent">
            -----------------------------------------------------------------------------
            <summary>
            RaisePostDataChangedEvent runs when the PostBackData has changed.  It triggers
            a ValueChanged Event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.EditControl.OnDataChanged(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnDataChanged runs when the PostbackData has changed.  It raises the ValueChanged
            Event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.EditControl.OnAttributesChanged">
            -----------------------------------------------------------------------------
            <summary>
            OnAttributesChanged runs when the CustomAttributes property has changed.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.EditControl.OnItemAdded(DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Runs when an item is added to a collection type property
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.EditControl.OnItemDeleted(DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Runs when an item is deleted from a collection type property
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.EditControl.OnValueChanged(DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnValueChanged runs when the Value has changed.  It raises the ValueChanged
            Event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.EditControl.RenderViewMode(System.Web.UI.HtmlTextWriter)">
            -----------------------------------------------------------------------------
            <summary>
            RenderViewMode renders the View (readonly) mode of the control
            </summary>
            <param name="writer">A HtmlTextWriter.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.EditControl.RenderEditMode(System.Web.UI.HtmlTextWriter)">
            -----------------------------------------------------------------------------
            <summary>
            RenderEditMode renders the Edit mode of the control
            </summary>
            <param name="writer">A HtmlTextWriter.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.EditControl.Render(System.Web.UI.HtmlTextWriter)">
            -----------------------------------------------------------------------------
            <summary>
            Render is called by the .NET framework to render the control
            </summary>
            <param name="writer">A HtmlTextWriter.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.EditControlFactory">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      EditControlFactory
            -----------------------------------------------------------------------------
            <summary>
            The EditControlFactory control provides a factory for creating the
            appropriate Edit Control
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.EditControlFactory.CreateEditControl(DotNetNuke.UI.WebControls.EditorInfo)">
            -----------------------------------------------------------------------------
            <summary>
            CreateEditControl creates the appropriate Control based on the EditorField or
            TypeDataField
            </summary>
            <param name="editorInfo">An EditorInfo object</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.EnumEditControl">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      EnumEditControl
            -----------------------------------------------------------------------------
            <summary>
            The EnumEditControl control provides a standard UI component for editing
            enumerated properties.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.EnumEditControl.#ctor">
            -----------------------------------------------------------------------------
            <summary>
            Constructs an EnumEditControl
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.EnumEditControl.#ctor(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Constructs an EnumEditControl
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.EnumEditControl.StringValue">
            -----------------------------------------------------------------------------
            <summary>
            StringValue is the value of the control expressed as a String
            </summary>
            <value>A string representing the Value</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.EnumEditControl.OnDataChanged(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnDataChanged runs when the PostbackData has changed.  It raises the ValueChanged
            Event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.EnumEditControl.RenderEditMode(System.Web.UI.HtmlTextWriter)">
            -----------------------------------------------------------------------------
            <summary>
            RenderEditMode renders the Edit mode of the control
            </summary>
            <param name="writer">A HtmlTextWriter.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.EnumEditControl.RenderViewMode(System.Web.UI.HtmlTextWriter)">
            -----------------------------------------------------------------------------
            <summary>
            RenderViewMode renders the View (readonly) mode of the control
            </summary>
            <param name="writer">A HtmlTextWriter.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.IntegerEditControl">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      IntegerEditControl
            -----------------------------------------------------------------------------
            <summary>
            The IntegerEditControl control provides a standard UI component for editing
            integer properties.
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.IntegerEditControl.#ctor">
            -----------------------------------------------------------------------------
            <summary>
            Constructs an IntegerEditControl
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.IntegerEditControl.StringValue">
            -----------------------------------------------------------------------------
            <summary>
            StringValue is the value of the control expressed as a String
            </summary>
            <value>A string representing the Value</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.IntegerEditControl.IntegerValue">
            -----------------------------------------------------------------------------
            <summary>
            IntegerValue returns the Integer representation of the Value
            </summary>
            <value>An integer representing the Value</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.IntegerEditControl.OldIntegerValue">
            -----------------------------------------------------------------------------
            <summary>
            OldIntegerValue returns the Integer representation of the OldValue
            </summary>
            <value>An integer representing the OldValue</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.IntegerEditControl.OnDataChanged(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnDataChanged runs when the PostbackData has changed.  It raises the ValueChanged
            Event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.IntegerEditControl.RenderEditMode(System.Web.UI.HtmlTextWriter)">
            -----------------------------------------------------------------------------
            <summary>
            RenderEditMode renders the Edit mode of the control
            </summary>
            <param name="writer">A HtmlTextWriter.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.MultiLineTextEditControl">
            -----------------------------------------------------------------------------
             <summary>
             The MultiLineTextEditControl control provides a standard UI component for editing
             string/text properties.
             </summary>
             <remarks>
             </remarks>
             -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.TextEditControl">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      TextEditControl
            -----------------------------------------------------------------------------
            <summary>
            The TextEditControl control provides a standard UI component for editing
            string/text properties.
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.TextEditControl.#ctor">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a TextEditControl
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.TextEditControl.#ctor(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a TextEditControl
            </summary>
            <param name="type">The type of the property</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.TextEditControl.OldStringValue">
            -----------------------------------------------------------------------------
            <summary>
            OldStringValue returns the Boolean representation of the OldValue
            </summary>
            <value>A String representing the OldValue</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.TextEditControl.StringValue">
            -----------------------------------------------------------------------------
            <summary>
            StringValue is the value of the control expressed as a String
            </summary>
            <value>A string representing the Value</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.TextEditControl.OnDataChanged(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnDataChanged runs when the PostbackData has changed.  It raises the ValueChanged
            Event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.TextEditControl.RenderEditMode(System.Web.UI.HtmlTextWriter)">
            -----------------------------------------------------------------------------
            <summary>
            RenderEditMode renders the Edit mode of the control
            </summary>
            <param name="writer">A HtmlTextWriter.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.TrueFalseEditControl">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      TrueFalseEditControl
            -----------------------------------------------------------------------------
            <summary>
            The TrueFalseEditControl control provides a standard UI component for editing
            true/false (boolean) properties.
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.TrueFalseEditControl.#ctor">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a TrueFalseEditControl
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.TrueFalseEditControl.BooleanValue">
            -----------------------------------------------------------------------------
            <summary>
            BooleanValue returns the Boolean representation of the Value
            </summary>
            <value>A Boolean representing the Value</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.TrueFalseEditControl.OldBooleanValue">
            -----------------------------------------------------------------------------
            <summary>
            OldBooleanValue returns the Boolean representation of the OldValue
            </summary>
            <value>A Boolean representing the OldValue</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.TrueFalseEditControl.StringValue">
            -----------------------------------------------------------------------------
            <summary>
            StringValue is the value of the control expressed as a String
            </summary>
            <value>A string representing the Value</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.TrueFalseEditControl.OnDataChanged(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnDataChanged runs when the PostbackData has changed.  It raises the ValueChanged
            Event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.TrueFalseEditControl.RenderEditMode(System.Web.UI.HtmlTextWriter)">
            -----------------------------------------------------------------------------
            <summary>
            RenderEditMode renders the Edit mode of the control
            </summary>
            <param name="writer">A HtmlTextWriter.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.VersionEditControl">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      VersionEditControl
            -----------------------------------------------------------------------------
            <summary>
            The VersionEditControl control provides a standard UI component for editing
            System.Version properties.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.VersionEditControl.StringValue">
            -----------------------------------------------------------------------------
            <summary>
            StringValue is the value of the control expressed as a String
            </summary>
            <value>A string representing the Value</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.VersionEditControl.OnDataChanged(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnDataChanged runs when the PostbackData has changed.  It raises the ValueChanged
            Event
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.VersionEditControl.OnPreRender(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            OnPreRender runs just before the control is rendered.  It forces a postback to the
            Control.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.VersionEditControl.RenderEditMode(System.Web.UI.HtmlTextWriter)">
            -----------------------------------------------------------------------------
            <summary>
            RenderEditMode renders the Edit mode of the control
            </summary>
            <param name="writer">A HtmlTextWriter.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.VersionEditControl.RenderViewMode(System.Web.UI.HtmlTextWriter)">
            -----------------------------------------------------------------------------
            <summary>
            RenderViewMode renders the View (readonly) mode of the control
            </summary>
            <param name="writer">A HtmlTextWriter.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.EditorInfo">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      EditorInfo
            -----------------------------------------------------------------------------
            <summary>
            The EditorInfo class provides a helper class for the Property Editor
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.EditorInfo.GetEditor(System.Int32)">
            -----------------------------------------------------------------------------
            <summary>
            GetEditor gets the appropriate Editor based on ID
            properties
            </summary>
            <param name="editorType">The Id of the Editor</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.PropertyEditorEventArgs">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      PropertyEditorEventArgs
            -----------------------------------------------------------------------------
            <summary>
            The PropertyEditorEventArgs class is a cusom EventArgs class for
            handling Event Args from a change in value of a property.
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.PropertyEditorEventArgs.#ctor(System.String)">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a new PropertyEditorEventArgs
            </summary>
            <param name="name">The name of the property</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.PropertyEditorEventArgs.#ctor(System.String,System.Object,System.Object)">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a new PropertyEditorEventArgs
            </summary>
            <param name="name">The name of the property</param>
            <param name="newValue">The new value of the property</param>
            <param name="oldValue">The old value of the property</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorEventArgs.Changed">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the proeprty has changed
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorEventArgs.Index">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Index of the Item
            </summary>
            <value>An Integer</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorEventArgs.Key">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Key of the Item
            </summary>
            <value>An Object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorEventArgs.Name">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Name of the Property being changed
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorEventArgs.OldValue">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the OldValue of the Property being changed
            </summary>
            <value>An Object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorEventArgs.StringValue">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the String Value of the Property being changed
            </summary>
            <value>An Object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorEventArgs.Value">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Value of the Property being changed
            </summary>
            <value>An Object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.PropertyEditorItemEventArgs">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      PropertyEditorItemEventArgs
            -----------------------------------------------------------------------------
            <summary>
            The PropertyEditorItemEventArgs class is a cusom EventArgs class for
            handling Event Args
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.PropertyEditorItemEventArgs.#ctor(DotNetNuke.UI.WebControls.EditorInfo)">
            -----------------------------------------------------------------------------
            <summary>
            Constructs a new PropertyEditorItemEventArgs
            </summary>
            <param name="editor">The editor created</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorItemEventArgs.Editor">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the proeprty has changed
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.FieldEditorControl">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      FieldEditorControl
            -----------------------------------------------------------------------------
            <summary>
            The FieldEditorControl control provides a Control to display Profile
            Properties.
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.DataSource">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the DataSource that is bound to this control
            </summary>
            <value>The DataSource object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.DataField">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the value of the Field/property that this control displays
            </summary>
            <value>A string representing the Name of the Field</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.EditorDisplayMode">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the control uses Divs or Tables
            </summary>
            <value>An EditorDisplayMode enum</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.EditMode">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Edit Mode of the Editor
            </summary>
            <value>The mode of the editor</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.Editor">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Edit Control associated with the Editor
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.EditorInfoAdapter">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Factory used to create the Control
            </summary>
            <value>The mode of the editor</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.EditorTypeName">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Editor Type to use
            </summary>
            <value>The typename of the editor</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.EnableClientValidation">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets a flag indicating whether the Validators should use client-side
            validation
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.HelpDisplayMode">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the control displays Help
            </summary>
            <value>A HelpDisplayMode enum</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.IsDirty">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether any of the properties have been changed
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.IsValid">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether all of the properties are Valid
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.LocalResourceFile">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Local Resource File for the Control
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.RequiredUrl">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Url of the Required Image
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.ShowRequired">
            -----------------------------------------------------------------------------
            <summary>
            gets and sets whether the Required icon is used
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.ShowVisibility">
            -----------------------------------------------------------------------------
            <summary>
            gets and sets whether the Visibility control is used
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.EditControlStyle">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value of the Field Style
            </summary>
            <value>A Style object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.EditControlWidth">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the width of the Edit Control Column
            </summary>
            <value>A Style object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.ErrorStyle">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value of the Error Style
            </summary>
            <value>A Style object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.HelpStyle">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value of the Label Style
            </summary>
            <value>A Style object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.LabelStyle">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value of the Label Style
            </summary>
            <value>A Style object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.LabelWidth">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the width of the Label Column
            </summary>
            <value>A Style object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.FieldEditorControl.VisibilityStyle">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value of the Visibility Style
            </summary>
            <value>A Style object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.BuildDiv(DotNetNuke.UI.WebControls.EditorInfo)">
            <summary>
            BuildDiv creates the Control as a Div
            </summary>
            <param name="editInfo">The EditorInfo object for this control</param>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.BuildEditor(DotNetNuke.UI.WebControls.EditorInfo)">
            <summary>
            BuildEditor creates the editor part of the Control
            </summary>
            <param name="editInfo">The EditorInfo object for this control</param>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.BuildLabel(DotNetNuke.UI.WebControls.EditorInfo)">
            <summary>
            BuildLabel creates the label part of the Control
            </summary>
            <param name="editInfo">The EditorInfo object for this control</param>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.BuildRequiredIcon(DotNetNuke.UI.WebControls.EditorInfo)">
            <summary>
            BuildValidators creates the validators part of the Control
            </summary>
            <param name="editInfo">The EditorInfo object for this control</param>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.BuildTable(DotNetNuke.UI.WebControls.EditorInfo)">
            -----------------------------------------------------------------------------
            <summary>
            BuildTable creates the Control as a Table
            </summary>
            <param name="editInfo">The EditorInfo object for this control</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.BuildValidators(DotNetNuke.UI.WebControls.EditorInfo,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            BuildValidators creates the validators part of the Control
            </summary>
            <param name="editInfo">The EditorInfo object for this control</param>
            <param name="targetId">Target Control Id.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.BuildVisibility(DotNetNuke.UI.WebControls.EditorInfo)">
            <summary>
            BuildVisibility creates the visibility part of the Control
            </summary>
            <param name="editInfo">The EditorInfo object for this control</param>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.CreateEditor">
            -----------------------------------------------------------------------------
            <summary>
            CreateEditor creates the control collection for this control
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.CollectionItemAdded(System.Object,DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Runs when an item is added to a collection type property
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.CollectionItemDeleted(System.Object,DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Runs when an item is removed from a collection type property
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.OnItemAdded(DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Runs when an item is added to a collection type property
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.OnItemCreated(DotNetNuke.UI.WebControls.PropertyEditorItemEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Runs when the Editor is Created
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.OnItemDeleted(DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Runs when an item is removed from a collection type property
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.ValueChanged(System.Object,DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Runs when the Value of a Property changes
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.VisibilityChanged(System.Object,DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Runs when the Visibility of a Property changes
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.DataBind">
            -----------------------------------------------------------------------------
            <summary>
            Binds the controls to the DataSource
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.Validate">
            -----------------------------------------------------------------------------
            <summary>
            Validates the data, and sets the IsValid Property
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.FieldEditorControl.ListItemChanged(System.Object,DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Runs when an Item in the List Is Changed
            </summary>
            <remarks>Raises an ItemChanged event.</remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.GroupByMode">
            -----------------------------------------------------------------------------
            <summary>
            Enumeration that determines the grouping method
            </summary>
            <remarks>
            GroupByMode is used by <see cref="T:DotNetNuke.UI.WebControls.PropertyEditorControl">PropertyEditorControl</see>
            to determine the grouping mode for displaying properties.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.LabelMode">
            -----------------------------------------------------------------------------
            <summary>
            Enumeration that determines the label mode
            </summary>
            <remarks>
            LabelMode is used by <see cref="T:DotNetNuke.UI.WebControls.PropertyEditorControl">PropertyEditorControl</see>
            to determine how the label is displayed.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.ListBoundField">
            -----------------------------------------------------------------------------
            <summary>
            Enumeration that determines the field that a List binds to
            </summary>
            <remarks>
            LabelMode is used by <see cref="T:DotNetNuke.UI.WebControls.PropertyEditorControl">PropertyEditorControl</see>
            to determine how the label is displayed.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.ProfileEditorControl">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      ProfileEditorControl
            -----------------------------------------------------------------------------
            <summary>
            The ProfileEditorControl control provides a Control to display Profile
            Properties.
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.ProfileEditorControl.CreateEditor">
            -----------------------------------------------------------------------------
            <summary>
            CreateEditor creates the control collection.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.ControlStyleAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the StyleAttribute class.
            </summary>
            <param name="cssClass">The css class to apply to the associated property</param>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.ControlStyleAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the StyleAttribute class.
            </summary>
            <param name="cssClass">The css class to apply to the associated property</param>
            <param name="width">control width.</param>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.ControlStyleAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the StyleAttribute class.
            </summary>
            <param name="cssClass">The css class to apply to the associated property</param>
            <param name="width">control width.</param>
            <param name="height">control height.</param>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.FormatAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the FormatAttribute class.
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.IsReadOnlyAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the ReadOnlyAttribute class.
            </summary>
            <param name="read">A boolean that indicates whether the property is ReadOnly</param>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.LabelModeAttribute.#ctor(DotNetNuke.UI.WebControls.LabelMode)">
            <summary>
            Initializes a new instance of the LabelModeAttribute class.
            </summary>
            <param name="mode">The label mode to apply to the associated property</param>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.LanguagesListTypeAttribute.#ctor(DotNetNuke.Services.Localization.LanguagesListType)">
            <summary>
            Initializes a new instance of the LanguagesListTypeAttribute class.
            </summary>
            <param name="type">The type of List</param>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.ListAttribute.#ctor(System.String,System.String,DotNetNuke.UI.WebControls.ListBoundField,DotNetNuke.UI.WebControls.ListBoundField)">
            <summary>
            Initializes a new instance of the ListAttribute class.
            </summary>
            <param name="listName">The name of the List to use for this property</param>
            <param name="parentKey">The key of the parent for this List</param>
            <param name="textField">Text Field.</param>
            <param name="valueField">Value Field.</param>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.MaxLengthAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the MaxLengthAttribute class.
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.RegularExpressionValidatorAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RegularExpressionValidatorAttribute class.
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.RequiredAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the RequiredAttribute class.
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.SortOrderAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the SortOrderAttribute class.
            </summary>
            <param name="order"></param>
        </member>
        <member name="T:DotNetNuke.UI.WebControls.PropertyEditorControl">
            -----------------------------------------------------------------------------
            <summary>
            The PropertyEditorControl control provides a way to display and edit any 
            properties of any Info class
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.UnderlyingDataSource">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Underlying DataSource
            </summary>
            <value>An IEnumerable Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.AutoGenerate">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the editor Autogenerates its editors
            </summary>
            <value>The DataSource object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.DataSource">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the DataSource that is bound to this control
            </summary>
            <value>The DataSource object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.EditMode">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Edit Mode of the Editor
            </summary>
            <value>The mode of the editor</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.EnableClientValidation">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets a flag indicating whether the Validators should use client-side
            validation
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.GroupByMode">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the grouping mode
            </summary>
            <value>A GroupByMode enum</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.Groups">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the grouping order
            </summary>
            <value>A comma-delimited list of categories/groups</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.HelpDisplayMode">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether the control displays Help
            </summary>
            <value>A HelpDisplayMode enum</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.IsDirty">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether any of the properties have been changed
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.IsValid">
            -----------------------------------------------------------------------------
            <summary>
            Gets whether all of the properties are Valid
            </summary>
            <value>A Boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.LocalResourceFile">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Local Resource File for the Control
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.RequiredUrl">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Url of the Required Image
            </summary>
            <value>A String</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.ShowRequired">
            -----------------------------------------------------------------------------
            <summary>
            gets and sets whether the Required icon is used
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.ShowVisibility">
            -----------------------------------------------------------------------------
            <summary>
            gets and sets whether the Visibility control is used
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.SortMode">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether to sort properties. 
            </summary>
            <value>The Sort Mode of the editor</value>
            <remarks>
            By default all properties will be sorted 
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.Fields">
            -----------------------------------------------------------------------------
            <summary>
            Gets a collection of fields to display if AutoGenerate is false. Or the
            collection of fields generated if AutoGenerate is true.
            </summary>
            <value>A collection of FieldEditorControl objects</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.EditControlStyle">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value of the Field Style
            </summary>
            <value>A Style object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.EditControlWidth">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the width of the Edit Control Column
            </summary>
            <value>A Style object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.ErrorStyle">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value of the Error Style
            </summary>
            <value>A Style object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.GroupHeaderStyle">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value of the Group Header Style
            </summary>
            <value>A Style object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.GroupHeaderIncludeRule">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets whether to add a &lt;hr&gt; to the Group Header
            </summary>
            <value>A boolean</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.ItemStyle">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value of the Label Style
            </summary>
            <value>A Style object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.LabelStyle">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value of the Label Style
            </summary>
            <value>A Style object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.LabelWidth">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the width of the Label Column
            </summary>
            <value>A Style object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyEditorControl.VisibilityStyle">
            -----------------------------------------------------------------------------
            <summary>
            Gets the value of the Visibility Style
            </summary>
            <value>A Style object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.GetProperties">
            -----------------------------------------------------------------------------
            <summary>
            GetProperties returns an array of <see cref="T:System.Reflection.PropertyInfo">PropertyInfo</see>
            </summary>
            <returns>An array of <see cref="T:System.Reflection.PropertyInfo">PropertyInfo</see> objects
            for the current DataSource object.</returns>
            <remarks>
            GetProperties will return an array of public properties for the current DataSource
            object.  The properties will be sorted according to the SortMode property.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.AddEditorRow(System.Web.UI.WebControls.Table,System.String,DotNetNuke.UI.WebControls.IEditorInfoAdapter)">
            -----------------------------------------------------------------------------
            <summary>
            AddEditorRow builds a sigle editor row and adds it to the Table, using the
            specified adapter
            </summary>
            <param name="table">The Table Control to add the row to</param>
            <param name="name">The name of property being added</param>
            <param name="adapter">An IEditorInfoAdapter</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.AddEditorRow(System.Web.UI.WebControls.Table,System.Object)">
            -----------------------------------------------------------------------------
            <summary>
            AddEditorRow builds a sigle editor row and adds it to the Table
            </summary>
            <remarks>This method is protected so that classes that inherit from
            PropertyEditor can modify how the Row is displayed</remarks>
            <param name="table">The Table Control to add the row to</param>
            <param name="obj">Row Data Info.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.AddFields(System.Web.UI.WebControls.Table)">
            -----------------------------------------------------------------------------
            <summary>
            AddFields adds the fields that have beend defined in design mode (Autogenerate=false)
            </summary>
            <param name="tbl">The Table Control to add the row to</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.AddHeader(System.Web.UI.WebControls.Table,System.String)">
            -----------------------------------------------------------------------------
            <summary>
            AddHeader builds a group header
            </summary>
            <remarks>This method is protected so that classes that inherit from
            PropertyEditor can modify how the Header is displayed</remarks>
            <param name="tbl">The Table Control that contains the group</param>
            <param name="header">Table Header.</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.CreateEditor">
            -----------------------------------------------------------------------------
            <summary>
            CreateEditor creates the control collection.
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.GetCategory(System.Object)">
            -----------------------------------------------------------------------------
            <summary>
            GetCategory gets the Category of an object
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.GetGroups(System.Collections.IEnumerable)">
            -----------------------------------------------------------------------------
            <summary>
            GetGroups gets an array of Groups/Categories from the DataSource
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.GetRowVisibility(System.Object)">
            -----------------------------------------------------------------------------
            <summary>
            GetRowVisibility determines the Visibility of a row in the table
            </summary>
            <param name="obj">The property</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.OnItemAdded(DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Runs when an item is added to a collection type property
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.OnItemCreated(DotNetNuke.UI.WebControls.PropertyEditorItemEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Runs when an Editor is Created
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.OnItemDeleted(DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Runs when an item is removed from a collection type property
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.OnPreRender(System.EventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Runs just before the control is rendered
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.DataBind">
            -----------------------------------------------------------------------------
            <summary>
            Binds the controls to the DataSource
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.CollectionItemAdded(System.Object,DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Runs when an item is added to a collection type property
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.CollectionItemDeleted(System.Object,DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Runs when an item is removed from a collection type property
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.EditorItemCreated(System.Object,DotNetNuke.UI.WebControls.PropertyEditorItemEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Runs when an Editor Is Created
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.PropertyEditorControl.ListItemChanged(System.Object,DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
            -----------------------------------------------------------------------------
            <summary>
            Runs when an Item in the List Is Changed
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.PropertyEditorMode">
            -----------------------------------------------------------------------------
            <summary>
            Enumeration that determines the mode of the editor.
            </summary>
            <remarks>
            PropertyEditorMode is used by <see cref="T:DotNetNuke.UI.WebControls.PropertyEditorControl">PropertyEditorControl</see>
            to determine the mode of the Editor.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.PropertyLabelControl">
            <summary>
            The PropertyLabelControl control provides a standard UI component for displaying
            a label for a property. It contains a Label and Help Text and can be Data Bound.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyLabelControl.Caption">
            <summary>
            Gets and Sets the Caption Text if no ResourceKey is provided
            </summary>
            <value>A string representing the Caption</value>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyLabelControl.EditControl">
            <summary>
            Gets and Sets the related Edit Control
            </summary>
            <value>A Control</value>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyLabelControl.HelpText">
            <summary>
            Text is value of the Label Text if no ResourceKey is provided
            </summary>
            <value>A string representing the Text</value>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyLabelControl.ResourceKey">
            <summary>
            ResourceKey is the root localization key for this control
            </summary>
            <value>A string representing the Resource Key</value>
            <remarks>This control will "standardise" the resource key names, so for instance
            if the resource key is "Control", Control.Text is the label text key, Control.Help
            is the label help text, Control.ErrorMessage is the Validation Error Message for the
            control
            </remarks>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyLabelControl.DataField">
            <summary>
            Gets and sets the value of the Field that is bound to the Label
            </summary>
            <value>A string representing the Name of the Field</value>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyLabelControl.DataSource">
            <summary>
            Gets and sets the DataSource that is bound to this control
            </summary>
            <value>The DataSource object</value>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyLabelControl.HelpStyle">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the value of the Label Style
            </summary>
            <value>A string representing the Name of the Field</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.PropertyLabelControl.LabelStyle">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the value of the Label Style
            </summary>
            <value>A string representing the Name of the Field</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.PropertyLabelControl.CreateChildControls">
            <summary>
            CreateChildControls creates the control collection.
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.PropertyLabelControl.OnDataBinding(System.EventArgs)">
            <summary>
            OnDataBinding runs when the Control is being Data Bound (It is triggered by
            a call to Control.DataBind()
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.PropertyLabelControl.OnPreRender(System.EventArgs)">
            <summary>
            OnLoad runs just before the Control is rendered, and makes sure that any
            properties are set properly before the control is rendered
            </summary>
        </member>
        <member name="T:DotNetNuke.UI.WebControls.PropertySortType">
            -----------------------------------------------------------------------------
            <summary>
            Enumeration that determines the sort method.
            </summary>
            <remarks>
            PropertySortType is used by <see cref="T:DotNetNuke.UI.WebControls.PropertyEditorControl">PropertyEditorControl</see>
            to determine the order for displaying properties.
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.SettingInfo">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      SettingInfo
            -----------------------------------------------------------------------------
            <summary>
            The SettingInfo class provides a helper class for the Settings Editor
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.SettingsEditorControl">
            -----------------------------------------------------------------------------
            Project:    DotNetNuke
            Namespace:  DotNetNuke.UI.WebControls
            Class:      SettingsEditorControl
            -----------------------------------------------------------------------------
            <summary>
            The SettingsEditorControl control provides an Editor to edit DotNetNuke
            Settings
            </summary>
            <remarks>
            </remarks>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.SettingsEditorControl.UnderlyingDataSource">
            -----------------------------------------------------------------------------
            <summary>
            Gets the Underlying DataSource
            </summary>
            <value>An IEnumerable</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.SettingsEditorControl.CustomEditors">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the CustomEditors that are used by this control
            </summary>
            <value>The CustomEditors object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="P:DotNetNuke.UI.WebControls.SettingsEditorControl.Visibility">
            -----------------------------------------------------------------------------
            <summary>
            Gets and sets the Visibility values that are used by this control
            </summary>
            <value>The CustomEditors object</value>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.SettingsEditorControl.GetSettings">
            -----------------------------------------------------------------------------
            <summary>
            GetSettings converts the DataSource into an ArrayList (IEnumerable)
            </summary>
            -----------------------------------------------------------------------------
        </member>
        <member name="M:DotNetNuke.UI.WebControls.SettingsEditorControl.GetRowVisibility(System.Object)">
            -----------------------------------------------------------------------------
            <summary>
            GetRowVisibility determines the Visibility of a row in the table
            </summary>
            <param name="obj">The property</param>
            -----------------------------------------------------------------------------
        </member>
        <member name="T:DotNetNuke.UI.WebControls.VisibilityControl">
            <summary>
            The VisibilityControl control provides a base control for defining visibility
            options
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.VisibilityControl.Caption">
            <summary>
            Caption
            </summary>
            <value>A string representing the Name of the property</value>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.VisibilityControl.Name">
            <summary>
            Name is the name of the field as a string
            </summary>
            <value>A string representing the Name of the property</value>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.VisibilityControl.User">
            <summary>
            The UserInfo object that represents the User whose profile is being displayed
            </summary>
        </member>
        <member name="P:DotNetNuke.UI.WebControls.VisibilityControl.Value">
            <summary>
            StringValue is the value of the control expressed as a String
            </summary>
            <value>A string representing the Value</value>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.VisibilityControl.LoadPostData(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            LoadPostData loads the Post Back Data and determines whether the value has change
            </summary>
            <param name="postDataKey">A key to the PostBack Data to load</param>
            <param name="postCollection">A name value collection of postback data</param>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.VisibilityControl.RaisePostDataChangedEvent">
            <summary>
            RaisePostDataChangedEvent runs when the PostBackData has changed.  It triggers
            a ValueChanged Event
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.VisibilityControl.OnVisibilityChanged(DotNetNuke.UI.WebControls.PropertyEditorEventArgs)">
            <summary>
            OnVisibilityChanged runs when the Visibility has changed.  It raises the VisibilityChanged
            Event
            </summary>
        </member>
        <member name="M:DotNetNuke.UI.WebControls.VisibilityControl.Render(System.Web.UI.HtmlTextWriter)">
            <summary>
            Render renders the control
            </summary>
            <param name="writer">A HtmlTextWriter.</param>
        </member>
    </members>
</doc>
