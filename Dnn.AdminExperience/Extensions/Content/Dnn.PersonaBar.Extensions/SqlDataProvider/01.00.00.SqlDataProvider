/************************************************************/
/***** Users SqlDataProvider                            *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/

IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Personabar_GetUsersByUserIds') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Personabar_GetUsersByUserIds
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Personabar_GetUsersByUserIds (
	@PortalId INT,
	@UserIds nvarchar(max) -- comma separated list of UserIds
) AS
BEGIN
		SELECT DISTINCT U.UserID, U.Username, U.DisplayName, U.Email, U.CreatedOnDate, U.IsDeleted, U.Authorised
		FROM {databaseOwner}{objectQualifier}vw_Users U WITH (NOLOCK)
		INNER JOIN (Select RowValue FROM {databaseOwner}{objectQualifier}ConvertListToTable(',',@UserIds)) UserIds
			ON U.UserID = UserIds.RowValue
		INNER JOIN {databaseOwner}{objectQualifier}UserPortals UP WITH (NOLOCK)
			ON U.UserID = UP.UserId
		WHERE UP.PortalId = @PortalId
END
GO

IF EXISTS (SELECT * FROM dbo.sysobjects where id = object_id(N'{databaseOwner}{objectQualifier}Personabar_GetUsers') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
	DROP PROCEDURE {databaseOwner}{objectQualifier}Personabar_GetUsers
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}Personabar_GetUsers (
	@PortalId INT,
	@SortColumn NVARCHAR(32),
	@SortAscending BIT,
    @PageIndex int = 0,
    @PageSize int = 10
) AS
BEGIN
	SELECT COUNT(*) AS TotalRecords
	FROM {databaseOwner}{objectQualifier}UserPortals UP WITH (NOLOCK)
	INNER JOIN {databaseOwner}{objectQualifier}Users U WITH (NOLOCK) ON UP.UserId = U.UserID
	WHERE UP.PortalId = @PortalId
	AND IsSuperUser = 0
		
	;WITH UsersCTE
	AS
	(	
		SELECT U.UserID, U.Username, U.DisplayName, U.Email, U.CreatedOnDate, U.IsDeleted, U.Authorised,
		ROW_NUMBER() OVER ( ORDER BY CASE WHEN @SortColumn = 'Joined' AND @SortAscending = 1 THEN U.UserID END ASC, 
									 CASE WHEN @SortColumn = 'Joined' AND @SortAscending = 0 THEN U.UserID END DESC,
									 CASE WHEN @SortColumn = 'Email' AND @SortAscending = 1 THEN U.Email END ASC, 
									 CASE WHEN @SortColumn = 'Email' AND @SortAscending = 0 THEN U.Email END DESC,
									 CASE WHEN @SortColumn = 'DisplayName' AND @SortAscending = 1 THEN U.DisplayName END ASC, 
									 CASE WHEN @SortColumn = 'DisplayName' AND @SortAscending = 0 THEN U.DisplayName END DESC) AS RowNumber 
		FROM {databaseOwner}{objectQualifier}vw_Users U WITH (NOLOCK)
		INNER JOIN {databaseOwner}{objectQualifier}UserPortals UP WITH (NOLOCK)
			ON U.UserID = UP.UserId
		WHERE UP.PortalId = @PortalId
		AND IsSuperUser = 0
	)
	SELECT * FROM UsersCTE
	WHERE	RowNumber BETWEEN (@PageIndex * @PageSize + 1) AND ((@PageIndex + 1) * @PageSize);
END
GO


/************************************************************/
/*****  Security SqlDataProvider                        *****/
/************************************************************/

/* Add SearchAllTables */
/**********************************/
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SearchAllTables]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}SearchAllTables]
GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SecurityAnalyzer_SearchAllTables]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}SecurityAnalyzer_SearchAllTables]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SecurityAnalyzer_SearchAllTables]
(
@SearchStr NVARCHAR(100)
)
AS
BEGIN

    CREATE TABLE #Results (ColumnName nvarchar(370), ColumnValue nvarchar(3630))

    SET NOCOUNT ON

    DECLARE @TableName nvarchar(256), @ColumnName nvarchar(128), @SearchStr2 nvarchar(110)
    SET  @TableName = ''
    SET @SearchStr2 = QUOTENAME('%' + @SearchStr + '%','''')

    WHILE @TableName IS NOT NULL

    BEGIN
        SET @ColumnName = ''
        SET @TableName = 
        (
            SELECT MIN(QUOTENAME(TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME))
            FROM     INFORMATION_SCHEMA.TABLES
            WHERE         TABLE_TYPE = 'BASE TABLE'
                AND    QUOTENAME(TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME) > @TableName
                AND    OBJECTPROPERTY(
                        OBJECT_ID(
                            QUOTENAME(TABLE_SCHEMA) + '.' + QUOTENAME(TABLE_NAME)
                             ), 'IsMSShipped'
                               ) = 0
        )

        WHILE (@TableName IS NOT NULL) AND (@ColumnName IS NOT NULL)

        BEGIN
            SET @ColumnName =
            (
                SELECT MIN(QUOTENAME(COLUMN_NAME))
                FROM     INFORMATION_SCHEMA.COLUMNS
                WHERE         TABLE_SCHEMA    = PARSENAME(@TableName, 2)
                    AND    TABLE_NAME    = PARSENAME(@TableName, 1)
                    AND    DATA_TYPE IN ('char', 'varchar', 'nchar', 'nvarchar', 'int', 'decimal')
                    AND    QUOTENAME(COLUMN_NAME) > @ColumnName
            )

            IF @ColumnName IS NOT NULL

            BEGIN
                INSERT INTO #Results
                EXEC
                (
                    'SELECT ''' + @TableName + '.' + @ColumnName + ''', LEFT(' + @ColumnName + ', 3630) 
                    FROM ' + @TableName + 'WITH (NOLOCK) ' +
                    ' WHERE ' + @ColumnName + ' LIKE ' + @SearchStr2
                )
            END
        END    
    END

    SELECT ColumnName, ColumnValue FROM #Results
END

GO
IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SecurityAnalyzer_GetModulesHasHeaderFooter]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}SecurityAnalyzer_GetModulesHasHeaderFooter]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SecurityAnalyzer_GetModulesHasHeaderFooter]
AS
BEGIN
    SELECT * FROM {databaseOwner}[{objectQualifier}TabModules]
        WHERE (Header IS NOT NULL AND CONVERT(NVARCHAR(MAX), Header) <> N'') OR (Footer IS NOT NULL AND CONVERT(NVARCHAR(MAX), Footer) <> N'')
END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SecurityAnalyzer_GetModifiedSettings]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}SecurityAnalyzer_GetModifiedSettings]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SecurityAnalyzer_GetModifiedSettings]
AS
BEGIN
    SELECT TOP 20
            PortalID ,
            SettingName ,
            SettingValue ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}[{objectQualifier}PortalSettings]
    ORDER BY LastModifiedOnDate DESC;

    SELECT TOP 20
            SettingName ,
            SettingValue ,
            LastModifiedByUserID ,
            LastModifiedOnDate
    FROM    {databaseOwner}[{objectQualifier}HostSettings]
    ORDER BY LastModifiedOnDate DESC;

    SELECT TOP 20
            t.TabID ,
            t.PortalID ,
            s.SettingName ,
            s.SettingValue ,
            s.LastModifiedByUserID ,
            s.LastModifiedOnDate
    FROM    {databaseOwner}[{objectQualifier}TabSettings] s
            INNER JOIN {databaseOwner}[{objectQualifier}Tabs] t ON t.TabID = s.TabID
    ORDER BY s.LastModifiedOnDate DESC;

    SELECT TOP 20
            T.*
    FROM    ( SELECT    'Module Settings' as Type,
                        m.ModuleID ,
                        m.PortalID ,
                        SettingName ,
                        SettingValue ,
                        ms.LastModifiedByUserID ,
                        ms.LastModifiedOnDate
              FROM      {databaseOwner}[{objectQualifier}ModuleSettings] ms
                        INNER JOIN {databaseOwner}[{objectQualifier}Modules] m ON m.ModuleID = ms.ModuleID
              UNION
              ( SELECT  'TabModule Settings' as Type,
                        tm.ModuleID ,
                        m.PortalID ,
                        ts.SettingName ,
                        ts.SettingValue ,
                        ts.LastModifiedByUserID ,
                        ts.LastModifiedOnDate
                FROM    {databaseOwner}[{objectQualifier}TabModuleSettings] ts
                        INNER JOIN {databaseOwner}[{objectQualifier}TabModules] tm ON tm.TabModuleID = ts.TabModuleID
                        INNER JOIN {databaseOwner}[{objectQualifier}Modules] m ON m.ModuleID = tm.ModuleID
              )
            ) T
            INNER JOIN {databaseOwner}[{objectQualifier}Modules] m ON m.ModuleID = T.ModuleID
    ORDER BY T.LastModifiedOnDate DESC;
END
GO

/************************************************************/
/***** End SqlDataProvider                              *****/
/************************************************************/