/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/

IF EXISTS (SELECT * FROM dbo.sysobjects
	WHERE id = object_id(N'{databaseOwner}[{objectQualifier}HostSettings]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
	IF NOT EXISTS (SELECT * FROM {databaseOwner}[{objectQualifier}HostSettings] WHERE [SettingName] = N'PurgeEventLogBatchCount')
		INSERT INTO {databaseOwner}[{objectQualifier}HostSettings] 
			([SettingName]
			,[SettingValue]
			,[SettingIsSecure]
			,[CreatedByUserID]
			,[CreatedOnDate]
			,[LastModifiedByUserID]
			,[LastModifiedOnDate])
		VALUES (N'PurgeEventLogBatchCount', N'150000', 0, -1, GETDATE(), NULL, NULL)
END

GO

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}PurgeEventLog]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}[{objectQualifier}PurgeEventLog]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}PurgeEventLog]
AS
	DECLARE @PurgeBatchCount INT = ISNULL(
	(SELECT CAST(SettingValue AS INT) 
		FROM {databaseOwner}[{objectQualifier}HostSettings]
		WHERE SettingName = N'PurgeEventLogBatchCount' AND ISNUMERIC(SettingValue) > 0), 150000)

	;WITH logcounts AS
	(  
	  SELECT TOP(@PurgeBatchCount)
		LogConfigID, 
		ROW_NUMBER() OVER(PARTITION BY LogConfigID ORDER BY LogCreateDate DESC) AS logEventSequence	
	  FROM {databaseOwner}[{objectQualifier}EventLog]
	)
	DELETE lc
	FROM logcounts lc
		INNER JOIN {databaseOwner}[{objectQualifier}EventLogConfig] elc ON elc.ID = lc.LogConfigID
	WHERE elc.KeepMostRecent <> -1
		AND lc.logEventSequence > elc.KeepMostRecent

GO

/* Due to DNN-21554 we could have orphaned users in apsnet tables, below SP removes such users if there are some */
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}DeleteOrphanedAspNetUsers]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteOrphanedAspNetUsers]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteOrphanedAspNetUsers]
    @ApplicationName NVARCHAR(256)
AS

IF (SELECT COUNT(*) FROM dbo.sysobjects
	WHERE id = object_id(N'dbo.[aspnet_Users]') OR
		  id = object_id(N'dbo.[aspnet_Membership]') OR
		  id = object_id(N'{databaseOwner}[{objectQualifier}Users]') and OBJECTPROPERTY(id, N'IsUserTable') = 1) = 3
BEGIN
	BEGIN TRANSACTION
		BEGIN TRY
			-- remove orphaned aspnet memberships
			;WITH
			orphaned_aspnet_memberships(UserId)
			AS
			(SELECT asp_memberships.UserId FROM dbo.aspnet_Membership asp_memberships
					INNER JOIN dbo.aspnet_Applications asp_apps ON asp_apps.ApplicationId = asp_memberships.ApplicationId
					INNER JOIN dbo.aspnet_Users asp_users ON asp_memberships.UserId = asp_users.UserId
					LEFT JOIN {databaseOwner}{objectQualifier}Users users ON asp_users.UserName = users.Username
					WHERE asp_apps.LoweredApplicationName = LOWER(@ApplicationName) AND users.Username IS NULL)
			DELETE m FROM dbo.aspnet_Membership m
			INNER JOIN orphaned_aspnet_memberships o ON m.UserId = o.UserId

			-- remove orphaned aspnet users
			;WITH
			orphaned_aspnet_users (UserId)
			AS 
			(SELECT asp_users.UserId FROM dbo.aspnet_Users asp_users
					INNER JOIN dbo.aspnet_Applications asp_apps ON asp_apps.ApplicationId = asp_users.ApplicationId
					LEFT JOIN {databaseOwner}{objectQualifier}Users users ON asp_users.UserName = users.Username		
					WHERE asp_apps.LoweredApplicationName = LOWER(@ApplicationName) AND users.Username IS NULL)
			DELETE u FROM dbo.aspnet_Users u
			INNER JOIN orphaned_aspnet_users o ON u.UserId = o.UserId
		END TRY
		BEGIN CATCH
			SELECT ERROR_MESSAGE() AS ErrorMessage
			IF @@TRANCOUNT > 0  
				ROLLBACK TRANSACTION
		END CATCH
	IF @@TRANCOUNT > 0 
	    COMMIT TRANSACTION
END
GO

-- DNN-8503 --
IF EXISTS (select * from Sys.Views where object_id = object_id(N'{databaseOwner}[{objectQualifier}vw_Modules]'))
    DROP VIEW {databaseOwner}[{objectQualifier}vw_Modules]
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_Modules]
AS
    SELECT
        M.PortalID AS [OwnerPortalID],
        T.PortalID,
        TM.TabID,
        TM.TabModuleID,
        M.ModuleID,
        M.ModuleDefID,
        TM.ModuleOrder,
        TM.PaneName,
        TM.ModuleTitle,
        TM.CacheTime,
        TM.CacheMethod,
        TM.Alignment,
        TM.Color,
        TM.Border,
        {databaseOwner}{objectQualifier}FilePath(T.IconFile) AS IconFile,
        M.AllTabs,
        TM.Visibility,
        TM.IsDeleted,
        TM.Header,
        TM.Footer,
        M.StartDate,
        M.EndDate,
        TM.ContainerSrc,
        TM.DisplayTitle,
        TM.DisplayPrint,
        TM.DisplaySyndicate,
        TM.IsWebSlice,
        TM.WebSliceTitle,
        TM.WebSliceExpiryDate,
        TM.WebSliceTTL,
        M.InheritViewPermissions,
        M.IsShareable,
        M.IsShareableViewOnly,
        MD.DesktopModuleID,
        MD.DefaultCacheTime,
        MC.ModuleControlID,
        DM.BusinessControllerClass,
        DM.IsAdmin,
        DM.SupportedFeatures,
        CI.ContentItemID,
        CI.Content,
        CI.ContentTypeID,
        CI.ContentKey,
        CI.Indexed,
        CI.StateID,
        M.CreatedByUserID,
        M.CreatedOnDate,
        M.LastModifiedByUserID,
        M.LastModifiedOnDate,
        M.LastContentModifiedOnDate,
        TM.UniqueId,
        TM.VersionGuid,
        TM.DefaultLanguageGuid,
        TM.LocalizedVersionGuid,
        TM.CultureCode
    FROM        {databaseOwner}[{objectQualifier}ModuleDefinitions] AS MD
     INNER JOIN {databaseOwner}[{objectQualifier}Modules]           AS M  ON MD.ModuleDefID     = M.ModuleDefID
     INNER JOIN {databaseOwner}[{objectQualifier}ModuleControls]    AS MC ON MD.ModuleDefID     = MC.ModuleDefID
     INNER JOIN {databaseOwner}[{objectQualifier}DesktopModules]    AS DM ON MD.DesktopModuleID = DM.DesktopModuleID
     LEFT  JOIN {databaseOwner}[{objectQualifier}ContentItems]      AS CI ON M.ContentItemID    = CI.ContentItemID
     LEFT  JOIN {databaseOwner}[{objectQualifier}TabModules]        AS TM ON M.ModuleID         = TM.ModuleID
     LEFT  JOIN {databaseOwner}[{objectQualifier}Tabs]              AS T  ON TM.TabID           = T.TabID
    WHERE (MC.ControlKey IS NULL)
GO

/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/
/************************************************************/

