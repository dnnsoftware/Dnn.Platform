/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetUsersBasicSearch]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}[{objectQualifier}GetUsersBasicSearch]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetUsersBasicSearch]
(
	@PortalID int,					-- portal
	@PageSize int,					-- page size
	@PageIndex int,					-- 0 based page index
	@SortBy nvarchar(100),			-- sort field
	@SortAscending bit,				-- sort flag indicating whether sort is asc or desc
	@PropertyName nvarchar(256),    -- property to filter by (username, diaplayname, email)
	@PropertyValue nvarchar(256)	-- value of property
)
AS
	-- Set up Top XX
	DECLARE @topSql nvarchar(20)
	SET @topSql = CONVERT(nvarchar(20), @PageSize)

	--Set up Count
	DECLARE @minRowNumberSql nvarchar(20)
	SET @minRowNumberSql =  CONVERT(nvarchar(20), ((@PageIndex * @PageSize) + 1))

	-- Set up Sort
	DECLARE @sortSql nvarchar(1000)
	SET @sortSql = {databaseOwner}{objectQualifier}GetSortSql(@SortBy, @SortAscending, 'UserID')

	-- Setup Pivot Field List
	DECLARE @pivotSql nvarchar(max)
	SELECT @pivotSql = {databaseOwner}{objectQualifier}GetProfileFieldSql(@PortalID, '')

	-- Setup FieldName Field List for temporary table
	DECLARE @fieldNames nvarchar(max)
	SELECT @fieldNames = {databaseOwner}{objectQualifier}GetProfileFieldSql(@PortalID, ' nvarchar(max)')

	DECLARE @sql nvarchar(max)
	SELECT @sql=
				'
					DECLARE @pivotedUsers TABLE
					(
						RowNumber int,
						UserID int,
						PortalID int,
						Username nvarchar(100),
						Email nvarchar(256),
						DisplayName nvarchar(128),
						IsSuperUser bit,
						IsDeleted bit,
						AffiliateID int,
						UpdatePassword bit,
						Authorised bit,
						' + @fieldNames + '
					);

					WITH TempUsers
					AS
					(
						SELECT TOP ' + @topSql + ' * FROM (
							SELECT
								ROW_NUMBER() OVER(' + @sortSql + ') AS RowNumber,
								U.UserID,
								U.PortalID,
								U.Username,
								U.Email,
								U.DisplayName,
								U.IsSuperUser,
								U.IsDeleted,
								U.AffiliateID,
								U.UpdatePassword,
								U.Authorised
								FROM {databaseOwner}{objectQualifier}vw_Users AS U
							WHERE (U.PortalID = ' + CONVERT(nvarchar(20), @PortalID) + ' OR U.PortalID Is NULL )
								AND ((U.' + @PropertyName + ' LIKE N''' + @PropertyValue + '%'')
									OR (U.' + @PropertyName + ' LIKE N''% ' + @PropertyValue + '%''))
								AND U.IsDeleted = 0
						) AS U
						WHERE RowNumber >= ' + @minRowNumberSql + '
					),
					TempUsersWithProfile
					AS
					(
						SELECT
							U.UserID,
							U.PortalID,
							U.Username,
							U.Email,
							U.DisplayName,
							U.IsSuperUser,
							U.IsDeleted,
							U.AffiliateID,
							U.UpdatePassword,
							U.Authorised,
							P.PropertyName,
							P.PropertyValue
						FROM TempUsers U
							INNER JOIN {databaseOwner}{objectQualifier}vw_Profile P ON P.UserID = U.UserID
					)
				    SELECT  * FROM (
					    SELECT  * FROM TempUsersWithProfile
					    PIVOT
					    (
						    MAX(PropertyValue) for PropertyName in (' + @pivotSql + ')
					    ) as pivotTable
                    ) T
					' + @sortSql
	EXEC(@sql)

GO

/* DNN-5740: replace split flag if it included in property value. */
/*************/
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetAvailableUsersForIndex]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}[{objectQualifier}GetAvailableUsersForIndex]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetAvailableUsersForIndex]
    @PortalId INT ,
    @StartDate DATETIME ,
    @startUserId INT = 0,
    @numberOfUsers INT = 500
AS
    BEGIN
		DECLARE @PivotSql NVARCHAR(MAX)

		SELECT @PivotSql = COALESCE(@PivotSql + ',','') + '[' + PropertyName + ']'
		 FROM {databaseOwner}[{objectQualifier}ProfilePropertyDefinition] pd
		 INNER JOIN {databaseOwner}[{objectQualifier}Lists] l ON ListName = 'DataType' AND SystemList = 1 AND Value IN ( 'Text', 'RichText' ) AND l.EntryID = pd.DataType
		 WHERE ISNULL(pd.PortalID, -1) = ISNULL(@PortalId, -1)
		   AND Deleted = 0
		ORDER BY ViewOrder

		DECLARE @Sql NVARCHAR(MAX)

		SELECT @Sql = '
        WITH    ValidDataType
                  AS ( SELECT   EntryID
                       FROM     {databaseOwner}[{objectQualifier}Lists]
                       WHERE    ListName = ''DataType''
                                AND SystemList = 1
                                AND Value IN ( ''Text'', ''RichText'' )
                     ),
                  ValidUsers AS
                  (
                                      SELECT UserId FROM ( SELECT   UserId, ROW_NUMBER() OVER(ORDER BY UserId ASC) AS rownumber
                         FROM ( SELECT DISTINCT
                                            ( u.UserID )
                                  FROM      {databaseOwner}[{objectQualifier}Users] u
                                            INNER JOIN {databaseOwner}[{objectQualifier}UserPortals] up ON up.UserId = u.UserID
                                            INNER JOIN {databaseOwner}[{objectQualifier}vw_Profile] p ON p.UserID = u.UserID
                                            INNER JOIN {databaseOwner}[{objectQualifier}ProfilePropertyDefinition] pd ON pd.PropertyDefinitionID = p.PropertyDefinitionID AND pd.Visible = 1 AND pd.PortalID = @PortalId
                                            INNER JOIN ValidDataType dt ON dt.EntryID = pd.DataType
                                  WHERE     (up.PortalId = @PortalId OR up.PortalId IS NULL)
                                            AND (u.LastModifiedOnDate > @StartDate OR (p.LastUpdatedDate IS NOT NULL AND (p.LastUpdatedDate > @StartDate OR pd.LastModifiedOnDate > @StartDate)))
                                            AND ((p.PropertyValue IS NOT NULL AND p.PropertyValue <> '''') OR u.LastModifiedOnDate > @StartDate OR p.LastUpdatedDate IS NULL OR p.LastUpdatedDate > @StartDate)
                                ) AS T WHERE UserID > @startUserId) AS T
                                WHERE rownumber <= @numberOfUsers
                     )

		SELECT * FROM (
        SELECT u.UserID ,
               u.DisplayName,
               u.LastModifiedOnDate,
			   u.Username,
			   u.IsSuperUser,
			   u.Email,
			   u.CreatedOnDate,
			   p.PropertyName,
			   REPLACE(p.PropertyValue, ''$$$'', ''[$][$][$]'') + ''$$$'' +
			   CAST(CASE WHEN (p.Visibility IS NULL) THEN 0 ELSE p.Visibility END AS VARCHAR(10)) + ''$$$'' +
			   p.ExtendedVisibility + ''$$$'' +
			   CONVERT(VARCHAR(20), CASE WHEN u.LastModifiedOnDate > p.LastUpdatedDate OR p.LastUpdatedDate IS NULL THEN u.LastModifiedOnDate ELSE p.LastUpdatedDate END, 20) AS [PropertyValue]
		FROM
			{databaseOwner}[{objectQualifier}Users] u
			INNER JOIN ValidUsers vu on vu.UserId = u.UserID
			INNER JOIN {databaseOwner}[{objectQualifier}vw_Profile] p ON p.UserID = u.UserID
			INNER JOIN {databaseOwner}[{objectQualifier}ProfilePropertyDefinition] pd ON pd.PropertyDefinitionID = p.PropertyDefinitionID AND pd.Visible = 1 AND pd.PortalID = @PortalID
			INNER JOIN ValidDataType dt ON dt.EntryID = pd.DataType) AS T
		PIVOT (MAX(PropertyValue) for PropertyName in (' + @PivotSql + ')) AS T
		ORDER BY UserId
		'
		EXECUTE sp_executesql @Sql,
                              N'@PortalId INT ,
                                @StartDate DATETIME ,
                                @startUserId INT,
                                @numberOfUsers INT',
                              @PortalId, @StartDate, @startUserId, @numberOfUsers
    END
GO

/* DNN-6233: Auto Complete Control for Profile Properties */

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}SearchProfilePropertyValues') AND type in (N'P', N'PC'))
DROP PROCEDURE {databaseOwner}{objectQualifier}SearchProfilePropertyValues
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE {databaseOwner}{objectQualifier}SearchProfilePropertyValues
 @PortalId INT,
 @PropertyName NVARCHAR(50),
 @SearchString NVARCHAR(100)
AS
SELECT DISTINCT
 up.PropertyValue
FROM
 {databaseOwner}{objectQualifier}UserProfile up
 INNER JOIN {databaseOwner}{objectQualifier}ProfilePropertyDefinition ppd ON ppd.PropertyDefinitionID = up.PropertyDefinitionID
WHERE
 ppd.PortalID = @PortalId
 AND ppd.PropertyName = @PropertyName
 AND up.PropertyValue LIKE '%' + @SearchString + '%'
 AND up.PropertyValue IS NOT NULL
ORDER BY
 up.PropertyValue
GO

IF NOT EXISTS(SELECT * FROM {databaseOwner}[{objectQualifier}Lists] WHERE [ListName]='DataType' AND [Value]='AutoComplete')
INSERT INTO {databaseOwner}[{objectQualifier}Lists]
        ([ListName], [Value], [Text], [ParentID], [Level], [SortOrder], [DefinitionID], [Description], [PortalID], [SystemList], [CreatedByUserID], [CreatedOnDate], [LastModifiedByUserID], [LastModifiedOnDate])
 VALUES (N'DataType', N'AutoComplete', N'DotNetNuke.UI.WebControls.AutoCompleteControl, DotNetNuke', 0, 0, 0, -1, NULL, -1, 1, NULL, NULL, NULL, NULL)
GO

IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}JavaScriptLibraries]') AND name = 'Version' AND max_length = 100)
	BEGIN
		ALTER TABLE {databaseOwner}[{objectQualifier}JavaScriptLibraries]
			ALTER COLUMN [Version] [nvarchar](50) NOT NULL;
	END
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SaveJavaScriptLibrary]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}SaveJavaScriptLibrary]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SaveJavaScriptLibrary]
	@JavaScriptLibraryID INT,
	@PackageID INT,
	@LibraryName NVARCHAR(200),
	@Version NVARCHAR(50),
	@FileName NVARCHAR(100),
	@ObjectName NVARCHAR(100),
	@PreferredScriptLocation int,
	@CDNPath NVARCHAR(250)
AS

	IF EXISTS (SELECT JavaScriptLibraryID FROM {objectQualifier}JavaScriptLibraries WHERE JavaScriptLibraryID = @JavaScriptLibraryID)
		BEGIN
			UPDATE {databaseOwner}[{objectQualifier}JavaScriptLibraries]
			   SET [PackageID] = @PackageID,
					[LibraryName] = @LibraryName,
					[Version] = @Version,
					[FileName] = @FileName,
					[ObjectName] = @ObjectName,
					[PreferredScriptLocation] = @PreferredScriptLocation,
					[CDNPath] = @CDNPath
			 WHERE JavaScriptLibraryID = @JavaScriptLibraryID
	 	END
	ELSE
		BEGIN
			INSERT INTO {databaseOwner}[{objectQualifier}JavaScriptLibraries] (
				[PackageID],
				[LibraryName],
				[Version],
				[FileName],
				[ObjectName],
				[PreferredScriptLocation],
				[CDNPath]
			)
			VALUES (
				@PackageID,
				@LibraryName,
				@Version,
				@FileName,
				@ObjectName,
				@PreferredScriptLocation,
				@CDNPath
			)
			SET @JavaScriptLibraryID = (SELECT @@IDENTITY)
		END

	SELECT @JavaScriptLibraryID
GO

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}SavePackageDependency]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}SavePackageDependency]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}SavePackageDependency]
	@PackageDependencyID INT,
	@PackageID INT,
	@PackageName NVARCHAR(128),
	@Version NVARCHAR(50)
AS
	IF EXISTS (SELECT PackageDependencyID FROM {objectQualifier}PackageDependencies WHERE PackageID = @PackageID AND PackageName = @PackageName AND Version = @Version)
		BEGIN
			UPDATE {databaseOwner}[{objectQualifier}PackageDependencies]
			   SET [PackageID] = @PackageID,
					[PackageName] = @PackageName,
					[Version] = @Version
			 WHERE PackageDependencyID = @PackageDependencyID
		END
	ELSE
		BEGIN
			INSERT INTO {databaseOwner}[{objectQualifier}PackageDependencies] (
				[PackageID],
				[PackageName],
				[Version]
			)
			VALUES (
				@PackageID,
				@PackageName,
				@Version
			)
			SET @PackageDependencyID = (SELECT @@IDENTITY)
		END

	SELECT @PackageDependencyID
GO

/***** DNN-6099: always remove user roles in current portal. *****/
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}RemoveUser]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}RemoveUser
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}RemoveUser]
	@UserID		int,
	@PortalID   int
AS
	IF @PortalID IS NULL
		BEGIN
			-- Delete SuperUser
			DELETE FROM {databaseOwner}{objectQualifier}Users
				WHERE  UserId = @UserID
		END
	ELSE
		BEGIN
			-- Remove User from Portal
			DELETE FROM {databaseOwner}{objectQualifier}UserPortals
				WHERE  UserId = @UserID
                 AND PortalId = @PortalID
			IF NOT EXISTS (SELECT 1 FROM {databaseOwner}{objectQualifier}UserPortals WHERE  UserId = @UserID)
				-- Delete User (but not if SuperUser)
				BEGIN
					DELETE FROM {databaseOwner}{objectQualifier}Users
						WHERE  UserId = @UserID
							AND IsSuperUser = 0
					DELETE FROM {databaseOwner}{objectQualifier}UserRoles
						WHERE  UserID = @UserID
				END
			ELSE
				BEGIN
					DELETE ur FROM {databaseOwner}{objectQualifier}UserRoles ur
						INNER JOIN {databaseOwner}{objectQualifier}Roles r ON r.RoleID = ur.RoleID
						WHERE  UserID = @UserID AND r.PortalID = @PortalID
				END
		END
GO

-- DNN6390:
IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetRolesBasicSearch]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}GetRolesBasicSearch]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetRolesBasicSearch]
    @PortalID           Int,                    -- might be null for all portals
    @PageIndex          Int,                    -- page number starting at 0
    @PageSize           Int,                    -- number of items per page
    @FilterBy           nVarChar(100)           -- pattern for role name, do not use preceding or trailing wildcards
AS
BEGIN
    IF IsNull(@FilterBy, '') <> '' BEGIN
        IF Substring(@FilterBy, 1, 1) = '%'
            SET @FilterBy = Substring(@FilterBy, 2, Len(@FilterBy) - 1)
        IF Substring(@FilterBy, Len(@FilterBy), 1) = '%'
            SET @FilterBy = Substring(@FilterBy, 1, Len(@FilterBy) - 1)
     END;

	IF IsNull(@PageIndex,-1) >= 0 AND IsNull(@PageSize, 0) > 0 AND IsNull(@PageSize, 0) < Cast(0x7fffffff AS Int)
		WITH OrderedRoles AS (
			SELECT RoleID, PortalID, RoleName, [Description], ServiceFee, BillingFrequency, TrialPeriod, TrialFrequency, BillingPeriod, TrialFee,
				   IsPublic, AutoAssignment, RoleGroupID, RSVPCode, {databaseOwner}{objectQualifier}FilePath(IconFile) AS IconFile, Status, SecurityMode,
				   CreatedByUserID,CreatedOnDate,LastModifiedByUserID,LastModifiedOnDate,
				   ROW_NUMBER() OVER (ORDER BY RoleName ASC, PortalID DESC) AS RowNum
			 FROM {databaseOwner}[{objectQualifier}Roles]
			 WHERE (RoleName LIKE '%' + @FilterBy + '%' OR IsNull(@FilterBy,'') = '')
			   AND (PortalID = @PortalID OR IsNull(@PortalID, -1)  = -1)
			   AND (RoleId  >= 0) -- DNN-4288: ignore virtual roles
			)
		SELECT * FROM OrderedRoles WHERE RowNum >= {databaseOwner}{objectQualifier}PageLowerBound(@PageIndex, @Pagesize)
									 AND RowNum <= {databaseOwner}{objectQualifier}PageUpperBound(@PageIndex, @Pagesize) ORDER BY RowNum
		 OPTION (OPTIMIZE FOR (@PortalId UNKNOWN));
	ELSE -- no paging
        SELECT RoleID, PortalID, RoleName, [Description], ServiceFee, BillingFrequency, TrialPeriod, TrialFrequency, BillingPeriod, TrialFee,
               IsPublic, AutoAssignment, RoleGroupID, RSVPCode, {databaseOwner}{objectQualifier}FilePath(IconFile) AS IconFile, Status, SecurityMode,
               CreatedByUserID,CreatedOnDate,LastModifiedByUserID,LastModifiedOnDate,
               ROW_NUMBER() OVER (ORDER BY RoleName ASC, PortalID DESC) AS RowNum
         FROM {databaseOwner}[{objectQualifier}Roles]
         WHERE (RoleName LIKE '%' + @FilterBy + '%' OR IsNull(@FilterBy,'') = '')
           AND (PortalID = @PortalID OR IsNull(@PortalID, -1)  = -1)
           AND (RoleId  >= 0) -- DNN-4288: ignore virtual roles
		 OPTION (OPTIMIZE FOR (@PortalId UNKNOWN))
END
GO


-- ---------------------------------------------------------
-- Fix for DNN-6636 Sitemap : Shows 404 Page in the Sitemap
-- ---------------------------------------------------------
UPDATE {databaseOwner}[{objectQualifier}Tabs]
SET SiteMapPriority = 0
WHERE TabId IN (SELECT Custom404TabId FROM {databaseOwner}[{objectQualifier}PortalLocalization]) OR
      TabId IN (SELECT Custom500TabId FROM {databaseOwner}[{objectQualifier}PortalLocalization])
GO


-- ---------------------------------------------------------
-- DNN-6702: fix an issue with shared modules in Site Groups
-- ---------------------------------------------------------
IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}ModulePermission' AND object_id = OBJECT_ID('{objectQualifier}ModulePermission'))
	ALTER TABLE	{databaseOwner}[{objectQualifier}ModulePermission] DROP CONSTRAINT [IX_{objectQualifier}ModulePermission] 
GO

IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}ModulePermission_Portals' AND object_id = OBJECT_ID('{objectQualifier}ModulePermission'))
	DROP INDEX [IX_{objectQualifier}ModulePermission_Portals] ON {databaseOwner}[{objectQualifier}ModulePermission]
GO

IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}ModulePermission_Modules' AND object_id = OBJECT_ID('{objectQualifier}ModulePermission'))
	DROP INDEX [IX_{objectQualifier}ModulePermission_Modules] ON {databaseOwner}[{objectQualifier}ModulePermission]
GO

IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}ModulePermission_Users' AND object_id = OBJECT_ID('{objectQualifier}ModulePermission'))
	DROP INDEX [IX_{objectQualifier}ModulePermission_Users] ON {databaseOwner}[{objectQualifier}ModulePermission]
GO

IF EXISTS(SELECT * FROM sys.indexes WHERE name = 'IX_{objectQualifier}ModulePermission_Roles' AND object_id = OBJECT_ID('{objectQualifier}ModulePermission'))
	DROP INDEX [IX_{objectQualifier}ModulePermission_Roles] ON {databaseOwner}[{objectQualifier}ModulePermission]
GO

CREATE UNIQUE NONCLUSTERED INDEX IX_{objectQualifier}ModulePermission_Modules ON {databaseOwner}[{objectQualifier}ModulePermission]
	(ModuleID, PermissionID, PortalID, RoleID, UserID) 
	INCLUDE (AllowAccess)
GO

CREATE UNIQUE NONCLUSTERED INDEX IX_{objectQualifier}ModulePermission_Users ON {databaseOwner}[{objectQualifier}ModulePermission]
	(UserID, ModuleID, PermissionID, PortalID) 
	INCLUDE (AllowAccess)
	WHERE UserID IS NOT Null
GO

CREATE UNIQUE NONCLUSTERED INDEX IX_{objectQualifier}ModulePermission_Roles ON {databaseOwner}[{objectQualifier}ModulePermission]
	(RoleID, ModuleID, PermissionID, PortalID) 
	INCLUDE (AllowAccess)
	WHERE RoleID IS NOT Null
GO


/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/
