/* DNN-4562 */

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}CoreMessaging_CreateMessageRecipientsForRole]', N'P') IS NOT NULL
	DROP PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CreateMessageRecipientsForRole]
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_CreateMessageRecipientsForRole]
    @MessageID int,         -- message id
    @RoleIDs nvarchar(max), -- comma separated list of RoleIds
	@CreateUpdateUserID INT -- create / update user id
AS
BEGIN    

    INSERT {databaseOwner}[{objectQualifier}CoreMessaging_MessageRecipients](
			[MessageID],
			[UserID],
			[Read],
			[Archived],
            [CreatedByUserID],
            [CreatedOnDate],
            [LastModifiedByUserID],
            [LastModifiedOnDate]
            )
			SELECT distinct 
			  @MessageID,
			  UserID,
			  0,
			  0,
              @CreateUpdateUserID , -- CreatedBy - int
              GETDATE(), -- CreatedOn - datetime
              @CreateUpdateUserID , -- LastModifiedBy - int
              GETDATE() -- LastModifiedOn - datetime
           FROM {databaseOwner}[{objectQualifier}vw_UserRoles] ur
			INNER JOIN {databaseOwner}[{objectQualifier}SplitStrings_CTE](@RoleIDs,',') m on ur.RoleID = m.Item
			WHERE ur.ExpiryDate >= getdate() OR ur.ExpiryDate IS NULL
END
GO

/* DNN-8361 */

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}GetModulePackagesInUse]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}[{objectQualifier}GetModulePackagesInUse]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetModulePackagesInUse]
	@PortalID INT,
	@ForHost BIT
AS
	-- Create a temp table to store the select results
	CREATE TABLE #TabsLatestPublished
	(
		IndexId int IDENTITY (0, 1) NOT NULL,
		TabId int,
		ModuleId int
	);

	WITH Temp AS ( 
        SELECT ROW_NUMBER() OVER (PARTITION BY TabId ORDER BY Version DESC) AS RowNumber, TabVersionId, TabId
        FROM {databaseOwner}{objectQualifier}TabVersions
		WHERE IsPublished = 1		
    )
	-- Insert into our temp table
	INSERT INTO #TabsLatestPublished (TabId, ModuleId)
	SELECT TLP.TabId, TVD.ModuleId 	
	FROM Temp TLP
	INNER JOIN {databaseOwner}{objectQualifier}TabVersionDetails TVD ON TLP.TabVersionId = TVD.TabVersionId 
	WHERE RowNumber = 1 AND TVD.Action <> 2

	IF (@ForHost = 1)
		-- Get in use for all host pages and portal pages
		SELECT AllPackages.* FROM {databaseOwner}{objectQualifier}Packages AS AllPackages
			INNER JOIN (
				SELECT DISTINCT P.PackageID
				FROM {databaseOwner}{objectQualifier}Packages P
					INNER JOIN {databaseOwner}{objectQualifier}DesktopModules DM 
						ON P.PackageID=DM.PackageID
					INNER JOIN {databaseOwner}{objectQualifier}vw_Modules M
						ON M.DesktopModuleID=DM.DesktopModuleID
					INNER JOIN {databaseOwner}{objectQualifier}tabs T 
						ON T.TabID=M.TabID
					LEFT JOIN #TabsLatestPublished TLP 
						ON TLP.TabId = M.TabId AND TLP.ModuleId = M.ModuleID
				WHERE T.IsDeleted=0
					AND (M.IsDeleted=0 OR (TLP.TabId IS NOT NULL AND TLP.ModuleId IS NOT NULL))) AS InUsePackages	
			ON AllPackages.PackageID = InUsePackages.PackageID
		ORDER BY AllPackages.FriendlyName
	ELSE
		-- Get in use for portal or host only
		SELECT AllPackages.* FROM {databaseOwner}{objectQualifier}Packages AS AllPackages
			INNER JOIN (
				SELECT DISTINCT P.PackageID
				FROM {databaseOwner}{objectQualifier}Packages P
					INNER JOIN {databaseOwner}{objectQualifier}DesktopModules DM 
						ON P.PackageID=DM.PackageID
					INNER JOIN {databaseOwner}{objectQualifier}vw_Modules M
						ON M.DesktopModuleID=DM.DesktopModuleID
					INNER JOIN {databaseOwner}{objectQualifier}tabs T 
						ON T.TabID=M.TabID
					LEFT JOIN #TabsLatestPublished TLP 
						ON TLP.TabId = M.TabId AND TLP.ModuleId = M.ModuleID
				WHERE ((@PortalID IS NULL AND T.PortalID IS NULL) OR T.PortalID = @PortalID)
					AND T.IsDeleted=0
					AND (M.IsDeleted=0 OR (TLP.TabId IS NOT NULL AND TLP.ModuleId IS NOT NULL))) AS InUsePackages	
			ON AllPackages.PackageID = InUsePackages.PackageID
		ORDER BY AllPackages.FriendlyName
GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetTabsByPackageID]') AND type in (N'P', N'PC'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}GetTabsByPackageID]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabsByPackageID]
    @PortalId  Int, -- Null for Host menu items
    @PackageId Int, -- Not Null!
    @ForHost   Bit  -- 0: Get pages for a specific portal (or host pages only)
                    -- 1: Get all host pages and portal pages
AS
BEGIN
	-- Create a temp table to store the select results
	CREATE TABLE #TabsLatestPublished
	(
		IndexId int IDENTITY (0, 1) NOT NULL,
		TabId int,
		ModuleId int
	);

	WITH Temp AS ( 
        SELECT ROW_NUMBER() OVER (PARTITION BY TabId ORDER BY Version DESC) AS RowNumber, TabVersionId, TabId
        FROM {databaseOwner}{objectQualifier}TabVersions
		WHERE IsPublished = 1		
    )
	-- Insert into our temp table
	INSERT INTO #TabsLatestPublished (TabId, ModuleId)
	SELECT TLP.TabId, TVD.ModuleId 	
	FROM Temp TLP
	INNER JOIN {databaseOwner}{objectQualifier}TabVersionDetails TVD ON TLP.TabVersionId = TVD.TabVersionId 
	WHERE RowNumber = 1 AND TVD.Action <> 2
	
    SELECT * FROM {databaseOwner}[{objectQualifier}vw_Tabs]
    WHERE (IsNull(PortalId, -1) = IsNull(@PortalId, -1) Or @ForHost = 1)
		AND IsDeleted = 0
		AND TabId IN (SELECT M.TabId FROM {databaseOwner}[{objectQualifier}vw_Modules] M
                      INNER JOIN {databaseOwner}[{objectQualifier}DesktopModules] DM ON M.DesktopModuleID = DM.DesktopModuleID
					  LEFT JOIN #TabsLatestPublished TLP ON TLP.TabId = M.TabId AND TLP.ModuleId = M.ModuleID
                      WHERE DM.PackageID = @PackageId AND (M.IsDeleted = 0 OR (TLP.TabId IS NOT NULL AND TLP.ModuleId IS NOT NULL)))
    ORDER BY PortalID, TabName
	OPTION (OPTIMIZE FOR (@PortalId UNKNOWN, @PackageId UNKNOWN, @ForHost UNKNOWN));
END
GO

-- DNN-8333	Make JWT work when module page is under host.

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetTabModuleSettingsByName]', N'P') IS NULL
	EXEC('CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabModuleSettingsByName] AS BEGIN SELECT 1 END');
GO

ALTER PROCEDURE {databaseOwner}{objectQualifier}GetTabModuleSettingsByName
	@PortalId INT,
	@SettingName NVARCHAR(50)
AS
BEGIN
	SELECT tms.TabModuleID, tms.SettingValue
	FROM {databaseOwner}[{objectQualifier}TabModuleSettings] tms
			INNER JOIN {databaseOwner}[{objectQualifier}TabModules] tm ON tms.TabModuleID = tm.TabModuleID
			INNER JOIN {databaseOwner}[{objectQualifier}Tabs] t ON tm.TabID = t.TabID AND (t.PortalID = @PortalID OR t.PortalID IS NULL)
	WHERE tms.SettingName = @SettingName
END
GO

IF OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetTabModuleIdsBySettingNameAndValue]', N'P') IS NULL
	EXEC('CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetTabModuleIdsBySettingNameAndValue] AS BEGIN SELECT 1 END');
GO

ALTER PROCEDURE {databaseOwner}{objectQualifier}GetTabModuleIdsBySettingNameAndValue
	@PortalId INT,
	@SettingName NVARCHAR(50),
	@SettingValue NVARCHAR(max)
AS
BEGIN
	SELECT DISTINCT tms.TabModuleID
	FROM {databaseOwner}[{objectQualifier}TabModuleSettings] tms
			INNER JOIN {databaseOwner}[{objectQualifier}TabModules] tm ON tms.TabModuleID = tm.TabModuleID
			INNER JOIN {databaseOwner}[{objectQualifier}Tabs] t ON tm.TabID = t.TabID AND (t.PortalID = @PortalID OR t.PortalID IS NULL)
	WHERE tms.SettingName = @SettingName
	  AND tms.SettingValue = @SettingValue
END
GO

-- DNN-8333 END

/* DNN-7333 */

IF EXISTS (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}vw_UserRoles]') and OBJECTPROPERTY(id, N'IsView') = 1)
	DROP VIEW {databaseOwner}[{objectQualifier}vw_UserRoles]
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_UserRoles]
AS
	SELECT     
		UR.UserRoleID, 
		R.RoleID, 
		U.UserID, 
		R.PortalID, 
		R.RoleName, 
		U.Username, 
		R.Description, 
		U.DisplayName, 
		U.Email,
		UR.Status, 
		UR.IsOwner,
		R.SecurityMode,
		R.ServiceFee, 
		R.BillingFrequency, 
		R.TrialPeriod, 
        R.TrialFrequency, 
		R.BillingPeriod, 
		R.TrialFee, 
		R.IsPublic, 
		R.AutoAssignment, 
		R.RoleGroupID, 
		R.RSVPCode, 
		R.IconFile, 
		UR.EffectiveDate, 
		UR.ExpiryDate, 
        UR.IsTrialUsed, 
		UR.CreatedByUserID, 
		UR.CreatedOnDate, 
		UR.LastModifiedByUserID, 
		UR.LastModifiedOnDate,
		R.IsSystemRole 
	FROM {databaseOwner}{objectQualifier}UserRoles AS UR 
		INNER JOIN {databaseOwner}{objectQualifier}Users AS U ON UR.UserID = U.UserID 
		INNER JOIN {databaseOwner}{objectQualifier}Roles AS R ON UR.RoleID = R.RoleID
	WHERE R.Status = 1

GO
