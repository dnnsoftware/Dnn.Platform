/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/

/* Update version number in DesktopModules */
/*******************************************/
DECLARE @version NVARCHAR(8)
SET @version = '08.00.05'

UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Authentication'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Portals'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='HostSettings'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Scheduler'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='SearchAdmin'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Security'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='SearchResults'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Extensions'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='ViewProfile'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Registration'

UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Authentication'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.HostSettings'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Portals'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Scheduler'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SearchAdmin'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SearchResults'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Security'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.ACTIONBUTTONSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.ACTIONSSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.BANNERSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.BREADCRUMBSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.COPYRIGHTSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.CURRENTDATESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.DOTNETNUKESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.DROPDOWNACTIONSSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.HELPSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.HOSTNAMESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.ICONSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LANGUAGESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LINKACTIONSSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LINKSSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LOGINSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LOGOSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.MENUSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.NAVSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.PRINTMODULESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.PRIVACYSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SEARCHSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SIGNINSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.TERMSSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.TITLESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.TREEVIEWSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.USERSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.VISIBILITYSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Extensions'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.TEXTSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.STYLESSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LEFTMENUSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.JQUERYSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.CONTROLPANEL.SkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DefaultAuthentication'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.ViewProfile'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.TagsSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Registration'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.ToastSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.DNNCSSINCLUDESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.DNNCSSEXCLUDESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.DNNJSINCLUDESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.DNNJSEXCLUDESkinObject'

UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Dashboard.WebServer'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Dashboard.Database'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Dashboard.Host'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Dashboard.Portals'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Dashboard.Modules'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Dashboard.Skins'

GO

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}GetAllFiles]') AND type in (N'P', N'PC'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}GetAllFiles]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetAllFiles]
AS
BEGIN
	SELECT   
	  FileId,  
	  PortalId,  
	  [FileName],  
	  Extension,  
	  Size,  
	  Width,  
	  Height,  
	  ContentType,  
	  FolderID,  
	  Folder,  
	  StorageLocation,  
	  IsCached,
	  UniqueId,
	  VersionGuid,
	  SHA1Hash,
	  FolderMappingID,  
	  LastModificationTime,  
	  Title,  
      Description,
	  EnablePublishPeriod,  
	  StartDate,  
	  EndDate,  
	  CreatedByUserID,  
	  CreatedOnDate,  
	  LastModifiedByUserID,  
	  LastModifiedOnDate,  
	  PublishedVersion,  
	  ContentItemID,
      HasBeenPublished
	FROM {databaseOwner}[{objectQualifier}vw_Files] 	
END
GO

/* 
 **************************************
 DNN-8876 Support large files (> 2 GB)
 **************************************
*/

DECLARE @colType smallint = 0;

SELECT @colType = system_type_id 
 FROM  sys.columns 
 WHERE object_id = object_id('{databaseOwner}[{objectQualifier}Files]', 'U')
   AND name = N'Size';

IF @ColType != 127 -- BigInt
	ALTER TABLE {databaseOwner}[{objectQualifier}Files]
	    ALTER COLUMN [Size] BigInt;
GO

DECLARE @colType smallint = 0;

SELECT @colType = system_type_id 
 FROM  sys.columns 
 WHERE object_id = object_id('{databaseOwner}[{objectQualifier}FileVersions]', 'U')
   AND name = N'Size';

IF @ColType != 127 -- BigInt
	ALTER TABLE {databaseOwner}[{objectQualifier}FileVersions]
	    ALTER COLUMN [Size] BigInt;
GO

-- replace deprecated data type image:
DECLARE @colType smallint = 0;

SELECT @colType = system_type_id 
 FROM  sys.columns 
 WHERE object_id = object_id('{databaseOwner}[{objectQualifier}Files]', 'U')
   AND name = N'Size';

IF @ColType != 165 -- varbinary
	ALTER TABLE {databaseOwner}[{objectQualifier}Files]
	    ALTER COLUMN [content] VarBinary(Max);
GO

DECLARE @colType smallint = 0;

SELECT @colType = system_type_id 
 FROM  sys.columns 
 WHERE object_id = object_id('{databaseOwner}[{objectQualifier}FileVersions]', 'U')
   AND name = N'Size';

IF @ColType != 165 -- varbinary
	ALTER TABLE {databaseOwner}[{objectQualifier}FileVersions]
	    ALTER COLUMN [content] VarBinary(Max);
GO

-- Procedures:
IF EXISTS (SELECT * FROM sys.Procedures WHERE object_id = object_id(N'{databaseOwner}[{objectQualifier}AddFile]'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}AddFile]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddFile]
	@PortalId               Int,
	@UniqueId               UniqueIdentifier,
	@VersionGuid            UniqueIdentifier,
	@FileName               nVarChar(246),
	@Extension              nVarChar(100),
	@Size                   BigInt,
	@Width                  Int,
	@Height                 Int,
	@ContentType            nVarChar(200),
	@Folder                 nVarChar(246),
	@FolderID               Int,
	@CreatedByUserID        Int,
	@Hash                   VarChar(40),
	@LastModificationTime	DateTime, 
	@Title					nVarChar(256),
    @Description            nVarChar(500),
	@EnablePublishPeriod	Bit,
	@StartDate				DateTime,
	@EndDate				DateTime,
	@ContentItemID			Int
AS
BEGIN
	SET NOCOUNT OFF;
	DECLARE @FileID int;

	UPDATE {databaseOwner}[{objectQualifier}Files]
	 SET   /* retrieves FileId from table */
		   @FileID              = FileId,
		   FileName             = @FileName,
		   VersionGuid          = @VersionGuid,
		   Extension            = @Extension,
	   	   Size                 = @Size,
		   Width                = @Width,
		   Height               = @Height,
		   ContentType          = @ContentType,
		   FolderID             = @FolderID,
		   LastModifiedByUserID = @CreatedByUserID,
		   LastModifiedOnDate   = getdate(),
		   SHA1Hash             = @Hash,
		   LastModificationTime = @LastModificationTime, 
		   Title                = @Title,
           Description          = @Description,
		   EnablePublishPeriod  = @EnablePublishPeriod,
		   StartDate            = @StartDate,
		   EndDate              = @EndDate,
		   ContentItemID        = @ContentItemID
	 WHERE FolderID = @FolderID 
	   AND FileName = @FileName;
	
	DECLARE @RowCount int = @@ROWCOUNT;
	IF @RowCount = 0 BEGIN
		INSERT INTO {databaseOwner}[{objectQualifier}Files] 
		(	PortalId,
			UniqueId,
			VersionGuid,
			FileName,
			Extension,
			Size,
			Width,
			Height,
			ContentType,
			FolderID,
			CreatedByUserID,
			CreatedOnDate,
			LastModifiedByUserID,
			LastModifiedOnDate,
			SHA1Hash,
			LastModificationTime, 
			Title,
			Description,
			EnablePublishPeriod,
			StartDate,
			EndDate,
			ContentItemID
		) VALUES 
		(   @PortalId,
			@UniqueId,
			@VersionGuid,
			@FileName,
			@Extension,
			@Size,
			@Width,
			@Height,
			@ContentType,
			@FolderID,
			@CreatedByUserID,
			GetDate(),
			@CreatedByUserID,
			GetDate(),
			@Hash,
			@LastModificationTime, 
			@Title,
			@Description,
			@EnablePublishPeriod,
			@StartDate,
			@EndDate,
			@ContentItemID
		);
		SELECT @FileID = SCOPE_IDENTITY();
	END;

	-- update the parent folders "updated date" to latest date:
	IF((@RowCount>0 OR @@ROWCOUNT>0) AND @FolderID IS NOT Null)
		EXEC {databaseOwner}[{objectQualifier}UpdateFolderModifiedOnToCurrentDate] @FolderID;
	
	SELECT @FileID;
END; -- Procedure
GO

IF EXISTS (SELECT * FROM sys.Procedures WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}AddFileVersion]'))
	DROP PROCEDURE  {databaseOwner}[{objectQualifier}AddFileVersion] 
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}AddFileVersion] 
	@FileId					Int,
	@UniqueId				UniqueIdentifier,
	@VersionGuid			UniqueIdentifier,
	@FileName				nVarChar(246),
	@Extension				nVarChar(100),
	@Size					BigInt,
	@Width					Int,
	@Height					Int,
	@ContentType			nVarChar(200),
	@Folder					nVarChar(246),
	@FolderID				Int,
	@UserID					Int,
	@Hash					VarChar(40),
	@LastModificationTime	DateTime, 
	@Title					nVarChar(256),
	@EnablePublishPeriod	Bit,
	@StartDate				DateTime,
	@EndDate				DateTime,
	@ContentItemID			Int,
	@IsPublished			Bit,
	@Content				VarBinary(Max) = Null
AS
BEGIN
	DECLARE @Version Int

	--	Calculate the new version = Max(Files.PublishedVersion, FileVersions.Versions) + 1
	SELECT @Version = MAX(V.[Version]) + 1
	FROM (SELECT [Version]
		   FROM  {databaseOwner}[{objectQualifier}FileVersions]
		   WHERE [FileId] = @FileId
		  UNION
		  SELECT PublishedVersion [Version]
		   FROM  {databaseOwner}[{objectQualifier}Files]
		   WHERE [FileId] = @FileId) V;

	IF @IsPublished = 1 BEGIN
		INSERT INTO {databaseOwner}[{objectQualifier}FileVersions]
			(	[FileId],
				[Version],
				[FileName],
				[Extension],
				[Size],
				[Width],
				[Height],
				[ContentType],
				[Content],
				[CreatedByUserID],
				[CreatedOnDate],
				[LastModifiedByUserID],
				[LastModifiedOnDate],
				[SHA1Hash]
			)
		SELECT	[FileId],
		        [PublishedVersion],
				CONVERT(nVarChar, [FileId]) + N'_' + CONVERT(nvarchar, [PublishedVersion]) + N'.v.resources',
				[Extension],
				[Size],
				[Width],
				[Height],
				[ContentType],
				[Content],
				[CreatedByUserID],
				[CreatedOnDate],
				[LastModifiedByUserID],
				[LastModifiedOnDate],
				[SHA1Hash]					
		 FROM   {objectQualifier}Files
		 WHERE  FileId = @FileId;

		-- update PublishedVersion
		UPDATE {databaseOwner}[{objectQualifier}Files]
		 SET   [PublishedVersion] = @Version
		 WHERE [FileId] = @FileId;
	END 
	ELSE 
		INSERT INTO {databaseOwner}[{objectQualifier}FileVersions]
			(	[FileId],
				[Version],
				[FileName],
				[Extension],
				[Size],
				[Width],
				[Height],
				[ContentType],
				[Content],
				[CreatedByUserID],
				[CreatedOnDate],
				[LastModifiedByUserID],
				[LastModifiedOnDate],
				[SHA1Hash]
			)
		VALUES
		(		@FileId,
		        @Version,
				CONVERT(nvarchar, @FileId) + N'_' + CONVERT(nvarchar, @Version) + N'.v.resources',
				@Extension,
				@Size,
				@Width,
				@Height,
				@ContentType,
				@Content,
				@UserID,
				GETDATE(),
				@UserID,
				GETDATE(),
				@Hash
		);

	SELECT @Version;
END; -- Procedure
GO


IF EXISTS (SELECT * FROM sys.procedures WHERE object_id = object_id(N'{databaseOwner}[{objectQualifier}GetPortalSpaceUsed]'))
  DROP PROCEDURE {databaseOwner}[{objectQualifier}GetPortalSpaceUsed]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetPortalSpaceUsed]
	@PortalId Int     -- Null|-1: Host files
AS
BEGIN
	SELECT SUM([Size]) AS SpaceUsed
	FROM {databaseOwner}[{objectQualifier}Files]
	WHERE (IsNull([PortalID], -1) = IsNull(@PortalId, -1))
END; -- Procedure
GO

IF  EXISTS (SELECT * FROM sys.procedures WHERE object_id = object_id(N'{databaseOwner}[{objectQualifier}UpdateFile]'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateFile]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateFile]
    @FileId                 Int,
    @VersionGuid            UniqueIdentifier,
    @FileName               nVarChar(246),
    @Extension              nVarChar(100),
    @Size                   BigInt,
    @Width                  Int,
    @Height                 Int,
    @ContentType            nVarChar(200),
    @FolderID               Int,
    @LastModifiedByUserID   Int,
    @Hash                   VarChar(40),
    @LastModificationTime   DateTime,
    @Title                  nVarChar(256),
    @Description            nVarChar(500),
    @EnablePublishPeriod    Bit,
    @StartDate              DateTime,
    @EndDate                DateTime,
    @ContentItemID          Int
AS
BEGIN
    SET NOCOUNT OFF;
    DECLARE @PortalID int;
    SELECT @PortalID = PortalID FROM {databaseOwner}[{objectQualifier}Folders] WHERE FolderID = @FolderID;

    UPDATE {databaseOwner}[{objectQualifier}Files]
     SET   FileName             = @FileName,
           VersionGuid          = @VersionGuid,
           Extension            = @Extension,
           Size                 = @Size,
           Width                = @Width,
           Height               = @Height,
           ContentType          = @ContentType,
           FolderID             = @FolderID,
           PortalID             = @PortalID,
           LastModifiedByUserID = @LastModifiedByUserID,
           LastModifiedOnDate   = GetDate(),
           SHA1Hash             = @Hash,
           LastModificationTime = @LastModificationTime,
           Title                = @Title,
           Description          = @Description,
           EnablePublishPeriod  = @EnablePublishPeriod,
           StartDate            = @StartDate,
           EndDate              = @EndDate,
           ContentItemID        = @ContentItemID
     WHERE FileId = @FileId;
    
	-- update the parent folders "updated date" to latest date:
	IF(@@ROWCOUNT>0 AND @FolderID IS NOT Null)
		EXEC {databaseOwner}[{objectQualifier}UpdateFolderModifiedOnToCurrentDate] @FolderID;

END; -- Procedure
GO

If Exists (select * from sys.procedures WHERE object_id = object_id(N'{databaseOwner}[{objectQualifier}UpdateFileContent]'))
	DROP PROCEDURE {databaseOwner}[{objectQualifier}UpdateFileContent]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateFileContent]
	@FileId      int,
	@Content     VarBinary(Max)
AS
BEGIN
	UPDATE {databaseOwner}[{objectQualifier}Files]
	 SET   [Content] = @Content
	 WHERE [FileId]  = @FileId;
END; -- Procedure
GO

/* /DNN-8876 */

/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/

