/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/

/* DNN-6398 */
/************/

UPDATE {databaseOwner}{objectQualifier}HostSettings
  SET SettingValue ='http://www.dnnsoftware.com/help'
  WHERE SettingName='HelpURL'

GO

/* DNN-6758 */
/************/

 ALTER TABLE {databaseOwner}[{objectQualifier}Tabs] ALTER COLUMN IconFile      nVarChar(255);
 ALTER TABLE {databaseOwner}[{objectQualifier}Tabs] ALTER COLUMN IconFileLarge nVarChar(255);

 GO

 /* DNN-5631 */
/*************/

IF  EXISTS (SELECT * FROM sys.Procedures WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}DeleteList]'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}DeleteList]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}DeleteList]
	@ListName  nVarChar( 50), -- Not Null
	@ParentKey nVarChar(150)  -- Not Null
AS
BEGIN
	DELETE L
	 FROM  {databaseOwner}[{objectQualifier}Lists] L
	 WHERE ListName = @ListName 
	   AND {databaseOwner}[{objectQualifier}GetListParentKey](L.ParentID, L.ListName, N'ParentKey',  0) = @ParentKey;
END
GO

 /* DNN-6877 */
/*************/

IF  EXISTS (SELECT * FROM sys.Procedures WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}PurgeScheduleHistory]'))
    DROP PROCEDURE {databaseOwner}[{objectQualifier}PurgeScheduleHistory]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}PurgeScheduleHistory]
AS
BEGIN
DELETE FROM {databaseOwner}[{objectQualifier}schedulehistory] WHERE schedulehistoryid IN (
	SELECT TOP 50000 ScheduleHistoryID FROM {databaseOwner}[{objectQualifier}ScheduleHistory] sh 
		INNER JOIN {databaseOwner}[{objectQualifier}Schedule] s ON s.ScheduleID = sh.ScheduleID AND s.Enabled = 1
	WHERE (
  SELECT COUNT(*) 
  FROM {databaseOwner}[{objectQualifier}ScheduleHistory] sh
  WHERE sh.ScheduleID = {databaseOwner}[{objectQualifier}ScheduleHistory].ScheduleID
  AND sh.StartDate >= {databaseOwner}[{objectQualifier}ScheduleHistory].StartDate
) > s.RetainHistoryNum
		AND s.RetainHistoryNum <> -1
		AND s.ScheduleID = sh.ScheduleID
	ORDER BY ScheduleHistoryID
)
END
GO

/* DNN-DNN-6980 */
/************/

IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}CoreMessaging_DeleteUserNotifications]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}CoreMessaging_DeleteUserNotifications
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}CoreMessaging_DeleteUserNotifications]
	@UserId INT,
	@PortalId INT
AS
BEGIN
	DELETE FROM {databaseOwner}{objectQualifier}CoreMessaging_Messages
	WHERE PortalId = @PortalId
	  AND NotificationTypeID IS NOT NULL
	  AND MessageID IN (SELECT MessageID FROM {databaseOwner}{objectQualifier}CoreMessaging_MessageRecipients WHERE UserID = @UserId)

	SELECT @@ROWCOUNT
END
GO
/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/

IF NOT EXISTS (SELECT * FROM sys.columns WHERE object_id = OBJECT_ID(N'{databaseOwner}[{objectQualifier}UserPortals]') AND name = 'RedirectToUserId')
ALTER TABLE {databaseOwner}{objectQualifier}UserPortals
ADD RedirectToUserId INT NULL
GO

UPDATE {databaseOwner}{objectQualifier}UserPortals
SET RedirectToUserId = -1
GO

IF  EXISTS (SELECT * FROM sys.views WHERE object_id = OBJECT_ID(N'{databaseOwner}{objectQualifier}vw_Users'))
DROP VIEW {databaseOwner}{objectQualifier}vw_Users
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW {databaseOwner}{objectQualifier}vw_Users
AS
SELECT
	U.UserId,
	UP.PortalId,
	U.Username,
	U.FirstName,
	U.LastName,
	U.DisplayName,
	U.IsSuperUser,
	U.Email,
	UP.VanityUrl,
	U.AffiliateId,
	IsNull(UP.IsDeleted, U.IsDeleted) AS IsDeleted,
	UP.RefreshRoles,
	U.LastIPAddress,
	U.UpdatePassword,
	U.PasswordResetToken,
	U.PasswordResetExpiration,
	UP.Authorised,
	UP.RedirectToUserId,
	U.CreatedByUserId,
	U.CreatedOnDate,
	U.LastModifiedByUserId,
	U.LastModifiedOnDate
FROM {databaseOwner}{objectQualifier}Users AS U
LEFT JOIN {databaseOwner}{objectQualifier}UserPortals AS UP 
 ON CASE WHEN U.IsSuperuser = 1 THEN 0 ELSE U.UserId END = UP.UserId
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER PROCEDURE {databaseOwner}{objectQualifier}UpdateUser
	@UserID         int,
	@PortalID		int,
	@FirstName		nvarchar(50),
	@LastName		nvarchar(50),
	@IsSuperUser    bit,
	@Email          nvarchar(256),
	@DisplayName    nvarchar(100),
	@VanityUrl		nvarchar(100),
	@UpdatePassword	bit,
	@Authorised		bit,
	@RefreshRoles	bit,
	@LastIPAddress	nvarchar(50),
	@passwordResetToken uniqueidentifier,
	@passwordResetExpiration datetime,
	@RedirectToUserId int,
	@IsDeleted		bit,
	@LastModifiedByUserID int
AS
	UPDATE {databaseOwner}{objectQualifier}Users
		SET
			FirstName = @FirstName,
			LastName = @LastName,
			IsSuperUser = @IsSuperUser,
			Email = @Email,
			DisplayName = @DisplayName,
			UpdatePassword = @UpdatePassword,
			PasswordResetToken=@passwordResetToken,
			PasswordResetExpiration=@passwordResetExpiration,
			LastIPAddress = @LastIPAddress,
			LastModifiedByUserID = @LastModifiedByUserID,
			LastModifiedOnDate = getdate()
		WHERE  UserId = @UserID
	
	IF @PortalID IS NULL
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}Users
				SET
					IsDeleted = @IsDeleted
				WHERE  UserId = @UserID
		END
	ELSE
		BEGIN
			UPDATE {databaseOwner}{objectQualifier}UserPortals
				SET
					Authorised = @Authorised,
					RefreshRoles = @RefreshRoles,
					VanityUrl = @VanityUrl,
					IsDeleted = @IsDeleted,
					RedirectToUserId = @RedirectToUserId
				WHERE  UserId = @UserID
					AND PortalId = @PortalID
		END
GO
