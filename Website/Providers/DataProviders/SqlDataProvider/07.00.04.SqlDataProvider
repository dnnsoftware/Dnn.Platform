/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/

/***** Fix bug 24927: Return the language package ID in sp UpdateLanguagePack. *****/
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}UpdateLanguagePack]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}UpdateLanguagePack
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}UpdateLanguagePack]
	@LanguagePackID			int,
	@PackageID			    int,
	@LanguageID			    int,
	@DependentPackageID		int,
	@LastModifiedByUserID	int

AS
	UPDATE {databaseOwner}{objectQualifier}LanguagePacks
		SET
			PackageID = @PackageID,
			LanguageID = @LanguageID,
			DependentPackageID = @DependentPackageID,
			[LastModifiedByUserID] = @LastModifiedByUserID,	
			[LastModifiedOnDate] = GETDATE()
	WHERE LanguagePackID = @LanguagePackID

	SELECT @LanguagePackID
GO

/***** Fix bug 24221: add unique index on MetaData table. *****/
DELETE FROM {databaseOwner}[{objectQualifier}MetaData] WHERE MetaDataID NOT IN (SELECT MIN(MetaDataID) FROM {databaseOwner}[{objectQualifier}MetaData] GROUP BY MetaDataName)
GO
IF EXISTS (SELECT * FROM sys.indexes WHERE name='IX_{objectQualifier}MetaData_MetaDataName')
	DROP INDEX [IX_{objectQualifier}MetaData_MetaDataName] ON {databaseOwner}[{objectQualifier}MetaData]
GO
CREATE UNIQUE NONCLUSTERED INDEX IX_{objectQualifier}MetaData_MetaDataName ON {databaseOwner}[{objectQualifier}MetaData](MetaDataName) 
GO


/*Fix bug 24977  */

UPDATE {databaseOwner}[{objectQualifier}ModuleControls] 
SET [ControlType] = 2 WHERE [ControlSrc] = N'DesktopModules/Admin/Extensions/UsageDetails.ascx'


/***** DNN-25176 - Core allows duplicate ContentType. *****/
IF NOT EXISTS (SELECT * FROM sys.indexes WHERE name='IX_{objectQualifier}ContentTypes_ContentType')
	CREATE UNIQUE NONCLUSTERED INDEX IX_{objectQualifier}ContentTypes_ContentType ON {databaseOwner}[{objectQualifier}ContentTypes](ContentType) 
GO

IF NOT EXISTS(SELECT * FROM {databaseOwner}{objectQualifier}ContentTypes WHERE [ContentType] = 'DNNCorp_JournalProfile') 
		 INSERT INTO  {databaseOwner}{objectQualifier}ContentTypes (ContentType) VALUES ('DNNCorp_JournalProfile')
GO

IF NOT EXISTS(SELECT * FROM {databaseOwner}{objectQualifier}ContentTypes WHERE [ContentType] = 'DNNCorp_JournalGroup') 
		 INSERT INTO  {databaseOwner}{objectQualifier}ContentTypes (ContentType) VALUES ('DNNCorp_JournalGroup')
GO


/* Update version number in DesktopModules */
/*******************************************/
DECLARE @version nvarchar(8)
SET @version = '07.00.04'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='SiteWizard'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Lists'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Authentication'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='FileManager'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='SiteLog'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Newsletters'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Portals'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='SQL'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='HostSettings'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='RecycleBin'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='LogViewer'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Scheduler'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='SearchAdmin'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Security'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Tabs'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Vendors'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Banners'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='ProfessionalPreview'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='SearchInput'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='SearchResults'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='FeedExplorer'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Extensions'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Solutions'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='WhatsNew'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Dashboard'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Languages'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Skins'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='SkinDesigner'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Console'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='GoogleAnalytics'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Marketplace'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='ViewProfile'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='Sitemap'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='ContentList'
UPDATE {databaseOwner}{objectQualifier}DesktopModules SET Version = @version WHERE ModuleName='ConfigurationManager'

UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Authentication'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Banners'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.FeedExplorer'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.FileManager'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.HostSettings'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Lists'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LogViewer'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Newsletters'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Portals'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.RecycleBin'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Scheduler'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SearchAdmin'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SearchInput'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SearchResults'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Security'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SiteLog'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SiteWizard'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Tabs'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SQL'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Vendors'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.ACTIONBUTTONSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.ACTIONSSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.BANNERSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.BREADCRUMBSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.COPYRIGHTSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.CURRENTDATESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.DOTNETNUKESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.DROPDOWNACTIONSSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.HELPSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.HOSTNAMESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.ICONSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LANGUAGESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LINKACTIONSSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LINKSSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LOGINSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LOGOSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.MENUSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.NAVSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.PRINTMODULESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.PRIVACYSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SEARCHSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SIGNINSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SOLPARTACTIONSSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.SOLPARTMENUSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.TERMSSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.TITLESkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.TREEVIEWSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.USERSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.VISIBILITYSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Extensions'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Solutions'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.TEXTSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.WhatsNew'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.STYLESSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.LEFTMENUSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.JQUERYSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.CONTROLPANEL.SkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Dashboard'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Languages'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Skins'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Skin Designer'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Console'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Google Analytics'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DefaultAuthentication'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Marketplace'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.ViewProfile'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Sitemap'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.TagsSkinObject'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.ContentList'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.Configuration Manager'
UPDATE {databaseOwner}{objectQualifier}Packages SET Version = @version WHERE Name='DotNetNuke.ProfessionalPreview'

UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'
UPDATE {databaseOwner}{objectQualifier}ModuleControls SET HelpUrl = 'http://www.DNNSoftware.com/docs/'


GO

IF NOT EXISTS(SELECT * FROM sys.default_constraints WHERE parent_object_id = (SELECT object_id FROM sys.objects WHERE name = '{objectQualifier}Tabs') 
                     AND parent_column_id = (SELECT column_id FROM sys.columns WHERE object_id = (SELECT object_id FROM sys.objects WHERE name = '{objectQualifier}Tabs') AND name = 'Level'))
BEGIN
	ALTER TABLE {databaseOwner}{objectQualifier}Tabs ADD CONSTRAINT
		DF_{objectQualifier}Tabs_Level DEFAULT 0 FOR [Level]
END
GO

/***** Fix bug 24171: update sp UpdateOnlineUser to check whether user is exist first. *****/
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}UpdateOnlineUser]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}UpdateOnlineUser
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}UpdateOnlineUser
@UserID 	INT,
@PortalID 	INT,
@TabID 		INT,
@LastActiveDate DATETIME 
AS
BEGIN
	IF EXISTS (SELECT UserID FROM {databaseOwner}{objectQualifier}Users WHERE UserID = @UserID)
	BEGIN
		IF EXISTS (SELECT UserID FROM {databaseOwner}{objectQualifier}UsersOnline WHERE UserID = @UserID and PortalID = @PortalID)
			UPDATE 
				{databaseOwner}{objectQualifier}UsersOnline
			SET 
				TabID = @TabID,
				LastActiveDate = @LastActiveDate
			WHERE
				UserID = @UserID
				and 
				PortalID = @PortalID
		ELSE
			INSERT INTO
				{databaseOwner}{objectQualifier}UsersOnline
				(UserID, PortalID, TabID, CreationDate, LastActiveDate) 
			VALUES
				(@UserID, @PortalID, @TabID, GetDate(), @LastActiveDate)
	END

END
GO

/*****Journal Updates *****/
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME='{objectQualifier}Journal' AND COLUMN_NAME='CommentsDisabled')
	BEGIN
		ALTER TABLE {databaseOwner}{objectQualifier}Journal
			ADD CommentsDisabled bit NOT NULL CONSTRAINT DF_{objectQualifier}Journal_CommentsDisabled DEFAULT 0
	END
GO
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.Columns WHERE TABLE_NAME='{objectQualifier}Journal' AND COLUMN_NAME='CommentsHidden')
	BEGIN
		ALTER TABLE {databaseOwner}{objectQualifier}Journal
			ADD CommentsHidden bit NOT NULL CONSTRAINT DF_{objectQualifier}Journal_CommentsHidden DEFAULT 0
	END
GO
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}Journal_GetByKey]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}Journal_GetByKey
GO
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}Journal_ListForSummary]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}Journal_ListForSummary
GO
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}Journal_ListForProfile]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}Journal_ListForProfile
GO
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}Journal_ListForGroup]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}Journal_ListForGroup
GO
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}Journal_Get]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}Journal_Get
GO
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}Journal_Save]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}Journal_Save
GO
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}Journal_Update]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}Journal_Update
GO
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}Journal_Comments_ToggleDisable]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}Journal_Comments_ToggleDisable
GO
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'{databaseOwner}[{objectQualifier}Journal_Comments_ToggleHidden]') AND OBJECTPROPERTY(id, N'IsPROCEDURE') = 1)
  DROP PROCEDURE {databaseOwner}{objectQualifier}Journal_Comments_ToggleHidden
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_GetByKey]
	@PortalId int,
	@ObjectKey nvarchar(255),
	@IncludeAllItems int = 0,
	@IsDeleted int = 0
	AS
	SELECT     j.JournalId, j.JournalTypeId, j.Title, j.Summary, j.UserId, j.DateCreated, j.DateUpdated, j.PortalId,
				j.ProfileId, j.GroupId, j.ObjectKey, j.AccessKey,
				"JournalOwner" = '<entity><id>' + CAST(p.UserId as nvarchar(150)) + '</id><name><![CDATA[' + p.DisplayName + ']]></name></entity>',
				"JournalAuthor" = CASE WHEN ISNULL(a.UserId,-1) >0 THEN '<entity><id>' + CAST(a.UserId as nvarchar(150)) + '</id><name><![CDATA[' + a.DisplayName + ']]></name></entity>' ELSE '' END,
				"JournalOwnerId" = ISNULL(j.ProfileId,j.UserId),
				 jt.Icon, jt.JournalType,
				"Profile" = CASE WHEN j.ProfileId > 0 THEN '<entity><id>' + CAST(p.UserID as nvarchar(150)) + '</id><name><![CDATA[' + p.DisplayName + ']]></name><vanity></vanity></entity>' ELSE '' END,
				jd.JournalXML, ContentItemId, j.ItemData, j.IsDeleted, j.CommentsDisabled, j.CommentsHidden
	FROM       	{databaseOwner}[{objectQualifier}Journal] AS j INNER JOIN
				{databaseOwner}[{objectQualifier}Journal_Types] as jt ON jt.JournalTypeId = j.JournalTypeId LEFT OUTER JOIN
				{databaseOwner}[{objectQualifier}Journal_Data] as jd on jd.JournalId = j.JournalId LEFT OUTER JOIN
				{databaseOwner}[{objectQualifier}Users] AS p ON j.ProfileId = p.UserID LEFT OUTER JOIN
				{databaseOwner}[{objectQualifier}Users] AS a ON j.UserId = a.UserID
	WHERE		((@IncludeAllItems = 0) AND (j.ObjectKey = @ObjectKey AND j.ObjectKey IS NOT NULL AND @ObjectKey <> '' AND j.IsDeleted = @IsDeleted)) 
				OR 
				((@IncludeAllItems = 1) AND (j.ObjectKey = @ObjectKey AND j.ObjectKey IS NOT NULL AND @ObjectKey <> ''))
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_ListForSummary]
	@PortalId int,
	@ModuleId int,
	@CurrentUserId int,
	@RowIndex int,
	@MaxRows int,
	@IncludeAllItems int = 0,
	@IsDeleted int = 0	
	AS
	IF @RowIndex = 0
	BEGIN
		SET @RowIndex = 1
	END
	DECLARE @EndRow int
	SET @EndRow = @RowIndex + @MaxRows - 1;
	DECLARE @j TABLE(id int IDENTITY, journalid int, datecreated datetime)
	IF EXISTS(SELECT * from {databaseOwner}[{objectQualifier}Journal_TypeFilters] WHERE ModuleId = @ModuleId)
	INSERT INTO @j 
		SELECT j.journalid, jt.datecreated from (
			SELECT DISTINCT js.JournalId from {databaseOwner}[{objectQualifier}Journal] as j
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_Security] as js ON js.JournalId = j.JournalId
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@CurrentUserId ,1) as t ON t.seckey = js.SecurityKey
				WHERE j.PortalId = @PortalId
			) as j INNER JOIN {databaseOwner}[{objectQualifier}Journal] jt ON jt.JournalId = j.JournalId AND jt.PortalId = @PortalId
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_TypeFilters] as jf ON jf.JournalTypeId = jt.JournalTypeId AND jf.ModuleId = @ModuleId
			ORDER BY jt.DateCreated DESC, jt.JournalId DESC;
	ELSE
	INSERT INTO @j 
		SELECT j.journalid, jt.datecreated from (
			SELECT DISTINCT js.JournalId from {databaseOwner}[{objectQualifier}Journal] as j
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_Security] as js ON js.JournalId = j.JournalId
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@CurrentUserId ,1) as t ON t.seckey = js.SecurityKey
				WHERE j.PortalId = @PortalId
			) as j INNER JOIN {databaseOwner}[{objectQualifier}Journal] jt ON jt.JournalId = j.JournalId AND jt.PortalId = @PortalId
			ORDER BY jt.DateCreated DESC, jt.JournalId DESC;
	WITH journalItems  AS
	(
		SELECT	j.JournalId,
				ROW_NUMBER() OVER (ORDER BY j.JournalId DESC) AS RowNumber
		FROM	{databaseOwner}[{objectQualifier}Journal] as j INNER JOIN @j as jtmp ON jtmp.JournalId = j.JournalId
		WHERE j.PortalId = @PortalId
	)
	SELECT	j.JournalId, j.JournalTypeId, j.Title, j.Summary, j.UserId, j.DateCreated, j.DateUpdated, j.PortalId,
				j.ProfileId, j.GroupId, j.ObjectKey, j.AccessKey,
				"JournalOwner" = '<entity><id>' + CAST(p.UserId as nvarchar(150)) + '</id><name><![CDATA[' + p.DisplayName + ']]></name></entity>',
				"JournalAuthor" = CASE WHEN ISNULL(a.UserId,-1) >0 THEN '<entity><id>' + CAST(a.UserId as nvarchar(150)) + '</id><name><![CDATA[' + a.DisplayName + ']]></name></entity>' ELSE '' END,
				"JournalOwnerId" = ISNULL(j.ProfileId,j.UserId),
				 jt.Icon, jt.JournalType,
				"Profile" = CASE WHEN j.ProfileId > 0 THEN '<entity><id>' + CAST(p.UserID as nvarchar(150)) + '</id><name><![CDATA[' + p.DisplayName + ']]></name><vanity></vanity></entity>' ELSE '' END,
				jd.JournalXML, j.ContentItemId, j.ItemData, RowNumber, j.IsDeleted, j.CommentsDisabled, j.CommentsHidden
	FROM	journalItems as ji INNER JOIN 
		{databaseOwner}[{objectQualifier}Journal] as j ON j.JournalId = ji.JournalId INNER JOIN
	{databaseOwner}[{objectQualifier}Journal_Types] as jt ON jt.JournalTypeId = j.JournalTypeId LEFT OUTER JOIN
				{databaseOwner}[{objectQualifier}Journal_Data] as jd on jd.JournalId = j.JournalId LEFT OUTER JOIN
				{databaseOwner}[{objectQualifier}Users] AS p ON j.ProfileId = p.UserID LEFT OUTER JOIN
				{databaseOwner}[{objectQualifier}Users] AS a ON j.UserId = a.UserID
	WHERE	((@IncludeAllItems = 0) AND (RowNumber BETWEEN @RowIndex AND @EndRow AND j.IsDeleted = @IsDeleted)) 
			OR 
			((@IncludeAllItems = 1) AND (RowNumber BETWEEN @RowIndex AND @EndRow ))
	ORDER BY RowNumber ASC;
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_ListForProfile]
	@PortalId int,
	@ModuleId int,
	@CurrentUserId int,
	@ProfileId int,
	@RowIndex int,
	@MaxRows int,
	@IncludeAllItems int = 0,
	@IsDeleted int = 0
	AS
	DECLARE @EndRow int
	SET @EndRow = @RowIndex + @MaxRows;
	DECLARE @j TABLE(id int IDENTITY, journalid int, datecreated datetime)
	IF EXISTS(SELECT * from {databaseOwner}[{objectQualifier}Journal_TypeFilters] WHERE ModuleId = @ModuleId)
	INSERT INTO @j 
		SELECT j.journalid, jt.datecreated from (
			SELECT DISTINCT js.JournalId from {databaseOwner}[{objectQualifier}Journal] as j
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_Security] as js ON js.JournalId = j.JournalId
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@CurrentUserId ,1) as t ON t.seckey = js.SecurityKey
				WHERE j.ProfileId = @ProfileId AND j.PortalId = @PortalId
			) as j INNER JOIN {databaseOwner}[{objectQualifier}Journal] jt ON jt.JournalId = j.JournalId AND jt.PortalId = @PortalId
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_TypeFilters] as jf ON jf.JournalTypeId = jt.JournalTypeId AND jf.ModuleId = @ModuleId
			ORDER BY jt.DateCreated DESC, jt.JournalId DESC;
	ELSE
	INSERT INTO @j 
		SELECT j.journalid, jt.datecreated from (
			SELECT DISTINCT js.JournalId from {databaseOwner}[{objectQualifier}Journal] as j
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_Security] as js ON js.JournalId = j.JournalId
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@CurrentUserId ,1) as t ON t.seckey = js.SecurityKey
				WHERE j.ProfileId = @ProfileId AND j.PortalId = @PortalId
			) as j INNER JOIN {databaseOwner}[{objectQualifier}Journal] jt ON jt.JournalId = j.JournalId AND jt.PortalId = @PortalId
			ORDER BY jt.DateCreated DESC, jt.JournalId DESC;
	WITH journalItems  AS
	(
		SELECT	j.JournalId,
				ROW_NUMBER() OVER (ORDER BY j.JournalId DESC) AS RowNumber
		FROM	{databaseOwner}[{objectQualifier}Journal] as j INNER JOIN @j as jtmp ON jtmp.JournalId = j.JournalId
		WHERE j.PortalId = @PortalId AND j.ProfileId = @ProfileId
	)
	SELECT	j.JournalId, j.JournalTypeId, j.Title, j.Summary, j.UserId, j.DateCreated, j.DateUpdated, j.PortalId,
				j.ProfileId, j.GroupId, j.ObjectKey, j.AccessKey,
				"JournalOwner" = '<entity><id>' + CAST(p.UserId as nvarchar(150)) + '</id><name><![CDATA[' + p.DisplayName + ']]></name></entity>',
				"JournalAuthor" = CASE WHEN ISNULL(a.UserId,-1) >0 THEN '<entity><id>' + CAST(a.UserId as nvarchar(150)) + '</id><name><![CDATA[' + a.DisplayName + ']]></name></entity>' ELSE '' END,
				"JournalOwnerId" = ISNULL(j.ProfileId,j.UserId),
				 jt.Icon, jt.JournalType,
				"Profile" = CASE WHEN j.ProfileId > 0 THEN '<entity><id>' + CAST(p.UserID as nvarchar(150)) + '</id><name><![CDATA[' + p.DisplayName + ']]></name><vanity></vanity></entity>' ELSE '' END,
				jd.JournalXML, j.ContentItemId, j.ItemData, RowNumber, j.IsDeleted, j.CommentsDisabled, j.CommentsHidden
	FROM	journalItems as ji INNER JOIN 
		{databaseOwner}[{objectQualifier}Journal] as j ON j.JournalId = ji.JournalId INNER JOIN
	{databaseOwner}[{objectQualifier}Journal_Types] as jt ON jt.JournalTypeId = j.JournalTypeId LEFT OUTER JOIN
				{databaseOwner}[{objectQualifier}Journal_Data] as jd on jd.JournalId = j.JournalId LEFT OUTER JOIN
				{databaseOwner}[{objectQualifier}Users] AS p ON j.ProfileId = p.UserID LEFT OUTER JOIN
				{databaseOwner}[{objectQualifier}Users] AS a ON j.UserId = a.UserID
	WHERE	((@IncludeAllItems = 0) AND (RowNumber BETWEEN @RowIndex AND @EndRow AND j.IsDeleted = @IsDeleted)) 
			OR 
			((@IncludeAllItems = 1) AND (RowNumber BETWEEN @RowIndex AND @EndRow))	
	ORDER BY RowNumber ASC;
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_ListForGroup]
	@PortalId int,
	@ModuleId int,
	@CurrentUserId int,
	@GroupId int,
	@RowIndex int,
	@MaxRows int,
	@IncludeAllItems int = 0,
	@IsDeleted int = 0
	AS
	DECLARE @EndRow int
	SET @EndRow = @RowIndex + @MaxRows;
		DECLARE @j TABLE(id int IDENTITY, journalid int, datecreated datetime)
	IF EXISTS(SELECT * from {databaseOwner}[{objectQualifier}Journal_TypeFilters] WHERE ModuleId = @ModuleId)
	INSERT INTO @j 
		SELECT j.journalid, jt.datecreated from (
			SELECT DISTINCT js.JournalId from {databaseOwner}[{objectQualifier}Journal] as j
					INNER JOIN {databaseOwner}[{objectQualifier}Journal_Security] as js ON js.JournalId = j.JournalId
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@CurrentUserId ,1) as t 
					ON t.seckey = js.SecurityKey AND (js.SecurityKey = 'R' + CAST(@GroupId as nvarchar(100)) OR js.SecurityKey = 'E')
					WHERE j.PortalId = @PortalId
			) as j INNER JOIN {databaseOwner}[{objectQualifier}Journal] jt ON jt.JournalId = j.JournalId AND jt.PortalId = @PortalId AND jt.GroupId = @GroupId
			INNER JOIN {databaseOwner}[{objectQualifier}Journal_TypeFilters] as jf ON jf.JournalTypeId = jt.JournalTypeId AND jf.ModuleId = @ModuleId
			ORDER BY jt.DateCreated DESC, jt.JournalId DESC;
	ELSE
	INSERT INTO @j 
		SELECT j.journalid, jt.datecreated from (
			SELECT DISTINCT js.JournalId from {databaseOwner}[{objectQualifier}Journal] as j
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_Security] as js ON js.JournalId = j.JournalId
				INNER JOIN {databaseOwner}[{objectQualifier}Journal_User_Permissions](@PortalId,@CurrentUserId ,1) as t 
					ON t.seckey = js.SecurityKey AND (js.SecurityKey = 'R' + CAST(@GroupId as nvarchar(100)) OR js.SecurityKey = 'E')
					WHERE j.PortalId = @PortalId
			) as j INNER JOIN {databaseOwner}[{objectQualifier}Journal] jt ON jt.JournalId = j.JournalId AND jt.PortalId = @PortalId AND jt.GroupId = @GroupId
			ORDER BY jt.DateCreated DESC, jt.JournalId DESC;
	WITH journalItems  AS
	(
		SELECT	j.JournalId,
				ROW_NUMBER() OVER (ORDER BY j.JournalId DESC) AS RowNumber
		FROM	{databaseOwner}[{objectQualifier}Journal] as j INNER JOIN @j as jtmp ON jtmp.JournalId = j.JournalId
		WHERE j.PortalId = @PortalId
	)
	SELECT	j.JournalId, j.JournalTypeId, j.Title, j.Summary, j.UserId, j.DateCreated, j.DateUpdated, j.PortalId,
				j.ProfileId, j.GroupId, j.ObjectKey, j.AccessKey,
				"JournalOwner" = '<entity><id>' + CAST(r.RoleId as nvarchar(150)) + '</id><name><![CDATA[' + r.RoleName + ']]></name></entity>',
				"JournalAuthor" = CASE WHEN ISNULL(a.UserId,-1) >0 THEN '<entity><id>' + CAST(a.UserId as nvarchar(150)) + '</id><name><![CDATA[' + a.DisplayName + ']]></name></entity>' ELSE '' END,
				"JournalOwnerId" = ISNULL(j.ProfileId,j.UserId),
				 jt.Icon, jt.JournalType,
				"Profile" = CASE WHEN j.ProfileId > 0 THEN '<entity><id>' + CAST(p.UserID as nvarchar(150)) + '</id><name><![CDATA[' + p.DisplayName + ']]></name><vanity></vanity></entity>' ELSE '' END,
				jd.JournalXML, j.ContentItemId, j.ItemData, RowNumber, j.IsDeleted, j.CommentsDisabled, j.CommentsHidden
	FROM	journalItems as ji INNER JOIN 
		{databaseOwner}[{objectQualifier}Journal] as j ON j.JournalId = ji.JournalId INNER JOIN
		{databaseOwner}[{objectQualifier}Journal_Types] as jt ON jt.JournalTypeId = j.JournalTypeId INNER JOIN
		{databaseOwner}[{objectQualifier}Roles] as r ON j.GroupId = r.RoleId LEFT OUTER JOIN
				{databaseOwner}[{objectQualifier}Journal_Data] as jd on jd.JournalId = j.JournalId LEFT OUTER JOIN
				{databaseOwner}[{objectQualifier}Users] AS p ON j.ProfileId = p.UserID LEFT OUTER JOIN
				{databaseOwner}[{objectQualifier}Users] AS a ON j.UserId = a.UserID
	WHERE		((@IncludeAllItems = 0) AND (RowNumber BETWEEN @RowIndex AND @EndRow AND j.IsDeleted = @IsDeleted)) 
				OR 
				((@IncludeAllItems = 1) AND (RowNumber BETWEEN @RowIndex AND @EndRow))
	ORDER BY RowNumber ASC;
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Get]
	@PortalId int,
	@CurrentUserId int,
	@JournalId int,
	@IncludeAllItems int = 0,
	@IsDeleted int = 0
	AS
	SELECT     j.JournalId, j.JournalTypeId, j.Title, j.Summary, j.UserId, j.DateCreated, j.DateUpdated, j.PortalId,
				j.ProfileId, j.GroupId, j.ObjectKey, j.AccessKey,
				"JournalOwner" = '<entity><id>' + CAST(p.UserId as nvarchar(150)) + '</id><name><![CDATA[' + p.DisplayName + ']]></name></entity>',
				"JournalAuthor" = CASE WHEN ISNULL(a.UserId,-1) >0 THEN '<entity><id>' + CAST(a.UserId as nvarchar(150)) + '</id><name><![CDATA[' + a.DisplayName + ']]></name></entity>' ELSE '' END,
				"JournalOwnerId" = ISNULL(j.ProfileId,j.UserId),
				 jt.Icon, jt.JournalType,
				"Profile" = CASE WHEN j.ProfileId > 0 THEN '<entity><id>' + CAST(p.UserID as nvarchar(150)) + '</id><name><![CDATA[' + p.DisplayName + ']]></name><vanity></vanity></entity>' ELSE '' END,
				jd.JournalXML, ContentItemId, j.ItemData, j.IsDeleted, j.CommentsDisabled, j.CommentsHidden
	FROM       	{databaseOwner}[{objectQualifier}Journal] AS j INNER JOIN
				{databaseOwner}[{objectQualifier}Journal_Types] as jt ON jt.JournalTypeId = j.JournalTypeId LEFT OUTER JOIN
				{databaseOwner}[{objectQualifier}Journal_Data] as jd on jd.JournalId = j.JournalId LEFT OUTER JOIN
				{databaseOwner}[{objectQualifier}Users] AS p ON j.ProfileId = p.UserID LEFT OUTER JOIN
				{databaseOwner}[{objectQualifier}Users] AS a ON j.UserId = a.UserID
	WHERE		((@IncludeAllItems = 0) AND (j.JournalId = @JournalId AND j.IsDeleted = @IsDeleted)) 
				OR 
				((@IncludeAllItems = 1) AND (j.JournalId = @JournalId))
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Save]
@PortalId int,
@JournalId int,
@JournalTypeId int,
@UserId int,
@ProfileId int,
@GroupId int,
@Title nvarchar(255),
@Summary nvarchar(2000),
@ItemData nvarchar(2000),
@JournalXML xml,
@ObjectKey nvarchar(255),
@AccessKey uniqueidentifier,
@SecuritySet nvarchar(2000),
@CommentsDisabled bit,
@CommentsHidden bit
AS
INSERT INTO {databaseOwner}[{objectQualifier}Journal]
	(JournalTypeId, UserId, DateCreated, DateUpdated, PortalId, ProfileId, GroupId,Title,Summary, ObjectKey, AccessKey, ItemData, CommentsHidden, CommentsDisabled)
	VALUES
	(@JournalTypeId, @UserId, GETUTCDATE(), GETUTCDATE(), @PortalId, @ProfileId, @GroupId, @Title, @Summary, @ObjectKey, @AccessKey, @ItemData, @CommentsHidden, @CommentsDisabled)
SET @JournalId = SCOPE_IDENTITY()
BEGIN
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Security]
	(JournalId, SecurityKey) 
	SELECT @JournalId, string from {databaseOwner}[{objectQualifier}Journal_SplitText](@SecuritySet,',')
END
IF @JournalXML IS NOT NULL
BEGIN
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Data]
	(JournalId, JournalXML)
	VALUES
	(@JournalId, @JournalXML)
END
SELECT @JournalId
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Update]
@PortalId int,
@JournalId int,
@JournalTypeId int,
@UserId int,
@ProfileId int,
@GroupId int,
@Title nvarchar(255),
@Summary nvarchar(2000),
@ItemData nvarchar(2000),
@JournalXML xml,
@ObjectKey nvarchar(255),
@AccessKey uniqueidentifier,
@SecuritySet nvarchar(2000),
@CommentsDisabled bit,
@CommentsHidden bit
AS
UPDATE {databaseOwner}[{objectQualifier}Journal]
	SET 
		JournalTypeId = @JournalTypeId,
		UserId = @UserId,
		DateUpdated = GETUTCDATE(),
		PortalId = @PortalId,
		ProfileId = @ProfileId,
		GroupId = @GroupId,
		Title = @Title,
		Summary = @Summary,
		ObjectKey = @ObjectKey,
		AccessKey = @AccessKey,
		ItemData = @ItemData,
		CommentsHidden = @CommentsHidden,
		CommentsDisabled = @CommentsDisabled
	WHERE JournalId = @JournalId
IF @SecuritySet IS NOT NULL AND @SecuritySet <> ''
BEGIN
DELETE FROM {databaseOwner}[{objectQualifier}Journal_Security] WHERE JournalId = @JournalId
INSERT INTO {databaseOwner}[{objectQualifier}Journal_Security]
	(JournalId, SecurityKey) 
	SELECT @JournalId, string from {databaseOwner}[{objectQualifier}Journal_SplitText](@SecuritySet,',')
END
SELECT @JournalId
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Comments_ToggleDisable]
@PortalId int,
@JournalId int,
@Disabled bit
AS
UPDATE {databaseOwner}[{objectQualifier}Journal]
	SET CommentsDisabled = @Disabled
	WHERE PortalId = @PortalId AND JournalId = @JournalId
GO
CREATE PROCEDURE {databaseOwner}[{objectQualifier}Journal_Comments_ToggleHidden]
@PortalId int,
@JournalId int,
@Hidden bit
AS
UPDATE {databaseOwner}[{objectQualifier}Journal]
	SET CommentsHidden = @Hidden
	WHERE PortalId = @PortalId AND JournalId = @JournalId
GO
/************************************************************/


/*****              SqlDataProvider                     *****/
/************************************************************/
