/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/

IF object_id(N'{databaseOwner}[{objectQualifier}vw_Files]', 'V') IS NOT NULL
    DROP VIEW {databaseOwner}[{objectQualifier}vw_Files]
GO
CREATE VIEW {databaseOwner}[{objectQualifier}vw_Files]
AS
    SELECT  fi.FileId, 
            fi.PortalId, 
            fi.FileName, 
            fi.Extension, 
            fi.Size, 
            fi.Width, 
            fi.Height, 
            fi.ContentType, 
            fi.FolderID, 
            fi.[Content], 
            fi.CreatedByUserID, 
            fi.CreatedOnDate, 
            fi.LastModifiedByUserID, 
            fi.LastModifiedOnDate, 
            fi.UniqueId, 
            fi.VersionGuid, 
            fi.SHA1Hash, 
            fi.LastModificationTime, 
            fi.Title, 
            fi.Description,
            fi.StartDate, 
            fi.EnablePublishPeriod, 
            fi.EndDate, 
            fi.ContentItemID, 
            fi.PublishedVersion, 
            fo.FolderPath AS Folder,
            fo.IsCached,
            fo.FolderMappingID,
            fo.StorageLocation,
            fi.HasBeenPublished
    FROM    {databaseOwner}[{objectQualifier}Files] AS fi WITH (NOLOCK)
        INNER JOIN {databaseOwner}[{objectQualifier}Folders] AS fo WITH (NOLOCK)
        ON fi.FolderID = fo.FolderID
GO

IF object_id(N'{databaseOwner}[{objectQualifier}vw_PublishedFiles]', 'V') IS NOT NULL
    DROP VIEW {databaseOwner}[{objectQualifier}vw_PublishedFiles]
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_PublishedFiles]
AS
    SELECT     
       fi.[FileId]
      ,fi.[PortalId]
      ,fi.[FileName]
      ,fi.[Extension]
      ,fi.[Size]
      ,fi.[Width]
      ,fi.[Height]
      ,fi.[ContentType]
      ,fi.[FolderID]
      ,fi.[Content]
      ,fi.[CreatedByUserID]
      ,fi.[CreatedOnDate]
      ,fi.[LastModifiedByUserID]
      ,fi.[LastModifiedOnDate]
      ,fi.[UniqueId]
      ,fi.[VersionGuid]
      ,fi.[SHA1Hash]
      ,fi.[LastModificationTime]
      ,fi.[Title]
      ,fi.[Description]
      ,fi.[StartDate]
      ,fi.[EnablePublishPeriod]
      ,fi.[EndDate]
      ,fi.[ContentItemID]
      ,fi.[PublishedVersion]
      ,fi.[Folder]
      ,fi.[IsCached]
      ,fi.[StorageLocation]
      ,fi.[FolderMappingID]
      ,fi.[HasBeenPublished]
    FROM  {databaseOwner}[{objectQualifier}vw_Files] fi WITH (NOLOCK)
    WHERE ([EnablePublishPeriod] = 0 AND [HasBeenPublished] = 1)
       OR ([StartDate] <= GETDATE()
           AND ([EndDate] IS NULL OR GETDATE() <= [EndDate]) AND [HasBeenPublished] = 1)
GO

IF object_id(N'{databaseOwner}[{objectQualifier}vw_FolderPermissions]', 'V') IS NOT NULL
    DROP VIEW {databaseOwner}[{objectQualifier}vw_FolderPermissions]
GO

CREATE VIEW {databaseOwner}[{objectQualifier}vw_FolderPermissions]
AS
SELECT  FP.FolderPermissionID,
        F.FolderID,
        IsNull(F.FolderPath, N'') FolderPath,
        IsNull(F.PortalID, -1) PortalID,
        P.PermissionID,
        FP.RoleID,
        R.RoleName,
        FP.AllowAccess,
        FP.UserID,
        U.Username,
        U.DisplayName,
        P.PermissionCode,
        P.ModuleDefID,
        P.PermissionKey,
        P.PermissionName,
        FP.CreatedByUserID,
        FP.CreatedOnDate,
        FP.LastModifiedByUserID,
        FP.LastModifiedOnDate
FROM         {databaseOwner}[{objectQualifier}FolderPermission] AS FP WITH (NOLOCK)
 INNER JOIN  {databaseOwner}[{objectQualifier}Folders]          AS F  WITH (NOLOCK) ON FP.FolderID     = F.FolderID
 INNER JOIN  {databaseOwner}[{objectQualifier}Permission]       AS P  WITH (NOLOCK) ON FP.PermissionID = P.PermissionID
 LEFT  JOIN  {databaseOwner}[{objectQualifier}Roles]            AS R  WITH (NOLOCK) ON FP.RoleID       = R.RoleID
 LEFT  JOIN  {databaseOwner}[{objectQualifier}Users]            AS U  WITH (NOLOCK) ON FP.UserID       = U.UserID
GO

IF object_id(N'{databaseOwner}[{objectQualifier}GetFolderPermissionsByPortal]', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}GetFolderPermissionsByPortal]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFolderPermissionsByPortal]
    @PortalId Int   -- Null|-1 for Host menu tabs
AS
BEGIN
    SET @PortalId = IsNull(@PortalId, -1)

    SELECT *
    FROM   {databaseOwner}[{objectQualifier}vw_FolderPermissions] WITH (NOLOCK)
    WHERE  PortalID = @PortalId
END
GO

IF object_id(N'{databaseOwner}[{objectQualifier}GetFolderPermissionsByFolderPath]', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}GetFolderPermissionsByFolderPath]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFolderPermissionsByFolderPath]
    @PortalID int,
    @FolderPath nvarchar(300),
    @PermissionID int
AS
BEGIN
    SET @PortalId = IsNull(@PortalId, -1)

    SELECT *
    FROM   {databaseOwner}[{objectQualifier}vw_FolderPermissions] WITH (NOLOCK)
    WHERE  (    (PortalID = @PortalID AND FolderPath = @FolderPath)
             OR (FolderPath IS NULL AND PermissionCode = N'SYSTEM_FOLDER')
		   )
     AND   (PermissionID = @PermissionID OR @PermissionID = -1)
END
GO

IF object_id(N'{databaseOwner}[{objectQualifier}GetFolderPermissionsByPortalAndPath]', 'P') IS NOT NULL
    DROP PROCEDURE {databaseOwner}[{objectQualifier}GetFolderPermissionsByPortalAndPath]
GO

CREATE PROCEDURE {databaseOwner}[{objectQualifier}GetFolderPermissionsByPortalAndPath]
    @PortalId int,
    @FolderPath nvarchar(300)
AS
BEGIN
    SET @PortalId = IsNull(@PortalId, -1)

    SELECT *
    FROM   {databaseOwner}[{objectQualifier}vw_FolderPermissions] WITH (NOLOCK)
    WHERE  PortalID = @PortalId AND (FolderPath = @FolderPath OR @FolderPath IS NULL)
END
GO

/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/
